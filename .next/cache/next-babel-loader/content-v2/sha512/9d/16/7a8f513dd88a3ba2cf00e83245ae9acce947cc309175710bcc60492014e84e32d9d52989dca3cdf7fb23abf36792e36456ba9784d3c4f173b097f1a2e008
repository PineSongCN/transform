{"ast":null,"code":"import _defineProperty from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Button, FilePicker, Heading, IconButton, Pane, Popover, TextInput, toaster, Tooltip } from \"evergreen-ui\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport copy from \"clipboard-copy\";\nimport Npm from \"@assets/svgs/Npm\";\nimport { useDropzone } from \"react-dropzone\";\nvar Monaco = dynamic(function () {\n  return import(\"../components/Monaco\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../components/Monaco\")];\n    },\n    modules: [\"../components/EditorPanel.tsx -> \" + \"../components/Monaco\"]\n  }\n});\nexport default function EditorPanel(_ref) {\n  var _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      title = _ref.title,\n      settingElement = _ref.settingElement,\n      hasLoad = _ref.hasLoad,\n      acceptFiles = _ref.acceptFiles,\n      hasClear = _ref.hasClear,\n      _ref$hasCopy = _ref.hasCopy,\n      hasCopy = _ref$hasCopy === void 0 ? true : _ref$hasCopy,\n      topNotifications = _ref.topNotifications,\n      language = _ref.language,\n      defaultValue = _ref.defaultValue,\n      _onChange = _ref.onChange,\n      id = _ref.id,\n      packageDetails = _ref.packageDetails;\n\n  var _useState = useState(false),\n      showSettingsDialogue = _useState[0],\n      setSettingsDialog = _useState[1];\n\n  var _useState2 = useState(defaultValue),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      fetchingUrl = _useState3[0],\n      setFetchingUrl = _useState3[1];\n\n  var options = {\n    fontSize: 14,\n    readOnly: !editable,\n    codeLens: false,\n    fontFamily: \"Menlo, Consolas, monospace, sans-serif\",\n    minimap: {\n      enabled: false\n    },\n    quickSuggestions: false,\n    lineNumbers: \"on\",\n    renderValidationDecorations: \"off\"\n  };\n\n  var _toggleSettingsDialog = useCallback(function () {\n    return setSettingsDialog(!showSettingsDialogue);\n  }, [showSettingsDialogue]);\n\n  useEffect(function () {\n    // @ts-ignore\n    window.__webpack_public_path__ = \"/_next/static/\";\n  }, []);\n  var getSettings = useCallback(function () {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        marginRight: 10,\n        iconBefore: \"cog\",\n        onClick: _toggleSettingsDialog,\n        height: 28,\n        children: \"Settings\"\n      }), settingElement({\n        toggle: _toggleSettingsDialog,\n        open: showSettingsDialogue\n      })]\n    });\n  }, [showSettingsDialogue]);\n  var onFilePicked = useCallback(function (files) {\n    var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    if (!(files && files.length)) return;\n    var file = files[0];\n    var reader = new FileReader();\n    reader.readAsText(file, \"utf-8\");\n\n    reader.onload = function () {\n      setValue(reader.result);\n\n      _onChange(reader.result);\n\n      close();\n    };\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: function onDrop(files) {\n      return onFilePicked(files);\n    },\n    disabled: !editable,\n    accept: acceptFiles,\n    onDropRejected: function onDropRejected() {\n      return toaster.danger(\"This file type is not supported.\", {\n        id: id\n      });\n    }\n  }),\n      getRootProps = _useDropzone.getRootProps;\n\n  var copyValue = useCallback(function () {\n    copy(value);\n    toaster.success(\"Copied to clipboard.\", {\n      id: id\n    });\n  }, [value]);\n  var fetchFile = useCallback(function (close) {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, value;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (fetchingUrl) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return fetch(fetchingUrl);\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n              value = _context.sent;\n              setValue(value);\n              setFetchingUrl(\"\");\n              close();\n\n              _onChange(value);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, [fetchingUrl, _onChange]); // whenever defaultValue changes, change the value of the editor.\n\n  useEffect(function () {\n    setValue(defaultValue);\n  }, [defaultValue]);\n  return /*#__PURE__*/_jsxs(Pane, {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n    overflow: \"hidden\",\n    children: [/*#__PURE__*/_jsxs(Pane, {\n      display: \"flex\",\n      height: 40,\n      paddingX: 10,\n      alignItems: \"center\",\n      borderBottom: true,\n      zIndex: 2,\n      backgroundColor: \"#FFFFFF\",\n      flexShrink: 0,\n      children: [/*#__PURE__*/_jsx(Pane, {\n        flex: 1,\n        children: /*#__PURE__*/_jsx(Heading, {\n          size: 500,\n          marginTop: 0,\n          children: title\n        })\n      }), settingElement && getSettings(), hasLoad && /*#__PURE__*/_jsx(Popover, {\n        content: function content(_ref3) {\n          var close = _ref3.close;\n          return /*#__PURE__*/_jsxs(Pane, {\n            paddingY: 20,\n            paddingX: 20,\n            display: \"flex\",\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            backgroundColor: \"#FFFFFF\",\n            children: [/*#__PURE__*/_jsx(FilePicker, {\n              width: \"100%\",\n              name: \"filepicker\",\n              onChange: function onChange(files) {\n                return onFilePicked(files, close);\n              },\n              accept: acceptFiles\n            }), /*#__PURE__*/_jsx(Heading, {\n              paddingY: 10,\n              size: 200,\n              children: \"OR\"\n            }), /*#__PURE__*/_jsxs(Pane, {\n              display: \"flex\",\n              flexDirection: \"row\",\n              children: [/*#__PURE__*/_jsx(TextInput, {\n                borderBottomRightRadius: 0,\n                borderTopRightRadius: 0,\n                placeholder: \"Enter URL\",\n                onChange: function onChange(e) {\n                  return setFetchingUrl(e.target.value);\n                }\n              }), /*#__PURE__*/_jsx(Button, {\n                borderLeftWidth: 0,\n                borderBottomLeftRadius: 0,\n                borderTopLeftRadius: 0,\n                onClick: function onClick() {\n                  return fetchFile(close);\n                },\n                children: \"Fetch URL\"\n              })]\n            })]\n          });\n        },\n        shouldCloseOnExternalClick: true,\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          content: \"Load File\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            height: 28,\n            marginRight: 10,\n            icon: \"upload\"\n          })\n        })\n      }), hasClear && /*#__PURE__*/_jsx(Tooltip, {\n        content: \"Clear\",\n        children: /*#__PURE__*/_jsx(IconButton, {\n          height: 28,\n          icon: \"trash\",\n          intent: \"danger\",\n          marginRight: 10,\n          onClick: function onClick() {\n            return setValue(\"\");\n          }\n        })\n      }), packageDetails && /*#__PURE__*/_jsx(\"a\", {\n        href: packageDetails.url,\n        style: {\n          display: \"inline-flex\"\n        },\n        target: \"_blank\",\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          content: packageDetails.name,\n          children: /*#__PURE__*/_jsx(Npm, {})\n        })\n      }), hasCopy && /*#__PURE__*/_jsx(Button, {\n        appearance: \"primary\",\n        marginRight: 10,\n        iconBefore: \"duplicate\",\n        onClick: copyValue,\n        height: 28,\n        children: \"Copy\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        overflow: \"hidden\"\n      }\n    }, getRootProps()), {}, {\n      children: [topNotifications && topNotifications({\n        isSettingsOpen: showSettingsDialogue,\n        toggleSettings: _toggleSettingsDialog\n      }), /*#__PURE__*/_jsx(Monaco, {\n        language: language,\n        value: value,\n        options: options,\n        onChange: function onChange(value) {\n          setValue(value);\n\n          _onChange(value);\n        }\n      })]\n    }))]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}