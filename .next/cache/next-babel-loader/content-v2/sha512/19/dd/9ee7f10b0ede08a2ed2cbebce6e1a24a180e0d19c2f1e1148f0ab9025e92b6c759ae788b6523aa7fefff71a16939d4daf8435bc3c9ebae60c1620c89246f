{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport BabelWorker from \"@workers/babel.worker\";\nimport React, { useCallback } from \"react\";\nimport { getWorker } from \"@utils/workerWrapper\";\nimport { BabelTransforms } from \"@constants/babelTransforms\";\nimport Form, { InputType } from \"@components/Form\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport { Alert } from \"evergreen-ui\";\nvar formFields = [{\n  label: \"Transpile css tags\",\n  key: \"css\",\n  type: InputType.SWITCH\n}, {\n  label: \"Transpile styled tags\",\n  key: \"styled\",\n  type: InputType.SWITCH\n}];\nvar babelWorker;\nexport default function ObjectStylesToTemplateLiteral() {\n  var name = \"object-styles-to-template-literal\";\n\n  var _useSettings = useSettings(name, {\n    css: true,\n    styled: true\n  }),\n      _useSettings2 = _slicedToArray(_useSettings, 2),\n      settings = _useSettings2[0],\n      setSettings = _useSettings2[1];\n\n  var transformer = useCallback(function (_ref) {\n    var value = _ref.value;\n    babelWorker = babelWorker || getWorker(BabelWorker);\n    return babelWorker.send({\n      value: value,\n      type: BabelTransforms.OBJECT_STYLES_TO_TEMPLATE,\n      settings: settings\n    });\n  }, [settings]);\n  var getSettingsPanel = useCallback(function (_ref2) {\n    var open = _ref2.open,\n        toggle = _ref2.toggle;\n    return /*#__PURE__*/_jsx(Form, {\n      onSubmit: setSettings,\n      initialValues: settings,\n      title: \"Settings\",\n      open: open,\n      toggle: toggle,\n      formsFields: formFields\n    });\n  }, [settings]);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    resultLanguage: \"javascript\",\n    editorLanguage: \"javascript\",\n    editorTitle: \"Object Styles\",\n    resultTitle: \"Template Literal\",\n    transformer: transformer,\n    editorSettingsElement: getSettingsPanel,\n    resultEditorProps: {\n      topNotifications: function topNotifications() {\n        return (!settings.css || !settings.styled) && /*#__PURE__*/_jsx(Alert, {\n          intent: \"warning\",\n          backgroundColor: \"#FEF8E7\",\n          title: \"You have turned off \".concat(settings.css ? \"\" : \"css\").concat(settings.styled ? \"\" : \",styled\", \" tags transpilation. Change it in settings.\")\n        });\n      }\n    },\n    settings: settings\n  });\n}","map":null,"metadata":{},"sourceType":"module"}