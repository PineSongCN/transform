{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nexport default function JsonToJava() {\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var value, _yield$import, run, kotlinTransformationLines, javaTransformation, currentClass, variableNames, variableTypes;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref.value;\n              _context.next = 3;\n              return import(\"json_typegen_wasm\");\n\n            case 3:\n              _yield$import = _context.sent;\n              run = _yield$import.run;\n              kotlinTransformationLines = run(\"Root\", value, JSON.stringify({\n                output_mode: \"kotlin\"\n              })).split(\"\\n\"); // use Kotlin transformation to convert JSON to Java\n\n              javaTransformation = \"\";\n              currentClass = \"\";\n              variableNames = [];\n              variableTypes = [];\n              kotlinTransformationLines.forEach(function (line) {\n                var originalLine = line;\n                line = line.trim();\n\n                if (line === \")\") {\n                  // Class is closing so generate constructor, getters and setters for\n                  // the current class, close the class and reset running values\n                  var args = [];\n                  var getters = [];\n                  var setters = []; // Create args for constructor, getters and setters\n\n                  for (var i = 0; i < variableNames.length; i++) {\n                    var type = variableTypes[i];\n                    var variableName = variableNames[i];\n                    var titleCaseVariable = variableName.charAt(0).toUpperCase() + variableName.substring(1);\n                    args.push(\"\".concat(type, \" \").concat(variableName));\n                    getters.push(\"\\tpublic \".concat(type, \" get\").concat(titleCaseVariable, \"() {\\n\\t\\treturn this.\").concat(variableName, \";\\n\\t}\\n\"));\n                    setters.push(\"\\tpublic void set\".concat(titleCaseVariable, \"(\").concat(type, \" \").concat(variableName, \") {\\n\\t\\tthis.\").concat(variableName, \" = \").concat(variableName, \";\\n\\t}\\n\"));\n                  } // Create constructor\n\n\n                  var _constructor = \"\\tpublic \".concat(currentClass, \"(\").concat(args.join(\", \"), \") {\");\n\n                  var properties = [];\n                  variableNames.forEach(function (variable) {\n                    properties.push(\"this.\".concat(variable, \" = \").concat(variable, \";\"));\n                  });\n                  _constructor += \"\\n\\t\\t\".concat(properties.join(\"\\n\\t\\t\"), \"\\n\\t}\\n\");\n                  javaTransformation += \"\\n\".concat(_constructor, \"\\n\").concat(getters.join(\"\\n\"), \"\\n\").concat(setters.join(\"\\n\"), \"}\"); // Reset running values\n\n                  currentClass = \"\";\n                  variableNames = [];\n                  variableTypes = [];\n                } else if (line.startsWith(\"data class \")) {\n                  // Change the start of a class from 'data class Root(' to 'public class Root {'\n                  var classNameStartIndex = 11;\n                  var classNameEndIndex = line.indexOf(\"(\");\n                  var className = line.substring(classNameStartIndex, classNameEndIndex);\n                  javaTransformation += \"public class \".concat(className, \" {\");\n                  currentClass = className;\n                } else if (line.startsWith(\"val\")) {\n                  // If this is a variable, change 'val name: String' to 'private String name;'\n                  // followed by respective getters, setters for the variable\n                  var processedLine = line.replace(\"?\", \"\");\n                  var variableStartIndex = 4; // length of string \"val \"\n\n                  var variableEndIndex = processedLine.indexOf(\":\");\n                  var variable = processedLine.substring(variableStartIndex, variableEndIndex);\n                  var typeStartIndex = processedLine.indexOf(\":\") + 2;\n\n                  var _type = processedLine.substring(typeStartIndex, processedLine.length - 1); // Update kotlin generic typing to Java generic typing\n\n\n                  _type = _type.replace(\"<Any>?\", \"<?>\");\n                  _type = _type.replace(\"<Any>\", \"<?>\"); // Save variables and their types to be later used in constructor, getter, setter generation\n\n                  variableNames.push(variable);\n                  variableTypes.push(_type);\n                  javaTransformation += \"\\tprivate \".concat(_type, \" \").concat(variable, \";\");\n                } else if (line.startsWith(\"typealias\")) {\n                  // If this is a kotlin typealias, make it into a class\n                  var _classNameStartIndex = 10; // length of string \"typealias \"\n\n                  var _classNameEndIndex = line.indexOf(\" =\");\n\n                  var _className = line.substring(_classNameStartIndex, _classNameEndIndex);\n\n                  var typeNameEndIndex = line.indexOf(\"=\") + 2;\n\n                  var _type2 = line.substring(typeNameEndIndex, line.length - 1); // ignore the semi-colon\n\n\n                  var _variable = _className.charAt(0).toLowerCase() + _className.substring(1);\n\n                  var _titleCaseVariable = _className;\n\n                  var _getters = \"\\tpublic \".concat(_type2, \" get\").concat(_titleCaseVariable, \"() {\\n\\t\\treturn this.\").concat(_variable, \";\\n\\t}\\n\\n\");\n\n                  var _setters = \"\\tpublic void set\".concat(_titleCaseVariable, \"(\").concat(_type2, \" \").concat(_variable, \") {\\n\\t\\tthis.\").concat(_variable, \" = \").concat(_variable, \";\\n\\t}\\n\\n\");\n\n                  var _constructor2 = \"\\tpublic \".concat(_className, \"(\").concat(_type2, \" \").concat(_variable, \") {\\n\\t\\tthis.\").concat(_variable, \" = \").concat(_variable, \";\\n\\t}\\n\");\n\n                  javaTransformation += \"public class \".concat(_className, \" {\\n\\tprivate \").concat(_type2, \" \").concat(_variable, \";\\n\");\n                  javaTransformation += \"\\n\".concat(_constructor2, \"\\n\").concat(_getters).concat(_setters, \"}\");\n                } else if (line.startsWith(\"import\")) {\n                  javaTransformation += \"\".concat(line, \";\");\n                } else {\n                  // If there's any other line, it is most probably a 'next line character', so just append it\n                  javaTransformation += originalLine;\n                }\n\n                javaTransformation += \"\\n\";\n              });\n              return _context.abrupt(\"return\", javaTransformation);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"JSON\",\n    editorLanguage: \"json\",\n    resultTitle: \"Java\",\n    resultLanguage: \"java\"\n  });\n}","map":null,"metadata":{},"sourceType":"module"}