{"ast":null,"code":"import { transform } from \"@babel/standalone\";\nimport jsonToProptypes from \"babel-plugin-json-to-proptypes\";\nimport jsonToMobxTree from \"@assets/vendor/babel-plugin-js-to-mobx-state-tree\";\nimport { merge } from \"lodash\";\nimport { prettify } from \"@utils/prettify\";\nimport { BabelTransforms } from \"@constants/babelTransforms\";\nimport objStylesToTemplate from \"babel-plugin-object-styles-to-template\";\nconst _self = self;\n\nasync function handleJsonToProptypes(value, id) {\n  let code = JSON.parse(value);\n\n  if (typeof code !== \"object\" || Array.isArray(code)) {\n    code = merge({}, ...code);\n  }\n\n  const result = transform(`const propTypes = ${JSON.stringify(code)}`, {\n    plugins: [jsonToProptypes]\n  }).code;\n  const prettyCode = await prettify(\"javascript\", result);\n\n  _self.postMessage({\n    id,\n    payload: prettyCode\n  });\n}\n\nfunction objectStylesToTemplate(value, id, settings) {\n  _self.postMessage({\n    id,\n    payload: transform(value, {\n      plugins: [[objStylesToTemplate, settings]]\n    }).code\n  });\n}\n\nfunction jsonToMobx(value, id) {\n  _self.postMessage({\n    id,\n    payload: transform(`const myModel = ${value}`, {\n      plugins: [jsonToMobxTree]\n    }).code\n  });\n}\n\n_self.onmessage = ({\n  data: {\n    id,\n    payload\n  }\n}) => {\n  const {\n    value,\n    type,\n    settings\n  } = payload;\n\n  try {\n    if (type === BabelTransforms.JSON_TO_PROPTYPES) {\n      handleJsonToProptypes(value, id);\n    } else if (type === BabelTransforms.OBJECT_STYLES_TO_TEMPLATE) {\n      objectStylesToTemplate(value, id, settings);\n    } else if (type === BabelTransforms.JSON_TO_MOBX_TREE) {\n      jsonToMobx(value, id);\n    }\n  } catch (e) {\n    if (IS_DEV) {\n      console.error(e);\n    }\n\n    _self.postMessage({\n      id,\n      err: e.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}