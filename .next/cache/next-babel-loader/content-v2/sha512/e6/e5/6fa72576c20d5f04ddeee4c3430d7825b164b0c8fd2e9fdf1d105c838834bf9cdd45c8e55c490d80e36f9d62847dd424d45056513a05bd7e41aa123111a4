{"ast":null,"code":"import _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { transform } from \"@babel/standalone\";\nimport jsonToProptypes from \"babel-plugin-json-to-proptypes\";\nimport jsonToMobxTree from \"@assets/vendor/babel-plugin-js-to-mobx-state-tree\";\nimport { merge } from \"lodash\";\nimport { prettify } from \"@utils/prettify\";\nimport { BabelTransforms } from \"@constants/babelTransforms\";\nimport objStylesToTemplate from \"babel-plugin-object-styles-to-template\";\nvar _self = self;\n\nfunction handleJsonToProptypes(_x, _x2) {\n  return _handleJsonToProptypes.apply(this, arguments);\n}\n\nfunction _handleJsonToProptypes() {\n  _handleJsonToProptypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, id) {\n    var code, result, prettyCode;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            code = JSON.parse(value);\n\n            if (typeof code !== \"object\" || Array.isArray(code)) {\n              code = merge.apply(void 0, [{}].concat(_toConsumableArray(code)));\n            }\n\n            result = transform(\"const propTypes = \".concat(JSON.stringify(code)), {\n              plugins: [jsonToProptypes]\n            }).code;\n            _context.next = 5;\n            return prettify(\"javascript\", result);\n\n          case 5:\n            prettyCode = _context.sent;\n\n            _self.postMessage({\n              id: id,\n              payload: prettyCode\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleJsonToProptypes.apply(this, arguments);\n}\n\nfunction objectStylesToTemplate(value, id, settings) {\n  _self.postMessage({\n    id: id,\n    payload: transform(value, {\n      plugins: [[objStylesToTemplate, settings]]\n    }).code\n  });\n}\n\nfunction jsonToMobx(value, id) {\n  _self.postMessage({\n    id: id,\n    payload: transform(\"const myModel = \".concat(value), {\n      plugins: [jsonToMobxTree]\n    }).code\n  });\n}\n\n_self.onmessage = function (_ref) {\n  var _ref$data = _ref.data,\n      id = _ref$data.id,\n      payload = _ref$data.payload;\n  var value = payload.value,\n      type = payload.type,\n      settings = payload.settings;\n\n  try {\n    if (type === BabelTransforms.JSON_TO_PROPTYPES) {\n      handleJsonToProptypes(value, id);\n    } else if (type === BabelTransforms.OBJECT_STYLES_TO_TEMPLATE) {\n      objectStylesToTemplate(value, id, settings);\n    } else if (type === BabelTransforms.JSON_TO_MOBX_TREE) {\n      jsonToMobx(value, id);\n    }\n  } catch (e) {\n    if (IS_DEV) {\n      console.error(e);\n    }\n\n    _self.postMessage({\n      id: id,\n      err: e.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}