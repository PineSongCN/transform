{"ast":null,"code":"import uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\n/**\n * This is a babel plugin that converts an object to PropTypes\n * @param t\n * @returns {{visitor: {ArrayExpression: (function(*)), NullLiteral: (function(*)), StringLiteral: (function(*)), NumericLiteral: (function(*)), ArrowFunctionExpression: (function(*)), FunctionExpression: (function(*)), BooleanLiteral: (function(*)), Program: (function(*, *)), ObjectExpression: (function(*))}}}\n */\n\nexport default function BabelPluginJsToMobxStateTree(_ref) {\n  var t = _ref.types;\n  return {\n    visitor: {\n      ArrayExpression: function ArrayExpression(path) {\n        // if (t.isCallExpression(path.parent)) return;\n        var uniqueElements = uniqBy(path.node.elements, \"type\");\n\n        if (t.isObjectExpression(uniqueElements[0])) {\n          uniqueElements = [t.callExpression(t.memberExpression(t.identifier(\"t\"), t.identifier(\"model\")), uniqueElements)];\n        }\n\n        if (!isEmpty(uniqueElements) && uniqueElements.length === 1 || t.isCallExpression(uniqueElements)) {\n          path.replaceWith(t.callExpression(t.memberExpression(t.identifier(\"t\"), t.identifier(\"array\")), uniqueElements));\n        } else {\n          path.replaceWith(t.identifier(\"t.array\"));\n        }\n      },\n      NullLiteral: function NullLiteral(path) {\n        path.replaceWith(t.identifier(\"t.null\"));\n      },\n      StringLiteral: function StringLiteral(path) {\n        if (path.parentKey === \"key\") return;\n        path.replaceWith(t.identifier(\"t.string\"));\n      },\n      NumericLiteral: function NumericLiteral(path) {\n        path.replaceWith(t.identifier(\"t.number\"));\n      },\n      ArrowFunctionExpression: function ArrowFunctionExpression(path) {\n        path.replaceWith(t.identifier(\"t.frozen\"));\n      },\n      FunctionExpression: function FunctionExpression(path) {\n        path.replaceWith(t.identifier(\"t.frozen\"));\n      },\n      BooleanLiteral: function BooleanLiteral(path) {\n        path.replaceWith(t.identifier(\"t.boolean\"));\n      },\n      Program: function Program(path) {\n        path.traverse({\n          enter: function enter(path) {\n            t.removeComments(path.node);\n          }\n        });\n      },\n      ObjectProperty: function ObjectProperty(path) {\n        if (t.isStringLiteral(path.node.key)) {\n          path.node.key = t.identifier(path.node.key.value);\n        }\n      },\n      ObjectExpression: function ObjectExpression(path) {\n        if (t.isCallExpression(path.parent)) return;\n        var elements = [path.node];\n        path.replaceWith(t.callExpression(t.memberExpression(t.identifier(\"t\"), t.identifier(\"model\")), elements));\n      }\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}