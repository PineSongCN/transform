{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport BabelWorker from \"@workers/babel.worker\";\nimport { SvgConverter } from \"@components/SvgConverter\";\nimport { useCallback, useState } from \"react\";\nimport { defaultNativeSettings, formFields, nativeRequiredSettings } from \"@constants/svgoConfig\";\nimport isSvg from \"is-svg\";\nimport { getWorker } from \"@utils/workerWrapper\";\nimport SvgoWorker from \"@workers/svgo.worker\";\nimport SvgrWorker from \"@workers/svgr.worker\";\n\nvar svgo, _babelWorker, svgr;\n\nexport default function SvgToReactNative() {\n  var name = \"SVG to React Native\";\n\n  var _useState = useState(defaultNativeSettings),\n      settings = _useState[0],\n      setSettings = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      optimizedValue = _useState2[0],\n      setOptimizedValue = _useState2[1];\n\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var value, _value;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref.value;\n\n              if (isSvg(value)) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error(\"This is not a valid svg code.\");\n\n            case 3:\n              svgo = svgo || getWorker(SvgoWorker);\n              svgr = svgr || getWorker(SvgrWorker);\n              _context.next = 7;\n              return svgo.send({\n                value: value,\n                settings: _objectSpread(_objectSpread({}, settings.optimizeSvg ? settings : {}), nativeRequiredSettings)\n              });\n\n            case 7:\n              _value = _context.sent;\n              // set optimized value in state to be used by preview.\n              setOptimizedValue(_value);\n              _babelWorker = _babelWorker || getWorker(BabelWorker);\n              _context.next = 12;\n              return svgr.send({\n                \"native\": true,\n                value: _value\n              });\n\n            case 12:\n              _value = _context.sent;\n              return _context.abrupt(\"return\", _value);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [settings]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(SvgConverter, {\n      settings: settings,\n      setSettings: setSettings,\n      transformer: transformer,\n      babelWorker: BabelWorker,\n      name: name,\n      resultTitle: \"React Native\",\n      formFields: formFields(defaultNativeSettings),\n      optimizedValue: optimizedValue\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}