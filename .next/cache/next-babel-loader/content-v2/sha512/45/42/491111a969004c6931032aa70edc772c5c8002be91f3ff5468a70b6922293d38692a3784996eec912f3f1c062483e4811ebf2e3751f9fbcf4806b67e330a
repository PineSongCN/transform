{"ast":null,"code":"import { useState } from \"react\";\nimport pkg from \"../package.json\";\nconst prefix = `transform:${pkg.version}:`;\nexport function useSessionStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const {\n    0: storedValue,\n    1: setStoredValue\n  } = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = false ? window.sessionStorage.getItem(prefix + key) || initialValue : initialValue; // Parse stored json or if none return initialValue\n\n      return key.startsWith(\"data:\") ? item : JSON.parse(item);\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to sessionStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      if (false) window.sessionStorage.setItem(prefix + key, key.startsWith(\"data:\") ? valueToStore : JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":null,"metadata":{},"sourceType":"module"}