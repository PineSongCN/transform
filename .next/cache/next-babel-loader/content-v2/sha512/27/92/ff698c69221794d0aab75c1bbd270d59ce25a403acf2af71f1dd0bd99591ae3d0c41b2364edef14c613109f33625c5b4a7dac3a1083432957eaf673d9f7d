{"ast":null,"code":"import uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\n/**\n * This is a babel plugin that converts an object to PropTypes\n * @param t\n * @returns {{visitor: {ArrayExpression: (function(*)), NullLiteral: (function(*)), StringLiteral: (function(*)), NumericLiteral: (function(*)), ArrowFunctionExpression: (function(*)), FunctionExpression: (function(*)), BooleanLiteral: (function(*)), Program: (function(*, *)), ObjectExpression: (function(*))}}}\n */\n\nexport default function BabelPluginJsToMobxStateTree({\n  types: t\n}) {\n  return {\n    visitor: {\n      ArrayExpression(path) {\n        // if (t.isCallExpression(path.parent)) return;\n        let uniqueElements = uniqBy(path.node.elements, \"type\");\n\n        if (t.isObjectExpression(uniqueElements[0])) {\n          uniqueElements = [t.callExpression(t.memberExpression(t.identifier(\"t\"), t.identifier(\"model\")), uniqueElements)];\n        }\n\n        if (!isEmpty(uniqueElements) && uniqueElements.length === 1 || t.isCallExpression(uniqueElements)) {\n          path.replaceWith(t.callExpression(t.memberExpression(t.identifier(\"t\"), t.identifier(\"array\")), uniqueElements));\n        } else {\n          path.replaceWith(t.identifier(\"t.array\"));\n        }\n      },\n\n      NullLiteral(path) {\n        path.replaceWith(t.identifier(\"t.null\"));\n      },\n\n      StringLiteral(path) {\n        if (path.parentKey === \"key\") return;\n        path.replaceWith(t.identifier(`t.string`));\n      },\n\n      NumericLiteral(path) {\n        path.replaceWith(t.identifier(\"t.number\"));\n      },\n\n      ArrowFunctionExpression(path) {\n        path.replaceWith(t.identifier(\"t.frozen\"));\n      },\n\n      FunctionExpression(path) {\n        path.replaceWith(t.identifier(\"t.frozen\"));\n      },\n\n      BooleanLiteral(path) {\n        path.replaceWith(t.identifier(\"t.boolean\"));\n      },\n\n      Program(path) {\n        path.traverse({\n          enter(path) {\n            t.removeComments(path.node);\n          }\n\n        });\n      },\n\n      ObjectProperty(path) {\n        if (t.isStringLiteral(path.node.key)) {\n          path.node.key = t.identifier(path.node.key.value);\n        }\n      },\n\n      ObjectExpression(path) {\n        if (t.isCallExpression(path.parent)) return;\n        const elements = [path.node];\n        path.replaceWith(t.callExpression(t.memberExpression(t.identifier(\"t\"), t.identifier(\"model\")), elements));\n      }\n\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}