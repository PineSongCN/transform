{"ast":null,"code":"import _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport prettier from \"prettier/standalone\";\nimport { prettierParsers, supportedLanguages } from \"@utils/prettier\";\nvar plugins = [require(\"prettier/parser-babylon\"), require(\"prettier/parser-html\"), require(\"prettier/parser-postcss\"), require(\"prettier/parser-graphql\"), require(\"prettier/parser-markdown\"), require(\"prettier/parser-yaml\"), require(\"prettier/parser-flow\"), require(\"prettier/parser-typescript\")];\nexport function prettify(_x, _x2) {\n  return _prettify.apply(this, arguments);\n}\n\nfunction _prettify() {\n  _prettify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(language, value) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (supportedLanguages.includes(language)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", value);\n\n          case 2:\n            if (language === \"json\") {\n              result = JSON.stringify(JSON.parse(value), null, 2);\n            } else {\n              result = prettier.format(value, {\n                parser: prettierParsers[language] || language,\n                plugins: plugins,\n                semi: false\n              });\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _prettify.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}