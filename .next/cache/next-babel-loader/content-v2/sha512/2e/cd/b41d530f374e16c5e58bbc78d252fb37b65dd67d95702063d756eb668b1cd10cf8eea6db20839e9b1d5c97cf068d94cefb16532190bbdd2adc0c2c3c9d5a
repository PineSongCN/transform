{"ast":null,"code":"import _defineProperty from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport { Dialog, Pane, Icon, Tooltip, toaster, TextInput, Heading, Text, Switch } from \"evergreen-ui\";\nimport { TailwindConverter } from \"css-to-tailwindcss\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport { useSettings } from \"@hooks/useSettings\";\nvar Monaco = dynamic(function () {\n  return import(\"../components/Monaco\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../components/Monaco\")];\n    },\n    modules: [\"css-to-tailwind.tsx -> \" + \"../components/Monaco\"]\n  }\n});\n\nvar evalConfig = function evalConfig(configValue) {\n  return eval(\"const module = {}; \".concat(configValue, \"; module.exports;\"));\n};\n\nvar DEFAULT_POSTCSS_PLUGINS = [require(\"postcss-nested\")];\n\nfunction decorateResult(result) {\n  return \"/*\\n  Based on TailwindCSS recommendations,\\n  consider using classes instead of the `@apply` directive\\n  @see https://tailwindcss.com/docs/reusing-styles#avoiding-premature-abstraction\\n*/\\n\".concat(result);\n}\n\nfunction CssToTailwindSettings(_ref) {\n  var open = _ref.open,\n      toggle = _ref.toggle,\n      onConfirm = _ref.onConfirm,\n      settings = _ref.settings;\n\n  var _useState = useState(settings.tailwindConfig),\n      tailwindConfig = _useState[0],\n      setTailwindConfig = _useState[1];\n\n  var _useState2 = useState(settings.remInPx),\n      remInPx = _useState2[0],\n      setRemInPx = _useState2[1];\n\n  var _useState3 = useState(settings.arbitraryPropertiesIsEnabled || false),\n      arbitraryPropertiesIsEnabled = _useState3[0],\n      setArbitraryPropertiesIsEnabled = _useState3[1];\n\n  return /*#__PURE__*/_jsx(Dialog, {\n    title: \"Converter Configuration\",\n    isShown: open,\n    onCloseComplete: toggle,\n    onConfirm: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(close) {\n        var isSuccess;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return onConfirm({\n                  tailwindConfig: tailwindConfig,\n                  remInPx: remInPx,\n                  arbitraryPropertiesIsEnabled: arbitraryPropertiesIsEnabled\n                });\n\n              case 2:\n                isSuccess = _context.sent;\n\n                if (isSuccess) {\n                  close();\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    onCancel: function onCancel(close) {\n      setTailwindConfig(settings.tailwindConfig);\n      setRemInPx(settings.remInPx);\n      close();\n    },\n    children: /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Heading, {\n        children: \"Root font size in pixels\"\n      }), /*#__PURE__*/_jsx(Text, {\n        children: \"Used to convert rem CSS values to their px equivalents\"\n      }), /*#__PURE__*/_jsx(TextInput, {\n        borderBottomRightRadius: 0,\n        borderTopRightRadius: 0,\n        placeholder: \"Enter URL\",\n        onChange: function onChange(e) {\n          return setRemInPx(e.target.value);\n        },\n        value: remInPx || \"\",\n        marginTop: \"4px\"\n      }), /*#__PURE__*/_jsxs(Heading, {\n        marginTop: 24,\n        children: [\"Enable arbitrary properties\", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://tailwindcss.com/docs/adding-custom-styles#arbitrary-properties\",\n          target: \"_blank\",\n          style: {\n            verticalAlign: \"middle\"\n          },\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            content: \"Open the TailwindCSS docs...\",\n            children: /*#__PURE__*/_jsx(Icon, {\n              icon: \"help\",\n              color: \"info\",\n              marginLeft: 8,\n              size: 16\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Switch, {\n        checked: arbitraryPropertiesIsEnabled,\n        onChange: function onChange(e) {\n          return setArbitraryPropertiesIsEnabled(e.target.checked);\n        },\n        marginTop: \"4px\"\n      }), /*#__PURE__*/_jsxs(Heading, {\n        marginTop: 24,\n        children: [\"Tailwind configuration\", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://tailwindcss.com/docs/configuration\",\n          target: \"_blank\",\n          style: {\n            verticalAlign: \"middle\"\n          },\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            content: \"Open the TailwindCSS docs...\",\n            children: /*#__PURE__*/_jsx(Icon, {\n              icon: \"help\",\n              color: \"info\",\n              marginLeft: 8,\n              size: 16\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Pane, {\n        height: 300,\n        children: /*#__PURE__*/_jsx(Monaco, {\n          language: \"javascript\",\n          value: tailwindConfig,\n          onChange: setTailwindConfig,\n          options: {\n            fontSize: 14,\n            readOnly: false,\n            codeLens: false,\n            fontFamily: \"Menlo, Consolas, monospace, sans-serif\",\n            minimap: {\n              enabled: false\n            },\n            quickSuggestions: false,\n            lineNumbers: \"on\",\n            renderValidationDecorations: \"off\"\n          },\n          height: 300\n        })\n      })]\n    })\n  });\n}\n\nexport var __N_SSG = true;\nexport default function CssToTailwind3(_ref3) {\n  var defaultSettings = _ref3.defaultSettings;\n\n  var _ref4 = useSettings(\"css-to-tailwind\", defaultSettings),\n      _ref5 = _slicedToArray(_ref4, 2),\n      rawSettings = _ref5[0],\n      setRawSettings = _ref5[1];\n\n  var converterConfig = useMemo(function () {\n    var config = {\n      remInPx: rawSettings.remInPx ? parseInt(rawSettings.remInPx, 10) : null,\n      arbitraryPropertiesIsEnabled: !!rawSettings.arbitraryPropertiesIsEnabled\n    };\n\n    if (isNaN(config[\"remInPx\"])) {\n      toaster.danger(\"Invalid `REM in PIXELS` value (only `number` or `null` allowed). Fallback to `null` value\");\n      config[\"remInPx\"] = null;\n    }\n\n    try {\n      config[\"tailwindConfig\"] = evalConfig(rawSettings.tailwindConfig);\n    } catch (e) {\n      toaster.danger(\"Something went wrong trying to resolve TailwindCSS config. Fallback to default tailwind config\", {\n        description: e.message\n      });\n    }\n\n    return config;\n  }, [rawSettings]);\n  var tailwindConverter = useMemo(function () {\n    try {\n      return new TailwindConverter(_objectSpread({\n        postCSSPlugins: DEFAULT_POSTCSS_PLUGINS\n      }, converterConfig));\n    } catch (e) {\n      toaster.danger(\"Unable to create TailwindConverter. Invalid configuration passed\", {\n        description: e.message\n      });\n      return new TailwindConverter({\n        postCSSPlugins: DEFAULT_POSTCSS_PLUGINS\n      });\n    }\n  }, [converterConfig]);\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref6) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              value = _ref6.value;\n              _context2.prev = 1;\n              _context2.t0 = decorateResult;\n              _context2.next = 5;\n              return tailwindConverter.convertCSS(value);\n\n            case 5:\n              _context2.t1 = _context2.sent.convertedRoot.toString();\n              return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1));\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t2 = _context2[\"catch\"](1);\n              toaster.danger(\"Unable to convert CSS\", {\n                description: _context2.t2.message\n              });\n              return _context2.abrupt(\"return\", \"Unable to convert CSS\");\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function (_x2) {\n      return _ref7.apply(this, arguments);\n    };\n  }(), [tailwindConverter]);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"CSS\",\n    editorLanguage: \"css\",\n    editorDefaultValue: \"css3\",\n    resultTitle: \"TailwindCSS 3.x\",\n    resultLanguage: \"css\",\n    settings: rawSettings,\n    editorProps: {\n      settingElement: function settingElement(_ref8) {\n        var open = _ref8.open,\n            toggle = _ref8.toggle;\n        return /*#__PURE__*/_jsx(CssToTailwindSettings, {\n          open: open,\n          toggle: toggle,\n          onConfirm: /*#__PURE__*/function () {\n            var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(rawSettings) {\n              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      setRawSettings(rawSettings);\n                      return _context3.abrupt(\"return\", true);\n\n                    case 2:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n\n            return function (_x3) {\n              return _ref9.apply(this, arguments);\n            };\n          }(),\n          settings: rawSettings\n        }, \"\".concat(rawSettings.tailwindConfig).concat(rawSettings.remInPx));\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}