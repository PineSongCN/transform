{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport { getWorker } from \"@utils/workerWrapper\";\nimport GrapqlWorker from \"@workers/graphql.worker\";\nimport { GraphqlTransforms } from \"@constants/graphqlTransforms\";\nvar graphqlWorker;\nvar props = {\n  acceptFiles: \".graphql, .gql\"\n};\nexport default function GraphqlToFlow() {\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var value, splitEditorValue;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref.value, splitEditorValue = _ref.splitEditorValue;\n              graphqlWorker = graphqlWorker || getWorker(GrapqlWorker);\n              return _context.abrupt(\"return\", graphqlWorker.send({\n                type: GraphqlTransforms.TO_FLOW,\n                value: value,\n                document: splitEditorValue\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    resultTitle: \"Flow\",\n    editorTitle: \"GraphQL Schema\",\n    editorLanguage: \"graphql\",\n    editorDefaultValue: \"graphql1\",\n    resultLanguage: \"flow\",\n    editorProps: props,\n    splitEditorProps: props,\n    splitTitle: \"Document\",\n    splitLanguage: \"graphql\",\n    splitEditorDefaultValue: \"graphqlDocument\"\n  });\n}","map":null,"metadata":{},"sourceType":"module"}