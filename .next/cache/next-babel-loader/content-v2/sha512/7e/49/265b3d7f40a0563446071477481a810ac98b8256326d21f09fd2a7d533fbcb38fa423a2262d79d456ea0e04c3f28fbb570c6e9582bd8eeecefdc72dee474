{"ast":null,"code":"import _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { codegen } from \"@graphql-codegen/core\";\nimport { parse } from \"graphql\";\nimport * as typescriptPlugin from \"@graphql-codegen/typescript\";\nimport * as typescriptOperation from \"@graphql-codegen/typescript-operations\";\nimport * as flowPlugin from \"@graphql-codegen/flow\";\nimport * as flowOperation from \"@graphql-codegen/flow-operations\";\nimport * as introspection from \"@graphql-codegen/introspection\";\nimport * as fragmentMatcher from \"@graphql-codegen/fragment-matcher\";\nimport * as schemaAst from \"@graphql-codegen/schema-ast\";\nimport * as java from \"@graphql-codegen/java\";\nimport * as apolloAngular from \"@graphql-codegen/typescript-apollo-angular\";\nimport * as reactApollo from \"@graphql-codegen/typescript-react-apollo\";\nimport * as stencilApollo from \"@graphql-codegen/typescript-stencil-apollo\";\nimport * as tsResolvers from \"@graphql-codegen/typescript-resolvers\";\nimport * as flowResolvers from \"@graphql-codegen/flow-resolvers\";\nimport * as javaResolvers from \"@graphql-codegen/java-resolvers\";\nimport * as tsMongoDB from \"@graphql-codegen/typescript-mongodb\";\nimport * as urql from \"@graphql-codegen/typescript-urql\";\nimport { GraphqlTransforms } from \"@constants/graphqlTransforms\";\nvar _self = self;\n\nfunction getPlugins(type) {\n  switch (type) {\n    case GraphqlTransforms.TO_TYPESCRIPT:\n      return [typescriptPlugin, typescriptOperation];\n\n    case GraphqlTransforms.TO_FLOW:\n      return [flowPlugin, flowOperation];\n\n    case GraphqlTransforms.TO_INTROSPECTION_JSON:\n      return [introspection];\n\n    case GraphqlTransforms.TO_FRAGMENT_MATCHER:\n      return [fragmentMatcher];\n\n    case GraphqlTransforms.TO_SCHEMA_AST:\n      return [schemaAst];\n\n    case GraphqlTransforms.TO_JAVA:\n      return [java];\n\n    case GraphqlTransforms.TO_REACT_APOLLO:\n      return [typescriptPlugin, typescriptOperation, reactApollo];\n\n    case GraphqlTransforms.TO_APOLLO_ANGULAR:\n      return [typescriptPlugin, typescriptOperation, apolloAngular];\n\n    case GraphqlTransforms.TO_STENCIL_APOLLO:\n      return [typescriptPlugin, typescriptOperation, stencilApollo];\n\n    case GraphqlTransforms.TO_TYPESCRIPT_RESOLVERS_SIGNATURE:\n      return [typescriptPlugin, tsResolvers];\n\n    case GraphqlTransforms.TO_JAVA_RESOLVERS_SIGNATURE:\n      return [javaResolvers];\n\n    case GraphqlTransforms.TO_FLOW_RESOLVERS_SIGNATURE:\n      return [flowPlugin, flowResolvers];\n\n    case GraphqlTransforms.TO_URQL:\n      return [typescriptPlugin, typescriptOperation, urql];\n\n    case GraphqlTransforms.TO_TYPESCRIPT_MONGODB:\n      return [typescriptPlugin, tsMongoDB];\n  }\n}\n\n_self.onmessage = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var _ref$data, id, payload, value, _payload$document, document, type, _payload$extension, extension, plugins, pluginMap, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$data = _ref.data, id = _ref$data.id, payload = _ref$data.payload;\n            value = payload.value, _payload$document = payload.document, document = _payload$document === void 0 ? \"\" : _payload$document, type = payload.type, _payload$extension = payload.extension, extension = _payload$extension === void 0 ? \"tsx\" : _payload$extension;\n            _context.prev = 2;\n            plugins = getPlugins(type);\n            pluginMap = {};\n            plugins.forEach(function (plugin, i) {\n              pluginMap[i + 1] = plugin;\n            });\n            _context.next = 8;\n            return codegen({\n              filename: \"a.\".concat(extension),\n              schema: parse(value),\n              // @ts-ignore\n              plugins: plugins.map(function (_plugin, i) {\n                return _defineProperty({}, i + 1, {});\n              }),\n              documents: document.trim() ? [{\n                location: \"\",\n                document: parse(document)\n              }] : [],\n              config: {},\n              pluginMap: pluginMap\n            });\n\n          case 8:\n            result = _context.sent;\n\n            _self.postMessage({\n              id: id,\n              payload: result\n            });\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n\n            _self.postMessage({\n              id: id,\n              err: _context.t0.message\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 12]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}