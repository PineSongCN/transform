{"ast":null,"code":"import { codegen } from \"@graphql-codegen/core\";\nimport { parse } from \"graphql\";\nimport * as typescriptPlugin from \"@graphql-codegen/typescript\";\nimport * as typescriptOperation from \"@graphql-codegen/typescript-operations\";\nimport * as flowPlugin from \"@graphql-codegen/flow\";\nimport * as flowOperation from \"@graphql-codegen/flow-operations\";\nimport * as introspection from \"@graphql-codegen/introspection\";\nimport * as fragmentMatcher from \"@graphql-codegen/fragment-matcher\";\nimport * as schemaAst from \"@graphql-codegen/schema-ast\";\nimport * as java from \"@graphql-codegen/java\";\nimport * as apolloAngular from \"@graphql-codegen/typescript-apollo-angular\";\nimport * as reactApollo from \"@graphql-codegen/typescript-react-apollo\";\nimport * as stencilApollo from \"@graphql-codegen/typescript-stencil-apollo\";\nimport * as tsResolvers from \"@graphql-codegen/typescript-resolvers\";\nimport * as flowResolvers from \"@graphql-codegen/flow-resolvers\";\nimport * as javaResolvers from \"@graphql-codegen/java-resolvers\";\nimport * as tsMongoDB from \"@graphql-codegen/typescript-mongodb\";\nimport * as urql from \"@graphql-codegen/typescript-urql\";\nimport { GraphqlTransforms } from \"@constants/graphqlTransforms\";\nconst _self = self;\n\nfunction getPlugins(type) {\n  switch (type) {\n    case GraphqlTransforms.TO_TYPESCRIPT:\n      return [typescriptPlugin, typescriptOperation];\n\n    case GraphqlTransforms.TO_FLOW:\n      return [flowPlugin, flowOperation];\n\n    case GraphqlTransforms.TO_INTROSPECTION_JSON:\n      return [introspection];\n\n    case GraphqlTransforms.TO_FRAGMENT_MATCHER:\n      return [fragmentMatcher];\n\n    case GraphqlTransforms.TO_SCHEMA_AST:\n      return [schemaAst];\n\n    case GraphqlTransforms.TO_JAVA:\n      return [java];\n\n    case GraphqlTransforms.TO_REACT_APOLLO:\n      return [typescriptPlugin, typescriptOperation, reactApollo];\n\n    case GraphqlTransforms.TO_APOLLO_ANGULAR:\n      return [typescriptPlugin, typescriptOperation, apolloAngular];\n\n    case GraphqlTransforms.TO_STENCIL_APOLLO:\n      return [typescriptPlugin, typescriptOperation, stencilApollo];\n\n    case GraphqlTransforms.TO_TYPESCRIPT_RESOLVERS_SIGNATURE:\n      return [typescriptPlugin, tsResolvers];\n\n    case GraphqlTransforms.TO_JAVA_RESOLVERS_SIGNATURE:\n      return [javaResolvers];\n\n    case GraphqlTransforms.TO_FLOW_RESOLVERS_SIGNATURE:\n      return [flowPlugin, flowResolvers];\n\n    case GraphqlTransforms.TO_URQL:\n      return [typescriptPlugin, typescriptOperation, urql];\n\n    case GraphqlTransforms.TO_TYPESCRIPT_MONGODB:\n      return [typescriptPlugin, tsMongoDB];\n  }\n}\n\n_self.onmessage = async ({\n  data: {\n    id,\n    payload\n  }\n}) => {\n  const {\n    value,\n    document = \"\",\n    type,\n    extension = \"tsx\"\n  } = payload;\n\n  try {\n    const plugins = getPlugins(type);\n    const pluginMap = {};\n    plugins.forEach((plugin, i) => {\n      pluginMap[i + 1] = plugin;\n    });\n    const result = await codegen({\n      filename: `a.${extension}`,\n      schema: parse(value),\n      // @ts-ignore\n      plugins: plugins.map((_plugin, i) => ({\n        [i + 1]: {}\n      })),\n      documents: document.trim() ? [{\n        location: \"\",\n        document: parse(document)\n      }] : [],\n      config: {},\n      pluginMap\n    });\n\n    _self.postMessage({\n      id,\n      payload: result\n    });\n  } catch (e) {\n    _self.postMessage({\n      id,\n      err: e.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}