{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport Form, { InputType } from \"@components/Form\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nimport request from \"@utils/request\";\nvar formFields = [{\n  type: InputType.SWITCH,\n  key: \"keepComments\",\n  label: \"Keep TSDoc Comments\"\n}, {\n  type: InputType.SWITCH,\n  key: \"skipParseJSDoc\",\n  label: \"Skip the creation of zod validators from JSDoc annotations\"\n}];\nexport default function TypescriptToZod() {\n  var name = \"JSON to Zod Schema\";\n\n  var _useSettings = useSettings(name, {\n    keepComments: false,\n    skipParseJSDoc: false\n  }),\n      _useSettings2 = _slicedToArray(_useSettings, 2),\n      settings = _useSettings2[0],\n      setSettings = _useSettings2[1];\n\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var value, keepComments, skipParseJSDoc, params, _yield$request, schema, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref.value;\n              keepComments = settings.keepComments, skipParseJSDoc = settings.skipParseJSDoc;\n              params = new URLSearchParams({\n                keepComments: keepComments,\n                skipParseJSDoc: skipParseJSDoc\n              }).toString();\n              _context.next = 5;\n              return request(\"/api/typescript-to-zod?\".concat(params), value, \"text/plain\");\n\n            case 5:\n              _yield$request = _context.sent;\n              schema = _yield$request.schema;\n              error = _yield$request.error;\n\n              if (!error) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error(error);\n\n            case 10:\n              return _context.abrupt(\"return\", schema);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [settings]);\n  var getSettingsElement = useCallback(function (_ref3) {\n    var open = _ref3.open,\n        toggle = _ref3.toggle;\n    return /*#__PURE__*/_jsx(Form, {\n      title: name,\n      onSubmit: setSettings,\n      open: open,\n      toggle: toggle,\n      formsFields: formFields,\n      initialValues: settings\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"TypeScript\",\n    editorLanguage: \"typescript\",\n    editorDefaultValue: \"typeScriptInterface\",\n    resultTitle: \"Zod Schema\",\n    resultLanguage: \"typescript\",\n    editorSettingsElement: getSettingsElement,\n    settings: settings\n  });\n}","map":null,"metadata":{},"sourceType":"module"}