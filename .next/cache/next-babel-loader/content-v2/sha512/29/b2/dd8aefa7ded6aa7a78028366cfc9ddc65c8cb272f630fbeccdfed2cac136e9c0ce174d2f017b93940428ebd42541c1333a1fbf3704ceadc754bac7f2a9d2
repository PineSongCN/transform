{"ast":null,"code":"import _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nimport { json2ts } from \"json-ts\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport Form, { InputType } from \"@components/Form\";\nvar formFields = [{\n  type: InputType.TEXT_INPUT,\n  key: \"namespace\",\n  label: \"Namespace\"\n}, {\n  type: InputType.TEXT_INPUT,\n  key: \"prefix\",\n  label: \"prefix\"\n}, {\n  type: InputType.TEXT_INPUT,\n  key: \"rootName\",\n  label: \"Root Name\"\n}];\nvar defaultSettings = {\n  namespace: \"\",\n  prefix: \"I\",\n  rootName: \"RootObject\"\n};\nexport default function JsonToFlow() {\n  var name = \"json-to-flow\";\n\n  var _useSettings = useSettings(name, defaultSettings),\n      _useSettings2 = _slicedToArray(_useSettings, 2),\n      settings = _useSettings2[0],\n      setSettings = _useSettings2[1];\n\n  var getSettingsElement = useCallback(function (_ref) {\n    var open = _ref.open,\n        toggle = _ref.toggle;\n    return /*#__PURE__*/_jsx(Form, {\n      title: \"JSON to Flow\",\n      onSubmit: setSettings,\n      open: open,\n      toggle: toggle,\n      formsFields: formFields,\n      initialValues: settings\n    });\n  }, []);\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref2.value;\n              return _context.abrupt(\"return\", json2ts(value, _objectSpread({\n                flow: true\n              }, settings)));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [settings]);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"JSON\",\n    editorLanguage: \"json\",\n    resultTitle: \"Flow\",\n    resultLanguage: \"typescript\",\n    resultSettingsElement: getSettingsElement,\n    settings: settings\n  });\n}","map":null,"metadata":{},"sourceType":"module"}