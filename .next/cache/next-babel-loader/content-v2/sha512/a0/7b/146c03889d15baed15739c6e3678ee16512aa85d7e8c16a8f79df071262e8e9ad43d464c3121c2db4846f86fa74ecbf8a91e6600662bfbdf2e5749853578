{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport { Dialog, Heading, Pane, Switch, TextInput, Select } from \"evergreen-ui\";\nexport let InputType;\n\n(function (InputType) {\n  InputType[InputType[\"SWITCH\"] = 1] = \"SWITCH\";\n  InputType[InputType[\"TEXT_INPUT\"] = 2] = \"TEXT_INPUT\";\n  InputType[InputType[\"SELECT\"] = 3] = \"SELECT\";\n})(InputType || (InputType = {}));\n\nconst Form = ({\n  initialValues,\n  onSubmit,\n  title,\n  formsFields,\n  open,\n  toggle\n}) => {\n  return /*#__PURE__*/_jsx(Formik, {\n    initialValues: initialValues,\n    render: props => {\n      return /*#__PURE__*/_jsx(Dialog, {\n        title: title,\n        isShown: open,\n        onCloseComplete: toggle,\n        onConfirm: close => {\n          props.submitForm();\n          close();\n        },\n        onCancel: close => {\n          props.resetForm();\n          close();\n        },\n        children: /*#__PURE__*/_jsx(_Fragment, {\n          children: formsFields.map(({\n            type,\n            key,\n            label,\n            isDisabled,\n            props: _props,\n            options\n          }, i) => {\n            let FormField, select;\n            if (type === InputType.TEXT_INPUT) FormField = TextInput;else if (type === InputType.SWITCH) FormField = Switch;else if (type === InputType.SELECT) select = /*#__PURE__*/_jsx(Select, {\n              value: props.values[key],\n              onChange: props.handleChange,\n              name: key,\n              defaultValue: options[0].value,\n              children: options.map(({\n                label,\n                value\n              }) => /*#__PURE__*/_jsx(\"option\", {\n                value: value,\n                selected: props.values[key] === value,\n                children: label\n              }, value))\n            });\n\n            const _isDisabled = isDisabled ? isDisabled(props.values) : undefined;\n\n            return /*#__PURE__*/_jsxs(Pane, _objectSpread(_objectSpread({\n              display: \"flex\",\n              alignItems: \"center\",\n              flexDirection: \"row\",\n              paddingY: 10,\n              justifyContent: \"space-between\"\n            }, _props), {}, {\n              children: [/*#__PURE__*/_jsx(Heading, {\n                flex: 1,\n                size: 400,\n                opacity: _isDisabled ? 0.4 : 1,\n                textTransform: \"capitalize\",\n                children: label\n              }), FormField && /*#__PURE__*/_jsx(FormField, {\n                value: props.values[key],\n                checked: props.values[key],\n                onChange: props.handleChange,\n                name: key,\n                disabled: _isDisabled\n              }), select]\n            }), i);\n          })\n        })\n      });\n    },\n    onSubmit: values => {\n      onSubmit(values);\n    }\n  });\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}