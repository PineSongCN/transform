{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport dynamic from \"next/dynamic\";\nimport { Dialog, Pane, Icon, Tooltip, toaster, TextInput, Heading, Text, Switch } from \"evergreen-ui\";\nimport { TailwindConverter } from \"css-to-tailwindcss\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport { useSettings } from \"@hooks/useSettings\";\nconst Monaco = dynamic(() => import(\"../components/Monaco\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Monaco\")],\n    modules: [\"css-to-tailwind.tsx -> \" + \"../components/Monaco\"]\n  }\n});\n\nconst evalConfig = configValue => eval(`const module = {}; ${configValue}; module.exports;`);\n\nconst DEFAULT_POSTCSS_PLUGINS = [require(\"postcss-nested\")];\n\nfunction decorateResult(result) {\n  return `/*\n  Based on TailwindCSS recommendations,\n  consider using classes instead of the \\`@apply\\` directive\n  @see https://tailwindcss.com/docs/reusing-styles#avoiding-premature-abstraction\n*/\n${result}`;\n}\n\nfunction CssToTailwindSettings({\n  open,\n  toggle,\n  onConfirm,\n  settings\n}) {\n  const {\n    0: tailwindConfig,\n    1: setTailwindConfig\n  } = useState(settings.tailwindConfig);\n  const {\n    0: remInPx,\n    1: setRemInPx\n  } = useState(settings.remInPx);\n  const {\n    0: arbitraryPropertiesIsEnabled,\n    1: setArbitraryPropertiesIsEnabled\n  } = useState(settings.arbitraryPropertiesIsEnabled || false);\n  return /*#__PURE__*/_jsx(Dialog, {\n    title: \"Converter Configuration\",\n    isShown: open,\n    onCloseComplete: toggle,\n    onConfirm: async close => {\n      const isSuccess = await onConfirm({\n        tailwindConfig,\n        remInPx,\n        arbitraryPropertiesIsEnabled\n      });\n\n      if (isSuccess) {\n        close();\n      }\n    },\n    onCancel: close => {\n      setTailwindConfig(settings.tailwindConfig);\n      setRemInPx(settings.remInPx);\n      close();\n    },\n    children: /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Heading, {\n        children: \"Root font size in pixels\"\n      }), /*#__PURE__*/_jsx(Text, {\n        children: \"Used to convert rem CSS values to their px equivalents\"\n      }), /*#__PURE__*/_jsx(TextInput, {\n        borderBottomRightRadius: 0,\n        borderTopRightRadius: 0,\n        placeholder: \"Enter URL\",\n        onChange: e => setRemInPx(e.target.value),\n        value: remInPx || \"\",\n        marginTop: \"4px\"\n      }), /*#__PURE__*/_jsxs(Heading, {\n        marginTop: 24,\n        children: [\"Enable arbitrary properties\", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://tailwindcss.com/docs/adding-custom-styles#arbitrary-properties\",\n          target: \"_blank\",\n          style: {\n            verticalAlign: \"middle\"\n          },\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            content: \"Open the TailwindCSS docs...\",\n            children: /*#__PURE__*/_jsx(Icon, {\n              icon: \"help\",\n              color: \"info\",\n              marginLeft: 8,\n              size: 16\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Switch, {\n        checked: arbitraryPropertiesIsEnabled,\n        onChange: e => setArbitraryPropertiesIsEnabled(e.target.checked),\n        marginTop: \"4px\"\n      }), /*#__PURE__*/_jsxs(Heading, {\n        marginTop: 24,\n        children: [\"Tailwind configuration\", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://tailwindcss.com/docs/configuration\",\n          target: \"_blank\",\n          style: {\n            verticalAlign: \"middle\"\n          },\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            content: \"Open the TailwindCSS docs...\",\n            children: /*#__PURE__*/_jsx(Icon, {\n              icon: \"help\",\n              color: \"info\",\n              marginLeft: 8,\n              size: 16\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Pane, {\n        height: 300,\n        children: /*#__PURE__*/_jsx(Monaco, {\n          language: \"javascript\",\n          value: tailwindConfig,\n          onChange: setTailwindConfig,\n          options: {\n            fontSize: 14,\n            readOnly: false,\n            codeLens: false,\n            fontFamily: \"Menlo, Consolas, monospace, sans-serif\",\n            minimap: {\n              enabled: false\n            },\n            quickSuggestions: false,\n            lineNumbers: \"on\",\n            renderValidationDecorations: \"off\"\n          },\n          height: 300\n        })\n      })]\n    })\n  });\n}\n\nexport default function CssToTailwind3({\n  defaultSettings\n}) {\n  const [rawSettings, setRawSettings] = useSettings(\"css-to-tailwind\", defaultSettings);\n  const converterConfig = useMemo(() => {\n    const config = {\n      remInPx: rawSettings.remInPx ? parseInt(rawSettings.remInPx, 10) : null,\n      arbitraryPropertiesIsEnabled: !!rawSettings.arbitraryPropertiesIsEnabled\n    };\n\n    if (isNaN(config[\"remInPx\"])) {\n      toaster.danger(\"Invalid `REM in PIXELS` value (only `number` or `null` allowed). Fallback to `null` value\");\n      config[\"remInPx\"] = null;\n    }\n\n    try {\n      config[\"tailwindConfig\"] = evalConfig(rawSettings.tailwindConfig);\n    } catch (e) {\n      toaster.danger(\"Something went wrong trying to resolve TailwindCSS config. Fallback to default tailwind config\", {\n        description: e.message\n      });\n    }\n\n    return config;\n  }, [rawSettings]);\n  const tailwindConverter = useMemo(() => {\n    try {\n      return new TailwindConverter(_objectSpread({\n        postCSSPlugins: DEFAULT_POSTCSS_PLUGINS\n      }, converterConfig));\n    } catch (e) {\n      toaster.danger(\"Unable to create TailwindConverter. Invalid configuration passed\", {\n        description: e.message\n      });\n      return new TailwindConverter({\n        postCSSPlugins: DEFAULT_POSTCSS_PLUGINS\n      });\n    }\n  }, [converterConfig]);\n  const transformer = useCallback(async ({\n    value\n  }) => {\n    try {\n      return decorateResult((await tailwindConverter.convertCSS(value)).convertedRoot.toString());\n    } catch (e) {\n      toaster.danger(\"Unable to convert CSS\", {\n        description: e.message\n      });\n      return \"Unable to convert CSS\";\n    }\n  }, [tailwindConverter]);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"CSS\",\n    editorLanguage: \"css\",\n    editorDefaultValue: \"css3\",\n    resultTitle: \"TailwindCSS 3.x\",\n    resultLanguage: \"css\",\n    settings: rawSettings,\n    editorProps: {\n      settingElement: ({\n        open,\n        toggle\n      }) => {\n        return /*#__PURE__*/_jsx(CssToTailwindSettings, {\n          open: open,\n          toggle: toggle,\n          onConfirm: async rawSettings => {\n            setRawSettings(rawSettings);\n            return true;\n          },\n          settings: rawSettings\n        }, `${rawSettings.tailwindConfig}${rawSettings.remInPx}`);\n      }\n    }\n  });\n}\nexport async function getStaticProps() {\n  const rawTailwindConfig = await fs.readFile(path.resolve(\"./node_modules/css-to-tailwindcss/node_modules/tailwindcss/stubs/simpleConfig.stub.js\"), \"utf-8\");\n  return {\n    props: {\n      defaultSettings: {\n        tailwindConfig: rawTailwindConfig,\n        remInPx: \"16\",\n        arbitraryPropertiesIsEnabled: false\n      }\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}