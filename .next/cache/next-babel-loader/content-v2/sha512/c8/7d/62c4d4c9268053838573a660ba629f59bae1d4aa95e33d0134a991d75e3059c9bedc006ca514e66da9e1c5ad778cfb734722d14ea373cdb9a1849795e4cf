{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Pane, Alert, Spinner } from \"evergreen-ui\";\nimport EditorPanel from \"@components/EditorPanel\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useData } from \"@hooks/useData\";\nimport { useRouter } from \"next/router\";\nimport { activeRouteData } from \"@utils/routes\";\nimport PrettierWorker from \"@workers/prettier.worker\";\nimport { getWorker } from \"@utils/workerWrapper\";\nlet prettierWorker;\n\nfunction getEditorLanguage(lang) {\n  const mapping = {\n    flow: \"typescript\"\n  };\n  return mapping[lang] || lang;\n}\n\nconst ConversionPanel = function ({\n  splitEditorProps,\n  editorProps,\n  resultEditorProps,\n  transformer,\n  splitLanguage,\n  splitTitle,\n  editorLanguage,\n  editorTitle,\n  resultLanguage,\n  resultTitle,\n  editorSettingsElement,\n  settings,\n  editorDefaultValue,\n  splitEditorDefaultValue,\n  resultSettingsElement\n}) {\n  const [value, setValue] = useData(editorDefaultValue || editorLanguage);\n  const [splitValue, setSplitValue] = useData(splitEditorDefaultValue || splitLanguage);\n  const {\n    0: result,\n    1: setResult\n  } = useState(\"\");\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\");\n  const {\n    0: showUpdateSpinner,\n    1: toggleUpdateSpinner\n  } = useState(false);\n  const router = useRouter();\n  const route = activeRouteData(router.pathname);\n  let packageDetails;\n\n  if (route) {\n    const {\n      packageUrl,\n      packageName\n    } = route;\n    packageDetails = packageName && packageUrl ? {\n      name: packageName,\n      url: packageUrl\n    } : undefined;\n  }\n\n  useEffect(() => {\n    async function transform() {\n      try {\n        toggleUpdateSpinner(true);\n        prettierWorker = prettierWorker || getWorker(PrettierWorker);\n        const result = await transformer({\n          value,\n          splitEditorValue: splitTitle ? splitValue : undefined\n        });\n        let prettyResult = await prettierWorker.send({\n          value: result,\n          language: resultLanguage\n        }); // Fix for #319\n\n        if (prettyResult.startsWith(\";<\")) {\n          prettyResult = prettyResult.slice(1);\n        }\n\n        setResult(prettyResult);\n        setMessage(\"\");\n      } catch (e) {\n        console.error(e);\n        setMessage(e.message);\n      }\n\n      toggleUpdateSpinner(false);\n    }\n\n    transform();\n  }, [splitValue, value, splitTitle, settings]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Pane, {\n      display: \"flex\",\n      flexDirection: \"row\",\n      overflow: \"hidden\",\n      flex: 1,\n      height: \"calc(100vh - 40px)\",\n      children: [/*#__PURE__*/_jsxs(Pane, {\n        display: \"flex\",\n        flex: 1,\n        borderRight: true,\n        flexDirection: \"column\",\n        overflow: \"hidden\",\n        children: [/*#__PURE__*/_jsx(EditorPanel, _objectSpread({\n          language: getEditorLanguage(editorLanguage),\n          onChange: setValue,\n          hasLoad: true,\n          defaultValue: value,\n          id: 1,\n          hasCopy: false,\n          title: editorTitle,\n          settingElement: editorSettingsElement,\n          hasClear: true\n        }, editorProps)), splitTitle && /*#__PURE__*/_jsx(Pane, {\n          display: \"flex\",\n          flex: 1,\n          borderTop: true,\n          children: /*#__PURE__*/_jsx(EditorPanel, _objectSpread({\n            title: splitTitle,\n            defaultValue: splitValue,\n            language: getEditorLanguage(splitLanguage),\n            id: 2,\n            hasCopy: false,\n            onChange: setSplitValue,\n            hasLoad: true,\n            hasClear: true\n          }, splitEditorProps))\n        })]\n      }), /*#__PURE__*/_jsxs(Pane, {\n        display: \"flex\",\n        flex: 1,\n        position: \"relative\",\n        children: [showUpdateSpinner && /*#__PURE__*/_jsx(Pane, {\n          display: \"inline-flex\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          zIndex: 9,\n          borderRadius: \"50%\",\n          paddingX: 8,\n          paddingY: 8,\n          elevation: 1,\n          top: 50,\n          right: 30,\n          children: /*#__PURE__*/_jsx(Spinner, {\n            css: {\n              \"& circle\": {\n                stroke: \"#0e7ccf\"\n              }\n            },\n            size: 32\n          })\n        }), /*#__PURE__*/_jsx(EditorPanel, _objectSpread({\n          title: resultTitle,\n          defaultValue: result,\n          language: getEditorLanguage(resultLanguage),\n          id: 3,\n          editable: false,\n          hasPrettier: false,\n          settingElement: resultSettingsElement,\n          packageDetails: packageDetails\n        }, resultEditorProps))]\n      })]\n    }), message && /*#__PURE__*/_jsx(Alert, {\n      paddingY: 15,\n      paddingX: 20,\n      left: 240,\n      right: 0,\n      position: \"absolute\",\n      intent: \"danger\",\n      bottom: 0,\n      title: message,\n      backgroundColor: \"#FAE2E2\",\n      zIndex: 3\n    })]\n  });\n};\n\nexport default /*#__PURE__*/React.memo(ConversionPanel);","map":null,"metadata":{},"sourceType":"module"}