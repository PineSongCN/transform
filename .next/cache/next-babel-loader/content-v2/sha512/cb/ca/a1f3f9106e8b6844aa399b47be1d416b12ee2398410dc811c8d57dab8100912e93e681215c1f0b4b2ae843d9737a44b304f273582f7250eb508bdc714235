{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport BabelWorker from \"@workers/babel.worker\";\nimport { SvgConverter } from \"@components/SvgConverter\";\nimport { useCallback, useState } from \"react\";\nimport { defaultNativeSettings, formFields, nativeRequiredSettings } from \"@constants/svgoConfig\";\nimport isSvg from \"is-svg\";\nimport { getWorker } from \"@utils/workerWrapper\";\nimport SvgoWorker from \"@workers/svgo.worker\";\nimport SvgrWorker from \"@workers/svgr.worker\";\n\nlet svgo, _babelWorker, svgr;\n\nexport default function SvgToReactNative() {\n  const name = \"SVG to React Native\";\n  const {\n    0: settings,\n    1: setSettings\n  } = useState(defaultNativeSettings);\n  const {\n    0: optimizedValue,\n    1: setOptimizedValue\n  } = useState(\"\");\n  const transformer = useCallback(async ({\n    value\n  }) => {\n    if (!isSvg(value)) throw new Error(\"This is not a valid svg code.\");\n    svgo = svgo || getWorker(SvgoWorker);\n    svgr = svgr || getWorker(SvgrWorker);\n\n    let _value = await svgo.send({\n      value,\n      settings: _objectSpread(_objectSpread({}, settings.optimizeSvg ? settings : {}), nativeRequiredSettings)\n    }); // set optimized value in state to be used by preview.\n\n\n    setOptimizedValue(_value);\n    _babelWorker = _babelWorker || getWorker(BabelWorker);\n    _value = await svgr.send({\n      native: true,\n      value: _value\n    });\n    return _value;\n  }, [settings]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(SvgConverter, {\n      settings: settings,\n      setSettings: setSettings,\n      transformer: transformer,\n      babelWorker: BabelWorker,\n      name: name,\n      resultTitle: \"React Native\",\n      formFields: formFields(defaultNativeSettings),\n      optimizedValue: optimizedValue\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}