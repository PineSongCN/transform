{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport Form, { InputType } from \"@components/Form\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nconst formFields = [{\n  type: InputType.SWITCH,\n  key: \"typealias\",\n  label: \"Create Mono Type\"\n}];\nexport default function JsonToTypescript() {\n  const name = \"JSON to Typescript\";\n  const [settings, setSettings] = useSettings(name, {\n    typealias: false\n  });\n  const transformer = useCallback(async ({\n    value\n  }) => {\n    const {\n      run\n    } = await import(\"json_typegen_wasm\");\n    return run(\"Root\", value, JSON.stringify({\n      output_mode: settings.typealias ? \"typescript/typealias\" : \"typescript\"\n    }));\n  }, [settings]);\n  const getSettingsElement = useCallback(({\n    open,\n    toggle\n  }) => {\n    return /*#__PURE__*/_jsx(Form, {\n      title: name,\n      onSubmit: setSettings,\n      open: open,\n      toggle: toggle,\n      formsFields: formFields,\n      initialValues: settings\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"JSON\",\n    editorLanguage: \"json\",\n    resultTitle: \"TypeScript\",\n    resultLanguage: \"typescript\",\n    editorSettingsElement: getSettingsElement,\n    settings: settings\n  });\n}","map":null,"metadata":{},"sourceType":"module"}