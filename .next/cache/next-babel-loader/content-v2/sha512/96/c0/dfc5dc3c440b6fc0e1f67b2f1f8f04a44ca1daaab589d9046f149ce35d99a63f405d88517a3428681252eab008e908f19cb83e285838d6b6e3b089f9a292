{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { newEasiGen } from \"@lemonneko/easi-gen\";\nimport Form, { InputType } from \"@components/Form\";\nexport default function CadenceToGo() {\n  var generator;\n\n  var _useState = useState({\n    generateContractCode: false\n  }),\n      settings = _useState[0],\n      setSettings = _useState[1];\n\n  React.useEffect(console.log, [settings]);\n  var transformer = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var value, generated;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _ref.value;\n\n              if (generator) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return newEasiGen();\n\n            case 4:\n              generator = _context.sent;\n\n            case 5:\n              generated = generator(value, !settings.generateContractCode);\n              return _context.abrupt(\"return\", generated);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [settings]);\n  var outputSettingsElement = useCallback(function (_ref3) {\n    var open = _ref3.open,\n        toggle = _ref3.toggle;\n    return /*#__PURE__*/_jsx(Form, {\n      initialValues: settings,\n      open: open,\n      toggle: toggle,\n      title: \"Output Settings\",\n      onSubmit: setSettings,\n      formsFields: [{\n        key: \"generateContractCode\",\n        type: InputType.SWITCH,\n        label: \"Generate Interaction Code With Functions\"\n      }]\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"Cadence types\",\n    editorLanguage: \"text\",\n    editorDefaultValue: \"cadence\",\n    resultTitle: \"Go types\",\n    resultLanguage: \"go\",\n    settings: settings,\n    resultSettingsElement: outputSettingsElement\n  });\n}","map":null,"metadata":{},"sourceType":"module"}