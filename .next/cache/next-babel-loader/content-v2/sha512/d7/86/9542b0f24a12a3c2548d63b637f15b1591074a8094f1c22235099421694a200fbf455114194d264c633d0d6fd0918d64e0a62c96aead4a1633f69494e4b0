{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport Form, { InputType } from \"@components/Form\";\nimport { useSettings } from \"@hooks/useSettings\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nimport request from \"@utils/request\";\nconst formFields = [{\n  type: InputType.SWITCH,\n  key: \"keepComments\",\n  label: \"Keep TSDoc Comments\"\n}, {\n  type: InputType.SWITCH,\n  key: \"skipParseJSDoc\",\n  label: \"Skip the creation of zod validators from JSDoc annotations\"\n}];\nexport default function TypescriptToZod() {\n  const name = \"JSON to Zod Schema\";\n  const [settings, setSettings] = useSettings(name, {\n    keepComments: false,\n    skipParseJSDoc: false\n  });\n  const transformer = useCallback(async ({\n    value\n  }) => {\n    const {\n      keepComments,\n      skipParseJSDoc\n    } = settings;\n    const params = new URLSearchParams({\n      keepComments,\n      skipParseJSDoc\n    }).toString();\n    const {\n      schema,\n      error\n    } = await request(`/api/typescript-to-zod?${params}`, value, \"text/plain\");\n\n    if (error) {\n      throw new Error(error);\n    }\n\n    return schema;\n  }, [settings]);\n  const getSettingsElement = useCallback(({\n    open,\n    toggle\n  }) => {\n    return /*#__PURE__*/_jsx(Form, {\n      title: name,\n      onSubmit: setSettings,\n      open: open,\n      toggle: toggle,\n      formsFields: formFields,\n      initialValues: settings\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"TypeScript\",\n    editorLanguage: \"typescript\",\n    editorDefaultValue: \"typeScriptInterface\",\n    resultTitle: \"Zod Schema\",\n    resultLanguage: \"typescript\",\n    editorSettingsElement: getSettingsElement,\n    settings: settings\n  });\n}","map":null,"metadata":{},"sourceType":"module"}