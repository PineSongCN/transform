{"ast":null,"code":"import { useState } from \"react\";\nimport { version } from \"../package.json\";\nvar prefix = \"transform:\".concat(version, \":\");\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = IN_BROWSER ? window.localStorage.getItem(prefix + key) || initialValue : initialValue; // Parse stored json or if none return initialValue\n\n      return JSON.parse(item);\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue;\n    }\n  }),\n      storedValue = _useState[0],\n      setStoredValue = _useState[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to sessionStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      if (IN_BROWSER) window.localStorage.setItem(prefix + key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":null,"metadata":{},"sourceType":"module"}