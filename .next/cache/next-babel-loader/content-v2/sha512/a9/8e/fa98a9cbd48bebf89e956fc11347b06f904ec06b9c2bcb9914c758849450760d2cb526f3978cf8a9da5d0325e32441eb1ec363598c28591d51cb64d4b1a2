{"ast":null,"code":"import { parse, print } from \"recast\";\nimport { transformFromAstSync } from \"@babel/core\";\nimport transformTypescript from \"@babel/plugin-transform-typescript\";\nimport getBabelOptions from \"recast/parsers/_babel_options\";\nimport { parser } from \"recast/parsers/babel\";\nexport default ((req, res) => {\n  try {\n    const ast = parse(req.body, {\n      parser: {\n        parse: (source, options) => {\n          const babelOptions = getBabelOptions(options);\n          babelOptions.plugins.push(\"typescript\", \"jsx\");\n          return parser.parse(source, babelOptions);\n        }\n      }\n    });\n    const options = {\n      cloneInputAst: false,\n      // recast stores metadata in AST nodes, so disable cloning will preserve the original code style\n      code: false,\n      ast: true,\n      plugins: [transformTypescript],\n      configFile: false\n    };\n    const {\n      ast: transformedAST\n    } = transformFromAstSync(ast, req.body, options);\n    const result = print(transformedAST).code;\n    res.status(200).send(result);\n  } catch (e) {\n    console.log(e);\n    res.status(500).send(e.message);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}