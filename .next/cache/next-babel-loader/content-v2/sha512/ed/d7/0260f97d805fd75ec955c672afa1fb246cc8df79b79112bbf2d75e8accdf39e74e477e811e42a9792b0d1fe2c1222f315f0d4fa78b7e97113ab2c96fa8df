{"ast":null,"code":"var _os$tmpdir;\n\nimport { generate } from \"ts-to-zod\";\nimport os from \"os\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nconst tmpDir = (_os$tmpdir = os.tmpdir) === null || _os$tmpdir === void 0 ? void 0 : _os$tmpdir.call(os);\nexport default ((req, res) => {\n  const {\n    query,\n    body\n  } = req;\n  const {\n    skipParseJSDoc,\n    keepComments\n  } = query;\n  const filePath = path.join(tmpDir, crypto.randomBytes(16).toString(\"hex\")) + \".ts\";\n\n  try {\n    const schemaGenerator = generate({\n      sourceText: body,\n      keepComments: keepComments === \"true\",\n      skipParseJSDoc: skipParseJSDoc === \"true\"\n    });\n    const schema = schemaGenerator.getZodSchemasFile(filePath);\n    const formattedSchema = schema.split(/\\r?\\n/).slice(1).join(\"\\n\");\n    res.status(200).json({\n      schema: formattedSchema,\n      error: schemaGenerator.errors[0]\n    });\n  } catch (e) {\n    res.status(200).json({\n      error: e.message\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}