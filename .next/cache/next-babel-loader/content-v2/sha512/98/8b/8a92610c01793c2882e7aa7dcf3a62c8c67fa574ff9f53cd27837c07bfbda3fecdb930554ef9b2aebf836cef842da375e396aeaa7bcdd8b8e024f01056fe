{"ast":null,"code":"import _classCallCheck from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/songxu/Develop/test/transform/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar resolves = {};\nvar rejects = {};\nvar globalMsgId = 0; // Activate calculation in the worker, returning a promise\n\nfunction sendMsg(payload, worker) {\n  var msgId = globalMsgId++;\n  var msg = {\n    id: msgId,\n    payload: payload\n  };\n  return new Promise(function (resolve, reject) {\n    // save callbacks for later\n    resolves[msgId] = resolve;\n    rejects[msgId] = reject;\n    worker.postMessage(msg); // TODO: CHECK FOR MEMORY LEAK\n  });\n} // Handle incoming calculation result\n\n\nfunction handleMsg(msg) {\n  var _msg$data = msg.data,\n      id = _msg$data.id,\n      err = _msg$data.err,\n      payload = _msg$data.payload;\n\n  if (payload) {\n    var resolve = resolves[id];\n\n    if (resolve) {\n      resolve(payload);\n    }\n  } else {\n    // error condition\n    var reject = rejects[id];\n\n    if (reject) {\n      if (err) {\n        reject(new Error(err));\n      } else {\n        reject(\"Got nothing\");\n      }\n    }\n  } // purge used callbacks\n\n\n  delete resolves[id];\n  delete rejects[id];\n}\n\nexport var Wrapper = /*#__PURE__*/function () {\n  function Wrapper(worker) {\n    _classCallCheck(this, Wrapper);\n\n    _defineProperty(this, \"worker\", void 0);\n\n    this.worker = worker;\n    this.worker.onmessage = handleMsg;\n  }\n\n  _createClass(Wrapper, [{\n    key: \"send\",\n    value: function send(str) {\n      return sendMsg(str, this.worker);\n    }\n  }]);\n\n  return Wrapper;\n}();\nexport function getWorker(Worker) {\n  return new Wrapper(new Worker());\n}","map":null,"metadata":{},"sourceType":"module"}