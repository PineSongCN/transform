{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, FilePicker, Heading, IconButton, Pane, Popover, TextInput, toaster, Tooltip } from \"evergreen-ui\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport copy from \"clipboard-copy\";\nimport Npm from \"@assets/svgs/Npm\";\nimport { useDropzone } from \"react-dropzone\";\nconst Monaco = dynamic(() => import(\"../components/Monaco\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Monaco\")],\n    modules: [\"../components/EditorPanel.tsx -> \" + \"../components/Monaco\"]\n  }\n});\nexport default function EditorPanel({\n  editable = true,\n  title,\n  settingElement,\n  hasLoad,\n  acceptFiles,\n  hasClear,\n  hasCopy = true,\n  topNotifications,\n  language,\n  defaultValue,\n  onChange,\n  id,\n  packageDetails\n}) {\n  const {\n    0: showSettingsDialogue,\n    1: setSettingsDialog\n  } = useState(false);\n  const {\n    0: value,\n    1: setValue\n  } = useState(defaultValue);\n  const {\n    0: fetchingUrl,\n    1: setFetchingUrl\n  } = useState(\"\");\n  const options = {\n    fontSize: 14,\n    readOnly: !editable,\n    codeLens: false,\n    fontFamily: \"Menlo, Consolas, monospace, sans-serif\",\n    minimap: {\n      enabled: false\n    },\n    quickSuggestions: false,\n    lineNumbers: \"on\",\n    renderValidationDecorations: \"off\"\n  };\n\n  const _toggleSettingsDialog = useCallback(() => setSettingsDialog(!showSettingsDialogue), [showSettingsDialogue]);\n\n  useEffect(() => {\n    // @ts-ignore\n    window.__webpack_public_path__ = \"/_next/static/\";\n  }, []);\n  const getSettings = useCallback(() => /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, {\n      marginRight: 10,\n      iconBefore: \"cog\",\n      onClick: _toggleSettingsDialog,\n      height: 28,\n      children: \"Settings\"\n    }), settingElement({\n      toggle: _toggleSettingsDialog,\n      open: showSettingsDialogue\n    })]\n  }), [showSettingsDialogue]);\n  const onFilePicked = useCallback((files, close = () => {}) => {\n    if (!(files && files.length)) return;\n    const file = files[0];\n    const reader = new FileReader();\n    reader.readAsText(file, \"utf-8\");\n\n    reader.onload = () => {\n      setValue(reader.result);\n      onChange(reader.result);\n      close();\n    };\n  }, []);\n  const {\n    getRootProps\n  } = useDropzone({\n    onDrop: files => onFilePicked(files),\n    disabled: !editable,\n    accept: acceptFiles,\n    onDropRejected: () => toaster.danger(\"This file type is not supported.\", {\n      id\n    })\n  });\n  const copyValue = useCallback(() => {\n    copy(value);\n    toaster.success(\"Copied to clipboard.\", {\n      id\n    });\n  }, [value]);\n  const fetchFile = useCallback(close => {\n    (async () => {\n      if (!fetchingUrl) return;\n      const res = await fetch(fetchingUrl);\n      const value = await res.text();\n      setValue(value);\n      setFetchingUrl(\"\");\n      close();\n      onChange(value);\n    })();\n  }, [fetchingUrl, onChange]); // whenever defaultValue changes, change the value of the editor.\n\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n  return /*#__PURE__*/_jsxs(Pane, {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n    overflow: \"hidden\",\n    children: [/*#__PURE__*/_jsxs(Pane, {\n      display: \"flex\",\n      height: 40,\n      paddingX: 10,\n      alignItems: \"center\",\n      borderBottom: true,\n      zIndex: 2,\n      backgroundColor: \"#FFFFFF\",\n      flexShrink: 0,\n      children: [/*#__PURE__*/_jsx(Pane, {\n        flex: 1,\n        children: /*#__PURE__*/_jsx(Heading, {\n          size: 500,\n          marginTop: 0,\n          children: title\n        })\n      }), settingElement && getSettings(), hasLoad && /*#__PURE__*/_jsx(Popover, {\n        content: ({\n          close\n        }) => /*#__PURE__*/_jsxs(Pane, {\n          paddingY: 20,\n          paddingX: 20,\n          display: \"flex\",\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          backgroundColor: \"#FFFFFF\",\n          children: [/*#__PURE__*/_jsx(FilePicker, {\n            width: \"100%\",\n            name: \"filepicker\",\n            onChange: files => onFilePicked(files, close),\n            accept: acceptFiles\n          }), /*#__PURE__*/_jsx(Heading, {\n            paddingY: 10,\n            size: 200,\n            children: \"OR\"\n          }), /*#__PURE__*/_jsxs(Pane, {\n            display: \"flex\",\n            flexDirection: \"row\",\n            children: [/*#__PURE__*/_jsx(TextInput, {\n              borderBottomRightRadius: 0,\n              borderTopRightRadius: 0,\n              placeholder: \"Enter URL\",\n              onChange: e => setFetchingUrl(e.target.value)\n            }), /*#__PURE__*/_jsx(Button, {\n              borderLeftWidth: 0,\n              borderBottomLeftRadius: 0,\n              borderTopLeftRadius: 0,\n              onClick: () => fetchFile(close),\n              children: \"Fetch URL\"\n            })]\n          })]\n        }),\n        shouldCloseOnExternalClick: true,\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          content: \"Load File\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            height: 28,\n            marginRight: 10,\n            icon: \"upload\"\n          })\n        })\n      }), hasClear && /*#__PURE__*/_jsx(Tooltip, {\n        content: \"Clear\",\n        children: /*#__PURE__*/_jsx(IconButton, {\n          height: 28,\n          icon: \"trash\",\n          intent: \"danger\",\n          marginRight: 10,\n          onClick: () => setValue(\"\")\n        })\n      }), packageDetails && /*#__PURE__*/_jsx(\"a\", {\n        href: packageDetails.url,\n        style: {\n          display: \"inline-flex\"\n        },\n        target: \"_blank\",\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          content: packageDetails.name,\n          children: /*#__PURE__*/_jsx(Npm, {})\n        })\n      }), hasCopy && /*#__PURE__*/_jsx(Button, {\n        appearance: \"primary\",\n        marginRight: 10,\n        iconBefore: \"duplicate\",\n        onClick: copyValue,\n        height: 28,\n        children: \"Copy\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        overflow: \"hidden\"\n      }\n    }, getRootProps()), {}, {\n      children: [topNotifications && topNotifications({\n        isSettingsOpen: showSettingsDialogue,\n        toggleSettings: _toggleSettingsDialog\n      }), /*#__PURE__*/_jsx(Monaco, {\n        language: language,\n        value: value,\n        options: options,\n        onChange: value => {\n          setValue(value);\n          onChange(value);\n        }\n      })]\n    }))]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}