{"ast":null,"code":"export var json = JSON.stringify({\n  userId: 1,\n  id: 1,\n  title: \"delectus aut autem\",\n  completed: false\n}, null, 2);\nexport var html = \"<!-- Hello world -->\\n<div class=\\\"awesome\\\" style=\\\"border: 1px solid red\\\">\\n  <label for=\\\"name\\\">Enter your name: </label>\\n  <input type=\\\"text\\\" id=\\\"name\\\" />\\n</div>\\n<p>Enter your HTML here</p>\";\nexport var svg = \"<svg style=\\\"flex:1;\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n  <rect x=\\\"10\\\" y=\\\"10\\\" height=\\\"100\\\" width=\\\"100\\\"\\n    style=\\\"stroke:#ff0000; fill: #0000ff\\\"/>\\n</svg>\";\nexport var css = \".main-wrapper {\\n  flex-direction: row;\\n  display: flex;\\n  flex: 1;\\n}\\n#content {\\n  flex: 1;\\n}\\nul {\\n  padding: 20px 0;\\n  flex: 1;\\n}\\nli {\\n  font-family:'Lato';\\n  color: whitesmoke;\\n  line-height: 44px;\\n}\\n\";\nexport var css2 = \".alert {\\n  position: relative;\\n  padding: 1.6rem 4.6rem;\\n  margin-bottom: 1.6rem;\\n  border: 1px solid #c53030;\\n  color: #fff;\\n  border-radius: 0.2rem;\\n  width: 100%;\\n}\\n\\n.logo {\\n  margin-bottom: 1.6rem;\\n  background: url('logo.svg') no-repeat;\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.button {\\n  background: #81e6d9;\\n  padding: 1.6rem 4.6rem;\\n  letter-spacing: 0.03rem;\\n  border-radius: 0.2rem;\\n}\\n\\n.button:hover {\\n  background: #2c7a7b;\\n}\\n\\n@media (min-width: 640px) {\\n  .button {\\n    padding: 0.5rem 1rem;\\n    width: 100%;\\n  }\\n}\\n\\n@media (min-width: 1280px) {\\n  .button {\\n    padding: 3rem 7rem;\\n    margin-bottom: 2.4rem;\\n  }\\n}\\n\\n.username {\\n  color: #718096;\\n  border-color: #bee3f8;\\n}\\n\\n.username:focus {\\n  border-color: #3182ce;\\n}\\n\\n.username::placeholder {\\n  color: #cbd5e0;\\n}\\n\\n@media (min-width: 1280px) {\\n  .username {\\n    width: 50%;\\n  }\\n}\\n\\n.footer {\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  flex-direction: row-reverse;\\n  padding: 2.4rem 3rem;\\n  border-top: 1px solid #fff5f5;\\n}\\n\";\nexport var css3 = \":root {\\n  --some-color: #090909;\\n}\\n\\n.foo {\\n  padding: 0.875em 256px;\\n  margin-left: 16px;\\n  text-align: center;\\n  font-size: 12px;\\n  transition: color, background-color, border-color, text-decoration-color, fill,\\n    stroke 200ms cubic-bezier(0, 0, 0.2, 1);\\n  animation-delay: 200ms;\\n\\n  &:hover {\\n    filter: blur(4px) brightness(0.5) sepia(100%) contrast(1) hue-rotate(30deg)\\n      invert(0) opacity(0.05) saturate(1.5);\\n    color: hsl(27, 96%, 61%);\\n    font-size: 1.25rem;\\n  }\\n\\n  &[aria-disabled=\\\"true\\\"] {\\n    width: 25%;\\n    color: var(--some-color);\\n    font-size: 1em;\\n  }\\n\\n  @media (min-width: 768px) {\\n    top: auto;\\n    bottom: auto;\\n    left: 25%;\\n    right: 25%;\\n  }\\n\\n  @media (min-width: 768px) and (max-width: 1024px) {\\n    min-width: 100%;\\n    margin-right: -24px;\\n  }\\n\\n  @supports (display: grid) {\\n    display: grid;\\n    grid-column: span 1 / span 1;\\n  }\\n}\\n\\n.foo.bar {\\n  padding: 0.875rem 256px 15%;\\n  transform: translateX(12px) translateY(-0.5em) skew(1deg, 3deg)\\n    scale(-0.75, 1.05) rotate(-0.25turn);\\n\\n  &::after {\\n    content: \\\"*\\\";\\n    animation: spin 1s linear infinite;\\n  }\\n}\\n\";\nexport var javascript = \"const container = css({\\n  flex: 1,\\n  padding: 10,\\n  backgroundColor: 'orange',\\n  color: colors.white,\\n\\n  '&:hover': {\\n    backgroundColor: 'tomato',\\n  },\\n});\";\nexport var yaml = \"---\\n  foo: \\\"bar\\\"\\n  baz:\\n    - \\\"qux\\\"\\n    - \\\"quxx\\\"\\n  corge: null\\n  grault: 1\\n  garply: true\\n  waldo: \\\"false\\\"\\n  fred: \\\"undefined\\\"\\n  emptyarr: []\\n  emptyobj: {}\\n\";\nexport var xml = \"<note>\\n    <to>Tove</to>\\n    <from>Jani</from>\\n    <heading>Reminder</heading>\\n    <body>Don't forget me this weekend!</body>\\n</note>\\n\";\nexport var markdown = \"Heading\\n=======\\n## Sub-heading\\nParagraphs are separated\\nby a blank line.\\nTwo spaces at the end of a line\\nproduces a line break.\\nText attributes _italic_,\\n**bold**, `monospace`.\\nHorizontal rule:\\n---\\nBullet list:\\n  * apples\\n  * oranges\\n  * pears\\nNumbered list:\\n  1. wash\\n  2. rinse\\n  3. repeat\\nA [link](http://example.com).\\n![Image](https://via.placeholder.com/150)\\n> Markdown uses email-style > characters for blockquoting.\\n\";\nexport var flow = \"export type AlertType = 'success'\\n\\nexport type AlertProps = {\\n  type: AlertType,\\n  text: string,\\n  testId: string,\\n}\\n\\nexport type AlertTypeIconMap = {\\n  success: 'tick' | 'started',\\n}\\n\\nconst Alert = ({ type, text, testId }: AlertProps) => {\\n  const alertTypeIconMap: AlertTypeIconMap = {\\n    success: 'tick',\\n  }\\n  const styles = getStyles({ type })\\n\\n  return (\\n      <View style={styles.iconContainer}>\\n        <Icon type={alertTypeIconMap[type]} />\\n      </View>\\n  )\\n}\\n\\nexport default Alert\";\nexport var graphql = \"type Query {\\n\\tuser: User!\\n}\\ntype User {\\n\\tid: ID!\\n\\tprofile: Profile!\\n\\temail: String!\\n\\tusername: String!\\n}\\ntype Profile {\\n\\tname: String!\\n\\tage: Int!\\n}\";\nexport var graphql1 = \"scalar Date\\n\\nschema {\\n  query: Query\\n}\\n\\ntype Query {\\n  me: User!\\n  user(id: ID!): User\\n  allUsers: [User]\\n  search(term: String!): [SearchResult!]!\\n  myChats: [Chat!]!\\n}\\n\\nenum Role {\\n  USER,\\n  ADMIN,\\n}\\n\\ninterface Node {\\n  id: ID!\\n}\\n\\nunion SearchResult = User | Chat | ChatMessage\\n\\ntype User implements Node {\\n  id: ID!\\n  username: String!\\n  email: String!\\n  role: Role!\\n}\\n\\ntype Chat implements Node {\\n  id: ID!\\n  users: [User!]!\\n  messages: [ChatMessage!]!\\n}\\n\\ntype ChatMessage implements Node {\\n  id: ID!\\n  content: String!\\n  time: Date!\\n  user: User!\\n}\\n\";\nexport var graphqlDocument = \"query findUser($userId: ID!) {\\n  user(id: $userId) {\\n    ...UserFields\\n  }\\n}\\n\\nfragment UserFields on User {\\n  id\\n  username\\n  role\\n}\";\nexport var graphqlMongodb = \"type User @entity {\\n  id: ID! @id\\n  username: String! @column\\n  email: String! @column @map(\\n    path: \\\"login.email\\\"\\n  )\\n  profile: Profile! @column\\n  chats: [Chat!]! @link\\n}\\n\\ntype Profile @entity(embedded: true,\\n  additionalFields: [\\n    { path: \\\"dateOfBirth\\\", type: \\\"string\\\" }\\n  ]) {\\n  name: String! @column\\n  age: Int\\n}\\n\\ntype Chat @entity {\\n  id: ID! @id\\n  users: [User!]! @link\\n  messages: [ChatMessage!]!\\n}\\n\\ntype ChatMessage @entity {\\n  id: ID! @id\\n  chat: Chat! @link\\n  content: String! @column\\n  author: User! @link\\n}\";\nexport var jsObject = \"{\\n\\ttitle: {\\n\\t\\ttype: 'String',\\n\\t\\ttrim: true,\\n\\t\\tindex: true,\\n\\t\\trequired: true\\n\\t},\\n\\tyear: {\\n\\t\\ttype: 'Number',\\n\\t\\tmax: 2012,\\n\\t\\tvalidate: 'validateBookYear'\\n\\t},\\n\\tauthor: {\\n\\t\\ttype: 'ObjectId',\\n\\t\\tref: 'Author',\\n\\t\\tindex: true,\\n\\t\\trequired: true\\n\\t}\\n}\";\nexport var jsonSchema = \"{\\n  \\\"$schema\\\": \\\"http://json-schema.org/draft-04/schema#\\\",\\n  \\\"title\\\": \\\"Example Schema\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"firstName\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"lastName\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"age\\\": {\\n      \\\"description\\\": \\\"Age in years\\\",\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"minimum\\\": 0\\n    },\\n    \\\"height\\\": {\\n      \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n    },\\n    \\\"favoriteFoods\\\": {\\n      \\\"type\\\": \\\"array\\\",\\n      \\\"minItems\\\": 0,\\n      \\\"maxItems\\\": 2,\\n      \\\"items\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"likesDogs\\\": {\\n      \\\"type\\\": \\\"boolean\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\\"firstName\\\", \\\"lastName\\\"]\\n}\";\nexport var jsonLd = \"{\\n  \\\"@context\\\": \\\"https://schema.org/\\\",\\n  \\\"@type\\\": \\\"Person\\\",\\n  \\\"name\\\": \\\"Jane Doe\\\",\\n  \\\"jobTitle\\\": \\\"Professor\\\",\\n  \\\"telephone\\\": \\\"(425) 123-4567\\\",\\n  \\\"url\\\": \\\"http://www.janedoe.com\\\"\\n}\\n\";\nexport var jsonLdContext = \"{\\n  \\\"@context\\\": \\\"https://schema.org/\\\"\\n}\";\nexport var typescript = \"\\nimport React from 'react';\\nexport interface Props {\\n  /** The user's name */\\n  name: string;\\n  /** Should the name be rendered in bold */\\n  priority?: boolean\\n}\\n\\nexport interface FauxactClassComponent<Props extends {}, State = {}> {\\n  props: Props\\n  state: State\\n\\n  setState: (prevState: State, props: Props) => Props\\n  callback?: () => void\\n  render(): FauxactClassComponent<any> | null\\n}\\n\\nexport const PrintName: React.FC<Props> = (props) => {\\n  return (\\n    <div>\\n      <p style={{ fontWeight: props.priority ? \\\"bold\\\" : \\\"normal\\\" }}>{props.name}</p>\\n    </div>\\n  )\\n}\\n\\nexport const ShowUser: React.FC<Props> = (props) => {\\n  return <PrintName name=\\\"Ned\\\" />\\n}\\n\\nlet username = \\\"Cersei\\\"\\nexport const ShowStoredUser: React.FC<Props> = (props) => {\\n  return <PrintName name={username} priority />\\n}\\n\\nimport { useState, useEffect } from 'react';\\n\\nexport const CounterExample: React.FC<{}> = () => {\\n  const [count, setCount] = useState(0);\\n\\n  const handleClick = () => setCount(count + 1)\\n\\n  return (\\n    <div>\\n      <p>You clicked {count} times</p>\\n      <button onClick={handleClick}>\\n        Click me\\n      </button>\\n    </div>\\n  );\\n}\";\nexport var typeScriptInterface = \"export interface Root {\\n  userId: number;\\n  id: number;\\n  title: string;\\n  completed: boolean;\\n}\\n\\nexport interface Props {\\n  /** The user's name */\\n  name: string;\\n  /** Should the name be rendered in bold */\\n  priority?: boolean\\n}\";\nexport var toml = \"userId = 1\\nid = 1\\ntitle = \\\"delectus aut autem\\\"\\ncompleted = false\\n\\n[company]\\nid = 12\\nname = \\\"Transform Inc\\\"\";\nexport var cadence = \"// Do not remove top level contract\\n// Just paste your structs in this contract\\npub contract Example {\\n  pub struct ExampleStruct {\\n      pub var url: String\\n      pub twoCapacityArray: [String;2]\\n      pub deeeeepArray: [[[[String]]]]\\n\\n      pub struct ExampleEmbed {\\n        pub var aNumber: Int\\n\\n        init() {\\n          self.aNumber = 0\\n        }\\n      }\\n\\n      init() {\\n          self.url = \\\"\\\"\\n          self.twoCapacityArray = []\\n          self.deeeeepArray = []\\n      }\\n  }\\n\\n  pub event ExampleEvent(_ name: String, _ aDeeeeeepMap: {String:{String:{String:{String:String}}}})\\n\\n  // This function will be ignored if 'Generate Interaction Code With Functions' disabled\\n  pub fun hello(): String {\\n    return \\\"Hello\\\"\\n  }\\n}\\n\";","map":null,"metadata":{},"sourceType":"module"}