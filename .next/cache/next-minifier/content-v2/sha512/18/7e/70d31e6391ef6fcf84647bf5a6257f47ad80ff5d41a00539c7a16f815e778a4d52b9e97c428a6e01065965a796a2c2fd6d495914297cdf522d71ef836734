{"code":"_N_E=(\"object\"!==typeof self?self:this.webpackJsonp_N_E=\"object\"!==typeof self?self:this.webpackJsonp_N_E||[]).push([[56],{\"6G68\":function(e,t){e.exports=function(e,t){let n,r,o=\"\",s=0;try{n=JSON.parse(e.replace(/\\.0/g,\".1\")),r=n}catch(d){return{go:\"\",error:d.message}}return a(\"type \"+(t=f(t||\"AutoGenerated\"))+\" \"),u(r),{go:o};function u(e){let t;if(\"object\"===typeof e&&null!==e)if(Array.isArray(e)){let n,r,o=e.length;for(n=0;n<o;n++){const t=l(e[n]);if(r){if(r!==t&&(r=p(t,r),\"interface{}\"===r))break}else r=t}if(a(\"[]\"),\"struct\"===r){let r,s;const u={};for(n=0;n<o;n++)for(r in s=Object.keys(e[n]),s)t=s[r],t in u||(u[t]={value:e[n][t],count:0}),u[t].count++;s=Object.keys(u);let c={},a={};for(r in s){t=s[r];let e=u[t];c[t]=e.value,a[t]=e.count!==o}i(c,a)}else\"slice\"===r?u(e[0]):a(r||\"interface{}\")}else i(e);else a(l(e))}function i(e,t){a(\"struct {\\n\"),++s;const n=Object.keys(e);for(const r in n){const o=n[r];c(s),a(f(o)+\" \"),u(e[o]),a(' `json:\"'+o),t&&!0===t[o]&&a(\",omitempty\"),a('\"`\\n')}c(--s),a(\"}\")}function c(e){for(let t=0;t<e;t++)o+=\"\\t\"}function a(e){o+=e}function f(e){if(!e)return\"\";if(e.match(/^\\d+$/))e=\"Num\"+e;else if(e.charAt(0).match(/\\d/)){e={0:\"Zero_\",1:\"One_\",2:\"Two_\",3:\"Three_\",4:\"Four_\",5:\"Five_\",6:\"Six_\",7:\"Seven_\",8:\"Eight_\",9:\"Nine_\"}[e.charAt(0)]+e.substr(1)}return function(e){const t=[\"API\",\"ASCII\",\"CPU\",\"CSS\",\"DNS\",\"EOF\",\"GUID\",\"HTML\",\"HTTP\",\"HTTPS\",\"ID\",\"IP\",\"JSON\",\"LHS\",\"QPS\",\"RAM\",\"RHS\",\"RPC\",\"SLA\",\"SMTP\",\"SSH\",\"TCP\",\"TLS\",\"TTL\",\"UDP\",\"UI\",\"UID\",\"UUID\",\"URI\",\"URL\",\"UTF8\",\"VM\",\"XML\",\"XSRF\",\"XSS\"];return e.replace(/(^|[^a-zA-Z])([a-z]+)/g,(function(e,n,r){return t.indexOf(r.toUpperCase())>=0?n+r.toUpperCase():n+r[0].toUpperCase()+r.substr(1).toLowerCase()})).replace(/([A-Z])([a-z]+)/g,(function(e,n,r){return t.indexOf(n+r.toUpperCase())>=0?(n+r).toUpperCase():n+r}))}(e).replace(/[^a-z0-9]/gi,\"\")||\"NAMING_FAILED\"}function l(e){if(null===e)return\"interface{}\";switch(typeof e){case\"string\":return/\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(\\+\\d\\d:\\d\\d|Z)/.test(e)?\"time.Time\":\"string\";case\"number\":return e%1===0?e>-2147483648&&e<2147483647?\"int\":\"int64\":\"float64\";case\"boolean\":return\"bool\";case\"object\":return Array.isArray(e)?\"slice\":\"struct\";default:return\"interface{}\"}}function p(e,t){return\"float\"===e.substr(0,5)&&\"int\"===t.substr(0,3)||\"int\"===e.substr(0,3)&&\"float\"===t.substr(0,5)?e:\"interface{}\"}}},UzN2:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return f}));var r=n(\"nKUr\"),o=n(\"sN8P\"),s=n(\"q1tI\"),u=n(\"6G68\"),i=n.n(u),c=n(\"FfZQ\"),a=n.n(c);function f(){var e=Object(s.useCallback)((function(e){var t=e.value;return a()(i()(t).go)}),[]);return Object(r.jsx)(o.a,{transformer:e,editorTitle:\"JSON\",editorLanguage:\"json\",resultTitle:\"Go\",resultLanguage:\"go\"})}},ppxy:function(e,t){function n(e){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=\"ppxy\"},sC8h:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/json-to-go\",function(){return n(\"UzN2\")}])}},[[\"sC8h\",1,2,26,0,3]]]);","map":{"version":3,"sources":["static/chunks/pages/json-to-go-bd4a52a467ccf445414c.js"],"names":["_N_E","self","this","push","6G68","module","exports","json","typename","data","scope","go","tabs","JSON","parse","replace","e","error","message","append","format","parseScope","keyname","Array","isArray","i","sliceType","scopeLength","length","thisType","goType","mostSpecificPossibleGoType","k","keys","allFields","Object","value","count","struct","omitempty","elem","parseStruct","indent","str","match","charAt","0","1","2","3","4","5","6","7","8","9","substr","commonInitialisms","unused","sep","frag","indexOf","toUpperCase","toLowerCase","toProperCase","val","test","typ1","typ2","UzN2","__webpack_exports__","__webpack_require__","r","d","JsonToGo","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","_components_ConversionPanel__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","json_to_go__WEBPACK_IMPORTED_MODULE_3__","json_to_go__WEBPACK_IMPORTED_MODULE_3___default","n","gofmt_js__WEBPACK_IMPORTED_MODULE_4__","gofmt_js__WEBPACK_IMPORTED_MODULE_4___default","transformer","_ref","editorTitle","editorLanguage","resultTitle","resultLanguage","ppxy","webpackEmptyContext","req","Error","code","resolve","id","sC8h","window","__NEXT_P"],"mappings":"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"},"name":"static/chunks/pages/json-to-go-bd4a52a467ccf445414c.js","input":"_N_E =\n(typeof self !== \"object\" ? self : this[\"webpackJsonp_N_E\"] = typeof self !== \"object\" ? self : this[\"webpackJsonp_N_E\"] || []).push([[56],{\n\n/***/ \"6G68\":\n/***/ (function(module, exports) {\n\n/*\n\tJSON-to-Go\n\tby Matt Holt\n\thttps://github.com/mholt/json-to-go\n\tA simple utility to translate JSON into a Go type definition.\n*/\n\nfunction jsonToGo(json, typename) {\n  let data;\n  let scope;\n  let go = \"\";\n  let tabs = 0;\n\n  try {\n    data = JSON.parse(json.replace(/\\.0/g, \".1\")); // hack that forces floats to stay as floats\n    scope = data;\n  } catch (e) {\n    return {\n      go: \"\",\n      error: e.message\n    };\n  }\n\n  typename = format(typename || \"AutoGenerated\");\n  append(\"type \" + typename + \" \");\n\n  parseScope(scope);\n\n  return { go: go };\n\n  function parseScope(scope) {\n    let keyname;\n    if (typeof scope === \"object\" && scope !== null) {\n      if (Array.isArray(scope)) {\n        let i;\n        let sliceType,\n          scopeLength = scope.length;\n\n        for (i = 0; i < scopeLength; i++) {\n          const thisType = goType(scope[i]);\n          if (!sliceType) sliceType = thisType;\n          else if (sliceType !== thisType) {\n            sliceType = mostSpecificPossibleGoType(thisType, sliceType);\n            if (sliceType === \"interface{}\") break;\n          }\n        }\n\n        append(\"[]\");\n        if (sliceType === \"struct\") {\n          let k;\n          let keys;\n          const allFields = {};\n\n          // for each field counts how many times appears\n          for (i = 0; i < scopeLength; i++) {\n            keys = Object.keys(scope[i]);\n            for (k in keys) {\n              keyname = keys[k];\n              if (!(keyname in allFields)) {\n                allFields[keyname] = {\n                  value: scope[i][keyname],\n                  count: 0\n                };\n              }\n\n              allFields[keyname].count++;\n            }\n          }\n\n          // create a common struct with all fields found in the current array\n          // omitempty dict indicates if a field is optional\n          keys = Object.keys(allFields);\n          let struct = {},\n            omitempty = {};\n          for (k in keys) {\n            keyname = keys[k];\n            let elem = allFields[keyname];\n\n            struct[keyname] = elem.value;\n            omitempty[keyname] = elem.count !== scopeLength;\n          }\n\n          parseStruct(struct, omitempty); // finally parse the struct !!\n        } else if (sliceType === \"slice\") {\n          parseScope(scope[0]);\n        } else append(sliceType || \"interface{}\");\n      } else {\n        parseStruct(scope);\n      }\n    } else append(goType(scope));\n  }\n\n  function parseStruct(scope, omitempty) {\n    append(\"struct {\\n\");\n    ++tabs;\n    const keys = Object.keys(scope);\n    for (const i in keys) {\n      const keyname = keys[i];\n      indent(tabs);\n      append(format(keyname) + \" \");\n      parseScope(scope[keyname]);\n\n      append(' `json:\"' + keyname);\n      if (omitempty && omitempty[keyname] === true) {\n        append(\",omitempty\");\n      }\n      append('\"`\\n');\n    }\n    indent(--tabs);\n    append(\"}\");\n  }\n\n  function indent(tabs) {\n    for (let i = 0; i < tabs; i++) go += \"\\t\";\n  }\n\n  function append(str) {\n    go += str;\n  }\n\n  // Sanitizes and formats a string to make an appropriate identifier in Go\n  function format(str) {\n    if (!str) return \"\";\n    else if (str.match(/^\\d+$/)) str = \"Num\" + str;\n    else if (str.charAt(0).match(/\\d/)) {\n      const numbers = {\n        \"0\": \"Zero_\",\n        \"1\": \"One_\",\n        \"2\": \"Two_\",\n        \"3\": \"Three_\",\n        \"4\": \"Four_\",\n        \"5\": \"Five_\",\n        \"6\": \"Six_\",\n        \"7\": \"Seven_\",\n        \"8\": \"Eight_\",\n        \"9\": \"Nine_\"\n      };\n      str = numbers[str.charAt(0)] + str.substr(1);\n    }\n    return toProperCase(str).replace(/[^a-z0-9]/gi, \"\") || \"NAMING_FAILED\";\n  }\n\n  // Determines the most appropriate Go type\n  function goType(val) {\n    if (val === null) return \"interface{}\";\n\n    switch (typeof val) {\n      case \"string\":\n        if (/\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(\\+\\d\\d:\\d\\d|Z)/.test(val)) {\n          return \"time.Time\";\n        } else return \"string\";\n      case \"number\":\n        if (val % 1 === 0) {\n          if (val > -2147483648 && val < 2147483647) return \"int\";\n          else return \"int64\";\n        } else return \"float64\";\n      case \"boolean\":\n        return \"bool\";\n      case \"object\":\n        if (Array.isArray(val)) return \"slice\";\n        return \"struct\";\n      default:\n        return \"interface{}\";\n    }\n  }\n\n  // Given two types, returns the more specific of the two\n  function mostSpecificPossibleGoType(typ1, typ2) {\n    if (typ1.substr(0, 5) === \"float\" && typ2.substr(0, 3) === \"int\") {\n      return typ1;\n    } else if (typ1.substr(0, 3) === \"int\" && typ2.substr(0, 5) === \"float\") {\n      return typ1;\n    } else return \"interface{}\";\n  }\n\n  // Proper cases a string according to Go conventions\n  function toProperCase(str) {\n    // https://github.com/golang/lint/blob/39d15d55e9777df34cdffde4f406ab27fd2e60c0/lint.go#L695-L731\n    const commonInitialisms = [\n      \"API\",\n      \"ASCII\",\n      \"CPU\",\n      \"CSS\",\n      \"DNS\",\n      \"EOF\",\n      \"GUID\",\n      \"HTML\",\n      \"HTTP\",\n      \"HTTPS\",\n      \"ID\",\n      \"IP\",\n      \"JSON\",\n      \"LHS\",\n      \"QPS\",\n      \"RAM\",\n      \"RHS\",\n      \"RPC\",\n      \"SLA\",\n      \"SMTP\",\n      \"SSH\",\n      \"TCP\",\n      \"TLS\",\n      \"TTL\",\n      \"UDP\",\n      \"UI\",\n      \"UID\",\n      \"UUID\",\n      \"URI\",\n      \"URL\",\n      \"UTF8\",\n      \"VM\",\n      \"XML\",\n      \"XSRF\",\n      \"XSS\"\n    ];\n\n    return str\n      .replace(/(^|[^a-zA-Z])([a-z]+)/g, function(unused, sep, frag) {\n        if (commonInitialisms.indexOf(frag.toUpperCase()) >= 0) {\n          return sep + frag.toUpperCase();\n        } else return sep + frag[0].toUpperCase() + frag.substr(1).toLowerCase();\n      })\n      .replace(/([A-Z])([a-z]+)/g, function(unused, sep, frag) {\n        if (commonInitialisms.indexOf(sep + frag.toUpperCase()) >= 0) {\n          return (sep + frag).toUpperCase();\n        } else return sep + frag;\n      });\n  }\n}\n\nmodule.exports = jsonToGo;\n\n/***/ }),\n\n/***/ \"UzN2\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return JsonToGo; });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"nKUr\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_ConversionPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"sN8P\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"q1tI\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var json_to_go__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"6G68\");\n/* harmony import */ var json_to_go__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(json_to_go__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var gofmt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"FfZQ\");\n/* harmony import */ var gofmt_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(gofmt_js__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nfunction JsonToGo() {\n  var transformer = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useCallback\"])(function (_ref) {\n    var value = _ref.value;\n    return gofmt_js__WEBPACK_IMPORTED_MODULE_4___default()(json_to_go__WEBPACK_IMPORTED_MODULE_3___default()(value).go);\n  }, []);\n  return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsx\"])(_components_ConversionPanel__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"], {\n    transformer: transformer,\n    editorTitle: \"JSON\",\n    editorLanguage: \"json\",\n    resultTitle: \"Go\",\n    resultLanguage: \"go\"\n  });\n}\n\n/***/ }),\n\n/***/ \"ppxy\":\n/***/ (function(module, exports) {\n\nfunction webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"ppxy\";\n\n/***/ }),\n\n/***/ \"sC8h\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/json-to-go\",\n      function () {\n        return __webpack_require__(\"UzN2\");\n      }\n    ]);\n  \n\n/***/ })\n\n},[[\"sC8h\",1,2,26,0,3]]]);","inputSourceMap":{"version":3,"sources":["/Users/songxu/Develop/test/transform/node_modules/json-to-go/json-to-go.js","/Users/songxu/Develop/test/transform/node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--5!/Users/songxu/Develop/test/transform/pages/json-to-go.tsx","/Users/songxu/Develop/test/transform/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fjson-to-go&absolutePagePath=private-next-pages%2Fjson-to-go.tsx!"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC;AACzC,SAAS;AACT;AACA,SAAS,sCAAsC;AAC/C,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,mBAAmB,UAAU;AAC7B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA,gBAAgB,EAAE;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK,yBAAyB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA,0B;;;;;;;;ACtOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACU;AACtB;AACL;AACG;AACL;AACd;AACf,oBAAoB,yDAAW;AAC/B;AACA,WAAW,+CAAK,CAAC,iDAAQ;AACzB,GAAG;AACH,sBAAsB,6DAAI,CAAC,2EAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,MAAmC;AAC1D;AACA","file":"x","sourcesContent":["/*\n\tJSON-to-Go\n\tby Matt Holt\n\thttps://github.com/mholt/json-to-go\n\tA simple utility to translate JSON into a Go type definition.\n*/\n\nfunction jsonToGo(json, typename) {\n  let data;\n  let scope;\n  let go = \"\";\n  let tabs = 0;\n\n  try {\n    data = JSON.parse(json.replace(/\\.0/g, \".1\")); // hack that forces floats to stay as floats\n    scope = data;\n  } catch (e) {\n    return {\n      go: \"\",\n      error: e.message\n    };\n  }\n\n  typename = format(typename || \"AutoGenerated\");\n  append(\"type \" + typename + \" \");\n\n  parseScope(scope);\n\n  return { go: go };\n\n  function parseScope(scope) {\n    let keyname;\n    if (typeof scope === \"object\" && scope !== null) {\n      if (Array.isArray(scope)) {\n        let i;\n        let sliceType,\n          scopeLength = scope.length;\n\n        for (i = 0; i < scopeLength; i++) {\n          const thisType = goType(scope[i]);\n          if (!sliceType) sliceType = thisType;\n          else if (sliceType !== thisType) {\n            sliceType = mostSpecificPossibleGoType(thisType, sliceType);\n            if (sliceType === \"interface{}\") break;\n          }\n        }\n\n        append(\"[]\");\n        if (sliceType === \"struct\") {\n          let k;\n          let keys;\n          const allFields = {};\n\n          // for each field counts how many times appears\n          for (i = 0; i < scopeLength; i++) {\n            keys = Object.keys(scope[i]);\n            for (k in keys) {\n              keyname = keys[k];\n              if (!(keyname in allFields)) {\n                allFields[keyname] = {\n                  value: scope[i][keyname],\n                  count: 0\n                };\n              }\n\n              allFields[keyname].count++;\n            }\n          }\n\n          // create a common struct with all fields found in the current array\n          // omitempty dict indicates if a field is optional\n          keys = Object.keys(allFields);\n          let struct = {},\n            omitempty = {};\n          for (k in keys) {\n            keyname = keys[k];\n            let elem = allFields[keyname];\n\n            struct[keyname] = elem.value;\n            omitempty[keyname] = elem.count !== scopeLength;\n          }\n\n          parseStruct(struct, omitempty); // finally parse the struct !!\n        } else if (sliceType === \"slice\") {\n          parseScope(scope[0]);\n        } else append(sliceType || \"interface{}\");\n      } else {\n        parseStruct(scope);\n      }\n    } else append(goType(scope));\n  }\n\n  function parseStruct(scope, omitempty) {\n    append(\"struct {\\n\");\n    ++tabs;\n    const keys = Object.keys(scope);\n    for (const i in keys) {\n      const keyname = keys[i];\n      indent(tabs);\n      append(format(keyname) + \" \");\n      parseScope(scope[keyname]);\n\n      append(' `json:\"' + keyname);\n      if (omitempty && omitempty[keyname] === true) {\n        append(\",omitempty\");\n      }\n      append('\"`\\n');\n    }\n    indent(--tabs);\n    append(\"}\");\n  }\n\n  function indent(tabs) {\n    for (let i = 0; i < tabs; i++) go += \"\\t\";\n  }\n\n  function append(str) {\n    go += str;\n  }\n\n  // Sanitizes and formats a string to make an appropriate identifier in Go\n  function format(str) {\n    if (!str) return \"\";\n    else if (str.match(/^\\d+$/)) str = \"Num\" + str;\n    else if (str.charAt(0).match(/\\d/)) {\n      const numbers = {\n        \"0\": \"Zero_\",\n        \"1\": \"One_\",\n        \"2\": \"Two_\",\n        \"3\": \"Three_\",\n        \"4\": \"Four_\",\n        \"5\": \"Five_\",\n        \"6\": \"Six_\",\n        \"7\": \"Seven_\",\n        \"8\": \"Eight_\",\n        \"9\": \"Nine_\"\n      };\n      str = numbers[str.charAt(0)] + str.substr(1);\n    }\n    return toProperCase(str).replace(/[^a-z0-9]/gi, \"\") || \"NAMING_FAILED\";\n  }\n\n  // Determines the most appropriate Go type\n  function goType(val) {\n    if (val === null) return \"interface{}\";\n\n    switch (typeof val) {\n      case \"string\":\n        if (/\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(\\+\\d\\d:\\d\\d|Z)/.test(val)) {\n          return \"time.Time\";\n        } else return \"string\";\n      case \"number\":\n        if (val % 1 === 0) {\n          if (val > -2147483648 && val < 2147483647) return \"int\";\n          else return \"int64\";\n        } else return \"float64\";\n      case \"boolean\":\n        return \"bool\";\n      case \"object\":\n        if (Array.isArray(val)) return \"slice\";\n        return \"struct\";\n      default:\n        return \"interface{}\";\n    }\n  }\n\n  // Given two types, returns the more specific of the two\n  function mostSpecificPossibleGoType(typ1, typ2) {\n    if (typ1.substr(0, 5) === \"float\" && typ2.substr(0, 3) === \"int\") {\n      return typ1;\n    } else if (typ1.substr(0, 3) === \"int\" && typ2.substr(0, 5) === \"float\") {\n      return typ1;\n    } else return \"interface{}\";\n  }\n\n  // Proper cases a string according to Go conventions\n  function toProperCase(str) {\n    // https://github.com/golang/lint/blob/39d15d55e9777df34cdffde4f406ab27fd2e60c0/lint.go#L695-L731\n    const commonInitialisms = [\n      \"API\",\n      \"ASCII\",\n      \"CPU\",\n      \"CSS\",\n      \"DNS\",\n      \"EOF\",\n      \"GUID\",\n      \"HTML\",\n      \"HTTP\",\n      \"HTTPS\",\n      \"ID\",\n      \"IP\",\n      \"JSON\",\n      \"LHS\",\n      \"QPS\",\n      \"RAM\",\n      \"RHS\",\n      \"RPC\",\n      \"SLA\",\n      \"SMTP\",\n      \"SSH\",\n      \"TCP\",\n      \"TLS\",\n      \"TTL\",\n      \"UDP\",\n      \"UI\",\n      \"UID\",\n      \"UUID\",\n      \"URI\",\n      \"URL\",\n      \"UTF8\",\n      \"VM\",\n      \"XML\",\n      \"XSRF\",\n      \"XSS\"\n    ];\n\n    return str\n      .replace(/(^|[^a-zA-Z])([a-z]+)/g, function(unused, sep, frag) {\n        if (commonInitialisms.indexOf(frag.toUpperCase()) >= 0) {\n          return sep + frag.toUpperCase();\n        } else return sep + frag[0].toUpperCase() + frag.substr(1).toLowerCase();\n      })\n      .replace(/([A-Z])([a-z]+)/g, function(unused, sep, frag) {\n        if (commonInitialisms.indexOf(sep + frag.toUpperCase()) >= 0) {\n          return (sep + frag).toUpperCase();\n        } else return sep + frag;\n      });\n  }\n}\n\nmodule.exports = jsonToGo;","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport ConversionPanel from \"@components/ConversionPanel\";\nimport { useCallback } from \"react\";\nimport * as React from \"react\";\nimport jsonToGo from \"json-to-go\";\nimport gofmt from \"gofmt.js\";\nexport default function JsonToGo() {\n  var transformer = useCallback(function (_ref) {\n    var value = _ref.value;\n    return gofmt(jsonToGo(value).go);\n  }, []);\n  return /*#__PURE__*/_jsx(ConversionPanel, {\n    transformer: transformer,\n    editorTitle: \"JSON\",\n    editorLanguage: \"json\",\n    resultTitle: \"Go\",\n    resultLanguage: \"go\"\n  });\n}","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/json-to-go\",\n      function () {\n        return require(\"private-next-pages/json-to-go.tsx\");\n      }\n    ]);\n  "]}}