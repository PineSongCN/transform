{"code":"(\"object\"!==typeof self?self:this.webpackJsonp_N_E=\"object\"!==typeof self?self:this.webpackJsonp_N_E||[]).push([[15],{\"4abu\":function(t,e,n){\"use strict\";const r=\":A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",i=\"[\"+r+\"][:A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]*\",s=new RegExp(\"^\"+i+\"$\");e.isExist=function(t){return\"undefined\"!==typeof t},e.isEmptyObject=function(t){return 0===Object.keys(t).length},e.merge=function(t,e,n){if(e){const r=Object.keys(e),i=r.length;for(let s=0;s<i;s++)t[r[s]]=\"strict\"===n?[e[r[s]]]:e[r[s]]}},e.getValue=function(t){return e.isExist(t)?t:\"\"},e.buildOptions=function(t,e,n){var r={};if(!t)return e;for(let i=0;i<n.length;i++)void 0!==t[n[i]]?r[n[i]]=t[n[i]]:r[n[i]]=e[n[i]];return r},e.isTagNameInArrayMode=function(t,e,n){return!1!==e&&(e instanceof RegExp?e.test(t):\"function\"===typeof e?!!e(t,n):\"strict\"===e)},e.isName=function(t){const e=s.exec(t);return!(null===e||\"undefined\"===typeof e)},e.getAllMatches=function(t,e){const n=[];let r=e.exec(t);for(;r;){const i=[],s=r.length;for(let t=0;t<s;t++)i.push(r[t]);n.push(i),r=e.exec(t)}return n},e.nameRegexp=i},E1E9:function(t,e,n){\"use strict\";const r=n(\"4abu\"),i=n(\"4abu\").buildOptions,s=n(\"Y81X\");\"<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)\".replace(/NAME/g,r.nameRegexp);!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const a={attributeNamePrefix:\"@_\",attrNodeName:!1,textNodeName:\"#text\",ignoreAttributes:!0,ignoreNameSpace:!1,allowBooleanAttributes:!1,parseNodeValue:!0,parseAttributeValue:!1,arrayMode:!1,trimValues:!0,cdataTagName:!1,cdataPositionChar:\"\\\\c\",tagValueProcessor:function(t,e){return t},attrValueProcessor:function(t,e){return t},stopNodes:[]};e.defaultOptions=a;const o=[\"attributeNamePrefix\",\"attrNodeName\",\"textNodeName\",\"ignoreAttributes\",\"ignoreNameSpace\",\"allowBooleanAttributes\",\"parseNodeValue\",\"parseAttributeValue\",\"arrayMode\",\"trimValues\",\"cdataTagName\",\"cdataPositionChar\",\"tagValueProcessor\",\"attrValueProcessor\",\"parseTrueNumberOnly\",\"stopNodes\"];function l(t,e,n){return e&&(n.trimValues&&(e=e.trim()),e=c(e=n.tagValueProcessor(e,t),n.parseNodeValue,n.parseTrueNumberOnly)),e}function u(t,e){if(e.ignoreNameSpace){const e=t.split(\":\"),n=\"/\"===t.charAt(0)?\"/\":\"\";if(\"xmlns\"===e[0])return\"\";2===e.length&&(t=n+e[1])}return t}function c(t,e,n){if(e&&\"string\"===typeof t){let e;return\"\"===t.trim()||isNaN(t)?e=\"true\"===t||\"false\"!==t&&t:(-1!==t.indexOf(\"0x\")?e=Number.parseInt(t,16):-1!==t.indexOf(\".\")?(e=Number.parseFloat(t),t=t.replace(/\\.?0+$/,\"\")):e=Number.parseInt(t,10),n&&(e=String(e)===t?e:t)),e}return r.isExist(t)?t:\"\"}e.props=o;const d=new RegExp(\"([^\\\\s=]+)\\\\s*(=\\\\s*(['\\\"])(.*?)\\\\3)?\",\"g\");function f(t,e){if(!e.ignoreAttributes&&\"string\"===typeof t){t=t.replace(/\\r?\\n/g,\" \");const n=r.getAllMatches(t,d),i=n.length,s={};for(let t=0;t<i;t++){const r=u(n[t][1],e);r.length&&(void 0!==n[t][4]?(e.trimValues&&(n[t][4]=n[t][4].trim()),n[t][4]=e.attrValueProcessor(n[t][4],r),s[e.attributeNamePrefix+r]=c(n[t][4],e.parseAttributeValue,e.parseTrueNumberOnly)):e.allowBooleanAttributes&&(s[e.attributeNamePrefix+r]=!0))}if(!Object.keys(s).length)return;if(e.attrNodeName){const t={};return t[e.attrNodeName]=s,t}return s}}function h(t,e){let n,r=\"\";for(let i=e;i<t.length;i++){let e=t[i];if(n)e===n&&(n=\"\");else if('\"'===e||\"'\"===e)n=e;else{if(\">\"===e)return{data:r,index:i};\"\\t\"===e&&(e=\" \")}r+=e}}function g(t,e,n,r){const i=t.indexOf(e,n);if(-1===i)throw new Error(r);return i+e.length-1}e.getTraversalObj=function(t,e){t=t.replace(/\\r\\n?/g,\"\\n\"),e=i(e,a,o);const n=new s(\"!xml\");let u=n,c=\"\";for(let i=0;i<t.length;i++){if(\"<\"===t[i])if(\"/\"===t[i+1]){const n=g(t,\">\",i,\"Closing Tag is not closed.\");let s=t.substring(i+2,n).trim();if(e.ignoreNameSpace){const t=s.indexOf(\":\");-1!==t&&(s=s.substr(t+1))}u&&(u.val?u.val=r.getValue(u.val)+\"\"+l(s,c,e):u.val=l(s,c,e)),e.stopNodes.length&&e.stopNodes.includes(u.tagname)&&(u.child=[],void 0==u.attrsMap&&(u.attrsMap={}),u.val=t.substr(u.startIndex+1,i-u.startIndex-1)),u=u.parent,c=\"\",i=n}else if(\"?\"===t[i+1])i=g(t,\"?>\",i,\"Pi Tag is not closed.\");else if(\"!--\"===t.substr(i+1,3))i=g(t,\"--\\x3e\",i,\"Comment is not closed.\");else if(\"!D\"===t.substr(i+1,2)){const e=g(t,\">\",i,\"DOCTYPE is not closed.\");i=t.substring(i,e).indexOf(\"[\")>=0?t.indexOf(\"]>\",i)+1:e}else if(\"![\"===t.substr(i+1,2)){const n=g(t,\"]]>\",i,\"CDATA is not closed.\")-2,a=t.substring(i+9,n);if(c&&(u.val=r.getValue(u.val)+\"\"+l(u.tagname,c,e),c=\"\"),e.cdataTagName){const t=new s(e.cdataTagName,u,a);u.addChild(t),u.val=r.getValue(u.val)+e.cdataPositionChar,a&&(t.val=a)}else u.val=(u.val||\"\")+(a||\"\");i=n+2}else{const n=h(t,i+1);let a=n.data;const o=n.index,d=a.indexOf(\" \");let g=a,p=!0;if(-1!==d&&(g=a.substr(0,d).replace(/\\s\\s*$/,\"\"),a=a.substr(d+1)),e.ignoreNameSpace){const t=g.indexOf(\":\");-1!==t&&(g=g.substr(t+1),p=g!==n.data.substr(t+1))}if(u&&c&&\"!xml\"!==u.tagname&&(u.val=r.getValue(u.val)+\"\"+l(u.tagname,c,e)),a.length>0&&a.lastIndexOf(\"/\")===a.length-1){\"/\"===g[g.length-1]?(g=g.substr(0,g.length-1),a=g):a=a.substr(0,a.length-1);const t=new s(g,u,\"\");g!==a&&(t.attrsMap=f(a,e)),u.addChild(t)}else{const t=new s(g,u);e.stopNodes.length&&e.stopNodes.includes(t.tagname)&&(t.startIndex=o),g!==a&&p&&(t.attrsMap=f(a,e)),u.addChild(t),u=t}c=\"\",i=o}else c+=t[i]}return n}},Y81X:function(t,e,n){\"use strict\";t.exports=function(t,e,n){this.tagname=t,this.parent=e,this.child={},this.attrsMap={},this.val=n,this.addChild=function(t){Array.isArray(this.child[t.tagname])?this.child[t.tagname].push(t):this.child[t.tagname]=[t]}}},cIfH:function(t,e,n){\"use strict\";const r=n(\"4abu\"),i={allowBooleanAttributes:!1},s=[\"allowBooleanAttributes\"];function a(t,e){for(var n=e;e<t.length;e++)if(\"?\"!=t[e]&&\" \"!=t[e]);else{var r=t.substr(n,e-n);if(e>5&&\"xml\"===r)return f(\"InvalidXml\",\"XML declaration allowed only at the start of the document.\",g(t,e));if(\"?\"==t[e]&&\">\"==t[e+1]){e++;break}}return e}function o(t,e){if(t.length>e+5&&\"-\"===t[e+1]&&\"-\"===t[e+2]){for(e+=3;e<t.length;e++)if(\"-\"===t[e]&&\"-\"===t[e+1]&&\">\"===t[e+2]){e+=2;break}}else if(t.length>e+8&&\"D\"===t[e+1]&&\"O\"===t[e+2]&&\"C\"===t[e+3]&&\"T\"===t[e+4]&&\"Y\"===t[e+5]&&\"P\"===t[e+6]&&\"E\"===t[e+7]){let n=1;for(e+=8;e<t.length;e++)if(\"<\"===t[e])n++;else if(\">\"===t[e]&&(n--,0===n))break}else if(t.length>e+9&&\"[\"===t[e+1]&&\"C\"===t[e+2]&&\"D\"===t[e+3]&&\"A\"===t[e+4]&&\"T\"===t[e+5]&&\"A\"===t[e+6]&&\"[\"===t[e+7])for(e+=8;e<t.length;e++)if(\"]\"===t[e]&&\"]\"===t[e+1]&&\">\"===t[e+2]){e+=2;break}return e}e.validate=function(t,e){e=r.buildOptions(e,i,s);const n=[];let u=!1,h=!1;\"\\ufeff\"===t[0]&&(t=t.substr(1));for(let i=0;i<t.length;i++)if(\"<\"===t[i]&&\"?\"===t[i+1]){if(i+=2,i=a(t,i),i.err)return i}else{if(\"<\"!==t[i]){if(\" \"===t[i]||\"\\t\"===t[i]||\"\\n\"===t[i]||\"\\r\"===t[i])continue;return f(\"InvalidChar\",\"char '\"+t[i]+\"' is not expected.\",g(t,i))}if(i++,\"!\"===t[i]){i=o(t,i);continue}{let s=!1;\"/\"===t[i]&&(s=!0,i++);let b=\"\";for(;i<t.length&&\">\"!==t[i]&&\" \"!==t[i]&&\"\\t\"!==t[i]&&\"\\n\"!==t[i]&&\"\\r\"!==t[i];i++)b+=t[i];if(b=b.trim(),\"/\"===b[b.length-1]&&(b=b.substring(0,b.length-1),i--),p=b,!r.isName(p)){let e;return e=0===b.trim().length?\"There is an unnecessary space between tag name and backward slash '</ ..'.\":\"Tag '\"+b+\"' is an invalid name.\",f(\"InvalidTag\",e,g(t,i))}const m=l(t,i);if(!1===m)return f(\"InvalidAttr\",\"Attributes for '\"+b+\"' have open quote.\",g(t,i));let N=m.value;if(i=m.index,\"/\"===N[N.length-1]){N=N.substring(0,N.length-1);const n=c(N,e);if(!0!==n)return f(n.err.code,n.err.msg,g(t,i-N.length+n.err.line));u=!0}else if(s){if(!m.tagClosed)return f(\"InvalidTag\",\"Closing tag '\"+b+\"' doesn't have proper closing.\",g(t,i));if(N.trim().length>0)return f(\"InvalidTag\",\"Closing tag '\"+b+\"' can't have attributes or invalid starting.\",g(t,i));{const e=n.pop();if(b!==e)return f(\"InvalidTag\",\"Closing tag '\"+e+\"' is expected inplace of '\"+b+\"'.\",g(t,i));0==n.length&&(h=!0)}}else{const r=c(N,e);if(!0!==r)return f(r.err.code,r.err.msg,g(t,i-N.length+r.err.line));if(!0===h)return f(\"InvalidXml\",\"Multiple possible root nodes found.\",g(t,i));n.push(b),u=!0}for(i++;i<t.length;i++)if(\"<\"===t[i]){if(\"!\"===t[i+1]){i++,i=o(t,i);continue}if(\"?\"!==t[i+1])break;if(i=a(t,++i),i.err)return i}else if(\"&\"===t[i]){const e=d(t,i);if(-1==e)return f(\"InvalidChar\",\"char '&' is not expected.\",g(t,i));i=e}\"<\"===t[i]&&i--}}var p;return u?!(n.length>0)||f(\"InvalidXml\",\"Invalid '\"+JSON.stringify(n,null,4).replace(/\\r?\\n/g,\"\")+\"' found.\",1):f(\"InvalidXml\",\"Start tag expected.\",1)};function l(t,e){let n=\"\",r=\"\",i=!1;for(;e<t.length;e++){if('\"'===t[e]||\"'\"===t[e])if(\"\"===r)r=t[e];else{if(r!==t[e])continue;r=\"\"}else if(\">\"===t[e]&&\"\"===r){i=!0;break}n+=t[e]}return\"\"===r&&{value:n,index:e,tagClosed:i}}const u=new RegExp(\"(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*(['\\\"])(([\\\\s\\\\S])*?)\\\\5)?\",\"g\");function c(t,e){const n=r.getAllMatches(t,u),i={};for(let r=0;r<n.length;r++){if(0===n[r][1].length)return f(\"InvalidAttr\",\"Attribute '\"+n[r][2]+\"' has no space in starting.\",p(t,n[r][0]));if(void 0===n[r][3]&&!e.allowBooleanAttributes)return f(\"InvalidAttr\",\"boolean attribute '\"+n[r][2]+\"' is not allowed.\",p(t,n[r][0]));const s=n[r][2];if(!h(s))return f(\"InvalidAttr\",\"Attribute '\"+s+\"' is an invalid name.\",p(t,n[r][0]));if(i.hasOwnProperty(s))return f(\"InvalidAttr\",\"Attribute '\"+s+\"' is repeated.\",p(t,n[r][0]));i[s]=1}return!0}function d(t,e){if(\";\"===t[++e])return-1;if(\"#\"===t[e])return function(t,e){let n=/\\d/;for(\"x\"===t[e]&&(e++,n=/[\\da-fA-F]/);e<t.length;e++){if(\";\"===t[e])return e;if(!t[e].match(n))break}return-1}(t,++e);let n=0;for(;e<t.length;e++,n++)if(!(t[e].match(/\\w/)&&n<20)){if(\";\"===t[e])break;return-1}return e}function f(t,e,n){return{err:{code:t,msg:e,line:n}}}function h(t){return r.isName(t)}function g(t,e){return t.substring(0,e).split(/\\r?\\n/).length}function p(t,e){return t.indexOf(e)+e.length}},elGS:function(t,e,n){\"use strict\";const r=n(\"j/LU\"),i=n(\"E1E9\"),s=n(\"E1E9\"),a=n(\"4abu\").buildOptions,o=n(\"cIfH\");e.parse=function(t,e,n){if(n){!0===n&&(n={});const e=o.validate(t,n);if(!0!==e)throw Error(e.err.msg)}e=a(e,s.defaultOptions,s.props);const l=i.getTraversalObj(t,e);return r.convertToJson(l,e)},e.convertTonimn=n(\"vtNb\").convert2nimn,e.getTraversalObj=i.getTraversalObj,e.convertToJson=r.convertToJson,e.convertToJsonString=n(\"t6xR\").convertToJsonString,e.validate=o.validate,e.j2xParser=n(\"p1mf\"),e.parseToNimn=function(t,n,r){return e.convertTonimn(e.getTraversalObj(t,r),n,r)}},\"j/LU\":function(t,e,n){\"use strict\";const r=n(\"4abu\"),i=function(t,e,n){const s={};if((!t.child||r.isEmptyObject(t.child))&&(!t.attrsMap||r.isEmptyObject(t.attrsMap)))return r.isExist(t.val)?t.val:\"\";if(r.isExist(t.val)&&(\"string\"!==typeof t.val||\"\"!==t.val&&t.val!==e.cdataPositionChar)){const i=r.isTagNameInArrayMode(t.tagname,e.arrayMode,n);s[e.textNodeName]=i?[t.val]:t.val}r.merge(s,t.attrsMap,e.arrayMode);const a=Object.keys(t.child);for(let o=0;o<a.length;o++){const l=a[o];if(t.child[l]&&t.child[l].length>1){s[l]=[];for(let n in t.child[l])t.child[l].hasOwnProperty(n)&&s[l].push(i(t.child[l][n],e,l))}else{const a=i(t.child[l][0],e,l),o=!0===e.arrayMode&&\"object\"===typeof a||r.isTagNameInArrayMode(l,e.arrayMode,n);s[l]=o?[a]:a}}return s};e.convertToJson=i},p1mf:function(t,e,n){\"use strict\";const r=n(\"4abu\").buildOptions,i={attributeNamePrefix:\"@_\",attrNodeName:!1,textNodeName:\"#text\",ignoreAttributes:!0,cdataTagName:!1,cdataPositionChar:\"\\\\c\",format:!1,indentBy:\"  \",supressEmptyNode:!1,tagValueProcessor:function(t){return t},attrValueProcessor:function(t){return t}},s=[\"attributeNamePrefix\",\"attrNodeName\",\"textNodeName\",\"ignoreAttributes\",\"cdataTagName\",\"cdataPositionChar\",\"format\",\"indentBy\",\"supressEmptyNode\",\"tagValueProcessor\",\"attrValueProcessor\"];function a(t){this.options=r(t,i,s),this.options.ignoreAttributes||this.options.attrNodeName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=g),this.options.cdataTagName?this.isCDATA=p:this.isCDATA=function(){return!1},this.replaceCDATAstr=o,this.replaceCDATAarr=l,this.options.format?(this.indentate=h,this.tagEndChar=\">\\n\",this.newLine=\"\\n\"):(this.indentate=function(){return\"\"},this.tagEndChar=\">\",this.newLine=\"\"),this.options.supressEmptyNode?(this.buildTextNode=f,this.buildObjNode=c):(this.buildTextNode=d,this.buildObjNode=u),this.buildTextValNode=d,this.buildObjectNode=u}function o(t,e){return t=this.options.tagValueProcessor(\"\"+t),\"\"===this.options.cdataPositionChar||\"\"===t?t+\"<![CDATA[\"+e+\"]]\"+this.tagEndChar:t.replace(this.options.cdataPositionChar,\"<![CDATA[\"+e+\"]]\"+this.tagEndChar)}function l(t,e){if(t=this.options.tagValueProcessor(\"\"+t),\"\"===this.options.cdataPositionChar||\"\"===t)return t+\"<![CDATA[\"+e.join(\"]]><![CDATA[\")+\"]]\"+this.tagEndChar;for(let n in e)t=t.replace(this.options.cdataPositionChar,\"<![CDATA[\"+e[n]+\"]]>\");return t+this.newLine}function u(t,e,n,r){return n&&!t.includes(\"<\")?this.indentate(r)+\"<\"+e+n+\">\"+t+\"</\"+e+this.tagEndChar:this.indentate(r)+\"<\"+e+n+this.tagEndChar+t+this.indentate(r)+\"</\"+e+this.tagEndChar}function c(t,e,n,r){return\"\"!==t?this.buildObjectNode(t,e,n,r):this.indentate(r)+\"<\"+e+n+\"/\"+this.tagEndChar}function d(t,e,n,r){return this.indentate(r)+\"<\"+e+n+\">\"+this.options.tagValueProcessor(t)+\"</\"+e+this.tagEndChar}function f(t,e,n,r){return\"\"!==t?this.buildTextValNode(t,e,n,r):this.indentate(r)+\"<\"+e+n+\"/\"+this.tagEndChar}function h(t){return this.options.indentBy.repeat(t)}function g(t){return!!t.startsWith(this.options.attributeNamePrefix)&&t.substr(this.attrPrefixLen)}function p(t){return t===this.options.cdataTagName}a.prototype.parse=function(t){return this.j2x(t,0).val},a.prototype.j2x=function(t,e){let n=\"\",r=\"\";const i=Object.keys(t),s=i.length;for(let a=0;a<s;a++){const s=i[a];if(\"undefined\"===typeof t[s]);else if(null===t[s])r+=this.indentate(e)+\"<\"+s+\"/\"+this.tagEndChar;else if(t[s]instanceof Date)r+=this.buildTextNode(t[s],s,\"\",e);else if(\"object\"!==typeof t[s]){const i=this.isAttribute(s);i?n+=\" \"+i+'=\"'+this.options.attrValueProcessor(\"\"+t[s])+'\"':this.isCDATA(s)?t[this.options.textNodeName]?r+=this.replaceCDATAstr(t[this.options.textNodeName],t[s]):r+=this.replaceCDATAstr(\"\",t[s]):s===this.options.textNodeName?t[this.options.cdataTagName]||(r+=this.options.tagValueProcessor(\"\"+t[s])):r+=this.buildTextNode(t[s],s,\"\",e)}else if(Array.isArray(t[s]))if(this.isCDATA(s))r+=this.indentate(e),t[this.options.textNodeName]?r+=this.replaceCDATAarr(t[this.options.textNodeName],t[s]):r+=this.replaceCDATAarr(\"\",t[s]);else{const n=t[s].length;for(let i=0;i<n;i++){const n=t[s][i];if(\"undefined\"===typeof n);else if(null===n)r+=this.indentate(e)+\"<\"+s+\"/\"+this.tagEndChar;else if(\"object\"===typeof n){const t=this.j2x(n,e+1);r+=this.buildObjNode(t.val,s,t.attrStr,e)}else r+=this.buildTextNode(n,s,\"\",e)}}else if(this.options.attrNodeName&&s===this.options.attrNodeName){const e=Object.keys(t[s]),r=e.length;for(let i=0;i<r;i++)n+=\" \"+e[i]+'=\"'+this.options.attrValueProcessor(\"\"+t[s][e[i]])+'\"'}else{const n=this.j2x(t[s],e+1);r+=this.buildObjNode(n.val,s,n.attrStr,e)}}return{attrStr:n,val:r}},t.exports=a},t6xR:function(t,e,n){\"use strict\";const r=n(\"4abu\"),i=n(\"4abu\").buildOptions,s=n(\"E1E9\"),a=function(t,e,n){let i=\"{\";const s=Object.keys(t.child);for(let r=0;r<s.length;r++){var o=s[r];if(t.child[o]&&t.child[o].length>1){for(var l in i+='\"'+o+'\" : [ ',t.child[o])i+=a(t.child[o][l],e)+\" , \";i=i.substr(0,i.length-1)+\" ] \"}else i+='\"'+o+'\" : '+a(t.child[o][0],e)+\" ,\"}return r.merge(i,t.attrsMap),r.isEmptyObject(i)?r.isExist(t.val)?t.val:\"\":(r.isExist(t.val)&&(\"string\"!==typeof t.val||\"\"!==t.val&&t.val!==e.cdataPositionChar)&&(i+='\"'+e.textNodeName+'\" : '+(!0!==(u=t.val)&&!1!==u&&isNaN(u)?'\"'+u+'\"':u)),\",\"===i[i.length-1]&&(i=i.substr(0,i.length-2)),i+\"}\");var u};e.convertToJsonString=function(t,e){return(e=i(e,s.defaultOptions,s.props)).indentBy=e.indentBy||\"\",a(t,e,0)}},ucdA:function(t,e,n){\"use strict\";const r=n(\"elGS\"),i=t=>{if(void 0===t||null===t)return!1;if(0===(t=t.toString().trim()).length)return!1;if(!0!==r.validate(t))return!1;let e;try{e=r.parse(t)}catch(n){return!1}return!!e&&\"svg\"in e};t.exports=i,t.exports.default=i},vtNb:function(t,e,n){\"use strict\";const r=function(t){return String.fromCharCode(t)},i={nilChar:r(176),missingChar:r(201),nilPremitive:r(175),missingPremitive:r(200),emptyChar:r(178),emptyValue:r(177),boundryChar:r(179),objStart:r(198),arrStart:r(204),arrayEnd:r(185)},s=[i.nilChar,i.nilPremitive,i.missingChar,i.missingPremitive,i.boundryChar,i.emptyChar,i.emptyValue,i.arrayEnd,i.objStart,i.arrStart],a=function(t,e,n){if(\"string\"===typeof e)return t&&t[0]&&void 0!==t[0].val?o(t[0].val,e):o(t,e);{const s=void 0===(r=t)?i.missingChar:null===r?i.nilChar:!(r.child&&0===Object.keys(r.child).length&&(!r.attrsMap||0===Object.keys(r.attrsMap).length))||i.emptyChar;if(!0===s){let r=\"\";if(Array.isArray(e)){r+=i.arrStart;const s=e[0],u=t.length;if(\"string\"===typeof s)for(let e=0;e<u;e++){const n=o(t[e].val,s);r=l(r,n)}else for(let e=0;e<u;e++){const i=a(t[e],s,n);r=l(r,i)}r+=i.arrayEnd}else{r+=i.objStart;const s=Object.keys(e);Array.isArray(t)&&(t=t[0]);for(let i in s){const o=s[i];let u;u=!n.ignoreAttributes&&t.attrsMap&&t.attrsMap[o]?a(t.attrsMap[o],e[o],n):o===n.textNodeName?a(t.val,e[o],n):a(t.child[o],e[o],n),r=l(r,u)}}return r}return s}var r},o=function(t){switch(t){case void 0:return i.missingPremitive;case null:return i.nilPremitive;case\"\":return i.emptyValue;default:return t}},l=function(t,e){return u(e[0])||u(t[t.length-1])||(t+=i.boundryChar),t+e},u=function(t){return-1!==s.indexOf(t)};const c=n(\"E1E9\"),d=n(\"4abu\").buildOptions;e.convert2nimn=function(t,e,n){return n=d(n,c.defaultOptions,c.props),a(t,e,n)}}}]);","map":{"version":3,"sources":["static/chunks/427cd0f733fffc831e61cbecc7a9960242333cba.dc99db14713c9922eff4.js"],"names":["self","this","push","4abu","module","exports","__webpack_require__","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","buildOptions","options","defaultOptions","props","newOptions","undefined","isTagNameInArrayMode","tagName","parentTagName","test","isName","string","match","exec","getAllMatches","regex","matches","allmatches","index","E1E9","util","xmlNode","replace","Number","parseInt","window","parseFloat","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","trimValues","cdataTagName","cdataPositionChar","tagValueProcessor","attrValueProcessor","attrName","stopNodes","processTagValue","val","trim","parseValue","parseTrueNumberOnly","resolveNameSpace","tagname","tags","split","prefix","charAt","shouldParse","parsed","isNaN","indexOf","String","attrsRegx","buildAttributesMap","attrStr","attrs","attrCollection","closingIndexForOpeningTag","data","attrBoundary","tagExp","ch","findClosingIndex","xmlData","str","errMsg","closingIndex","Error","getTraversalObj","xmlObj","currentNode","textData","closeIndex","substring","colonIndex","substr","includes","child","attrsMap","startIndex","parent","childNode","addChild","result","separatorIndex","shouldBuildAttributesMap","lastIndexOf","Y81X","Array","isArray","cIfH","readPI","start","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","tagFound","reachedRoot","err","closingTag","msg","readAttributeStr","value","isValid","validateAttributeString","code","line","tagClosed","otg","pop","afterAmp","validateAmpersand","JSON","stringify","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","elGS","nodeToJson","xmlToNodeobj","x2xmlnode","validator","parse","validationOption","traversableObj","convertToJson","convertTonimn","convert2nimn","convertToJsonString","j2xParser","parseToNimn","schema","j/LU","node","jObj","asArray","tag","p1mf","format","indentBy","supressEmptyNode","Parser","isAttribute","attrPrefixLen","isCDATA","replaceCDATAstr","replaceCDATAarr","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","cdata","join","key","level","repeat","name","startsWith","prototype","j2x","Date","attr","arrLen","j","item","Ks","L","t6xR","x2j","_cToJsonStr","ucdA","parser","isSvg","input","toString","jsonObject","_","default","vtNb","char","fromCharCode","chars","nilChar","missingChar","nilPremitive","missingPremitive","emptyChar","emptyValue","boundryChar","objStart","arrStart","arrayEnd","charsArr","_e","e_schema","hasValidData","itemSchema","arr_len","arr_i","r","processValue","isAppChar"],"mappings":"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"},"name":"static/chunks/427cd0f733fffc831e61cbecc7a9960242333cba.dc99db14713c9922eff4.js","input":"(typeof self !== \"object\" ? self : this[\"webpackJsonp_N_E\"] = typeof self !== \"object\" ? self : this[\"webpackJsonp_N_E\"] || []).push([[15],{\n\n/***/ \"4abu\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.buildOptions = function(options, defaultOptions, props) {\n  var newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\n/**\n * Check if a tag name should be treated as array\n *\n * @param tagName the node tagname\n * @param arrayMode the array mode option\n * @param parentTagName the parent tag name\n * @returns {boolean} true if node should be parsed as array\n */\nexports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {\n  if (arrayMode === false) {\n    return false;\n  } else if (arrayMode instanceof RegExp) {\n    return arrayMode.test(tagName);\n  } else if (typeof arrayMode === 'function') {\n    return !!arrayMode(tagName, parentTagName);\n  }\n\n  return arrayMode === \"strict\";\n}\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n\n\n/***/ }),\n\n/***/ \"E1E9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst util = __webpack_require__(\"4abu\");\nconst buildOptions = __webpack_require__(\"4abu\").buildOptions;\nconst xmlNode = __webpack_require__(\"Y81X\");\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.parseTrueNumberOnly\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n\n\n/***/ }),\n\n/***/ \"Y81X\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n};\n\n\n/***/ }),\n\n/***/ \"cIfH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst util = __webpack_require__(\"4abu\");\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n\n\n/***/ }),\n\n/***/ \"elGS\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst nodeToJson = __webpack_require__(\"j/LU\");\nconst xmlToNodeobj = __webpack_require__(\"E1E9\");\nconst x2xmlnode = __webpack_require__(\"E1E9\");\nconst buildOptions = __webpack_require__(\"4abu\").buildOptions;\nconst validator = __webpack_require__(\"cIfH\");\n\nexports.parse = function(xmlData, options, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = __webpack_require__(\"vtNb\").convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = __webpack_require__(\"t6xR\").convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = __webpack_require__(\"p1mf\");\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}\n\n\n/***/ }),\n\n/***/ \"j/LU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst util = __webpack_require__(\"4abu\");\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n\n\n/***/ }),\n\n/***/ \"p1mf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n//parse Empty Node as self closing node\nconst buildOptions = __webpack_require__(\"4abu\").buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  const keys = Object.keys(jObj);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            const result = this.j2x(item, level + 1);\n            val += this.buildObjNode(result.val, key, result.attrStr, level);\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        const result = this.j2x(jObj[key], level + 1);\n        val += this.buildObjNode(result.val, key, result.attrStr, level);\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && !val.includes('<')) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n\n\n/***/ }),\n\n/***/ \"t6xR\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst util = __webpack_require__(\"4abu\");\nconst buildOptions = __webpack_require__(\"4abu\").buildOptions;\nconst x2j = __webpack_require__(\"E1E9\");\n\n//TODO: do it later\nconst convertToJsonString = function(node, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n\n  options.indentBy = options.indentBy || '';\n  return _cToJsonStr(node, options, 0);\n};\n\nconst _cToJsonStr = function(node, options, level) {\n  let jObj = '{';\n\n  //traver through all the children\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj += '\"' + tagname + '\" : [ ';\n      for (var tag in node.child[tagname]) {\n        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';\n      }\n      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last\n    } else {\n      jObj += '\"' + tagname + '\" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';\n    }\n  }\n  util.merge(jObj, node.attrsMap);\n  //add attrsMap as new children\n  if (util.isEmptyObject(jObj)) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj += '\"' + options.textNodeName + '\" : ' + stringval(node.val);\n      }\n    }\n  }\n  //add value\n  if (jObj[jObj.length - 1] === ',') {\n    jObj = jObj.substr(0, jObj.length - 2);\n  }\n  return jObj + '}';\n};\n\nfunction stringval(v) {\n  if (v === true || v === false || !isNaN(v)) {\n    return v;\n  } else {\n    return '\"' + v + '\"';\n  }\n}\n\nfunction indentate(options, level) {\n  return options.indentBy.repeat(level);\n}\n\nexports.convertToJsonString = convertToJsonString;\n\n\n/***/ }),\n\n/***/ \"ucdA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nconst parser = __webpack_require__(\"elGS\");\n\nconst isSvg = input => {\n\tif (input === undefined || input === null) {\n\t\treturn false;\n\t}\n\n\tinput = input.toString().trim();\n\n\tif (input.length === 0) {\n\t\treturn false;\n\t}\n\n\t// Has to be `!==` as it can also return an object with error info.\n\tif (parser.validate(input) !== true) {\n\t\treturn false;\n\t}\n\n\tlet jsonObject;\n\ttry {\n\t\tjsonObject = parser.parse(input);\n\t} catch (_) {\n\t\treturn false;\n\t}\n\n\tif (!jsonObject) {\n\t\treturn false;\n\t}\n\n\tif (!('svg' in jsonObject)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nmodule.exports = isSvg;\n// TODO: Remove this for the next major release\nmodule.exports.default = isSvg;\n\n\n/***/ }),\n\n/***/ \"vtNb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //var itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = __webpack_require__(\"E1E9\");\nconst buildOptions = __webpack_require__(\"4abu\").buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/util.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/xmlNode.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/validator.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/parser.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/node2json.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/json2xml.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/node2json_str.js","/Users/songxu/Develop/test/transform/node_modules/is-svg/index.js","/Users/songxu/Develop/test/transform/node_modules/fast-xml-parser/src/nimndata.js"],"names":[],"mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,mBAAmB,SAAS;AAC5B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;AC1Ga;;AAEb,aAAa,mBAAO,CAAC,MAAQ;AAC7B,qBAAqB,mBAAO,CAAC,MAAQ;AACrC,gBAAgB,mBAAO,CAAC,MAAW;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,OAAO,MAAM;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAA+E;;AAE/E,kDAAkD;AAClD;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,KAAK;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA,mDAAmD;AACnD,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;;;;;;;;ACtVa;;AAEb;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;AChBa;;AAEb,aAAa,mBAAO,CAAC,MAAQ;;AAE7B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,mDAAmD;AACnD,wDAAwD;AACxD,+EAA+E;AAC/E;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;;AAErC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,gDAAgD;;AAEhD;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,4CAA4C;AAC5C,4BAA4B,OAAO;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;AC/Ya;;AAEb,mBAAmB,mBAAO,CAAC,MAAa;AACxC,qBAAqB,mBAAO,CAAC,MAAkB;AAC/C,kBAAkB,mBAAO,CAAC,MAAkB;AAC5C,qBAAqB,mBAAO,CAAC,MAAQ;AACrC,kBAAkB,mBAAO,CAAC,MAAa;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,MAAY;AAC5C;AACA;AACA,8BAA8B,mBAAO,CAAC,MAAiB;AACvD;AACA,oBAAoB,mBAAO,CAAC,MAAY;AACxC;AACA;AACA;;;AAGA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,qDAAqD;AACrD;AACA,sCAAsC;AACtC;AACA,OAAO;AACP,kCAAkC;AAClC;AACA,gCAAgC;AAChC;AACA;;;;;;;;;AClEa;;AAEb,aAAa,mBAAO,CAAC,MAAQ;;AAE7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;ACzCa;AACb;AACA,qBAAqB,mBAAO,CAAC,MAAQ;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;AC3Qa;;AAEb,aAAa,mBAAO,CAAC,MAAQ;AAC7B,qBAAqB,mBAAO,CAAC,MAAQ;AACrC,YAAY,mBAAO,CAAC,MAAkB;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe;;AAEf;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;AC9Da;AACb,eAAe,mBAAO,CAAC,MAAiB;;AAExC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACvCa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA,SAAS;AACT,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,YAAY,mBAAO,CAAC,MAAkB;AACtC,qBAAqB,mBAAO,CAAC,MAAQ;;AAErC;AACA;AACA;AACA;;AAEA","file":"x","sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.buildOptions = function(options, defaultOptions, props) {\n  var newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\n/**\n * Check if a tag name should be treated as array\n *\n * @param tagName the node tagname\n * @param arrayMode the array mode option\n * @param parentTagName the parent tag name\n * @returns {boolean} true if node should be parsed as array\n */\nexports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {\n  if (arrayMode === false) {\n    return false;\n  } else if (arrayMode instanceof RegExp) {\n    return arrayMode.test(tagName);\n  } else if (typeof arrayMode === 'function') {\n    return !!arrayMode(tagName, parentTagName);\n  }\n\n  return arrayMode === \"strict\";\n}\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.parseTrueNumberOnly\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n","'use strict';\n\nmodule.exports = function(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n};\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n","'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, options, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('./nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}\n","'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  const keys = Object.keys(jObj);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            const result = this.j2x(item, level + 1);\n            val += this.buildObjNode(result.val, key, result.attrStr, level);\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        const result = this.j2x(jObj[key], level + 1);\n        val += this.buildObjNode(result.val, key, result.attrStr, level);\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && !val.includes('<')) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst x2j = require('./xmlstr2xmlnode');\n\n//TODO: do it later\nconst convertToJsonString = function(node, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n\n  options.indentBy = options.indentBy || '';\n  return _cToJsonStr(node, options, 0);\n};\n\nconst _cToJsonStr = function(node, options, level) {\n  let jObj = '{';\n\n  //traver through all the children\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj += '\"' + tagname + '\" : [ ';\n      for (var tag in node.child[tagname]) {\n        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';\n      }\n      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last\n    } else {\n      jObj += '\"' + tagname + '\" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';\n    }\n  }\n  util.merge(jObj, node.attrsMap);\n  //add attrsMap as new children\n  if (util.isEmptyObject(jObj)) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj += '\"' + options.textNodeName + '\" : ' + stringval(node.val);\n      }\n    }\n  }\n  //add value\n  if (jObj[jObj.length - 1] === ',') {\n    jObj = jObj.substr(0, jObj.length - 2);\n  }\n  return jObj + '}';\n};\n\nfunction stringval(v) {\n  if (v === true || v === false || !isNaN(v)) {\n    return v;\n  } else {\n    return '\"' + v + '\"';\n  }\n}\n\nfunction indentate(options, level) {\n  return options.indentBy.repeat(level);\n}\n\nexports.convertToJsonString = convertToJsonString;\n","'use strict';\nconst parser = require('fast-xml-parser');\n\nconst isSvg = input => {\n\tif (input === undefined || input === null) {\n\t\treturn false;\n\t}\n\n\tinput = input.toString().trim();\n\n\tif (input.length === 0) {\n\t\treturn false;\n\t}\n\n\t// Has to be `!==` as it can also return an object with error info.\n\tif (parser.validate(input) !== true) {\n\t\treturn false;\n\t}\n\n\tlet jsonObject;\n\ttry {\n\t\tjsonObject = parser.parse(input);\n\t} catch (_) {\n\t\treturn false;\n\t}\n\n\tif (!jsonObject) {\n\t\treturn false;\n\t}\n\n\tif (!('svg' in jsonObject)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nmodule.exports = isSvg;\n// TODO: Remove this for the next major release\nmodule.exports.default = isSvg;\n","'use strict';\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //var itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n"]}}