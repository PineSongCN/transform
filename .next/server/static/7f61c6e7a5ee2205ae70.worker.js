/******/ (function(modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/ var installedModules = {}; // The require function
  /******/
  /******/ /******/ function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/ if (installedModules[moduleId]) {
      /******/ return installedModules[moduleId].exports;
      /******/
    } // Create a new module (and put it into the cache)
    /******/ /******/ var module = (installedModules[moduleId] = {
      /******/ i: moduleId,
      /******/ l: false,
      /******/ exports: {}
      /******/
    }); // Execute the module function
    /******/
    /******/ /******/ var threw = true;
    /******/ try {
      /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      );
      /******/ threw = false;
      /******/
    } finally {
      /******/ if (threw) delete installedModules[moduleId];
      /******/
    } // Flag the module as loaded
    /******/
    /******/ /******/ module.l = true; // Return the exports of the module
    /******/
    /******/ /******/ return module.exports;
    /******/
  } // expose the modules object (__webpack_modules__)
  /******/
  /******/
  /******/ /******/ __webpack_require__.m = modules; // expose the module cache
  /******/
  /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
  /******/
  /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
    /******/ if (!__webpack_require__.o(exports, name)) {
      /******/ Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter
      });
      /******/
    }
    /******/
  }; // define __esModule on exports
  /******/
  /******/ /******/ __webpack_require__.r = function(exports) {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module"
      });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
  /******/
  /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function(
    value,
    mode
  ) {
    /******/ if (mode & 1) value = __webpack_require__(value);
    /******/ if (mode & 8) return value;
    /******/ if (
      mode & 4 &&
      typeof value === "object" &&
      value &&
      value.__esModule
    )
      return value;
    /******/ var ns = Object.create(null);
    /******/ __webpack_require__.r(ns);
    /******/ Object.defineProperty(ns, "default", {
      enumerable: true,
      value: value
    });
    /******/ if (mode & 2 && typeof value != "string")
      for (var key in value)
        __webpack_require__.d(
          ns,
          key,
          function(key) {
            return value[key];
          }.bind(null, key)
        );
    /******/ return ns;
    /******/
  }; // getDefaultExport function for compatibility with non-harmony modules
  /******/
  /******/ /******/ __webpack_require__.n = function(module) {
    /******/ var getter =
      module && module.__esModule
        ? /******/ function getDefault() {
            return module["default"];
          }
        : /******/ function getModuleExports() {
            return module;
          };
    /******/ __webpack_require__.d(getter, "a", getter);
    /******/ return getter;
    /******/
  }; // Object.prototype.hasOwnProperty.call
  /******/
  /******/ /******/ __webpack_require__.o = function(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }; // __webpack_public_path__
  /******/
  /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
  /******/
  /******/
  /******/ /******/ return __webpack_require__(
    (__webpack_require__.s = "Ggmd")
  );
  /******/
})(
  /************************************************************************/
  /******/ {
    /***/ "++DX": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.upperCase = exports.localeUpperCase = void 0;
      /**
       * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
       */
      var SUPPORTED_LOCALE = {
        tr: {
          regexp: /[\u0069]/g,
          map: {
            i: "\u0130"
          }
        },
        az: {
          regexp: /[\u0069]/g,
          map: {
            i: "\u0130"
          }
        },
        lt: {
          regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
          map: {
            i̇: "\u0049",
            j̇: "\u004A",
            į̇: "\u012E",
            i̇̀: "\u00CC",
            i̇́: "\u00CD",
            i̇̃: "\u0128"
          }
        }
      };
      /**
       * Localized upper case.
       */
      function localeUpperCase(str, locale) {
        var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
        if (lang)
          return upperCase(
            str.replace(lang.regexp, function(m) {
              return lang.map[m];
            })
          );
        return upperCase(str);
      }
      exports.localeUpperCase = localeUpperCase;
      /**
       * Upper case as a function.
       */
      function upperCase(str) {
        return str.toUpperCase();
      }
      exports.upperCase = upperCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "++EY": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const utils = __webpack_require__("kOHh");
      const graphql = __webpack_require__("uKhV");
      const SkipRedundantNodesTransform = __webpack_require__("ZF9o");
      const InlineFragmentsTransform = __webpack_require__("HCwE");
      const ApplyFragmentArgumentTransform = __webpack_require__("UtIy");
      const FlattenTransform = __webpack_require__("9PYa");
      const CompilerContext = _interopDefault(__webpack_require__("5iWz"));
      const RelayParser = __webpack_require__("r+Cj");
      const IRPrinter = __webpack_require__("/HjL");
      const Schema = __webpack_require__("IFkQ");

      function optimizeDocuments(schema, documents, options = {}) {
        options = {
          noLocation: true,
          ...options
        };
        // @TODO way for users to define directives they use, otherwise relay will throw an unknown directive error
        // Maybe we can scan the queries and add them dynamically without users having to do some extra stuff
        // transformASTSchema creates a new schema instance instead of mutating the old one
        const adjustedSchema = Schema.create(
          utils.printSchemaWithDirectives(schema, options)
        );
        const documentAsts = graphql.concatAST(documents);
        const relayDocuments = RelayParser.transform(
          adjustedSchema,
          documentAsts.definitions
        );
        const result = [];
        if (options.includeFragments) {
          const fragmentCompilerContext = new CompilerContext(adjustedSchema)
            .addAll(relayDocuments)
            .applyTransforms([
              ApplyFragmentArgumentTransform.transform,
              FlattenTransform.transformWithOptions({
                flattenAbstractTypes: false
              }),
              SkipRedundantNodesTransform.transform
            ]);
          result.push(
            ...fragmentCompilerContext
              .documents()
              .filter(doc => doc.kind === "Fragment")
              .map(doc =>
                graphql.parse(IRPrinter.print(adjustedSchema, doc), options)
              )
          );
        }
        const queryCompilerContext = new CompilerContext(adjustedSchema)
          .addAll(relayDocuments)
          .applyTransforms([
            ApplyFragmentArgumentTransform.transform,
            InlineFragmentsTransform.transform,
            FlattenTransform.transformWithOptions({
              flattenAbstractTypes: false
            }),
            SkipRedundantNodesTransform.transform
          ]);
        result.push(
          ...queryCompilerContext
            .documents()
            .map(doc =>
              graphql.parse(IRPrinter.print(adjustedSchema, doc), options)
            )
        );
        return result;
      }

      exports.optimizeDocuments = optimizeDocuments;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ "+X2/": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isSchema = isSchema;
      exports.assertSchema = assertSchema;
      exports.GraphQLSchema = void 0;

      var _find = _interopRequireDefault(__webpack_require__("Mj15"));

      var _arrayFrom3 = _interopRequireDefault(__webpack_require__("DiUC"));

      var _objectValues5 = _interopRequireDefault(__webpack_require__("YDZp"));

      var _symbols = __webpack_require__("6CEn");

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _toObjMap = _interopRequireDefault(__webpack_require__("UjIq"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _instanceOf = _interopRequireDefault(__webpack_require__("VwI2"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _introspection = __webpack_require__("JIc4");

      var _directives = __webpack_require__("L9+1");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      // eslint-disable-next-line no-redeclare
      function isSchema(schema) {
        return (0, _instanceOf.default)(schema, GraphQLSchema);
      }

      function assertSchema(schema) {
        if (!isSchema(schema)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(schema),
              " to be a GraphQL schema."
            )
          );
        }

        return schema;
      }
      /**
       * Schema Definition
       *
       * A Schema is created by supplying the root types of each type of operation,
       * query and mutation (optional). A schema definition is then supplied to the
       * validator and executor.
       *
       * Example:
       *
       *     const MyAppSchema = new GraphQLSchema({
       *       query: MyAppQueryRootType,
       *       mutation: MyAppMutationRootType,
       *     })
       *
       * Note: When the schema is constructed, by default only the types that are
       * reachable by traversing the root types are included, other types must be
       * explicitly referenced.
       *
       * Example:
       *
       *     const characterInterface = new GraphQLInterfaceType({
       *       name: 'Character',
       *       ...
       *     });
       *
       *     const humanType = new GraphQLObjectType({
       *       name: 'Human',
       *       interfaces: [characterInterface],
       *       ...
       *     });
       *
       *     const droidType = new GraphQLObjectType({
       *       name: 'Droid',
       *       interfaces: [characterInterface],
       *       ...
       *     });
       *
       *     const schema = new GraphQLSchema({
       *       query: new GraphQLObjectType({
       *         name: 'Query',
       *         fields: {
       *           hero: { type: characterInterface, ... },
       *         }
       *       }),
       *       ...
       *       // Since this schema references only the `Character` interface it's
       *       // necessary to explicitly list the types that implement it if
       *       // you want them to be included in the final schema.
       *       types: [humanType, droidType],
       *     })
       *
       * Note: If an array of `directives` are provided to GraphQLSchema, that will be
       * the exact list of directives represented and allowed. If `directives` is not
       * provided then a default set of the specified directives (e.g. @include and
       * @skip) will be used. If you wish to provide *additional* directives to these
       * specified directives, you must explicitly declare them. Example:
       *
       *     const MyAppSchema = new GraphQLSchema({
       *       ...
       *       directives: specifiedDirectives.concat([ myCustomDirective ]),
       *     })
       *
       */

      var GraphQLSchema = /*#__PURE__*/ (function() {
        // Used as a cache for validateSchema().
        function GraphQLSchema(config) {
          var _config$directives;

          // If this schema was built from a source known to be valid, then it may be
          // marked with assumeValid to avoid an additional type system validation.
          this.__validationErrors =
            config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

          (0, _isObjectLike.default)(config) ||
            (0, _devAssert.default)(0, "Must provide configuration object.");
          !config.types ||
            Array.isArray(config.types) ||
            (0, _devAssert.default)(
              0,
              '"types" must be Array if provided but got: '.concat(
                (0, _inspect.default)(config.types),
                "."
              )
            );
          !config.directives ||
            Array.isArray(config.directives) ||
            (0, _devAssert.default)(
              0,
              '"directives" must be Array if provided but got: ' +
                "".concat((0, _inspect.default)(config.directives), ".")
            );
          this.description = config.description;
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          this.extensionASTNodes = config.extensionASTNodes;
          this._queryType = config.query;
          this._mutationType = config.mutation;
          this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

          this._directives =
            (_config$directives = config.directives) !== null &&
            _config$directives !== void 0
              ? _config$directives
              : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
          // the set of "collected" types, so `collectReferencedTypes` ignore them.

          var allReferencedTypes = new Set(config.types);

          if (config.types != null) {
            for (
              var _i2 = 0, _config$types2 = config.types;
              _i2 < _config$types2.length;
              _i2++
            ) {
              var type = _config$types2[_i2];
              // When we ready to process this type, we remove it from "collected" types
              // and then add it together with all dependent types in the correct position.
              allReferencedTypes.delete(type);
              collectReferencedTypes(type, allReferencedTypes);
            }
          }

          if (this._queryType != null) {
            collectReferencedTypes(this._queryType, allReferencedTypes);
          }

          if (this._mutationType != null) {
            collectReferencedTypes(this._mutationType, allReferencedTypes);
          }

          if (this._subscriptionType != null) {
            collectReferencedTypes(this._subscriptionType, allReferencedTypes);
          }

          for (
            var _i4 = 0, _this$_directives2 = this._directives;
            _i4 < _this$_directives2.length;
            _i4++
          ) {
            var directive = _this$_directives2[_i4];

            // Directives are not validated until validateSchema() is called.
            if ((0, _directives.isDirective)(directive)) {
              for (
                var _i6 = 0, _directive$args2 = directive.args;
                _i6 < _directive$args2.length;
                _i6++
              ) {
                var arg = _directive$args2[_i6];
                collectReferencedTypes(arg.type, allReferencedTypes);
              }
            }
          }

          collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

          this._typeMap = Object.create(null);
          this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

          this._implementationsMap = Object.create(null);

          for (
            var _i8 = 0,
              _arrayFrom2 = (0, _arrayFrom3.default)(allReferencedTypes);
            _i8 < _arrayFrom2.length;
            _i8++
          ) {
            var namedType = _arrayFrom2[_i8];

            if (namedType == null) {
              continue;
            }

            var typeName = namedType.name;
            typeName ||
              (0, _devAssert.default)(
                0,
                "One of the provided types for building the Schema is missing a name."
              );

            if (this._typeMap[typeName] !== undefined) {
              throw new Error(
                'Schema must contain uniquely named types but contains multiple types named "'.concat(
                  typeName,
                  '".'
                )
              );
            }

            this._typeMap[typeName] = namedType;

            if ((0, _definition.isInterfaceType)(namedType)) {
              // Store implementations by interface.
              for (
                var _i10 = 0,
                  _namedType$getInterfa2 = namedType.getInterfaces();
                _i10 < _namedType$getInterfa2.length;
                _i10++
              ) {
                var iface = _namedType$getInterfa2[_i10];

                if ((0, _definition.isInterfaceType)(iface)) {
                  var implementations = this._implementationsMap[iface.name];

                  if (implementations === undefined) {
                    implementations = this._implementationsMap[iface.name] = {
                      objects: [],
                      interfaces: []
                    };
                  }

                  implementations.interfaces.push(namedType);
                }
              }
            } else if ((0, _definition.isObjectType)(namedType)) {
              // Store implementations by objects.
              for (
                var _i12 = 0,
                  _namedType$getInterfa4 = namedType.getInterfaces();
                _i12 < _namedType$getInterfa4.length;
                _i12++
              ) {
                var _iface = _namedType$getInterfa4[_i12];

                if ((0, _definition.isInterfaceType)(_iface)) {
                  var _implementations = this._implementationsMap[_iface.name];

                  if (_implementations === undefined) {
                    _implementations = this._implementationsMap[_iface.name] = {
                      objects: [],
                      interfaces: []
                    };
                  }

                  _implementations.objects.push(namedType);
                }
              }
            }
          }
        }

        var _proto = GraphQLSchema.prototype;

        _proto.getQueryType = function getQueryType() {
          return this._queryType;
        };

        _proto.getMutationType = function getMutationType() {
          return this._mutationType;
        };

        _proto.getSubscriptionType = function getSubscriptionType() {
          return this._subscriptionType;
        };

        _proto.getTypeMap = function getTypeMap() {
          return this._typeMap;
        };

        _proto.getType = function getType(name) {
          return this.getTypeMap()[name];
        };

        _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
          return (0, _definition.isUnionType)(abstractType)
            ? abstractType.getTypes()
            : this.getImplementations(abstractType).objects;
        };

        _proto.getImplementations = function getImplementations(interfaceType) {
          var implementations = this._implementationsMap[interfaceType.name];
          return implementations !== null && implementations !== void 0
            ? implementations
            : {
                objects: [],
                interfaces: []
              };
        }; // @deprecated: use isSubType instead - will be removed in v16.

        _proto.isPossibleType = function isPossibleType(
          abstractType,
          possibleType
        ) {
          return this.isSubType(abstractType, possibleType);
        };

        _proto.isSubType = function isSubType(abstractType, maybeSubType) {
          var map = this._subTypeMap[abstractType.name];

          if (map === undefined) {
            map = Object.create(null);

            if ((0, _definition.isUnionType)(abstractType)) {
              for (
                var _i14 = 0, _abstractType$getType2 = abstractType.getTypes();
                _i14 < _abstractType$getType2.length;
                _i14++
              ) {
                var type = _abstractType$getType2[_i14];
                map[type.name] = true;
              }
            } else {
              var implementations = this.getImplementations(abstractType);

              for (
                var _i16 = 0, _implementations$obje2 = implementations.objects;
                _i16 < _implementations$obje2.length;
                _i16++
              ) {
                var _type = _implementations$obje2[_i16];
                map[_type.name] = true;
              }

              for (
                var _i18 = 0,
                  _implementations$inte2 = implementations.interfaces;
                _i18 < _implementations$inte2.length;
                _i18++
              ) {
                var _type2 = _implementations$inte2[_i18];
                map[_type2.name] = true;
              }
            }

            this._subTypeMap[abstractType.name] = map;
          }

          return map[maybeSubType.name] !== undefined;
        };

        _proto.getDirectives = function getDirectives() {
          return this._directives;
        };

        _proto.getDirective = function getDirective(name) {
          return (0, _find.default)(this.getDirectives(), function(directive) {
            return directive.name === name;
          });
        };

        _proto.toConfig = function toConfig() {
          var _this$extensionASTNod;

          return {
            description: this.description,
            query: this.getQueryType(),
            mutation: this.getMutationType(),
            subscription: this.getSubscriptionType(),
            types: (0, _objectValues5.default)(this.getTypeMap()),
            directives: this.getDirectives().slice(),
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes:
              (_this$extensionASTNod = this.extensionASTNodes) !== null &&
              _this$extensionASTNod !== void 0
                ? _this$extensionASTNod
                : [],
            assumeValid: this.__validationErrors !== undefined
          };
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLSchema, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLSchema";
            }
          }
        ]);

        return GraphQLSchema;
      })();

      exports.GraphQLSchema = GraphQLSchema;

      function collectReferencedTypes(type, typeSet) {
        var namedType = (0, _definition.getNamedType)(type);

        if (!typeSet.has(namedType)) {
          typeSet.add(namedType);

          if ((0, _definition.isUnionType)(namedType)) {
            for (
              var _i20 = 0, _namedType$getTypes2 = namedType.getTypes();
              _i20 < _namedType$getTypes2.length;
              _i20++
            ) {
              var memberType = _namedType$getTypes2[_i20];
              collectReferencedTypes(memberType, typeSet);
            }
          } else if (
            (0, _definition.isObjectType)(namedType) ||
            (0, _definition.isInterfaceType)(namedType)
          ) {
            for (
              var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces();
              _i22 < _namedType$getInterfa6.length;
              _i22++
            ) {
              var interfaceType = _namedType$getInterfa6[_i22];
              collectReferencedTypes(interfaceType, typeSet);
            }

            for (
              var _i24 = 0,
                _objectValues2 = (0, _objectValues5.default)(
                  namedType.getFields()
                );
              _i24 < _objectValues2.length;
              _i24++
            ) {
              var field = _objectValues2[_i24];
              collectReferencedTypes(field.type, typeSet);

              for (
                var _i26 = 0, _field$args2 = field.args;
                _i26 < _field$args2.length;
                _i26++
              ) {
                var arg = _field$args2[_i26];
                collectReferencedTypes(arg.type, typeSet);
              }
            }
          } else if ((0, _definition.isInputObjectType)(namedType)) {
            for (
              var _i28 = 0,
                _objectValues4 = (0, _objectValues5.default)(
                  namedType.getFields()
                );
              _i28 < _objectValues4.length;
              _i28++
            ) {
              var _field = _objectValues4[_i28];
              collectReferencedTypes(_field.type, typeSet);
            }
          }
        }

        return typeSet;
      }

      /***/
    },

    /***/ "+cEM": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const changeCaseAll = __webpack_require__("3XYS");
      const path = __webpack_require__("oyvS");

      const APOLLO_CLIENT_3_UNIFIED_PACKAGE = `@apollo/client`;
      const GROUPED_APOLLO_CLIENT_3_IDENTIFIER = "Apollo";
      class ReactApolloVisitor extends visitorPluginCommon.ClientSideBaseVisitor {
        constructor(schema, fragments, rawConfig, documents) {
          super(schema, fragments, rawConfig, {
            componentSuffix: visitorPluginCommon.getConfigValue(
              rawConfig.componentSuffix,
              "Component"
            ),
            withHOC: visitorPluginCommon.getConfigValue(
              rawConfig.withHOC,
              false
            ),
            withComponent: visitorPluginCommon.getConfigValue(
              rawConfig.withComponent,
              false
            ),
            withHooks: visitorPluginCommon.getConfigValue(
              rawConfig.withHooks,
              true
            ),
            withMutationFn: visitorPluginCommon.getConfigValue(
              rawConfig.withMutationFn,
              true
            ),
            withRefetchFn: visitorPluginCommon.getConfigValue(
              rawConfig.withRefetchFn,
              false
            ),
            apolloReactCommonImportFrom: visitorPluginCommon.getConfigValue(
              rawConfig.apolloReactCommonImportFrom,
              rawConfig.reactApolloVersion === 2
                ? "@apollo/react-common"
                : APOLLO_CLIENT_3_UNIFIED_PACKAGE
            ),
            apolloReactComponentsImportFrom: visitorPluginCommon.getConfigValue(
              rawConfig.apolloReactComponentsImportFrom,
              rawConfig.reactApolloVersion === 2
                ? "@apollo/react-components"
                : `${APOLLO_CLIENT_3_UNIFIED_PACKAGE}/react/components`
            ),
            apolloReactHocImportFrom: visitorPluginCommon.getConfigValue(
              rawConfig.apolloReactHocImportFrom,
              rawConfig.reactApolloVersion === 2
                ? "@apollo/react-hoc"
                : `${APOLLO_CLIENT_3_UNIFIED_PACKAGE}/react/hoc`
            ),
            apolloReactHooksImportFrom: visitorPluginCommon.getConfigValue(
              rawConfig.apolloReactHooksImportFrom,
              rawConfig.reactApolloVersion === 2
                ? "@apollo/react-hooks"
                : APOLLO_CLIENT_3_UNIFIED_PACKAGE
            ),
            reactApolloVersion: visitorPluginCommon.getConfigValue(
              rawConfig.reactApolloVersion,
              3
            ),
            withResultType: visitorPluginCommon.getConfigValue(
              rawConfig.withResultType,
              true
            ),
            withMutationOptionsType: visitorPluginCommon.getConfigValue(
              rawConfig.withMutationOptionsType,
              true
            ),
            addDocBlocks: visitorPluginCommon.getConfigValue(
              rawConfig.addDocBlocks,
              true
            ),
            defaultBaseOptions: visitorPluginCommon.getConfigValue(
              rawConfig.defaultBaseOptions,
              {}
            ),
            gqlImport: visitorPluginCommon.getConfigValue(
              rawConfig.gqlImport,
              rawConfig.reactApolloVersion === 2
                ? null
                : `${APOLLO_CLIENT_3_UNIFIED_PACKAGE}#gql`
            )
          });
          this.rawConfig = rawConfig;
          this.imports = new Set();
          this._externalImportPrefix = this.config.importOperationTypesFrom
            ? `${this.config.importOperationTypesFrom}.`
            : "";
          this._documents = documents;
          autoBind(this);
        }
        getImportStatement(isTypeImport) {
          return isTypeImport && this.config.useTypeImports
            ? "import type"
            : "import";
        }
        getReactImport() {
          return `import * as React from 'react';`;
        }
        getApolloReactCommonIdentifier() {
          if (
            this.rawConfig.apolloReactCommonImportFrom ||
            this.config.reactApolloVersion === 2
          ) {
            return `ApolloReactCommon`;
          }
          return GROUPED_APOLLO_CLIENT_3_IDENTIFIER;
        }
        getApolloReactHooksIdentifier() {
          if (
            this.rawConfig.apolloReactHooksImportFrom ||
            this.config.reactApolloVersion === 2
          ) {
            return `ApolloReactHooks`;
          }
          return GROUPED_APOLLO_CLIENT_3_IDENTIFIER;
        }
        usesExternalHooksOnly() {
          const apolloReactCommonIdentifier = this.getApolloReactCommonIdentifier();
          return (
            apolloReactCommonIdentifier ===
              GROUPED_APOLLO_CLIENT_3_IDENTIFIER &&
            this.config.apolloReactHooksImportFrom !==
              APOLLO_CLIENT_3_UNIFIED_PACKAGE &&
            this.config.withHooks &&
            !this.config.withComponent &&
            !this.config.withHOC
          );
        }
        getApolloReactCommonImport(isTypeImport) {
          const apolloReactCommonIdentifier = this.getApolloReactCommonIdentifier();
          return `${this.getImportStatement(
            isTypeImport &&
              (apolloReactCommonIdentifier !==
                GROUPED_APOLLO_CLIENT_3_IDENTIFIER ||
                this.usesExternalHooksOnly())
          )} * as ${apolloReactCommonIdentifier} from '${
            this.config.apolloReactCommonImportFrom
          }';`;
        }
        getApolloReactComponentsImport(isTypeImport) {
          return `${this.getImportStatement(
            isTypeImport
          )} * as ApolloReactComponents from '${
            this.config.apolloReactComponentsImportFrom
          }';`;
        }
        getApolloReactHocImport(isTypeImport) {
          return `${this.getImportStatement(
            isTypeImport
          )} * as ApolloReactHoc from '${
            this.config.apolloReactHocImportFrom
          }';`;
        }
        getApolloReactHooksImport(isTypeImport) {
          return `${this.getImportStatement(
            isTypeImport
          )} * as ${this.getApolloReactHooksIdentifier()} from '${
            this.config.apolloReactHooksImportFrom
          }';`;
        }
        getOmitDeclaration() {
          return visitorPluginCommon.OMIT_TYPE;
        }
        getDefaultOptions() {
          return `const defaultOptions =  ${JSON.stringify(
            this.config.defaultBaseOptions
          )}`;
        }
        getDocumentNodeVariable(node, documentVariableName) {
          var _a, _b;
          return this.config.documentMode ===
            visitorPluginCommon.DocumentMode.external
            ? `Operations.${
                (_b =
                  (_a = node.name) === null || _a === void 0
                    ? void 0
                    : _a.value) !== null && _b !== void 0
                  ? _b
                  : ""
              }`
            : documentVariableName;
        }
        getImports() {
          const baseImports = super.getImports();
          const hasOperations = this._collectedOperations.length > 0;
          if (!hasOperations) {
            return baseImports;
          }
          return [...baseImports, ...Array.from(this.imports)];
        }
        _buildHocProps(operationName, operationType) {
          const typeVariableName =
            this._externalImportPrefix +
            this.convertName(
              operationName +
                changeCaseAll.pascalCase(operationType) +
                this._parsedConfig.operationResultSuffix
            );
          const variablesVarName =
            this._externalImportPrefix +
            this.convertName(
              operationName +
                changeCaseAll.pascalCase(operationType) +
                "Variables"
            );
          const typeArgs = `<${typeVariableName}, ${variablesVarName}>`;
          if (operationType === "mutation") {
            this.imports.add(this.getApolloReactCommonImport(true));
            return `${this.getApolloReactCommonIdentifier()}.MutationFunction${typeArgs}`;
          } else {
            this.imports.add(this.getApolloReactHocImport(true));
            return `ApolloReactHoc.DataValue${typeArgs}`;
          }
        }
        _buildMutationFn(node, operationResultType, operationVariablesTypes) {
          var _a, _b;
          if (node.operation === "mutation") {
            this.imports.add(this.getApolloReactCommonImport(true));
            return `export type ${this.convertName(
              ((_b =
                (_a = node.name) === null || _a === void 0
                  ? void 0
                  : _a.value) !== null && _b !== void 0
                ? _b
                : "") + "MutationFn"
            )} = ${this.getApolloReactCommonIdentifier()}.MutationFunction<${operationResultType}, ${operationVariablesTypes}>;`;
          }
          return null;
        }
        _buildOperationHoc(
          node,
          documentVariableName,
          operationResultType,
          operationVariablesTypes
        ) {
          var _a, _b;
          this.imports.add(this.getApolloReactCommonImport(false));
          this.imports.add(this.getApolloReactHocImport(false));
          const nodeName =
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "";
          const operationName = this.convertName(nodeName, {
            useTypesPrefix: false
          });
          const propsTypeName = this.convertName(nodeName, { suffix: "Props" });
          const defaultDataName =
            node.operation === "mutation" ? "mutate" : "data";
          const propsVar = `export type ${propsTypeName}<TChildProps = {}, TDataName extends string = '${defaultDataName}'> = {
      [key in TDataName]: ${this._buildHocProps(nodeName, node.operation)}
    } & TChildProps;`;
          const hocString = `export function with${operationName}<TProps, TChildProps = {}, TDataName extends string = '${defaultDataName}'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ${operationResultType},
  ${operationVariablesTypes},
  ${propsTypeName}<TChildProps, TDataName>>) {
    return ApolloReactHoc.with${changeCaseAll.pascalCase(
      node.operation
    )}<TProps, ${operationResultType}, ${operationVariablesTypes}, ${propsTypeName}<TChildProps, TDataName>>(${this.getDocumentNodeVariable(
            node,
            documentVariableName
          )}, {
      alias: '${changeCaseAll.camelCase(operationName)}',
      ...operationOptions
    });
};`;
          return [propsVar, hocString].filter(a => a).join("\n");
        }
        _buildComponent(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          var _a, _b;
          const nodeName =
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "";
          const componentPropsName = this.convertName(nodeName, {
            suffix: this.config.componentSuffix + "Props",
            useTypesPrefix: false
          });
          const componentName = this.convertName(nodeName, {
            suffix: this.config.componentSuffix,
            useTypesPrefix: false
          });
          const isVariablesRequired =
            operationType === "Query" &&
            node.variableDefinitions.some(
              variableDef =>
                variableDef.type.kind === graphql.Kind.NON_NULL_TYPE
            );
          this.imports.add(this.getReactImport());
          this.imports.add(this.getApolloReactCommonImport(true));
          this.imports.add(this.getApolloReactComponentsImport(false));
          this.imports.add(this.getOmitDeclaration());
          const propsType = `Omit<ApolloReactComponents.${operationType}ComponentOptions<${operationResultType}, ${operationVariablesTypes}>, '${operationType.toLowerCase()}'>`;
          let componentProps = "";
          if (isVariablesRequired) {
            componentProps = `export type ${componentPropsName} = ${propsType} & ({ variables: ${operationVariablesTypes}; skip?: boolean; } | { skip: boolean; });`;
          } else {
            componentProps = `export type ${componentPropsName} = ${propsType};`;
          }
          const component = `
    export const ${componentName} = (props: ${componentPropsName}) => (
      <ApolloReactComponents.${operationType}<${operationResultType}, ${operationVariablesTypes}> ${
            node.operation
          }={${this.getDocumentNodeVariable(
            node,
            documentVariableName
          )}} {...props} />
    );
    `;
          return [componentProps, component].join("\n");
        }
        _buildHooksJSDoc(node, operationName, operationType) {
          const variableString = node.variableDefinitions.reduce(
            (acc, item) => {
              const name = item.variable.name.value;
              return `${acc}\n *      ${name}: // value for '${name}'`;
            },
            ""
          );
          const queryDescription = `
 * To run a query within a React component, call \`use${operationName}\` and pass it any options that fit your needs.
 * When your component renders, \`use${operationName}\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.`;
          const queryExample = `
 * const { data, loading, error } = use${operationName}({
 *   variables: {${variableString}
 *   },
 * });`;
          const mutationDescription = `
 * To run a mutation, you first call \`use${operationName}\` within a React component and pass it any options that fit your needs.
 * When your component renders, \`use${operationName}\` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution`;
          const mutationExample = `
 * const [${changeCaseAll.camelCase(
   operationName
 )}, { data, loading, error }] = use${operationName}({
 *   variables: {${variableString}
 *   },
 * });`;
          return `
/**
 * __use${operationName}__
 *${operationType === "Mutation" ? mutationDescription : queryDescription}
 *
 * @param baseOptions options that will be passed into the ${operationType.toLowerCase()}, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#${
            operationType === "Mutation" ? "options-2" : "options"
          };
 *
 * @example${operationType === "Mutation" ? mutationExample : queryExample}
 */`;
        }
        _buildHooks(
          node,
          operationType,
          documentVariableName,
          operationResultType,
          operationVariablesTypes,
          hasRequiredVariables
        ) {
          var _a, _b;
          const nodeName =
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "";
          const suffix = this._getHookSuffix(nodeName, operationType);
          const operationName = this.convertName(nodeName, {
            suffix,
            useTypesPrefix: false,
            useTypesSuffix: false
          });
          this.imports.add(this.getApolloReactCommonImport(true));
          this.imports.add(this.getApolloReactHooksImport(false));
          this.imports.add(this.getDefaultOptions());
          const hookFns = [
            `export function use${operationName}(baseOptions${
              hasRequiredVariables && operationType !== "Mutation" ? "" : "?"
            }: ${this.getApolloReactHooksIdentifier()}.${operationType}HookOptions<${operationResultType}, ${operationVariablesTypes}>) {
        const options = {...defaultOptions, ...baseOptions}
        return ${this.getApolloReactHooksIdentifier()}.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(
              node,
              documentVariableName
            )}, options);
      }`
          ];
          if (this.config.addDocBlocks) {
            hookFns.unshift(
              this._buildHooksJSDoc(node, operationName, operationType)
            );
          }
          const hookResults = [
            `export type ${operationName}HookResult = ReturnType<typeof use${operationName}>;`
          ];
          if (operationType === "Query") {
            const lazyOperationName = this.convertName(nodeName, {
              suffix: changeCaseAll.pascalCase("LazyQuery"),
              useTypesPrefix: false
            });
            hookFns.push(`export function use${lazyOperationName}(baseOptions?: ${this.getApolloReactHooksIdentifier()}.LazyQueryHookOptions<${operationResultType}, ${operationVariablesTypes}>) {
          const options = {...defaultOptions, ...baseOptions}
          return ${this.getApolloReactHooksIdentifier()}.useLazyQuery<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(
              node,
              documentVariableName
            )}, options);
        }`);
            hookResults.push(
              `export type ${lazyOperationName}HookResult = ReturnType<typeof use${lazyOperationName}>;`
            );
          }
          return [...hookFns, ...hookResults].join("\n");
        }
        _getHookSuffix(name, operationType) {
          if (this.config.omitOperationSuffix) {
            return "";
          }
          if (!this.config.dedupeOperationSuffix) {
            return changeCaseAll.pascalCase(operationType);
          }
          if (
            name.includes("Query") ||
            name.includes("Mutation") ||
            name.includes("Subscription")
          ) {
            return "";
          }
          return changeCaseAll.pascalCase(operationType);
        }
        _buildResultType(
          node,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          var _a, _b;
          const componentResultType = this.convertName(
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "",
            {
              suffix: `${operationType}Result`,
              useTypesPrefix: false
            }
          );
          switch (node.operation) {
            case "query":
              this.imports.add(this.getApolloReactCommonImport(true));
              return `export type ${componentResultType} = ${this.getApolloReactCommonIdentifier()}.QueryResult<${operationResultType}, ${operationVariablesTypes}>;`;
            case "mutation":
              this.imports.add(this.getApolloReactCommonImport(true));
              return `export type ${componentResultType} = ${this.getApolloReactCommonIdentifier()}.MutationResult<${operationResultType}>;`;
            case "subscription":
              this.imports.add(this.getApolloReactCommonImport(true));
              return `export type ${componentResultType} = ${this.getApolloReactCommonIdentifier()}.SubscriptionResult<${operationResultType}>;`;
            default:
              return "";
          }
        }
        _buildWithMutationOptionsType(
          node,
          operationResultType,
          operationVariablesTypes
        ) {
          var _a, _b;
          if (node.operation !== "mutation") {
            return "";
          }
          this.imports.add(this.getApolloReactCommonImport(true));
          const mutationOptionsType = this.convertName(
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "",
            {
              suffix: "MutationOptions",
              useTypesPrefix: false
            }
          );
          return `export type ${mutationOptionsType} = ${this.getApolloReactCommonIdentifier()}.BaseMutationOptions<${operationResultType}, ${operationVariablesTypes}>;`;
        }
        _buildRefetchFn(
          node,
          documentVariableName,
          operationType,
          operationVariablesTypes
        ) {
          var _a, _b;
          if (node.operation !== "query") {
            return "";
          }
          const nodeName =
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "";
          const operationName = this.convertName(nodeName, {
            suffix: this._getHookSuffix(nodeName, operationType),
            useTypesPrefix: false
          });
          return `export function refetch${operationName}(variables?: ${operationVariablesTypes}) {
      return { query: ${this.getDocumentNodeVariable(
        node,
        documentVariableName
      )}, variables: variables }
    }`;
        }
        buildOperation(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes,
          hasRequiredVariables
        ) {
          operationResultType =
            this._externalImportPrefix + operationResultType;
          operationVariablesTypes =
            this._externalImportPrefix + operationVariablesTypes;
          const mutationFn =
            this.config.withMutationFn || this.config.withComponent
              ? this._buildMutationFn(
                  node,
                  operationResultType,
                  operationVariablesTypes
                )
              : null;
          const component = this.config.withComponent
            ? this._buildComponent(
                node,
                documentVariableName,
                operationType,
                operationResultType,
                operationVariablesTypes
              )
            : null;
          const hoc = this.config.withHOC
            ? this._buildOperationHoc(
                node,
                documentVariableName,
                operationResultType,
                operationVariablesTypes
              )
            : null;
          const hooks = this.config.withHooks
            ? this._buildHooks(
                node,
                operationType,
                documentVariableName,
                operationResultType,
                operationVariablesTypes,
                hasRequiredVariables
              )
            : null;
          const resultType = this.config.withResultType
            ? this._buildResultType(
                node,
                operationType,
                operationResultType,
                operationVariablesTypes
              )
            : null;
          const mutationOptionsType = this.config.withMutationOptionsType
            ? this._buildWithMutationOptionsType(
                node,
                operationResultType,
                operationVariablesTypes
              )
            : null;
          const refetchFn = this.config.withRefetchFn
            ? this._buildRefetchFn(
                node,
                documentVariableName,
                operationType,
                operationVariablesTypes
              )
            : null;
          return [
            mutationFn,
            component,
            hoc,
            hooks,
            resultType,
            mutationOptionsType,
            refetchFn
          ]
            .filter(a => a)
            .join("\n");
        }
      }

      const plugin = (schema, documents, config) => {
        const allAst = graphql.concatAST(documents.map(v => v.document));
        const allFragments = [
          ...allAst.definitions
            .filter(d => d.kind === graphql.Kind.FRAGMENT_DEFINITION)
            .map(fragmentDef => ({
              node: fragmentDef,
              name: fragmentDef.name.value,
              onType: fragmentDef.typeCondition.name.value,
              isExternal: false
            })),
          ...(config.externalFragments || [])
        ];
        const visitor = new ReactApolloVisitor(
          schema,
          allFragments,
          config,
          documents
        );
        const visitorResult = graphql.visit(allAst, { leave: visitor });
        return {
          prepend: visitor.getImports(),
          content: [
            visitor.fragments,
            ...visitorResult.definitions.filter(t => typeof t === "string")
          ].join("\n")
        };
      };
      const validate = async (schema, documents, config, outputFile) => {
        if (config.withComponent === true) {
          if (path.extname(outputFile) !== ".tsx") {
            throw new Error(
              `Plugin "typescript-react-apollo" requires extension to be ".tsx" when withComponent: true is set!`
            );
          }
        } else {
          if (
            path.extname(outputFile) !== ".ts" &&
            path.extname(outputFile) !== ".tsx"
          ) {
            throw new Error(
              `Plugin "typescript-react-apollo" requires extension to be ".ts" or ".tsx"!`
            );
          }
        }
      };

      exports.ReactApolloVisitor = ReactApolloVisitor;
      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ "/HjL": /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var invariant = __webpack_require__("OUqe");

      var _require = __webpack_require__("sriv"),
        DEFAULT_HANDLE_KEY = _require.DEFAULT_HANDLE_KEY;

      var INDENT = "  ";
      /**
       * Converts an IR node into a GraphQL string. Custom Relay
       * extensions (directives) are not supported; to print fragments with
       * variables or fragment spreads with arguments, transform the node
       * prior to printing.
       */

      function print(schema, node) {
        switch (node.kind) {
          case "Fragment":
            return (
              "fragment "
                .concat(node.name, " on ")
                .concat(schema.getTypeString(node.type)) +
              printFragmentArgumentDefinitions(
                schema,
                node.argumentDefinitions
              ) +
              printDirectives(schema, node.directives) +
              printSelections(schema, node, "", {}) +
              "\n"
            );

          case "Root":
            return (
              "".concat(node.operation, " ").concat(node.name) +
              printArgumentDefinitions(schema, node.argumentDefinitions) +
              printDirectives(schema, node.directives) +
              printSelections(schema, node, "", {}) +
              "\n"
            );

          case "SplitOperation":
            return (
              "SplitOperation "
                .concat(node.name, " on ")
                .concat(schema.getTypeString(node.type)) +
              printSelections(schema, node, "", {}) +
              "\n"
            );

          default:
            node;
            true ? (false ? undefined : invariant(false)) : undefined;
        }
      }

      function printSelections(schema, node, indent, options) {
        var selections = node.selections;

        if (selections == null) {
          return "";
        }

        var printed = selections.map(function(selection) {
          return printSelection(schema, selection, indent, options);
        });
        return printed.length
          ? " {\n"
              .concat(indent + INDENT)
              .concat(printed.join("\n" + indent + INDENT), "\n")
              .concat(indent)
              .concat(
                (options === null || options === void 0
                  ? void 0
                  : options.isClientExtension) === true
                  ? "# "
                  : "",
                "}"
              )
          : "";
      }
      /**
       * Prints a field without subselections.
       */

      function printField(schema, field, options) {
        var _options$parentDirect;

        var parentDirectives =
          (_options$parentDirect =
            options === null || options === void 0
              ? void 0
              : options.parentDirectives) !== null &&
          _options$parentDirect !== void 0
            ? _options$parentDirect
            : "";
        var isClientExtension =
          (options === null || options === void 0
            ? void 0
            : options.isClientExtension) === true;
        return (
          (isClientExtension ? "# " : "") +
          (field.alias === field.name
            ? field.name
            : field.alias + ": " + field.name) +
          printArguments(schema, field.args) +
          parentDirectives +
          printDirectives(schema, field.directives) +
          printHandles(schema, field)
        );
      }

      function printSelection(schema, selection, indent, options) {
        var _options$parentDirect2;

        var str;
        var parentDirectives =
          (_options$parentDirect2 =
            options === null || options === void 0
              ? void 0
              : options.parentDirectives) !== null &&
          _options$parentDirect2 !== void 0
            ? _options$parentDirect2
            : "";
        var isClientExtension =
          (options === null || options === void 0
            ? void 0
            : options.isClientExtension) === true;

        if (selection.kind === "LinkedField") {
          str = printField(schema, selection, {
            parentDirectives: parentDirectives,
            isClientExtension: isClientExtension
          });
          str += printSelections(schema, selection, indent + INDENT, {
            isClientExtension: isClientExtension
          });
        } else if (selection.kind === "ModuleImport") {
          str = selection.selections
            .map(function(matchSelection) {
              return printSelection(schema, matchSelection, indent, {
                parentDirectives: parentDirectives,
                isClientExtension: isClientExtension
              });
            })
            .join("\n" + indent + INDENT);
        } else if (selection.kind === "ScalarField") {
          str = printField(schema, selection, {
            parentDirectives: parentDirectives,
            isClientExtension: isClientExtension
          });
        } else if (selection.kind === "InlineFragment") {
          str = "";

          if (isClientExtension) {
            str += "# ";
          }

          str += "... on " + schema.getTypeString(selection.typeCondition);
          str += parentDirectives;
          str += printDirectives(schema, selection.directives);
          str += printSelections(schema, selection, indent + INDENT, {
            isClientExtension: isClientExtension
          });
        } else if (selection.kind === "FragmentSpread") {
          str = "";

          if (isClientExtension) {
            str += "# ";
          }

          str += "..." + selection.name;
          str += parentDirectives;
          str += printFragmentArguments(schema, selection.args);
          str += printDirectives(schema, selection.directives);
        } else if (selection.kind === "InlineDataFragmentSpread") {
          str =
            "# ".concat(selection.name, " @inline") +
            "\n".concat(indent).concat(INDENT, "...") +
            parentDirectives +
            printSelections(schema, selection, indent + INDENT, {});
        } else if (selection.kind === "Condition") {
          var value = printValue(schema, selection.condition, null); // For Flow

          !(value != null) ? (false ? undefined : invariant(false)) : void 0;
          var condStr = selection.passingValue ? " @include" : " @skip";
          condStr += "(if: " + value + ")";
          condStr += parentDirectives; // For multi-selection conditions, pushes the condition down to each

          var subSelections = selection.selections.map(function(sel) {
            return printSelection(schema, sel, indent, {
              parentDirectives: condStr,
              isClientExtension: isClientExtension
            });
          });
          str = subSelections.join("\n" + indent + INDENT);
        } else if (selection.kind === "Stream") {
          var streamStr = parentDirectives;
          streamStr += ' @stream(label: "'.concat(selection.label, '"');

          if (selection["if"] !== null) {
            var _printValue;

            streamStr += ", if: ".concat(
              (_printValue = printValue(schema, selection["if"], null)) !==
                null && _printValue !== void 0
                ? _printValue
                : ""
            );
          }

          if (selection.initialCount !== null) {
            var _printValue2;

            streamStr += ", initial_count: ".concat(
              (_printValue2 = printValue(
                schema,
                selection.initialCount,
                null
              )) !== null && _printValue2 !== void 0
                ? _printValue2
                : ""
            );
          }

          if (selection.useCustomizedBatch !== null) {
            var _printValue3;

            streamStr += ", use_customized_batch: ".concat(
              (_printValue3 = printValue(
                schema,
                selection.useCustomizedBatch,
                null
              )) !== null && _printValue3 !== void 0
                ? _printValue3
                : "false"
            );
          }

          streamStr += ")";

          var _subSelections = selection.selections.map(function(sel) {
            return printSelection(schema, sel, indent, {
              parentDirectives: streamStr,
              isClientExtension: isClientExtension
            });
          });

          str = _subSelections.join("\n" + INDENT);
        } else if (selection.kind === "Defer") {
          var deferStr = parentDirectives;
          deferStr += ' @defer(label: "'.concat(selection.label, '"');

          if (selection["if"] !== null) {
            var _printValue4;

            deferStr += ", if: ".concat(
              (_printValue4 = printValue(schema, selection["if"], null)) !==
                null && _printValue4 !== void 0
                ? _printValue4
                : ""
            );
          }

          deferStr += ")";

          if (
            selection.selections.every(function(subSelection) {
              return (
                subSelection.kind === "InlineFragment" ||
                subSelection.kind === "FragmentSpread"
              );
            })
          ) {
            var _subSelections2 = selection.selections.map(function(sel) {
              return printSelection(schema, sel, indent, {
                parentDirectives: deferStr,
                isClientExtension: isClientExtension
              });
            });

            str = _subSelections2.join("\n" + INDENT);
          } else {
            str = "..." + deferStr;
            str += printSelections(schema, selection, indent + INDENT, {
              isClientExtension: isClientExtension
            });
          }
        } else if (selection.kind === "ClientExtension") {
          !(isClientExtension === false)
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          str =
            "# Client-only selections:\n" +
            indent +
            INDENT +
            selection.selections
              .map(function(sel) {
                return printSelection(schema, sel, indent, {
                  parentDirectives: parentDirectives,
                  isClientExtension: true
                });
              })
              .join("\n" + indent + INDENT);
        } else {
          selection;
          true ? (false ? undefined : invariant(false)) : undefined;
        }

        return str;
      }

      function printArgumentDefinitions(schema, argumentDefinitions) {
        var printed = argumentDefinitions.map(function(def) {
          var str = "$"
            .concat(def.name, ": ")
            .concat(schema.getTypeString(def.type));

          if (def.defaultValue != null) {
            str += " = " + printLiteral(schema, def.defaultValue, def.type);
          }

          return str;
        });
        return printed.length
          ? "(\n".concat(INDENT).concat(printed.join("\n" + INDENT), "\n)")
          : "";
      }

      function printFragmentArgumentDefinitions(schema, argumentDefinitions) {
        var printed;
        argumentDefinitions.forEach(function(def) {
          if (def.kind !== "LocalArgumentDefinition") {
            return;
          }

          printed = printed || [];
          var str = ""
            .concat(def.name, ': {type: "')
            .concat(schema.getTypeString(def.type), '"');

          if (def.defaultValue != null) {
            str += ", defaultValue: ".concat(
              printLiteral(schema, def.defaultValue, def.type)
            );
          }

          str += "}";
          printed.push(str);
        });
        return printed && printed.length
          ? " @argumentDefinitions(\n"
              .concat(INDENT)
              .concat(printed.join("\n" + INDENT), "\n)")
          : "";
      }

      function printHandles(schema, field) {
        if (!field.handles) {
          return "";
        }

        var printed = field.handles.map(function(handle) {
          // For backward compatibility.
          var key =
            handle.key === DEFAULT_HANDLE_KEY
              ? ""
              : ', key: "'.concat(handle.key, '"');
          var filters =
            handle.filters == null
              ? ""
              : ", filters: ".concat(
                  JSON.stringify(Array.from(handle.filters).sort())
                );
          var handleArgs =
            handle.handleArgs == null
              ? ""
              : ", handleArgs: ".concat(
                  printArguments(schema, handle.handleArgs)
                );
          return '@__clientField(handle: "'
            .concat(handle.name, '"')
            .concat(key)
            .concat(filters)
            .concat(handleArgs, ")");
        });
        return printed.length ? " " + printed.join(" ") : "";
      }

      function printDirectives(schema, directives) {
        var printed = directives.map(function(directive) {
          return "@" + directive.name + printArguments(schema, directive.args);
        });
        return printed.length ? " " + printed.join(" ") : "";
      }

      function printFragmentArguments(schema, args) {
        var printedArgs = printArguments(schema, args);

        if (!printedArgs.length) {
          return "";
        }

        return " @arguments".concat(printedArgs);
      }

      function printArguments(schema, args) {
        var printed = [];
        args.forEach(function(arg) {
          var printedValue = printValue(schema, arg.value, arg.type);

          if (printedValue != null) {
            printed.push(arg.name + ": " + printedValue);
          }
        });
        return printed.length ? "(" + printed.join(", ") + ")" : "";
      }

      function printValue(schema, value, type) {
        if (type != null && schema.isNonNull(type)) {
          type = schema.getNullableType(type);
        }

        if (value.kind === "Variable") {
          return "$" + value.variableName;
        } else if (value.kind === "ObjectValue") {
          var inputType = type != null ? schema.asInputObjectType(type) : null;
          var pairs = value.fields
            .map(function(field) {
              var fieldConfig =
                inputType != null
                  ? schema.hasField(inputType, field.name)
                    ? schema.getFieldConfig(
                        schema.expectField(inputType, field.name)
                      )
                    : null
                  : null;
              var innerValue = printValue(
                schema,
                field.value,
                fieldConfig === null || fieldConfig === void 0
                  ? void 0
                  : fieldConfig.type
              );
              return innerValue == null ? null : field.name + ": " + innerValue;
            })
            .filter(Boolean);
          return "{" + pairs.join(", ") + "}";
        } else if (value.kind === "ListValue") {
          !(type && schema.isList(type))
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          var innerType = schema.getListItemType(type);
          return "[".concat(
            value.items
              .map(function(i) {
                return printValue(schema, i, innerType);
              })
              .join(", "),
            "]"
          );
        } else if (value.value != null) {
          return printLiteral(schema, value.value, type);
        } else {
          return null;
        }
      }

      function printLiteral(schema, value, type) {
        if (value == null) {
          var _JSON$stringify;

          return (_JSON$stringify = JSON.stringify(value)) !== null &&
            _JSON$stringify !== void 0
            ? _JSON$stringify
            : "null";
        }

        if (type != null && schema.isNonNull(type)) {
          type = schema.getNullableType(type);
        }

        if (type && schema.isEnum(type)) {
          var _JSON$stringify2;

          var result = schema.serialize(schema.assertEnumType(type), value);

          if (result == null && typeof value === "string") {
            // For backwards compatibility, print invalid input values as-is. This
            // can occur with literals defined as an @argumentDefinitions
            // defaultValue.
            result = value;
          }

          !(typeof result === "string")
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          return result;
        } else if (type && (schema.isId(type) || schema.isInt(type))) {
          var _JSON$stringify3;

          return (_JSON$stringify3 = JSON.stringify(value)) !== null &&
            _JSON$stringify3 !== void 0
            ? _JSON$stringify3
            : "";
        } else if (type && schema.isScalar(type)) {
          var _JSON$stringify4;

          var _result = schema.serialize(schema.assertScalarType(type), value);

          return (_JSON$stringify4 = JSON.stringify(_result)) !== null &&
            _JSON$stringify4 !== void 0
            ? _JSON$stringify4
            : "";
        } else if (Array.isArray(value)) {
          !(type && schema.isList(type))
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          var itemType = schema.getListItemType(type);
          return (
            "[" +
            value
              .map(function(item) {
                return printLiteral(schema, item, itemType);
              })
              .join(", ") +
            "]"
          );
        } else if (type && schema.isList(type) && value != null) {
          // Not an array, but still a list. Treat as list-of-one as per spec 3.1.7:
          // http://facebook.github.io/graphql/October2016/#sec-Lists
          return printLiteral(schema, value, schema.getListItemType(type));
        } else if (typeof value === "object" && value != null) {
          var fields = [];
          !(type && schema.isInputObject(type))
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          var inputType = schema.assertInputObjectType(type);

          for (var key in value) {
            if (value.hasOwnProperty(key)) {
              var fieldConfig = schema.getFieldConfig(
                schema.expectField(inputType, key)
              );
              fields.push(
                key + ": " + printLiteral(schema, value[key], fieldConfig.type)
              );
            }
          }

          return "{" + fields.join(", ") + "}";
        } else {
          var _JSON$stringify5;

          return (_JSON$stringify5 = JSON.stringify(value)) !== null &&
            _JSON$stringify5 !== void 0
            ? _JSON$stringify5
            : "null";
        }
      }

      module.exports = {
        print: print,
        printField: printField,
        printArguments: printArguments,
        printDirectives: printDirectives
      };

      /***/
    },

    /***/ "/sVA": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var toStr = Object.prototype.toString;
      var hasSymbols = __webpack_require__("UVaH")();

      if (hasSymbols) {
        var symToStr = Symbol.prototype.toString;
        var symStringRegex = /^Symbol\(.*\)$/;
        var isSymbolObject = function isRealSymbolObject(value) {
          if (typeof value.valueOf() !== "symbol") {
            return false;
          }
          return symStringRegex.test(symToStr.call(value));
        };

        module.exports = function isSymbol(value) {
          if (typeof value === "symbol") {
            return true;
          }
          if (toStr.call(value) !== "[object Symbol]") {
            return false;
          }
          try {
            return isSymbolObject(value);
          } catch (e) {
            return false;
          }
        };
      } else {
        module.exports = function isSymbol(value) {
          // this environment does not support Symbols.
          return false && false;
        };
      }

      /***/
    },

    /***/ "0N00": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isSpecifiedScalarType = isSpecifiedScalarType;
      exports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = void 0;

      var _isFinite = _interopRequireDefault(__webpack_require__("zFIs"));

      var _isInteger = _interopRequireDefault(__webpack_require__("3Esn"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _kinds = __webpack_require__("xaK5");

      var _printer = __webpack_require__("gCJq");

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      // As per the GraphQL Spec, Integers are only treated as valid when a valid
      // 32-bit signed integer, providing the broadest support across platforms.
      //
      // n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
      // they are internally represented as IEEE 754 doubles.
      var MAX_INT = 2147483647;
      var MIN_INT = -2147483648;

      function serializeInt(outputValue) {
        var coercedValue = serializeObject(outputValue);

        if (typeof coercedValue === "boolean") {
          return coercedValue ? 1 : 0;
        }

        var num = coercedValue;

        if (typeof coercedValue === "string" && coercedValue !== "") {
          num = Number(coercedValue);
        }

        if (!(0, _isInteger.default)(num)) {
          throw new _GraphQLError.GraphQLError(
            "Int cannot represent non-integer value: ".concat(
              (0, _inspect.default)(coercedValue)
            )
          );
        }

        if (num > MAX_INT || num < MIN_INT) {
          throw new _GraphQLError.GraphQLError(
            "Int cannot represent non 32-bit signed integer value: " +
              (0, _inspect.default)(coercedValue)
          );
        }

        return num;
      }

      function coerceInt(inputValue) {
        if (!(0, _isInteger.default)(inputValue)) {
          throw new _GraphQLError.GraphQLError(
            "Int cannot represent non-integer value: ".concat(
              (0, _inspect.default)(inputValue)
            )
          );
        }

        if (inputValue > MAX_INT || inputValue < MIN_INT) {
          throw new _GraphQLError.GraphQLError(
            "Int cannot represent non 32-bit signed integer value: ".concat(
              inputValue
            )
          );
        }

        return inputValue;
      }

      var GraphQLInt = new _definition.GraphQLScalarType({
        name: "Int",
        description:
          "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
        serialize: serializeInt,
        parseValue: coerceInt,
        parseLiteral: function parseLiteral(valueNode) {
          if (valueNode.kind !== _kinds.Kind.INT) {
            throw new _GraphQLError.GraphQLError(
              "Int cannot represent non-integer value: ".concat(
                (0, _printer.print)(valueNode)
              ),
              valueNode
            );
          }

          var num = parseInt(valueNode.value, 10);

          if (num > MAX_INT || num < MIN_INT) {
            throw new _GraphQLError.GraphQLError(
              "Int cannot represent non 32-bit signed integer value: ".concat(
                valueNode.value
              ),
              valueNode
            );
          }

          return num;
        }
      });
      exports.GraphQLInt = GraphQLInt;

      function serializeFloat(outputValue) {
        var coercedValue = serializeObject(outputValue);

        if (typeof coercedValue === "boolean") {
          return coercedValue ? 1 : 0;
        }

        var num = coercedValue;

        if (typeof coercedValue === "string" && coercedValue !== "") {
          num = Number(coercedValue);
        }

        if (!(0, _isFinite.default)(num)) {
          throw new _GraphQLError.GraphQLError(
            "Float cannot represent non numeric value: ".concat(
              (0, _inspect.default)(coercedValue)
            )
          );
        }

        return num;
      }

      function coerceFloat(inputValue) {
        if (!(0, _isFinite.default)(inputValue)) {
          throw new _GraphQLError.GraphQLError(
            "Float cannot represent non numeric value: ".concat(
              (0, _inspect.default)(inputValue)
            )
          );
        }

        return inputValue;
      }

      var GraphQLFloat = new _definition.GraphQLScalarType({
        name: "Float",
        description:
          "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
        serialize: serializeFloat,
        parseValue: coerceFloat,
        parseLiteral: function parseLiteral(valueNode) {
          if (
            valueNode.kind !== _kinds.Kind.FLOAT &&
            valueNode.kind !== _kinds.Kind.INT
          ) {
            throw new _GraphQLError.GraphQLError(
              "Float cannot represent non numeric value: ".concat(
                (0, _printer.print)(valueNode)
              ),
              valueNode
            );
          }

          return parseFloat(valueNode.value);
        }
      }); // Support serializing objects with custom valueOf() or toJSON() functions -
      // a common way to represent a complex value which can be represented as
      // a string (ex: MongoDB id objects).

      exports.GraphQLFloat = GraphQLFloat;

      function serializeObject(outputValue) {
        if ((0, _isObjectLike.default)(outputValue)) {
          if (typeof outputValue.valueOf === "function") {
            var valueOfResult = outputValue.valueOf();

            if (!(0, _isObjectLike.default)(valueOfResult)) {
              return valueOfResult;
            }
          }

          if (typeof outputValue.toJSON === "function") {
            // $FlowFixMe[incompatible-use]
            return outputValue.toJSON();
          }
        }

        return outputValue;
      }

      function serializeString(outputValue) {
        var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
        // attempt to coerce object, function, symbol, or other types as strings.

        if (typeof coercedValue === "string") {
          return coercedValue;
        }

        if (typeof coercedValue === "boolean") {
          return coercedValue ? "true" : "false";
        }

        if ((0, _isFinite.default)(coercedValue)) {
          return coercedValue.toString();
        }

        throw new _GraphQLError.GraphQLError(
          "String cannot represent value: ".concat(
            (0, _inspect.default)(outputValue)
          )
        );
      }

      function coerceString(inputValue) {
        if (typeof inputValue !== "string") {
          throw new _GraphQLError.GraphQLError(
            "String cannot represent a non string value: ".concat(
              (0, _inspect.default)(inputValue)
            )
          );
        }

        return inputValue;
      }

      var GraphQLString = new _definition.GraphQLScalarType({
        name: "String",
        description:
          "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
        serialize: serializeString,
        parseValue: coerceString,
        parseLiteral: function parseLiteral(valueNode) {
          if (valueNode.kind !== _kinds.Kind.STRING) {
            throw new _GraphQLError.GraphQLError(
              "String cannot represent a non string value: ".concat(
                (0, _printer.print)(valueNode)
              ),
              valueNode
            );
          }

          return valueNode.value;
        }
      });
      exports.GraphQLString = GraphQLString;

      function serializeBoolean(outputValue) {
        var coercedValue = serializeObject(outputValue);

        if (typeof coercedValue === "boolean") {
          return coercedValue;
        }

        if ((0, _isFinite.default)(coercedValue)) {
          return coercedValue !== 0;
        }

        throw new _GraphQLError.GraphQLError(
          "Boolean cannot represent a non boolean value: ".concat(
            (0, _inspect.default)(coercedValue)
          )
        );
      }

      function coerceBoolean(inputValue) {
        if (typeof inputValue !== "boolean") {
          throw new _GraphQLError.GraphQLError(
            "Boolean cannot represent a non boolean value: ".concat(
              (0, _inspect.default)(inputValue)
            )
          );
        }

        return inputValue;
      }

      var GraphQLBoolean = new _definition.GraphQLScalarType({
        name: "Boolean",
        description: "The `Boolean` scalar type represents `true` or `false`.",
        serialize: serializeBoolean,
        parseValue: coerceBoolean,
        parseLiteral: function parseLiteral(valueNode) {
          if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
            throw new _GraphQLError.GraphQLError(
              "Boolean cannot represent a non boolean value: ".concat(
                (0, _printer.print)(valueNode)
              ),
              valueNode
            );
          }

          return valueNode.value;
        }
      });
      exports.GraphQLBoolean = GraphQLBoolean;

      function serializeID(outputValue) {
        var coercedValue = serializeObject(outputValue);

        if (typeof coercedValue === "string") {
          return coercedValue;
        }

        if ((0, _isInteger.default)(coercedValue)) {
          return String(coercedValue);
        }

        throw new _GraphQLError.GraphQLError(
          "ID cannot represent value: ".concat(
            (0, _inspect.default)(outputValue)
          )
        );
      }

      function coerceID(inputValue) {
        if (typeof inputValue === "string") {
          return inputValue;
        }

        if ((0, _isInteger.default)(inputValue)) {
          return inputValue.toString();
        }

        throw new _GraphQLError.GraphQLError(
          "ID cannot represent value: ".concat(
            (0, _inspect.default)(inputValue)
          )
        );
      }

      var GraphQLID = new _definition.GraphQLScalarType({
        name: "ID",
        description:
          'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
        serialize: serializeID,
        parseValue: coerceID,
        parseLiteral: function parseLiteral(valueNode) {
          if (
            valueNode.kind !== _kinds.Kind.STRING &&
            valueNode.kind !== _kinds.Kind.INT
          ) {
            throw new _GraphQLError.GraphQLError(
              "ID cannot represent a non-string and non-integer value: " +
                (0, _printer.print)(valueNode),
              valueNode
            );
          }

          return valueNode.value;
        }
      });
      exports.GraphQLID = GraphQLID;
      var specifiedScalarTypes = Object.freeze([
        GraphQLString,
        GraphQLInt,
        GraphQLFloat,
        GraphQLBoolean,
        GraphQLID
      ]);
      exports.specifiedScalarTypes = specifiedScalarTypes;

      function isSpecifiedScalarType(type) {
        return specifiedScalarTypes.some(function(_ref) {
          var name = _ref.name;
          return type.name === name;
        });
      }

      /***/
    },

    /***/ "0hsj": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.lexicographicSortSchema = lexicographicSortSchema;

      var _objectValues = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _keyValMap = _interopRequireDefault(__webpack_require__("IatC"));

      var _naturalCompare = _interopRequireDefault(__webpack_require__("qoX3"));

      var _schema = __webpack_require__("+X2/");

      var _directives = __webpack_require__("L9+1");

      var _introspection = __webpack_require__("JIc4");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Sort GraphQLSchema.
       *
       * This function returns a sorted copy of the given GraphQLSchema.
       */
      function lexicographicSortSchema(schema) {
        var schemaConfig = schema.toConfig();
        var typeMap = (0, _keyValMap.default)(
          sortByName(schemaConfig.types),
          function(type) {
            return type.name;
          },
          sortNamedType
        );
        return new _schema.GraphQLSchema(
          _objectSpread(
            _objectSpread({}, schemaConfig),
            {},
            {
              types: (0, _objectValues.default)(typeMap),
              directives: sortByName(schemaConfig.directives).map(
                sortDirective
              ),
              query: replaceMaybeType(schemaConfig.query),
              mutation: replaceMaybeType(schemaConfig.mutation),
              subscription: replaceMaybeType(schemaConfig.subscription)
            }
          )
        );

        function replaceType(type) {
          if ((0, _definition.isListType)(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definition.GraphQLList(replaceType(type.ofType));
          } else if ((0, _definition.isNonNullType)(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definition.GraphQLNonNull(replaceType(type.ofType));
          }

          return replaceNamedType(type);
        }

        function replaceNamedType(type) {
          return typeMap[type.name];
        }

        function replaceMaybeType(maybeType) {
          return maybeType && replaceNamedType(maybeType);
        }

        function sortDirective(directive) {
          var config = directive.toConfig();
          return new _directives.GraphQLDirective(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                locations: sortBy(config.locations, function(x) {
                  return x;
                }),
                args: sortArgs(config.args)
              }
            )
          );
        }

        function sortArgs(args) {
          return sortObjMap(args, function(arg) {
            return _objectSpread(
              _objectSpread({}, arg),
              {},
              {
                type: replaceType(arg.type)
              }
            );
          });
        }

        function sortFields(fieldsMap) {
          return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(
              _objectSpread({}, field),
              {},
              {
                type: replaceType(field.type),
                args: sortArgs(field.args)
              }
            );
          });
        }

        function sortInputFields(fieldsMap) {
          return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(
              _objectSpread({}, field),
              {},
              {
                type: replaceType(field.type)
              }
            );
          });
        }

        function sortTypes(arr) {
          return sortByName(arr).map(replaceNamedType);
        }

        function sortNamedType(type) {
          if (
            (0, _definition.isScalarType)(type) ||
            (0, _introspection.isIntrospectionType)(type)
          ) {
            return type;
          }

          if ((0, _definition.isObjectType)(type)) {
            var config = type.toConfig();
            return new _definition.GraphQLObjectType(
              _objectSpread(
                _objectSpread({}, config),
                {},
                {
                  interfaces: function interfaces() {
                    return sortTypes(config.interfaces);
                  },
                  fields: function fields() {
                    return sortFields(config.fields);
                  }
                }
              )
            );
          }

          if ((0, _definition.isInterfaceType)(type)) {
            var _config = type.toConfig();

            return new _definition.GraphQLInterfaceType(
              _objectSpread(
                _objectSpread({}, _config),
                {},
                {
                  interfaces: function interfaces() {
                    return sortTypes(_config.interfaces);
                  },
                  fields: function fields() {
                    return sortFields(_config.fields);
                  }
                }
              )
            );
          }

          if ((0, _definition.isUnionType)(type)) {
            var _config2 = type.toConfig();

            return new _definition.GraphQLUnionType(
              _objectSpread(
                _objectSpread({}, _config2),
                {},
                {
                  types: function types() {
                    return sortTypes(_config2.types);
                  }
                }
              )
            );
          }

          if ((0, _definition.isEnumType)(type)) {
            var _config3 = type.toConfig();

            return new _definition.GraphQLEnumType(
              _objectSpread(
                _objectSpread({}, _config3),
                {},
                {
                  values: sortObjMap(_config3.values)
                }
              )
            );
          } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

          if ((0, _definition.isInputObjectType)(type)) {
            var _config4 = type.toConfig();

            return new _definition.GraphQLInputObjectType(
              _objectSpread(
                _objectSpread({}, _config4),
                {},
                {
                  fields: function fields() {
                    return sortInputFields(_config4.fields);
                  }
                }
              )
            );
          } // istanbul ignore next (Not reachable. All possible types have been considered)

          false ||
            (0, _invariant.default)(
              0,
              "Unexpected type: " + (0, _inspect.default)(type)
            );
        }
      }

      function sortObjMap(map, sortValueFn) {
        var sortedMap = Object.create(null);
        var sortedKeys = sortBy(Object.keys(map), function(x) {
          return x;
        });

        for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {
          var key = sortedKeys[_i2];
          var value = map[key];
          sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
        }

        return sortedMap;
      }

      function sortByName(array) {
        return sortBy(array, function(obj) {
          return obj.name;
        });
      }

      function sortBy(array, mapToKey) {
        return array.slice().sort(function(obj1, obj2) {
          var key1 = mapToKey(obj1);
          var key2 = mapToKey(obj2);
          return (0, _naturalCompare.default)(key1, key2);
        });
      }

      /***/
    },

    /***/ "1GMz": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.coerceInputValue = coerceInputValue;

      var _objectValues3 = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _safeArrayFrom = _interopRequireDefault(__webpack_require__("4M+f"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _printPathArray = _interopRequireDefault(__webpack_require__("rdJp"));

      var _Path = __webpack_require__("Z7K8");

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Coerces a JavaScript value given a GraphQL Input Type.
       */
      function coerceInputValue(inputValue, type) {
        var onError =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : defaultOnError;
        return coerceInputValueImpl(inputValue, type, onError);
      }

      function defaultOnError(path, invalidValue, error) {
        var errorPrefix =
          "Invalid value " + (0, _inspect.default)(invalidValue);

        if (path.length > 0) {
          errorPrefix += ' at "value'.concat(
            (0, _printPathArray.default)(path),
            '"'
          );
        }

        error.message = errorPrefix + ": " + error.message;
        throw error;
      }

      function coerceInputValueImpl(inputValue, type, onError, path) {
        if ((0, _definition.isNonNullType)(type)) {
          if (inputValue != null) {
            return coerceInputValueImpl(inputValue, type.ofType, onError, path);
          }

          onError(
            (0, _Path.pathToArray)(path),
            inputValue,
            new _GraphQLError.GraphQLError(
              'Expected non-nullable type "'.concat(
                (0, _inspect.default)(type),
                '" not to be null.'
              )
            )
          );
          return;
        }

        if (inputValue == null) {
          // Explicitly return the value null.
          return null;
        }

        if ((0, _definition.isListType)(type)) {
          var itemType = type.ofType;
          var coercedList = (0, _safeArrayFrom.default)(inputValue, function(
            itemValue,
            index
          ) {
            var itemPath = (0, _Path.addPath)(path, index, undefined);
            return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
          });

          if (coercedList != null) {
            return coercedList;
          } // Lists accept a non-list value as a list of one.

          return [coerceInputValueImpl(inputValue, itemType, onError, path)];
        }

        if ((0, _definition.isInputObjectType)(type)) {
          if (!(0, _isObjectLike.default)(inputValue)) {
            onError(
              (0, _Path.pathToArray)(path),
              inputValue,
              new _GraphQLError.GraphQLError(
                'Expected type "'.concat(type.name, '" to be an object.')
              )
            );
            return;
          }

          var coercedValue = {};
          var fieldDefs = type.getFields();

          for (
            var _i2 = 0,
              _objectValues2 = (0, _objectValues3.default)(fieldDefs);
            _i2 < _objectValues2.length;
            _i2++
          ) {
            var field = _objectValues2[_i2];
            var fieldValue = inputValue[field.name];

            if (fieldValue === undefined) {
              if (field.defaultValue !== undefined) {
                coercedValue[field.name] = field.defaultValue;
              } else if ((0, _definition.isNonNullType)(field.type)) {
                var typeStr = (0, _inspect.default)(field.type);
                onError(
                  (0, _Path.pathToArray)(path),
                  inputValue,
                  new _GraphQLError.GraphQLError(
                    'Field "'
                      .concat(field.name, '" of required type "')
                      .concat(typeStr, '" was not provided.')
                  )
                );
              }

              continue;
            }

            coercedValue[field.name] = coerceInputValueImpl(
              fieldValue,
              field.type,
              onError,
              (0, _Path.addPath)(path, field.name, type.name)
            );
          } // Ensure every provided field is defined.

          for (
            var _i4 = 0, _Object$keys2 = Object.keys(inputValue);
            _i4 < _Object$keys2.length;
            _i4++
          ) {
            var fieldName = _Object$keys2[_i4];

            if (!fieldDefs[fieldName]) {
              var suggestions = (0, _suggestionList.default)(
                fieldName,
                Object.keys(type.getFields())
              );
              onError(
                (0, _Path.pathToArray)(path),
                inputValue,
                new _GraphQLError.GraphQLError(
                  'Field "'
                    .concat(fieldName, '" is not defined by type "')
                    .concat(type.name, '".') +
                    (0, _didYouMean.default)(suggestions)
                )
              );
            }
          }

          return coercedValue;
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isLeafType)(type)) {
          var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
          // which can throw to indicate failure. If it throws, maintain a reference
          // to the original error.

          try {
            parseResult = type.parseValue(inputValue);
          } catch (error) {
            if (error instanceof _GraphQLError.GraphQLError) {
              onError((0, _Path.pathToArray)(path), inputValue, error);
            } else {
              onError(
                (0, _Path.pathToArray)(path),
                inputValue,
                new _GraphQLError.GraphQLError(
                  'Expected type "'.concat(type.name, '". ') + error.message,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  error
                )
              );
            }

            return;
          }

          if (parseResult === undefined) {
            onError(
              (0, _Path.pathToArray)(path),
              inputValue,
              new _GraphQLError.GraphQLError(
                'Expected type "'.concat(type.name, '".')
              )
            );
          }

          return parseResult;
        } // istanbul ignore next (Not reachable. All possible input types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected input type: " + (0, _inspect.default)(type)
          );
      }

      /***/
    },

    /***/ "1J+l": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _predicates = __webpack_require__("hzsB");

      /**
       * Executable definitions
       *
       * A GraphQL document is only valid for execution if all definitions are either
       * operation or fragment definitions.
       */
      function ExecutableDefinitionsRule(context) {
        return {
          Document: function Document(node) {
            for (
              var _i2 = 0, _node$definitions2 = node.definitions;
              _i2 < _node$definitions2.length;
              _i2++
            ) {
              var definition = _node$definitions2[_i2];

              if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
                var defName =
                  definition.kind === _kinds.Kind.SCHEMA_DEFINITION ||
                  definition.kind === _kinds.Kind.SCHEMA_EXTENSION
                    ? "schema"
                    : '"' + definition.name.value + '"';
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    "The ".concat(defName, " definition is not executable."),
                    definition
                  )
                );
              }
            }

            return false;
          }
        };
      }

      /***/
    },

    /***/ "1KsK": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var toStr = Object.prototype.toString;

      module.exports = function isArguments(value) {
        var str = toStr.call(value);
        var isArgs = str === "[object Arguments]";
        if (!isArgs) {
          isArgs =
            str !== "[object Array]" &&
            value !== null &&
            typeof value === "object" &&
            typeof value.length === "number" &&
            value.length >= 0 &&
            toStr.call(value.callee) === "[object Function]";
        }
        return isArgs;
      };

      /***/
    },

    /***/ "1fn3": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // http://262.ecma-international.org/5.1/#sec-9.1

      module.exports = __webpack_require__("Lxf3");

      /***/
    },

    /***/ "1seS": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var slice = Array.prototype.slice;
      var isArgs = __webpack_require__("1KsK");

      var origKeys = Object.keys;
      var keysShim = origKeys
        ? function keys(o) {
            return origKeys(o);
          }
        : __webpack_require__("sYn3");

      var originalKeys = Object.keys;

      keysShim.shim = function shimObjectKeys() {
        if (Object.keys) {
          var keysWorksWithArguments = (function() {
            // Safari 5.0 bug
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
          })(1, 2);
          if (!keysWorksWithArguments) {
            Object.keys = function keys(object) {
              // eslint-disable-line func-name-matching
              if (isArgs(object)) {
                return originalKeys(slice.call(object));
              }
              return originalKeys(object);
            };
          }
        } else {
          Object.keys = keysShim;
        }
        return Object.keys || keysShim;
      };

      module.exports = keysShim;

      /***/
    },

    /***/ "2WnT": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      /**
       * Unique enum value names
       *
       * A GraphQL enum type is only valid if all its values are uniquely named.
       */
      function UniqueEnumValueNamesRule(context) {
        var schema = context.getSchema();
        var existingTypeMap = schema
          ? schema.getTypeMap()
          : Object.create(null);
        var knownValueNames = Object.create(null);
        return {
          EnumTypeDefinition: checkValueUniqueness,
          EnumTypeExtension: checkValueUniqueness
        };

        function checkValueUniqueness(node) {
          var _node$values;

          var typeName = node.name.value;

          if (!knownValueNames[typeName]) {
            knownValueNames[typeName] = Object.create(null);
          } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var valueNodes =
            (_node$values = node.values) !== null && _node$values !== void 0
              ? _node$values
              : [];
          var valueNames = knownValueNames[typeName];

          for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {
            var valueDef = valueNodes[_i2];
            var valueName = valueDef.name.value;
            var existingType = existingTypeMap[typeName];

            if (
              (0, _definition.isEnumType)(existingType) &&
              existingType.getValue(valueName)
            ) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Enum value "'
                    .concat(typeName, ".")
                    .concat(
                      valueName,
                      '" already exists in the schema. It cannot also be defined in this type extension.'
                    ),
                  valueDef.name
                )
              );
            } else if (valueNames[valueName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Enum value "'
                    .concat(typeName, ".")
                    .concat(valueName, '" can only be defined once.'),
                  [valueNames[valueName], valueDef.name]
                )
              );
            } else {
              valueNames[valueName] = valueDef.name;
            }
          }

          return false;
        }
      }

      /***/
    },

    /***/ "3Esn": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      /* eslint-disable no-redeclare */
      // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
      var isInteger =
        Number.isInteger ||
        function(value) {
          return (
            typeof value === "number" &&
            isFinite(value) &&
            Math.floor(value) === value
          );
        };

      var _default = isInteger;
      exports.default = _default;

      /***/
    },

    /***/ "3SWA": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      // http://262.ecma-international.org/5.1/#sec-9.10

      module.exports = function CheckObjectCoercible(value, optMessage) {
        if (value == null) {
          throw new $TypeError(optMessage || "Cannot call method on " + value);
        }
        return value;
      };

      /***/
    },

    /***/ "3Tnt": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var isRelative = __webpack_require__("WAOt");
      var isWindows = __webpack_require__("Ndee");

      /**
       * Expose `isAbsolute`
       */

      module.exports = isAbsolute;

      /**
       * Returns true if a file path is absolute.
       *
       * @param  {String} `fp`
       * @return {Boolean}
       */

      function isAbsolute(fp) {
        if (typeof fp !== "string") {
          throw new TypeError("isAbsolute expects a string.");
        }
        return isWindows() ? isAbsolute.win32(fp) : isAbsolute.posix(fp);
      }

      /**
       * Test posix paths.
       */

      isAbsolute.posix = function posixPath(fp) {
        return fp.charAt(0) === "/";
      };

      /**
       * Test windows paths.
       */

      isAbsolute.win32 = function win32(fp) {
        if (
          /[a-z]/i.test(fp.charAt(0)) &&
          fp.charAt(1) === ":" &&
          fp.charAt(2) === "\\"
        ) {
          return true;
        }
        // Microsoft Azure absolute filepath
        if (fp.slice(0, 2) === "\\\\") {
          return true;
        }
        return !isRelative(fp);
      };

      /***/
    },

    /***/ "3XYS": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isLowerCase = exports.isUpperCase = exports.upperCaseFirst = exports.localeUpperCase = exports.upperCase = exports.titleCase = exports.swapCase = exports.spongeCase = exports.lowerCaseFirst = exports.localeLowerCase = exports.lowerCase = exports.snakeCase = exports.sentenceCase = exports.pathCase = exports.pascalCase = exports.paramCase = exports.noCase = exports.headerCase = exports.dotCase = exports.constantCase = exports.capitalCase = exports.camelCase = void 0;
      var changeCase = __webpack_require__("rY0A");
      var lowerCase1 = __webpack_require__("HcOx");
      var lowerCaseFirst1 = __webpack_require__("7m7E");
      var spongeCase1 = __webpack_require__("re0z");
      var swapCase1 = __webpack_require__("OgoC");
      var titleCase1 = __webpack_require__("cQuB");
      var upperCase1 = __webpack_require__("++DX");
      var upperCaseFirst1 = __webpack_require__("wb9o");
      var isUpperCase1 = __webpack_require__("8lN7");
      var isLowerCase1 = __webpack_require__("bVbM");
      // Core
      exports.camelCase = changeCase.camelCase;
      exports.capitalCase = changeCase.capitalCase;
      exports.constantCase = changeCase.constantCase;
      exports.dotCase = changeCase.dotCase;
      exports.headerCase = changeCase.headerCase;
      exports.noCase = changeCase.noCase;
      exports.paramCase = changeCase.paramCase;
      exports.pascalCase = changeCase.pascalCase;
      exports.pathCase = changeCase.pathCase;
      exports.sentenceCase = changeCase.sentenceCase;
      exports.snakeCase = changeCase.snakeCase;
      // Extended
      exports.lowerCase = lowerCase1.lowerCase;
      exports.localeLowerCase = lowerCase1.localeLowerCase;
      exports.lowerCaseFirst = lowerCaseFirst1.lowerCaseFirst;
      exports.spongeCase = spongeCase1.spongeCase;
      exports.swapCase = swapCase1.swapCase;
      exports.titleCase = titleCase1.titleCase;
      exports.upperCase = upperCase1.upperCase;
      exports.localeUpperCase = upperCase1.localeUpperCase;
      exports.upperCaseFirst = upperCaseFirst1.upperCaseFirst;
      exports.isUpperCase = isUpperCase1.isUpperCase;
      exports.isLowerCase = isLowerCase1.isLowerCase;

      /***/
    },

    /***/ "3aNz": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var define = __webpack_require__("82c2");
      var callBind = __webpack_require__("PrET");

      var implementation = __webpack_require__("HYxC");
      var getPolyfill = __webpack_require__("l1+S");
      var polyfill = getPolyfill();
      var shim = __webpack_require__("yCJC");

      var boundFlatMap = callBind(polyfill);

      define(boundFlatMap, {
        getPolyfill: getPolyfill,
        implementation: implementation,
        shim: shim
      });

      module.exports = boundFlatMap;

      /***/
    },

    /***/ "3lu9": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");
      var callBound = __webpack_require__("VF6F");

      var $TypeError = GetIntrinsic("%TypeError%");

      var IsArray = __webpack_require__("plxK");

      var $apply =
        GetIntrinsic("%Reflect.apply%", true) ||
        callBound("%Function.prototype.apply%");

      // https://ecma-international.org/ecma-262/6.0/#sec-call

      module.exports = function Call(F, V) {
        var argumentsList = arguments.length > 2 ? arguments[2] : [];
        if (!IsArray(argumentsList)) {
          throw new $TypeError(
            "Assertion failed: optional `argumentsList`, if provided, must be a List"
          );
        }
        return $apply(F, V, argumentsList);
      };

      /***/
    },

    /***/ "3w1o": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.typeFromAST = typeFromAST;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _kinds = __webpack_require__("xaK5");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function typeFromAST(schema, typeNode) {
        /* eslint-enable no-redeclare */
        var innerType;

        if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
          innerType = typeFromAST(schema, typeNode.type);
          return innerType && new _definition.GraphQLList(innerType);
        }

        if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
          innerType = typeFromAST(schema, typeNode.type);
          return innerType && new _definition.GraphQLNonNull(innerType);
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
          return schema.getType(typeNode.name.value);
        } // istanbul ignore next (Not reachable. All possible type nodes have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected type node: " + (0, _inspect.default)(typeNode)
          );
      }

      /***/
    },

    /***/ "3yyI": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.noCase = void 0;
      var lower_case_1 = __webpack_require__("HcOx");
      // Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
      var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
      // Remove all non-word characters.
      var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
      /**
       * Normalize the string into something other libraries can manipulate easier.
       */
      function noCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        var _a = options.splitRegexp,
          splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,
          _b = options.stripRegexp,
          stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,
          _c = options.transform,
          transform = _c === void 0 ? lower_case_1.lowerCase : _c,
          _d = options.delimiter,
          delimiter = _d === void 0 ? " " : _d;
        var result = replace(
          replace(input, splitRegexp, "$1\0$2"),
          stripRegexp,
          "\0"
        );
        var start = 0;
        var end = result.length;
        // Trim the delimiter from around the output string.
        while (result.charAt(start) === "\0") start++;
        while (result.charAt(end - 1) === "\0") end--;
        // Transform each token independently.
        return result
          .slice(start, end)
          .split("\0")
          .map(transform)
          .join(delimiter);
      }
      exports.noCase = noCase;
      /**
       * Replace `re` in the input string with the replacement value.
       */
      function replace(input, re, value) {
        if (re instanceof RegExp) return input.replace(re, value);
        return re.reduce(function(input, re) {
          return input.replace(re, value);
        }, input);
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "44eS": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = keyMap;

      /**
       * Creates a keyed JS object from an array, given a function to produce the keys
       * for each value in the array.
       *
       * This provides a convenient lookup for the array items if the key function
       * produces unique results.
       *
       *     const phoneBook = [
       *       { name: 'Jon', num: '555-1234' },
       *       { name: 'Jenny', num: '867-5309' }
       *     ]
       *
       *     // { Jon: { name: 'Jon', num: '555-1234' },
       *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
       *     const entriesByName = keyMap(
       *       phoneBook,
       *       entry => entry.name
       *     )
       *
       *     // { name: 'Jenny', num: '857-6309' }
       *     const jennyEntry = entriesByName['Jenny']
       *
       */
      function keyMap(list, keyFn) {
        return list.reduce(function(map, item) {
          map[keyFn(item)] = item;
          return map;
        }, Object.create(null));
      }

      /***/
    },

    /***/ "45CS": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const flow = __webpack_require__("CPS/");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));

      class FlowWithPickSelectionSetProcessor extends visitorPluginCommon.BaseSelectionSetProcessor {
        transformAliasesPrimitiveFields(schemaType, fields) {
          if (fields.length === 0) {
            return [];
          }
          const useFlowExactObject = this.config.useFlowExactObjects;
          const formatNamedField = this.config.formatNamedField;
          const fieldObj = schemaType.getFields();
          const parentName =
            (this.config.namespacedImportName
              ? `${this.config.namespacedImportName}.`
              : "") +
            this.config.convertName(schemaType.name, {
              useTypesPrefix: true
            });
          return [
            `{${useFlowExactObject ? "|" : ""} ${fields
              .map(
                aliasedField =>
                  `${formatNamedField(
                    aliasedField.alias,
                    fieldObj[aliasedField.fieldName].type
                  )}: $ElementType<${parentName}, '${aliasedField.fieldName}'>`
              )
              .join(", ")} ${useFlowExactObject ? "|" : ""}}`
          ];
        }
        buildFieldsIntoObject(allObjectsMerged) {
          return `...{ ${allObjectsMerged.join(", ")} }`;
        }
        buildSelectionSetFromStrings(pieces) {
          if (pieces.length === 0) {
            return null;
          } else if (pieces.length === 1) {
            return pieces[0];
          } else {
            return `({\n  ${pieces
              .map(t => visitorPluginCommon.indent(`...${t}`))
              .join(`,\n`)}\n})`;
          }
        }
        transformLinkFields(fields) {
          if (fields.length === 0) {
            return [];
          }
          const useFlowExactObject = this.config.useFlowExactObjects;
          return [
            `{${useFlowExactObject ? "|" : ""} ${fields
              .map(
                field => `${field.alias || field.name}: ${field.selectionSet}`
              )
              .join(", ")} ${useFlowExactObject ? "|" : ""}}`
          ];
        }
        transformPrimitiveFields(schemaType, fields) {
          if (fields.length === 0) {
            return [];
          }
          const useFlowExactObject = this.config.useFlowExactObjects;
          const formatNamedField = this.config.formatNamedField;
          const parentName =
            (this.config.namespacedImportName
              ? `${this.config.namespacedImportName}.`
              : "") +
            this.config.convertName(schemaType.name, {
              useTypesPrefix: true
            });
          const fieldObj = schemaType.getFields();
          let hasConditionals = false;
          const conditilnalsList = [];
          let resString = `$Pick<${parentName}, {${
            useFlowExactObject ? "|" : ""
          } ${fields
            .map(field => {
              if (field.isConditional) {
                hasConditionals = true;
                conditilnalsList.push(field.fieldName);
              }
              return `${formatNamedField(
                field.fieldName,
                fieldObj[field.fieldName].type
              )}: *`;
            })
            .join(", ")} ${useFlowExactObject ? "|" : ""}}>`;
          if (hasConditionals) {
            resString = `$MakeOptional<${resString}, ${conditilnalsList
              .map(field => `{ ${field}: * }`)
              .join(" | ")}>`;
          }
          return [resString];
        }
        transformTypenameField(type, name) {
          return [`{ ${name}: ${type} }`];
        }
      }

      class FlowSelectionSetToObject extends visitorPluginCommon.SelectionSetToObject {
        getUnknownType() {
          return "any";
        }
        createNext(parentSchemaType, selectionSet) {
          return new FlowSelectionSetToObject(
            this._processor,
            this._scalars,
            this._schema,
            this._convertName.bind(this),
            this._getFragmentSuffix.bind(this),
            this._loadedFragments,
            this._config,
            parentSchemaType,
            selectionSet
          );
        }
      }
      class FlowDocumentsVisitor extends visitorPluginCommon.BaseDocumentsVisitor {
        constructor(schema, config, allFragments) {
          super(
            config,
            {
              useFlowExactObjects: visitorPluginCommon.getConfigValue(
                config.useFlowExactObjects,
                true
              ),
              useFlowReadOnlyTypes: visitorPluginCommon.getConfigValue(
                config.useFlowReadOnlyTypes,
                false
              )
            },
            schema
          );
          autoBind(this);
          const wrapArray = type =>
            `${
              this.config.useFlowReadOnlyTypes ? "$ReadOnlyArray" : "Array"
            }<${type}>`;
          const wrapOptional = type => `?${type}`;
          const useFlowReadOnlyTypes = this.config.useFlowReadOnlyTypes;
          const formatNamedField = (name, type, isConditional = false) => {
            const optional =
              (!!type && !graphql.isNonNullType(type)) || isConditional;
            return `${useFlowReadOnlyTypes ? "+" : ""}${name}${
              optional ? "?" : ""
            }`;
          };
          const processorConfig = {
            namespacedImportName: this.config.namespacedImportName,
            convertName: this.convertName.bind(this),
            enumPrefix: this.config.enumPrefix,
            scalars: this.scalars,
            formatNamedField,
            wrapTypeWithModifiers(baseType, type) {
              return visitorPluginCommon.wrapTypeWithModifiers(baseType, type, {
                wrapOptional,
                wrapArray
              });
            }
          };
          const processor = config.preResolveTypes
            ? new visitorPluginCommon.PreResolveTypesProcessor(processorConfig)
            : new FlowWithPickSelectionSetProcessor({
                ...processorConfig,
                useFlowExactObjects: this.config.useFlowExactObjects
              });
          const enumsNames = Object.keys(schema.getTypeMap()).filter(typeName =>
            graphql.isEnumType(schema.getType(typeName))
          );
          this.setSelectionSetHandler(
            new FlowSelectionSetToObject(
              processor,
              this.scalars,
              this.schema,
              this.convertName.bind(this),
              this.getFragmentSuffix.bind(this),
              allFragments,
              this.config
            )
          );
          this.setVariablesTransformer(
            new flow.FlowOperationVariablesToObject(
              this.scalars,
              this.convertName.bind(this),
              this.config.namespacedImportName,
              enumsNames,
              this.config.enumPrefix,
              {},
              true
            )
          );
        }
        getPunctuation(declarationKind) {
          return declarationKind === "type" ? "," : ";";
        }
        getImports() {
          return !this.config.globalNamespace
            ? this.config.fragmentImports
                // In flow, all non ` * as x` imports must be type imports
                .map(fragmentImport => ({
                  ...fragmentImport,
                  typesImport: true
                }))
                .map(fragmentImport =>
                  visitorPluginCommon.generateFragmentImportStatement(
                    fragmentImport,
                    "type"
                  )
                )
            : [];
        }
      }

      const plugin = (schema, rawDocuments, config) => {
        const documents = config.flattenGeneratedTypes
          ? visitorPluginCommon.optimizeOperations(schema, rawDocuments, {
              includeFragments: true
            })
          : rawDocuments;
        const prefix = config.preResolveTypes
          ? ""
          : `type $Pick<Origin: Object, Keys: Object> = $ObjMapi<Keys, <Key>(k: Key) => $ElementType<Origin, Key>>;\n`;
        const allAst = graphql.concatAST(documents.map(v => v.document));
        const includedFragments = allAst.definitions.filter(
          d => d.kind === graphql.Kind.FRAGMENT_DEFINITION
        );
        const allFragments = [
          ...includedFragments.map(fragmentDef => ({
            node: fragmentDef,
            name: fragmentDef.name.value,
            onType: fragmentDef.typeCondition.name.value,
            isExternal: false
          })),
          ...(config.externalFragments || [])
        ];
        const visitor = new FlowDocumentsVisitor(schema, config, allFragments);
        const visitorResult = graphql.visit(allAst, {
          leave: visitor
        });
        return {
          prepend: ["// @flow\n", ...visitor.getImports()],
          content: [prefix, ...visitorResult.definitions].join("\n")
        };
      };

      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ "4M+f": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = safeArrayFrom;

      var _symbols = __webpack_require__("6CEn");

      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (
          typeof Symbol === "function" &&
          typeof Symbol.iterator === "symbol"
        ) {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          };
        }
        return _typeof(obj);
      }

      /**
       * Safer version of `Array.from` that return `null` if value isn't convertible to array.
       * Also protects against Array-like objects without items.
       *
       * @example
       *
       * safeArrayFrom([ 1, 2, 3 ]) // [1, 2, 3]
       * safeArrayFrom('ABC') // null
       * safeArrayFrom({ length: 1 }) // null
       * safeArrayFrom({ length: 1, 0: 'Alpha' }) // ['Alpha']
       * safeArrayFrom({ key: 'value' }) // null
       * safeArrayFrom(new Map()) // []
       *
       */
      function safeArrayFrom(collection) {
        var mapFn =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : function(item) {
                return item;
              };

        if (collection == null || _typeof(collection) !== "object") {
          return null;
        }

        if (Array.isArray(collection)) {
          return collection.map(mapFn);
        } // Is Iterable?

        var iteratorMethod = collection[_symbols.SYMBOL_ITERATOR];

        if (typeof iteratorMethod === "function") {
          // $FlowFixMe[incompatible-use]
          var iterator = iteratorMethod.call(collection);
          var result = [];
          var step;

          for (var i = 0; !(step = iterator.next()).done; ++i) {
            result.push(mapFn(step.value, i));
          }

          return result;
        } // Is Array like?

        var length = collection.length;

        if (typeof length === "number" && length >= 0 && length % 1 === 0) {
          var _result = [];

          for (var _i = 0; _i < length; ++_i) {
            if (!Object.prototype.hasOwnProperty.call(collection, _i)) {
              return null;
            }

            _result.push(mapFn(collection[String(_i)], _i));
          }

          return _result;
        }

        return null;
      }

      /***/
    },

    /***/ "58fJ": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getOperationRootType = getOperationRootType;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Extracts the root type of the operation from the schema.
       */
      function getOperationRootType(schema, operation) {
        if (operation.operation === "query") {
          var queryType = schema.getQueryType();

          if (!queryType) {
            throw new _GraphQLError.GraphQLError(
              "Schema does not define the required query root type.",
              operation
            );
          }

          return queryType;
        }

        if (operation.operation === "mutation") {
          var mutationType = schema.getMutationType();

          if (!mutationType) {
            throw new _GraphQLError.GraphQLError(
              "Schema is not configured for mutations.",
              operation
            );
          }

          return mutationType;
        }

        if (operation.operation === "subscription") {
          var subscriptionType = schema.getSubscriptionType();

          if (!subscriptionType) {
            throw new _GraphQLError.GraphQLError(
              "Schema is not configured for subscriptions.",
              operation
            );
          }

          return subscriptionType;
        }

        throw new _GraphQLError.GraphQLError(
          "Can only have query, mutation and subscription operations.",
          operation
        );
      }

      /***/
    },

    /***/ "5CxI": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // TODO: remove, semver-major

      module.exports = __webpack_require__("AM7I");

      /***/
    },

    /***/ "5iWz": /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var Profiler = __webpack_require__("tNbq");

      var invariant = __webpack_require__("OUqe");

      var _require = __webpack_require__("VrDQ"),
        createUserError = _require.createUserError; // $FlowFixMe[untyped-import] - immutable.js is not flow-typed

      var _require2 = __webpack_require__("r4ky"),
        ImmutableOrderedMap = _require2.OrderedMap;

      /**
       * An immutable representation of a corpus of documents being compiled together.
       * For each document, the context stores the IR and any validation errors.
       */
      var CompilerContext = /*#__PURE__*/ (function() {
        // $FlowFixMe[value-as-type]
        function CompilerContext(schema) {
          this._isMutable = false;
          this._documents = new ImmutableOrderedMap();
          this._withTransform = new WeakMap();
          this._schema = schema;
        }
        /**
         * Returns the documents for the context in the order they were added.
         */

        var _proto = CompilerContext.prototype;

        _proto.documents = function documents() {
          return this._documents.toArray();
        };

        _proto.forEachDocument = function forEachDocument(fn) {
          this._documents.forEach(fn);
        };

        _proto.replace = function replace(node) {
          return this._update(
            this._documents.update(node.name, function(existing) {
              !existing ? (false ? undefined : invariant(false)) : void 0;
              return node;
            })
          );
        };

        _proto.add = function add(node) {
          return this._update(
            this._documents.update(node.name, function(existing) {
              !!existing ? (false ? undefined : invariant(false)) : void 0;
              return node;
            })
          );
        };

        _proto.addAll = function addAll(nodes) {
          return this.withMutations(function(mutable) {
            return nodes.reduce(function(ctx, definition) {
              return ctx.add(definition);
            }, mutable);
          });
        };
        /**
         * Apply a list of compiler transforms and return a new compiler context.
         */

        _proto.applyTransforms = function applyTransforms(
          transforms,
          reporter
        ) {
          var _this = this;

          return Profiler.run("applyTransforms", function() {
            return transforms.reduce(function(ctx, transform) {
              return ctx.applyTransform(transform, reporter);
            }, _this);
          });
        };
        /**
         * Applies a transform to this context, returning a new context.
         *
         * This is memoized such that applying the same sequence of transforms will
         * not result in duplicated work.
         */

        _proto.applyTransform = function applyTransform(transform, reporter) {
          var transformed = this._withTransform.get(transform);

          if (!transformed) {
            var start = process.hrtime();
            transformed = Profiler.instrument(transform)(this);
            var delta = process.hrtime(start);
            var deltaMs = Math.round((delta[0] * 1e9 + delta[1]) / 1e6);
            reporter && reporter.reportTime(transform.name, deltaMs);

            this._withTransform.set(transform, transformed);
          }

          return transformed;
        };

        _proto.get = function get(name) {
          return this._documents.get(name);
        };

        _proto.getFragment = function getFragment(name, referencedFrom) {
          var node = this._documents.get(name);

          if (node == null) {
            throw createUserError(
              "Cannot find fragment '".concat(name, "'."),
              referencedFrom != null ? [referencedFrom] : null
            );
          } else if (node.kind !== "Fragment") {
            throw createUserError(
              "Cannot find fragment '".concat(
                name,
                "', a document with this name exists "
              ) + "but is not a fragment.",
              [node.loc, referencedFrom].filter(Boolean)
            );
          }

          return node;
        };

        _proto.getRoot = function getRoot(name) {
          var node = this._documents.get(name);

          if (node == null) {
            throw createUserError("Cannot find root '".concat(name, "'."));
          } else if (node.kind !== "Root") {
            throw createUserError(
              "Cannot find root '".concat(
                name,
                "', a document with this name exists but "
              ) + "is not a root.",
              [node.loc]
            );
          }

          return node;
        };

        _proto.remove = function remove(name) {
          return this._update(this._documents["delete"](name));
        };

        _proto.withMutations = function withMutations(fn) {
          var mutableCopy = this._update(this._documents.asMutable());

          mutableCopy._isMutable = true;
          var result = fn(mutableCopy);
          result._isMutable = false;
          result._documents = result._documents.asImmutable();
          return this._documents === result._documents ? this : result;
        };

        _proto._update = function _update(documents) {
          var context = this._isMutable
            ? this
            : new CompilerContext(this.getSchema());
          context._documents = documents;
          return context;
        };

        _proto.getSchema = function getSchema() {
          return this._schema;
        };

        return CompilerContext;
      })();

      module.exports = CompilerContext;

      /***/
    },

    /***/ "5wpL": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isObjectLike;

      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (
          typeof Symbol === "function" &&
          typeof Symbol.iterator === "symbol"
        ) {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          };
        }
        return _typeof(obj);
      }

      /**
       * Return true if `value` is object-like. A value is object-like if it's not
       * `null` and has a `typeof` result of "object".
       */
      function isObjectLike(value) {
        return _typeof(value) == "object" && value !== null;
      }

      /***/
    },

    /***/ "6CEn": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SYMBOL_TO_STRING_TAG = exports.SYMBOL_ASYNC_ITERATOR = exports.SYMBOL_ITERATOR = void 0;
      // In ES2015 (or a polyfilled) environment, this will be Symbol.iterator
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
      var SYMBOL_ITERATOR =
        typeof Symbol === "function" && Symbol.iterator != null
          ? Symbol.iterator
          : "@@iterator"; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

      exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
      var SYMBOL_ASYNC_ITERATOR =
        typeof Symbol === "function" && Symbol.asyncIterator != null
          ? Symbol.asyncIterator
          : "@@asyncIterator"; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

      exports.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
      var SYMBOL_TO_STRING_TAG =
        typeof Symbol === "function" && Symbol.toStringTag != null
          ? Symbol.toStringTag
          : "@@toStringTag";
      exports.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;

      /***/
    },

    /***/ "6DTX": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;

      var _objectValues3 = _interopRequireDefault(__webpack_require__("YDZp"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _GraphQLError = __webpack_require__("MafX");

      var _printer = __webpack_require__("gCJq");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Value literals of correct type
       *
       * A GraphQL document is only valid if all value literals are of the type
       * expected at their position.
       */
      function ValuesOfCorrectTypeRule(context) {
        return {
          ListValue: function ListValue(node) {
            // Note: TypeInfo will traverse into a list's item type, so look to the
            // parent input type to check if it is a list.
            var type = (0, _definition.getNullableType)(
              context.getParentInputType()
            );

            if (!(0, _definition.isListType)(type)) {
              isValidValueNode(context, node);
              return false; // Don't traverse further.
            }
          },
          ObjectValue: function ObjectValue(node) {
            var type = (0, _definition.getNamedType)(context.getInputType());

            if (!(0, _definition.isInputObjectType)(type)) {
              isValidValueNode(context, node);
              return false; // Don't traverse further.
            } // Ensure every required field exists.

            var fieldNodeMap = (0, _keyMap.default)(node.fields, function(
              field
            ) {
              return field.name.value;
            });

            for (
              var _i2 = 0,
                _objectValues2 = (0, _objectValues3.default)(type.getFields());
              _i2 < _objectValues2.length;
              _i2++
            ) {
              var fieldDef = _objectValues2[_i2];
              var fieldNode = fieldNodeMap[fieldDef.name];

              if (
                !fieldNode &&
                (0, _definition.isRequiredInputField)(fieldDef)
              ) {
                var typeStr = (0, _inspect.default)(fieldDef.type);
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Field "'
                      .concat(type.name, ".")
                      .concat(fieldDef.name, '" of required type "')
                      .concat(typeStr, '" was not provided.'),
                    node
                  )
                );
              }
            }
          },
          ObjectField: function ObjectField(node) {
            var parentType = (0, _definition.getNamedType)(
              context.getParentInputType()
            );
            var fieldType = context.getInputType();

            if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
              var suggestions = (0, _suggestionList.default)(
                node.name.value,
                Object.keys(parentType.getFields())
              );
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Field "'
                    .concat(node.name.value, '" is not defined by type "')
                    .concat(parentType.name, '".') +
                    (0, _didYouMean.default)(suggestions),
                  node
                )
              );
            }
          },
          NullValue: function NullValue(node) {
            var type = context.getInputType();

            if ((0, _definition.isNonNullType)(type)) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Expected value of type "'
                    .concat((0, _inspect.default)(type), '", found ')
                    .concat((0, _printer.print)(node), "."),
                  node
                )
              );
            }
          },
          EnumValue: function EnumValue(node) {
            return isValidValueNode(context, node);
          },
          IntValue: function IntValue(node) {
            return isValidValueNode(context, node);
          },
          FloatValue: function FloatValue(node) {
            return isValidValueNode(context, node);
          },
          StringValue: function StringValue(node) {
            return isValidValueNode(context, node);
          },
          BooleanValue: function BooleanValue(node) {
            return isValidValueNode(context, node);
          }
        };
      }
      /**
       * Any value literal may be a valid representation of a Scalar, depending on
       * that scalar type.
       */

      function isValidValueNode(context, node) {
        // Report any error at the full type expected by the location.
        var locationType = context.getInputType();

        if (!locationType) {
          return;
        }

        var type = (0, _definition.getNamedType)(locationType);

        if (!(0, _definition.isLeafType)(type)) {
          var typeStr = (0, _inspect.default)(locationType);
          context.reportError(
            new _GraphQLError.GraphQLError(
              'Expected value of type "'
                .concat(typeStr, '", found ')
                .concat((0, _printer.print)(node), "."),
              node
            )
          );
          return;
        } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
        // which may throw or return an invalid value to indicate failure.

        try {
          var parseResult = type.parseLiteral(
            node,
            undefined
            /* variables */
          );

          if (parseResult === undefined) {
            var _typeStr = (0, _inspect.default)(locationType);

            context.reportError(
              new _GraphQLError.GraphQLError(
                'Expected value of type "'
                  .concat(_typeStr, '", found ')
                  .concat((0, _printer.print)(node), "."),
                node
              )
            );
          }
        } catch (error) {
          var _typeStr2 = (0, _inspect.default)(locationType);

          if (error instanceof _GraphQLError.GraphQLError) {
            context.reportError(error);
          } else {
            context.reportError(
              new _GraphQLError.GraphQLError(
                'Expected value of type "'
                  .concat(_typeStr2, '", found ')
                  .concat((0, _printer.print)(node), "; ") + error.message,
                node,
                undefined,
                undefined,
                undefined,
                error
              )
            );
          }
        }
      }

      /***/
    },

    /***/ "6OWx": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize3;

      /**
       * Memoizes the provided three-argument function.
       */
      function memoize3(fn) {
        var cache0;
        return function memoized(a1, a2, a3) {
          if (!cache0) {
            cache0 = new WeakMap();
          }

          var cache1 = cache0.get(a1);
          var cache2;

          if (cache1) {
            cache2 = cache1.get(a2);

            if (cache2) {
              var cachedValue = cache2.get(a3);

              if (cachedValue !== undefined) {
                return cachedValue;
              }
            }
          } else {
            cache1 = new WeakMap();
            cache0.set(a1, cache1);
          }

          if (!cache2) {
            cache2 = new WeakMap();
            cache1.set(a2, cache2);
          }

          var newValue = fn(a1, a2, a3);
          cache2.set(a3, newValue);
          return newValue;
        };
      }

      /***/
    },

    /***/ "6fdH": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
      var nodejsCustomInspectSymbol =
        typeof Symbol === "function" && typeof Symbol.for === "function"
          ? Symbol.for("nodejs.util.inspect.custom")
          : undefined;
      var _default = nodejsCustomInspectSymbol;
      exports.default = _default;

      /***/
    },

    /***/ "6gHg": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $Object = GetIntrinsic("%Object%");

      var RequireObjectCoercible = __webpack_require__("oCqT");

      // https://ecma-international.org/ecma-262/6.0/#sec-toobject

      module.exports = function ToObject(value) {
        RequireObjectCoercible(value);
        return $Object(value);
      };

      /***/
    },

    /***/ "6i1E": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.capitalCase = exports.capitalCaseTransform = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var no_case_1 = __webpack_require__("3yyI");
      var upper_case_first_1 = __webpack_require__("wb9o");
      function capitalCaseTransform(input) {
        return upper_case_first_1.upperCaseFirst(input.toLowerCase());
      }
      exports.capitalCaseTransform = capitalCaseTransform;
      function capitalCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return no_case_1.noCase(
          input,
          tslib_1.__assign(
            { delimiter: " ", transform: capitalCaseTransform },
            options
          )
        );
      }
      exports.capitalCase = capitalCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "6r8j": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * No deprecated
       *
       * A GraphQL document is only valid if all selected fields and all used enum values have not been
       * deprecated.
       *
       * Note: This rule is optional and is not part of the Validation section of the GraphQL
       * Specification. The main purpose of this rule is detection of deprecated usages and not
       * necessarily to forbid their use when querying a service.
       */
      function NoDeprecatedCustomRule(context) {
        return {
          Field: function Field(node) {
            var fieldDef = context.getFieldDef();
            var deprecationReason =
              fieldDef === null || fieldDef === void 0
                ? void 0
                : fieldDef.deprecationReason;

            if (fieldDef && deprecationReason != null) {
              var parentType = context.getParentType();
              parentType != null || (0, _invariant.default)(0);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "The field "
                    .concat(parentType.name, ".")
                    .concat(fieldDef.name, " is deprecated. ")
                    .concat(deprecationReason),
                  node
                )
              );
            }
          },
          Argument: function Argument(node) {
            var argDef = context.getArgument();
            var deprecationReason =
              argDef === null || argDef === void 0
                ? void 0
                : argDef.deprecationReason;

            if (argDef && deprecationReason != null) {
              var directiveDef = context.getDirective();

              if (directiveDef != null) {
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Directive "@'
                      .concat(directiveDef.name, '" argument "')
                      .concat(argDef.name, '" is deprecated. ')
                      .concat(deprecationReason),
                    node
                  )
                );
              } else {
                var parentType = context.getParentType();
                var fieldDef = context.getFieldDef();
                (parentType != null && fieldDef != null) ||
                  (0, _invariant.default)(0);
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Field "'
                      .concat(parentType.name, ".")
                      .concat(fieldDef.name, '" argument "')
                      .concat(argDef.name, '" is deprecated. ')
                      .concat(deprecationReason),
                    node
                  )
                );
              }
            }
          },
          ObjectField: function ObjectField(node) {
            var inputObjectDef = (0, _definition.getNamedType)(
              context.getParentInputType()
            );

            if ((0, _definition.isInputObjectType)(inputObjectDef)) {
              var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off

              var deprecationReason =
                inputFieldDef === null || inputFieldDef === void 0
                  ? void 0
                  : inputFieldDef.deprecationReason;

              if (deprecationReason != null) {
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    "The input field "
                      .concat(inputObjectDef.name, ".")
                      .concat(inputFieldDef.name, " is deprecated. ")
                      .concat(deprecationReason),
                    node
                  )
                );
              }
            }
          },
          EnumValue: function EnumValue(node) {
            var enumValueDef = context.getEnumValue();
            var deprecationReason =
              enumValueDef === null || enumValueDef === void 0
                ? void 0
                : enumValueDef.deprecationReason;

            if (enumValueDef && deprecationReason != null) {
              var enumTypeDef = (0, _definition.getNamedType)(
                context.getInputType()
              );
              enumTypeDef != null || (0, _invariant.default)(0);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'The enum value "'
                    .concat(enumTypeDef.name, ".")
                    .concat(enumValueDef.name, '" is deprecated. ')
                    .concat(deprecationReason),
                  node
                )
              );
            }
          }
        };
      }

      /***/
    },

    /***/ "7Ji9": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.assertValidName = assertValidName;
      exports.isValidNameError = isValidNameError;

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _GraphQLError = __webpack_require__("MafX");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
      /**
       * Upholds the spec rules about naming.
       */

      function assertValidName(name) {
        var error = isValidNameError(name);

        if (error) {
          throw error;
        }

        return name;
      }
      /**
       * Returns an Error if a name is invalid.
       */

      function isValidNameError(name) {
        typeof name === "string" ||
          (0, _devAssert.default)(0, "Expected name to be a string.");

        if (name.length > 1 && name[0] === "_" && name[1] === "_") {
          return new _GraphQLError.GraphQLError(
            'Name "'.concat(
              name,
              '" must not begin with "__", which is reserved by GraphQL introspection.'
            )
          );
        }

        if (!NAME_RX.test(name)) {
          return new _GraphQLError.GraphQLError(
            'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "'.concat(
              name,
              '" does not.'
            )
          );
        }
      }

      /***/
    },

    /***/ "7OAR": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getIntrospectionQuery = getIntrospectionQuery;

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      function getIntrospectionQuery(options) {
        var optionsWithDefault = _objectSpread(
          {
            descriptions: true,
            specifiedByUrl: false,
            directiveIsRepeatable: false,
            schemaDescription: false,
            inputValueDeprecation: false
          },
          options
        );

        var descriptions = optionsWithDefault.descriptions ? "description" : "";
        var specifiedByUrl = optionsWithDefault.specifiedByUrl
          ? "specifiedByUrl"
          : "";
        var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable
          ? "isRepeatable"
          : "";
        var schemaDescription = optionsWithDefault.schemaDescription
          ? descriptions
          : "";

        function inputDeprecation(str) {
          return optionsWithDefault.inputValueDeprecation ? str : "";
        }

        return "\n    query IntrospectionQuery {\n      __schema {\n        "
          .concat(
            schemaDescription,
            "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          "
          )
          .concat(descriptions, "\n          ")
          .concat(
            directiveIsRepeatable,
            "\n          locations\n          args"
          )
          .concat(
            inputDeprecation("(includeDeprecated: true)"),
            " {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      "
          )
          .concat(descriptions, "\n      ")
          .concat(
            specifiedByUrl,
            "\n      fields(includeDeprecated: true) {\n        name\n        "
          )
          .concat(descriptions, "\n        args")
          .concat(
            inputDeprecation("(includeDeprecated: true)"),
            " {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields"
          )
          .concat(
            inputDeprecation("(includeDeprecated: true)"),
            " {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        "
          )
          .concat(
            descriptions,
            "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      "
          )
          .concat(
            descriptions,
            "\n      type { ...TypeRef }\n      defaultValue\n      "
          )
          .concat(inputDeprecation("isDeprecated"), "\n      ")
          .concat(
            inputDeprecation("deprecationReason"),
            "\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "
          );
      }

      /***/
    },

    /***/ "7alT": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports = function uncPathRegex() {
        return /^[\\\/]{2,}[^\\\/]+[\\\/]+[^\\\/]+/;
      };

      /***/
    },

    /***/ "7m7E": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.lowerCaseFirst = void 0;
      /**
       * Lower case the first character of an input string.
       */
      function lowerCaseFirst(input) {
        return input.charAt(0).toLowerCase() + input.substr(1);
      }
      exports.lowerCaseFirst = lowerCaseFirst;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "7qPd": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports =
        Number.isNaN ||
        function isNaN(a) {
          return a !== a;
        };

      /***/
    },

    /***/ "82c2": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var keys = __webpack_require__("1seS");
      var hasSymbols =
        typeof Symbol === "function" && typeof Symbol("foo") === "symbol";

      var toStr = Object.prototype.toString;
      var concat = Array.prototype.concat;
      var origDefineProperty = Object.defineProperty;

      var isFunction = function(fn) {
        return (
          typeof fn === "function" && toStr.call(fn) === "[object Function]"
        );
      };

      var arePropertyDescriptorsSupported = function() {
        var obj = {};
        try {
          origDefineProperty(obj, "x", { enumerable: false, value: obj });
          // eslint-disable-next-line no-unused-vars, no-restricted-syntax
          for (var _ in obj) {
            // jscs:ignore disallowUnusedVariables
            return false;
          }
          return obj.x === obj;
        } catch (e) {
          /* this is IE 8. */
          return false;
        }
      };
      var supportsDescriptors =
        origDefineProperty && arePropertyDescriptorsSupported();

      var defineProperty = function(object, name, value, predicate) {
        if (name in object && (!isFunction(predicate) || !predicate())) {
          return;
        }
        if (supportsDescriptors) {
          origDefineProperty(object, name, {
            configurable: true,
            enumerable: false,
            value: value,
            writable: true
          });
        } else {
          object[name] = value;
        }
      };

      var defineProperties = function(object, map) {
        var predicates = arguments.length > 2 ? arguments[2] : {};
        var props = keys(map);
        if (hasSymbols) {
          props = concat.call(props, Object.getOwnPropertySymbols(map));
        }
        for (var i = 0; i < props.length; i += 1) {
          defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
        }
      };

      defineProperties.supportsDescriptors = !!supportsDescriptors;

      module.exports = defineProperties;

      /***/
    },

    /***/ "8FyL": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "isSchema", {
        enumerable: true,
        get: function get() {
          return _schema.isSchema;
        }
      });
      Object.defineProperty(exports, "assertSchema", {
        enumerable: true,
        get: function get() {
          return _schema.assertSchema;
        }
      });
      Object.defineProperty(exports, "GraphQLSchema", {
        enumerable: true,
        get: function get() {
          return _schema.GraphQLSchema;
        }
      });
      Object.defineProperty(exports, "isType", {
        enumerable: true,
        get: function get() {
          return _definition.isType;
        }
      });
      Object.defineProperty(exports, "isScalarType", {
        enumerable: true,
        get: function get() {
          return _definition.isScalarType;
        }
      });
      Object.defineProperty(exports, "isObjectType", {
        enumerable: true,
        get: function get() {
          return _definition.isObjectType;
        }
      });
      Object.defineProperty(exports, "isInterfaceType", {
        enumerable: true,
        get: function get() {
          return _definition.isInterfaceType;
        }
      });
      Object.defineProperty(exports, "isUnionType", {
        enumerable: true,
        get: function get() {
          return _definition.isUnionType;
        }
      });
      Object.defineProperty(exports, "isEnumType", {
        enumerable: true,
        get: function get() {
          return _definition.isEnumType;
        }
      });
      Object.defineProperty(exports, "isInputObjectType", {
        enumerable: true,
        get: function get() {
          return _definition.isInputObjectType;
        }
      });
      Object.defineProperty(exports, "isListType", {
        enumerable: true,
        get: function get() {
          return _definition.isListType;
        }
      });
      Object.defineProperty(exports, "isNonNullType", {
        enumerable: true,
        get: function get() {
          return _definition.isNonNullType;
        }
      });
      Object.defineProperty(exports, "isInputType", {
        enumerable: true,
        get: function get() {
          return _definition.isInputType;
        }
      });
      Object.defineProperty(exports, "isOutputType", {
        enumerable: true,
        get: function get() {
          return _definition.isOutputType;
        }
      });
      Object.defineProperty(exports, "isLeafType", {
        enumerable: true,
        get: function get() {
          return _definition.isLeafType;
        }
      });
      Object.defineProperty(exports, "isCompositeType", {
        enumerable: true,
        get: function get() {
          return _definition.isCompositeType;
        }
      });
      Object.defineProperty(exports, "isAbstractType", {
        enumerable: true,
        get: function get() {
          return _definition.isAbstractType;
        }
      });
      Object.defineProperty(exports, "isWrappingType", {
        enumerable: true,
        get: function get() {
          return _definition.isWrappingType;
        }
      });
      Object.defineProperty(exports, "isNullableType", {
        enumerable: true,
        get: function get() {
          return _definition.isNullableType;
        }
      });
      Object.defineProperty(exports, "isNamedType", {
        enumerable: true,
        get: function get() {
          return _definition.isNamedType;
        }
      });
      Object.defineProperty(exports, "isRequiredArgument", {
        enumerable: true,
        get: function get() {
          return _definition.isRequiredArgument;
        }
      });
      Object.defineProperty(exports, "isRequiredInputField", {
        enumerable: true,
        get: function get() {
          return _definition.isRequiredInputField;
        }
      });
      Object.defineProperty(exports, "assertType", {
        enumerable: true,
        get: function get() {
          return _definition.assertType;
        }
      });
      Object.defineProperty(exports, "assertScalarType", {
        enumerable: true,
        get: function get() {
          return _definition.assertScalarType;
        }
      });
      Object.defineProperty(exports, "assertObjectType", {
        enumerable: true,
        get: function get() {
          return _definition.assertObjectType;
        }
      });
      Object.defineProperty(exports, "assertInterfaceType", {
        enumerable: true,
        get: function get() {
          return _definition.assertInterfaceType;
        }
      });
      Object.defineProperty(exports, "assertUnionType", {
        enumerable: true,
        get: function get() {
          return _definition.assertUnionType;
        }
      });
      Object.defineProperty(exports, "assertEnumType", {
        enumerable: true,
        get: function get() {
          return _definition.assertEnumType;
        }
      });
      Object.defineProperty(exports, "assertInputObjectType", {
        enumerable: true,
        get: function get() {
          return _definition.assertInputObjectType;
        }
      });
      Object.defineProperty(exports, "assertListType", {
        enumerable: true,
        get: function get() {
          return _definition.assertListType;
        }
      });
      Object.defineProperty(exports, "assertNonNullType", {
        enumerable: true,
        get: function get() {
          return _definition.assertNonNullType;
        }
      });
      Object.defineProperty(exports, "assertInputType", {
        enumerable: true,
        get: function get() {
          return _definition.assertInputType;
        }
      });
      Object.defineProperty(exports, "assertOutputType", {
        enumerable: true,
        get: function get() {
          return _definition.assertOutputType;
        }
      });
      Object.defineProperty(exports, "assertLeafType", {
        enumerable: true,
        get: function get() {
          return _definition.assertLeafType;
        }
      });
      Object.defineProperty(exports, "assertCompositeType", {
        enumerable: true,
        get: function get() {
          return _definition.assertCompositeType;
        }
      });
      Object.defineProperty(exports, "assertAbstractType", {
        enumerable: true,
        get: function get() {
          return _definition.assertAbstractType;
        }
      });
      Object.defineProperty(exports, "assertWrappingType", {
        enumerable: true,
        get: function get() {
          return _definition.assertWrappingType;
        }
      });
      Object.defineProperty(exports, "assertNullableType", {
        enumerable: true,
        get: function get() {
          return _definition.assertNullableType;
        }
      });
      Object.defineProperty(exports, "assertNamedType", {
        enumerable: true,
        get: function get() {
          return _definition.assertNamedType;
        }
      });
      Object.defineProperty(exports, "getNullableType", {
        enumerable: true,
        get: function get() {
          return _definition.getNullableType;
        }
      });
      Object.defineProperty(exports, "getNamedType", {
        enumerable: true,
        get: function get() {
          return _definition.getNamedType;
        }
      });
      Object.defineProperty(exports, "GraphQLScalarType", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLScalarType;
        }
      });
      Object.defineProperty(exports, "GraphQLObjectType", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLObjectType;
        }
      });
      Object.defineProperty(exports, "GraphQLInterfaceType", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLInterfaceType;
        }
      });
      Object.defineProperty(exports, "GraphQLUnionType", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLUnionType;
        }
      });
      Object.defineProperty(exports, "GraphQLEnumType", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLEnumType;
        }
      });
      Object.defineProperty(exports, "GraphQLInputObjectType", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLInputObjectType;
        }
      });
      Object.defineProperty(exports, "GraphQLList", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLList;
        }
      });
      Object.defineProperty(exports, "GraphQLNonNull", {
        enumerable: true,
        get: function get() {
          return _definition.GraphQLNonNull;
        }
      });
      Object.defineProperty(exports, "isDirective", {
        enumerable: true,
        get: function get() {
          return _directives.isDirective;
        }
      });
      Object.defineProperty(exports, "assertDirective", {
        enumerable: true,
        get: function get() {
          return _directives.assertDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLDirective", {
        enumerable: true,
        get: function get() {
          return _directives.GraphQLDirective;
        }
      });
      Object.defineProperty(exports, "isSpecifiedDirective", {
        enumerable: true,
        get: function get() {
          return _directives.isSpecifiedDirective;
        }
      });
      Object.defineProperty(exports, "specifiedDirectives", {
        enumerable: true,
        get: function get() {
          return _directives.specifiedDirectives;
        }
      });
      Object.defineProperty(exports, "GraphQLIncludeDirective", {
        enumerable: true,
        get: function get() {
          return _directives.GraphQLIncludeDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLSkipDirective", {
        enumerable: true,
        get: function get() {
          return _directives.GraphQLSkipDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
        enumerable: true,
        get: function get() {
          return _directives.GraphQLDeprecatedDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
        enumerable: true,
        get: function get() {
          return _directives.GraphQLSpecifiedByDirective;
        }
      });
      Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
        enumerable: true,
        get: function get() {
          return _directives.DEFAULT_DEPRECATION_REASON;
        }
      });
      Object.defineProperty(exports, "isSpecifiedScalarType", {
        enumerable: true,
        get: function get() {
          return _scalars.isSpecifiedScalarType;
        }
      });
      Object.defineProperty(exports, "specifiedScalarTypes", {
        enumerable: true,
        get: function get() {
          return _scalars.specifiedScalarTypes;
        }
      });
      Object.defineProperty(exports, "GraphQLInt", {
        enumerable: true,
        get: function get() {
          return _scalars.GraphQLInt;
        }
      });
      Object.defineProperty(exports, "GraphQLFloat", {
        enumerable: true,
        get: function get() {
          return _scalars.GraphQLFloat;
        }
      });
      Object.defineProperty(exports, "GraphQLString", {
        enumerable: true,
        get: function get() {
          return _scalars.GraphQLString;
        }
      });
      Object.defineProperty(exports, "GraphQLBoolean", {
        enumerable: true,
        get: function get() {
          return _scalars.GraphQLBoolean;
        }
      });
      Object.defineProperty(exports, "GraphQLID", {
        enumerable: true,
        get: function get() {
          return _scalars.GraphQLID;
        }
      });
      Object.defineProperty(exports, "isIntrospectionType", {
        enumerable: true,
        get: function get() {
          return _introspection.isIntrospectionType;
        }
      });
      Object.defineProperty(exports, "introspectionTypes", {
        enumerable: true,
        get: function get() {
          return _introspection.introspectionTypes;
        }
      });
      Object.defineProperty(exports, "__Schema", {
        enumerable: true,
        get: function get() {
          return _introspection.__Schema;
        }
      });
      Object.defineProperty(exports, "__Directive", {
        enumerable: true,
        get: function get() {
          return _introspection.__Directive;
        }
      });
      Object.defineProperty(exports, "__DirectiveLocation", {
        enumerable: true,
        get: function get() {
          return _introspection.__DirectiveLocation;
        }
      });
      Object.defineProperty(exports, "__Type", {
        enumerable: true,
        get: function get() {
          return _introspection.__Type;
        }
      });
      Object.defineProperty(exports, "__Field", {
        enumerable: true,
        get: function get() {
          return _introspection.__Field;
        }
      });
      Object.defineProperty(exports, "__InputValue", {
        enumerable: true,
        get: function get() {
          return _introspection.__InputValue;
        }
      });
      Object.defineProperty(exports, "__EnumValue", {
        enumerable: true,
        get: function get() {
          return _introspection.__EnumValue;
        }
      });
      Object.defineProperty(exports, "__TypeKind", {
        enumerable: true,
        get: function get() {
          return _introspection.__TypeKind;
        }
      });
      Object.defineProperty(exports, "TypeKind", {
        enumerable: true,
        get: function get() {
          return _introspection.TypeKind;
        }
      });
      Object.defineProperty(exports, "SchemaMetaFieldDef", {
        enumerable: true,
        get: function get() {
          return _introspection.SchemaMetaFieldDef;
        }
      });
      Object.defineProperty(exports, "TypeMetaFieldDef", {
        enumerable: true,
        get: function get() {
          return _introspection.TypeMetaFieldDef;
        }
      });
      Object.defineProperty(exports, "TypeNameMetaFieldDef", {
        enumerable: true,
        get: function get() {
          return _introspection.TypeNameMetaFieldDef;
        }
      });
      Object.defineProperty(exports, "validateSchema", {
        enumerable: true,
        get: function get() {
          return _validate.validateSchema;
        }
      });
      Object.defineProperty(exports, "assertValidSchema", {
        enumerable: true,
        get: function get() {
          return _validate.assertValidSchema;
        }
      });

      var _schema = __webpack_require__("+X2/");

      var _definition = __webpack_require__("mAVk");

      var _directives = __webpack_require__("L9+1");

      var _scalars = __webpack_require__("0N00");

      var _introspection = __webpack_require__("JIc4");

      var _validate = __webpack_require__("QINa");

      /***/
    },

    /***/ "8JD9": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // https://262.ecma-international.org/5.1/#sec-8

      module.exports = function Type(x) {
        if (x === null) {
          return "Null";
        }
        if (typeof x === "undefined") {
          return "Undefined";
        }
        if (typeof x === "function" || typeof x === "object") {
          return "Object";
        }
        if (typeof x === "number") {
          return "Number";
        }
        if (typeof x === "boolean") {
          return "Boolean";
        }
        if (typeof x === "string") {
          return "String";
        }
      };

      /***/
    },

    /***/ "8SQu": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getOperationAST = getOperationAST;

      var _kinds = __webpack_require__("xaK5");

      /**
       * Returns an operation AST given a document AST and optionally an operation
       * name. If a name is not provided, an operation is only returned if only one is
       * provided in the document.
       */
      function getOperationAST(documentAST, operationName) {
        var operation = null;

        for (
          var _i2 = 0, _documentAST$definiti2 = documentAST.definitions;
          _i2 < _documentAST$definiti2.length;
          _i2++
        ) {
          var definition = _documentAST$definiti2[_i2];

          if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
            var _definition$name;

            if (operationName == null) {
              // If no operation name was provided, only return an Operation if there
              // is one defined in the document. Upon encountering the second, return
              // null.
              if (operation) {
                return null;
              }

              operation = definition;
            } else if (
              ((_definition$name = definition.name) === null ||
              _definition$name === void 0
                ? void 0
                : _definition$name.value) === operationName
            ) {
              return definition;
            }
          }
        }

        return operation;
      }

      /***/
    },

    /***/ "8cd+": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // http://262.ecma-international.org/5.1/#sec-9.2

      module.exports = function ToBoolean(value) {
        return !!value;
      };

      /***/
    },

    /***/ "8lN7": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isUpperCase = void 0;
      /**
       * Returns a boolean indicating whether the string is upper case.
       */
      function isUpperCase(input) {
        return input.toUpperCase() === input && input.toLowerCase() !== input;
      }
      exports.isUpperCase = isUpperCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "8lxt": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $match = GetIntrinsic("%Symbol.match%", true);

      var hasRegExpMatcher = __webpack_require__("AwSO");

      var ToBoolean = __webpack_require__("8cd+");

      // https://ecma-international.org/ecma-262/6.0/#sec-isregexp

      module.exports = function IsRegExp(argument) {
        if (!argument || typeof argument !== "object") {
          return false;
        }
        if ($match) {
          var isRegExp = argument[$match];
          if (typeof isRegExp !== "undefined") {
            return ToBoolean(isRegExp);
          }
        }
        return hasRegExpMatcher(argument);
      };

      /***/
    },

    /***/ "8ocz": /***/ function(module, exports) {
      var isWin = process.platform === "win32";

      module.exports = function(str) {
        var i = str.length - 1;
        if (i < 2) {
          return str;
        }
        while (isSeparator(str, i)) {
          i--;
        }
        return str.substr(0, i + 1);
      };

      function isSeparator(str, i) {
        var char = str[i];
        return i > 0 && (char === "/" || (isWin && char === "\\"));
      }

      /***/
    },

    /***/ "9PYa": /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @format
       *
       */
      // flowlint ambiguous-object-type:error

      var _interopRequireDefault = __webpack_require__("TqRt");

      var _defineProperty2 = _interopRequireDefault(
        __webpack_require__("lSNA")
      );

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              (0, _defineProperty2["default"])(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      var IRTransformer = __webpack_require__("OHCT");

      var areEqual = __webpack_require__("Y/4B");

      var getIdentifierForSelection = __webpack_require__("EQxW");

      var _require = __webpack_require__("VrDQ"),
        createCompilerError = _require.createCompilerError,
        createUserError = _require.createUserError;

      /**
       * Transform that flattens inline fragments, fragment spreads, and conditionals.
       *
       * Inline fragments are inlined (replaced with their selections) when:
       * - The fragment type matches the type of its parent, and its `isForCodegen`,
       *   or if it's for printing, there is no directive on the inline fragment.
       */
      function flattenTransformImpl(context, options) {
        var state = {
          isForCodegen: !!(options && options.isForCodegen),
          parentType: null
        };
        var visitorFn = memoizedFlattenSelection(new Map());
        return IRTransformer.transform(
          context,
          {
            Condition: visitorFn,
            Defer: visitorFn,
            Fragment: visitorFn,
            InlineDataFragmentSpread: visitorFn,
            InlineFragment: visitorFn,
            LinkedField: visitorFn,
            ModuleImport: visitorFn,
            Root: visitorFn,
            SplitOperation: visitorFn
          },
          function() {
            return state;
          }
        );
      }

      function memoizedFlattenSelection(cache) {
        return function flattenSelectionsFn(node, state) {
          var context = this.getContext();
          var nodeCache = cache.get(node);

          if (nodeCache == null) {
            nodeCache = new Map();
            cache.set(node, nodeCache);
          } // Determine the current type.

          var parentType = state.parentType;
          var result = nodeCache.get(parentType);

          if (result != null) {
            return result;
          }

          var type =
            node.kind === "LinkedField" ||
            node.kind === "Fragment" ||
            node.kind === "Root" ||
            node.kind === "SplitOperation"
              ? node.type
              : node.kind === "InlineFragment"
              ? node.typeCondition
              : parentType;

          if (type == null) {
            throw createCompilerError(
              "FlattenTransform: Expected a parent type.",
              [node.loc]
            );
          } // Flatten the selections in this node, creating a new node with flattened
          // selections if possible, then deeply traverse the flattened node, while
          // keeping track of the parent type.

          var nextSelections = new Map();
          var hasFlattened = flattenSelectionsInto(
            context.getSchema(),
            nextSelections,
            node,
            state,
            type
          );
          var flattenedNode = hasFlattened
            ? _objectSpread(
                _objectSpread({}, node),
                {},
                {
                  selections: Array.from(nextSelections.values())
                }
              )
            : node;
          state.parentType = type;
          var deeplyFlattenedNode = this.traverse(flattenedNode, state);
          state.parentType = parentType;
          nodeCache.set(parentType, deeplyFlattenedNode);
          return deeplyFlattenedNode;
        };
      }
      /**
       * @private
       */

      function flattenSelectionsInto(
        schema,
        flattenedSelections,
        node,
        state,
        type
      ) {
        var hasFlattened = false;
        node.selections.forEach(function(selection) {
          if (
            selection.kind === "InlineFragment" &&
            shouldFlattenInlineFragment(schema, selection, state, type)
          ) {
            hasFlattened = true;
            flattenSelectionsInto(
              schema,
              flattenedSelections,
              selection,
              state,
              type
            );
            return;
          }

          var nodeIdentifier = getIdentifierForSelection(schema, selection);
          var flattenedSelection = flattenedSelections.get(nodeIdentifier); // If this selection hasn't been seen before, keep track of it.

          if (!flattenedSelection) {
            flattenedSelections.set(nodeIdentifier, selection);
            return;
          } // Otherwise a similar selection exists which should be merged.

          hasFlattened = true;

          if (flattenedSelection.kind === "InlineFragment") {
            if (selection.kind !== "InlineFragment") {
              throw createCompilerError(
                "FlattenTransform: Expected an InlineFragment, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            flattenedSelections.set(
              nodeIdentifier,
              _objectSpread(
                _objectSpread({}, flattenedSelection),
                {},
                {
                  selections: mergeSelections(
                    schema,
                    flattenedSelection,
                    selection,
                    state,
                    selection.typeCondition
                  )
                }
              )
            );
          } else if (flattenedSelection.kind === "Condition") {
            if (selection.kind !== "Condition") {
              throw createCompilerError(
                "FlattenTransform: Expected a Condition, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            flattenedSelections.set(
              nodeIdentifier,
              _objectSpread(
                _objectSpread({}, flattenedSelection),
                {},
                {
                  selections: mergeSelections(
                    schema,
                    flattenedSelection,
                    selection,
                    state,
                    type
                  )
                }
              )
            );
          } else if (flattenedSelection.kind === "ClientExtension") {
            if (selection.kind !== "ClientExtension") {
              throw createCompilerError(
                "FlattenTransform: Expected a ClientExtension, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            flattenedSelections.set(
              nodeIdentifier,
              _objectSpread(
                _objectSpread({}, flattenedSelection),
                {},
                {
                  selections: mergeSelections(
                    schema,
                    flattenedSelection,
                    selection,
                    state,
                    type
                  )
                }
              )
            );
          } else if (flattenedSelection.kind === "FragmentSpread") {
            // Ignore duplicate fragment spreads.
          } else if (flattenedSelection.kind === "ModuleImport") {
            if (selection.kind !== "ModuleImport") {
              throw createCompilerError(
                "FlattenTransform: Expected a ModuleImport, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            if (
              selection.name !== flattenedSelection.name ||
              selection.module !== flattenedSelection.module ||
              selection.key !== flattenedSelection.key
            ) {
              throw createUserError(
                "Found conflicting @module selections: use a unique alias on the " +
                  "parent fields.",
                [selection.loc, flattenedSelection.loc]
              );
            }

            flattenedSelections.set(
              nodeIdentifier,
              _objectSpread(
                _objectSpread({}, flattenedSelection),
                {},
                {
                  selections: mergeSelections(
                    schema,
                    flattenedSelection,
                    selection,
                    state,
                    type
                  )
                }
              )
            );
          } else if (flattenedSelection.kind === "Defer") {
            if (selection.kind !== "Defer") {
              throw createCompilerError(
                "FlattenTransform: Expected a Defer, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            flattenedSelections.set(
              nodeIdentifier,
              _objectSpread(
                _objectSpread(
                  {
                    kind: "Defer"
                  },
                  flattenedSelection
                ),
                {},
                {
                  selections: mergeSelections(
                    schema,
                    flattenedSelection,
                    selection,
                    state,
                    type
                  )
                }
              )
            );
          } else if (flattenedSelection.kind === "Stream") {
            if (selection.kind !== "Stream") {
              throw createCompilerError(
                "FlattenTransform: Expected a Stream, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            flattenedSelections.set(
              nodeIdentifier,
              _objectSpread(
                _objectSpread(
                  {
                    kind: "Stream"
                  },
                  flattenedSelection
                ),
                {},
                {
                  selections: mergeSelections(
                    schema,
                    flattenedSelection,
                    selection,
                    state,
                    type
                  )
                }
              )
            );
          } else if (flattenedSelection.kind === "LinkedField") {
            if (selection.kind !== "LinkedField") {
              throw createCompilerError(
                "FlattenTransform: Expected a LinkedField, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            assertUniqueArgsForAlias(selection, flattenedSelection); // NOTE: not using object spread here as this code is pretty hot

            flattenedSelections.set(nodeIdentifier, {
              kind: "LinkedField",
              alias: flattenedSelection.alias,
              args: flattenedSelection.args,
              connection: flattenedSelection.connection || selection.connection,
              directives: flattenedSelection.directives,
              handles: mergeHandles(flattenedSelection, selection),
              loc: flattenedSelection.loc,
              metadata: flattenedSelection.metadata,
              name: flattenedSelection.name,
              selections: mergeSelections(
                schema,
                flattenedSelection,
                selection,
                state,
                selection.type
              ),
              type: flattenedSelection.type
            });
          } else if (flattenedSelection.kind === "ScalarField") {
            if (selection.kind !== "ScalarField") {
              throw createCompilerError(
                "FlattenTransform: Expected a ScalarField, got a '".concat(
                  selection.kind,
                  "'"
                ),
                [selection.loc]
              );
            }

            assertUniqueArgsForAlias(selection, flattenedSelection);

            if (selection.handles && selection.handles.length > 0) {
              flattenedSelections.set(
                nodeIdentifier,
                _objectSpread(
                  _objectSpread(
                    {
                      kind: "ScalarField"
                    },
                    flattenedSelection
                  ),
                  {},
                  {
                    handles: mergeHandles(selection, flattenedSelection)
                  }
                )
              );
            }
          } else if (flattenedSelection.kind === "InlineDataFragmentSpread") {
            throw createCompilerError(
              "FlattenTransform: did not expect an InlineDataFragmentSpread node. " +
                "Only expecting InlineDataFragmentSpread in reader ASTs and this " +
                "transform to run only on normalization ASTs.",
              [selection.loc]
            );
          } else {
            flattenedSelection.kind;
            throw createCompilerError(
              "FlattenTransform: Unknown kind '".concat(
                flattenedSelection.kind,
                "'"
              )
            );
          }
        });
        return hasFlattened;
      }
      /**
       * @private
       */

      function mergeSelections(schema, nodeA, nodeB, state, type) {
        var flattenedSelections = new Map();
        flattenSelectionsInto(schema, flattenedSelections, nodeA, state, type);
        flattenSelectionsInto(schema, flattenedSelections, nodeB, state, type);
        return Array.from(flattenedSelections.values());
      }
      /**
       * @private
       * TODO(T19327202) This is redundant with OverlappingFieldsCanBeMergedRule once
       * it can be enabled.
       */

      function assertUniqueArgsForAlias(field, otherField) {
        if (!areEqualFields(field, otherField)) {
          throw createUserError(
            "Expected all fields on the same parent with the name or alias " +
              "'".concat(field.alias, "' to have the same name and arguments."),
            [field.loc, otherField.loc]
          );
        }
      }
      /**
       * @private
       */

      function shouldFlattenInlineFragment(schema, fragment, state, type) {
        return (
          schema.areEqualTypes(
            fragment.typeCondition,
            schema.getRawType(type)
          ) &&
          (state.isForCodegen || fragment.directives.length === 0)
        );
      }
      /**
       * @private
       *
       * Verify that two fields are equal in all properties other than their
       * selections.
       */

      function areEqualFields(thisField, thatField) {
        return (
          thisField.kind === thatField.kind &&
          thisField.name === thatField.name &&
          thisField.alias === thatField.alias &&
          areEqualArgs(thisField.args, thatField.args)
        );
      }
      /**
       * Verify that two sets of arguments are equivalent - same argument names
       * and values. Notably this ignores the types of arguments and values, which
       * may not always be inferred identically.
       */

      function areEqualArgs(thisArgs, thatArgs) {
        return (
          thisArgs.length === thatArgs.length &&
          thisArgs.every(function(thisArg, index) {
            var thatArg = thatArgs[index];
            return (
              thisArg.name === thatArg.name &&
              thisArg.value.kind === thatArg.value.kind &&
              thisArg.value.variableName === thatArg.value.variableName &&
              areEqual(thisArg.value.value, thatArg.value.value)
            );
          })
        );
      }
      /**
       * @private
       */

      function mergeHandles(nodeA, nodeB) {
        if (!nodeA.handles) {
          return nodeB.handles;
        }

        if (!nodeB.handles) {
          return nodeA.handles;
        }

        var uniqueItems = new Map();
        nodeA.handles.concat(nodeB.handles).forEach(function(item) {
          return uniqueItems.set(item.name + item.key, item);
        });
        return Array.from(uniqueItems.values());
      }

      function transformWithOptions(options) {
        return function flattenTransform(context) {
          return flattenTransformImpl(context, options);
        };
      }

      module.exports = {
        transformWithOptions: transformWithOptions
      };

      /***/
    },

    /***/ "9dO7": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports = function isPrimitive(value) {
        return (
          value === null ||
          (typeof value !== "function" && typeof value !== "object")
        );
      };

      /***/
    },

    /***/ "9ohr": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _predicates = __webpack_require__("hzsB");

      var _directives = __webpack_require__("L9+1");

      /**
       * Unique directive names per location
       *
       * A GraphQL document is only valid if all non-repeatable directives at
       * a given location are uniquely named.
       */
      function UniqueDirectivesPerLocationRule(context) {
        var uniqueDirectiveMap = Object.create(null);
        var schema = context.getSchema();
        var definedDirectives = schema
          ? schema.getDirectives()
          : _directives.specifiedDirectives;

        for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
          var directive = definedDirectives[_i2];
          uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
        }

        var astDefinitions = context.getDocument().definitions;

        for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
          var def = astDefinitions[_i4];

          if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
            uniqueDirectiveMap[def.name.value] = !def.repeatable;
          }
        }

        var schemaDirectives = Object.create(null);
        var typeDirectivesMap = Object.create(null);
        return {
          // Many different AST nodes may contain directives. Rather than listing
          // them all, just listen for entering any node, and check to see if it
          // defines any directives.
          enter: function enter(node) {
            if (node.directives == null) {
              return;
            }

            var seenDirectives;

            if (
              node.kind === _kinds.Kind.SCHEMA_DEFINITION ||
              node.kind === _kinds.Kind.SCHEMA_EXTENSION
            ) {
              seenDirectives = schemaDirectives;
            } else if (
              (0, _predicates.isTypeDefinitionNode)(node) ||
              (0, _predicates.isTypeExtensionNode)(node)
            ) {
              var typeName = node.name.value;
              seenDirectives = typeDirectivesMap[typeName];

              if (seenDirectives === undefined) {
                typeDirectivesMap[typeName] = seenDirectives = Object.create(
                  null
                );
              }
            } else {
              seenDirectives = Object.create(null);
            }

            for (
              var _i6 = 0, _node$directives2 = node.directives;
              _i6 < _node$directives2.length;
              _i6++
            ) {
              var _directive = _node$directives2[_i6];
              var directiveName = _directive.name.value;

              if (uniqueDirectiveMap[directiveName]) {
                if (seenDirectives[directiveName]) {
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      'The directive "@'.concat(
                        directiveName,
                        '" can only be used once at this location.'
                      ),
                      [seenDirectives[directiveName], _directive]
                    )
                  );
                } else {
                  seenDirectives[directiveName] = _directive;
                }
              }
            }
          }
        };
      }

      /***/
    },

    /***/ A3X2: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const javaCommon = __webpack_require__("SFnX");
      const path = __webpack_require__("oyvS");

      class JavaResolversVisitor extends visitorPluginCommon.BaseVisitor {
        constructor(rawConfig, _schema, defaultPackageName) {
          super(rawConfig, {
            mappers: visitorPluginCommon.transformMappers(
              rawConfig.mappers || {}
            ),
            package: rawConfig.package || defaultPackageName,
            defaultMapper: visitorPluginCommon.parseMapper(
              rawConfig.defaultMapper || "Object"
            ),
            className: rawConfig.className || "Resolvers",
            listType: rawConfig.listType || "Iterable",
            scalars: visitorPluginCommon.buildScalarsFromConfig(
              _schema,
              rawConfig,
              javaCommon.JAVA_SCALARS,
              "Object"
            )
          });
          this._includeTypeResolverImport = false;
        }
        getImports() {
          const mappersImports = this.mappersImports();
          const allImports = [...mappersImports];
          if (this._includeTypeResolverImport) {
            allImports.push("graphql.schema.TypeResolver");
          }
          allImports.push("graphql.schema.DataFetcher");
          return allImports.map(i => `import ${i};`).join("\n") + "\n";
        }
        mappersImports() {
          return Object.keys(this.config.mappers)
            .map(typeName => this.config.mappers[typeName])
            .filter(m => m.isExternal)
            .map(m => m.source);
        }
        getTypeToUse(type) {
          if (this.scalars[type.name.value]) {
            return this.scalars[type.name.value];
          } else if (this.config.mappers[type.name.value]) {
            return this.config.mappers[type.name.value].type;
          }
          return this.config.defaultMapper.type;
        }
        getPackageName() {
          return `package ${this.config.package};\n`;
        }
        wrapWithClass(content) {
          return new javaCommon.JavaDeclarationBlock()
            .access("public")
            .asKind("class")
            .withName(this.config.className)
            .withBlock(visitorPluginCommon.indentMultiline(content)).string;
        }
        UnionTypeDefinition(node) {
          this._includeTypeResolverImport = true;
          return new javaCommon.JavaDeclarationBlock()
            .access("public")
            .asKind("interface")
            .withName(this.convertName(node.name))
            .extends(["TypeResolver"])
            .withComment(node.description).string;
        }
        InterfaceTypeDefinition(node) {
          this._includeTypeResolverImport = true;
          return new javaCommon.JavaDeclarationBlock()
            .access("public")
            .asKind("interface")
            .withName(this.convertName(node.name))
            .extends(["TypeResolver"])
            .withComment(node.description)
            .withBlock(
              node.fields
                .map(f => visitorPluginCommon.indent(f(true)))
                .join("\n")
            ).string;
        }
        ObjectTypeDefinition(node) {
          return new javaCommon.JavaDeclarationBlock()
            .access("public")
            .asKind("interface")
            .withName(this.convertName(node.name))
            .withComment(node.description)
            .withBlock(
              node.fields
                .map(f => visitorPluginCommon.indent(f(false)))
                .join("\n")
            ).string;
        }
        FieldDefinition(node, key, _parent) {
          return isInterface => {
            const baseType = visitorPluginCommon.getBaseTypeNode(node.type);
            const typeToUse = this.getTypeToUse(baseType);
            const wrappedType = javaCommon.wrapTypeWithModifiers(
              typeToUse,
              node.type,
              this.config.listType
            );
            if (isInterface) {
              return `default public DataFetcher<${wrappedType}> ${node.name.value}() { return null; }`;
            } else {
              return `public DataFetcher<${wrappedType}> ${node.name.value}();`;
            }
          };
        }
      }

      const plugin = async (schema, documents, config, { outputFile }) => {
        const relevantPath = path.dirname(path.normalize(outputFile));
        const defaultPackageName = javaCommon.buildPackageNameFromPath(
          relevantPath
        );
        const visitor = new JavaResolversVisitor(
          config,
          schema,
          defaultPackageName
        );
        const printedSchema = graphql.printSchema(schema);
        const astNode = graphql.parse(printedSchema);
        const visitorResult = graphql.visit(astNode, { leave: visitor });
        const mappersImports = visitor.getImports();
        const packageName = visitor.getPackageName();
        const blockContent = visitorResult.definitions
          .filter(d => typeof d === "string")
          .join("\n");
        const wrappedContent = visitor.wrapWithClass(blockContent);
        return [packageName, mappersImports, wrappedContent].join("\n");
      };

      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ AM7I: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var undefined;

      var $SyntaxError = SyntaxError;
      var $Function = Function;
      var $TypeError = TypeError;

      // eslint-disable-next-line consistent-return
      var getEvalledConstructor = function(expressionSyntax) {
        try {
          return $Function(
            '"use strict"; return (' + expressionSyntax + ").constructor;"
          )();
        } catch (e) {}
      };

      var $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD) {
        try {
          $gOPD({}, "");
        } catch (e) {
          $gOPD = null; // this is IE 8, which has a broken gOPD
        }
      }

      var throwTypeError = function() {
        throw new $TypeError();
      };
      var ThrowTypeError = $gOPD
        ? (function() {
            try {
              // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
              arguments.callee; // IE 8 does not throw here
              return throwTypeError;
            } catch (calleeThrows) {
              try {
                // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                return $gOPD(arguments, "callee").get;
              } catch (gOPDthrows) {
                return throwTypeError;
              }
            }
          })()
        : throwTypeError;

      var hasSymbols = __webpack_require__("UVaH")();

      var getProto =
        Object.getPrototypeOf ||
        function(x) {
          return x.__proto__;
        }; // eslint-disable-line no-proto

      var needsEval = {};

      var TypedArray =
        typeof Uint8Array === "undefined" ? undefined : getProto(Uint8Array);

      var INTRINSICS = {
        "%AggregateError%":
          typeof AggregateError === "undefined" ? undefined : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%":
          typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols
          ? getProto([][Symbol.iterator]())
          : undefined,
        "%AsyncFromSyncIteratorPrototype%": undefined,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": Error,
        "%eval%": eval, // eslint-disable-line no-eval
        "%EvalError%": EvalError,
        "%Float32Array%":
          typeof Float32Array === "undefined" ? undefined : Float32Array,
        "%Float64Array%":
          typeof Float64Array === "undefined" ? undefined : Float64Array,
        "%FinalizationRegistry%":
          typeof FinalizationRegistry === "undefined"
            ? undefined
            : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
        "%Int16Array%":
          typeof Int16Array === "undefined" ? undefined : Int16Array,
        "%Int32Array%":
          typeof Int32Array === "undefined" ? undefined : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols
          ? getProto(getProto([][Symbol.iterator]()))
          : undefined,
        "%JSON%": typeof JSON === "object" ? JSON : undefined,
        "%Map%": typeof Map === "undefined" ? undefined : Map,
        "%MapIteratorPrototype%":
          typeof Map === "undefined" || !hasSymbols
            ? undefined
            : getProto(new Map()[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": Object,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
        "%RangeError%": RangeError,
        "%ReferenceError%": ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined : Set,
        "%SetIteratorPrototype%":
          typeof Set === "undefined" || !hasSymbols
            ? undefined
            : getProto(new Set()[Symbol.iterator]()),
        "%SharedArrayBuffer%":
          typeof SharedArrayBuffer === "undefined"
            ? undefined
            : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols
          ? getProto(""[Symbol.iterator]())
          : undefined,
        "%Symbol%": hasSymbols ? Symbol : undefined,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%":
          typeof Uint8Array === "undefined" ? undefined : Uint8Array,
        "%Uint8ClampedArray%":
          typeof Uint8ClampedArray === "undefined"
            ? undefined
            : Uint8ClampedArray,
        "%Uint16Array%":
          typeof Uint16Array === "undefined" ? undefined : Uint16Array,
        "%Uint32Array%":
          typeof Uint32Array === "undefined" ? undefined : Uint32Array,
        "%URIError%": URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
      };

      var doEval = function doEval(name) {
        var value;
        if (name === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name === "%AsyncGenerator%") {
          var fn = doEval("%AsyncGeneratorFunction%");
          if (fn) {
            value = fn.prototype;
          }
        } else if (name === "%AsyncIteratorPrototype%") {
          var gen = doEval("%AsyncGenerator%");
          if (gen) {
            value = getProto(gen.prototype);
          }
        }

        INTRINSICS[name] = value;

        return value;
      };

      var LEGACY_ALIASES = {
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": [
          "AsyncGeneratorFunction",
          "prototype",
          "prototype"
        ],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"]
      };

      var bind = __webpack_require__("D3zA");
      var hasOwn = __webpack_require__("oNNP");
      var $concat = bind.call(Function.call, Array.prototype.concat);
      var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
      var $replace = bind.call(Function.call, String.prototype.replace);
      var $strSlice = bind.call(Function.call, String.prototype.slice);

      /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
      var stringToPath = function stringToPath(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError(
            "invalid intrinsic syntax, expected closing `%`"
          );
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError(
            "invalid intrinsic syntax, expected opening `%`"
          );
        }
        var result = [];
        $replace(string, rePropName, function(match, number, quote, subString) {
          result[result.length] = quote
            ? $replace(subString, reEscapeChar, "$1")
            : number || match;
        });
        return result;
      };
      /* end adaptation */

      var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
        var intrinsicName = name;
        var alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }

        if (hasOwn(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError(
              "intrinsic " +
                name +
                " exists, but is not available. Please file an issue!"
            );
          }

          return {
            alias: alias,
            name: intrinsicName,
            value: value
          };
        }

        throw new $SyntaxError("intrinsic " + name + " does not exist!");
      };

      module.exports = function GetIntrinsic(name, allowMissing) {
        if (typeof name !== "string" || name.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }

        var parts = stringToPath(name);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";

        var intrinsic = getBaseIntrinsic(
          "%" + intrinsicBaseName + "%",
          allowMissing
        );
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;

        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }

        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if (
            (first === '"' ||
              first === "'" ||
              first === "`" ||
              last === '"' || last === "'" || last === "`") &&
            first !== last
          ) {
            throw new $SyntaxError(
              "property names with quotes must have matching quotes"
            );
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }

          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";

          if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError(
                  "base intrinsic for " +
                    name +
                    " exists, but the property is not available."
                );
              }
              return void undefined;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;

              // By convention, when a data property is converted to an accessor
              // property to emulate a data property that does not suffer from
              // the override mistake, that accessor's getter is marked with
              // an `originalValue` property. Here, when we detect this, we
              // uphold the illusion by pretending to see that original data
              // property, i.e., returning the value rather than the getter
              // itself.
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn(value, part);
              value = value[part];
            }

            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      };

      /***/
    },

    /***/ Afiz: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.KnownTypeNamesRule = KnownTypeNamesRule;

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _GraphQLError = __webpack_require__("MafX");

      var _predicates = __webpack_require__("hzsB");

      var _scalars = __webpack_require__("0N00");

      var _introspection = __webpack_require__("JIc4");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Known type names
       *
       * A GraphQL document is only valid if referenced types (specifically
       * variable definitions and fragment conditions) are defined by the type schema.
       */
      function KnownTypeNamesRule(context) {
        var schema = context.getSchema();
        var existingTypesMap = schema
          ? schema.getTypeMap()
          : Object.create(null);
        var definedTypes = Object.create(null);

        for (
          var _i2 = 0,
            _context$getDocument$2 = context.getDocument().definitions;
          _i2 < _context$getDocument$2.length;
          _i2++
        ) {
          var def = _context$getDocument$2[_i2];

          if ((0, _predicates.isTypeDefinitionNode)(def)) {
            definedTypes[def.name.value] = true;
          }
        }

        var typeNames = Object.keys(existingTypesMap).concat(
          Object.keys(definedTypes)
        );
        return {
          NamedType: function NamedType(node, _1, parent, _2, ancestors) {
            var typeName = node.name.value;

            if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
              var _ancestors$;

              var definitionNode =
                (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0
                  ? _ancestors$
                  : parent;
              var isSDL = definitionNode != null && isSDLNode(definitionNode);

              if (isSDL && isStandardTypeName(typeName)) {
                return;
              }

              var suggestedTypes = (0, _suggestionList.default)(
                typeName,
                isSDL ? standardTypeNames.concat(typeNames) : typeNames
              );
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Unknown type "'.concat(typeName, '".') +
                    (0, _didYouMean.default)(suggestedTypes),
                  node
                )
              );
            }
          }
        };
      }

      var standardTypeNames = []
        .concat(
          _scalars.specifiedScalarTypes,
          _introspection.introspectionTypes
        )
        .map(function(type) {
          return type.name;
        });

      function isStandardTypeName(typeName) {
        return standardTypeNames.indexOf(typeName) !== -1;
      }

      function isSDLNode(value) {
        return (
          !Array.isArray(value) &&
          ((0, _predicates.isTypeSystemDefinitionNode)(value) ||
            (0, _predicates.isTypeSystemExtensionNode)(value))
        );
      }

      /***/
    },

    /***/ AwSO: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var callBound = __webpack_require__("VF6F");
      var hasSymbols = __webpack_require__("kCea")();
      var hasToStringTag = hasSymbols && !!Symbol.toStringTag;
      var has;
      var $exec;
      var isRegexMarker;
      var badStringifier;

      if (hasToStringTag) {
        has = callBound("Object.prototype.hasOwnProperty");
        $exec = callBound("RegExp.prototype.exec");
        isRegexMarker = {};

        var throwRegexMarker = function() {
          throw isRegexMarker;
        };
        badStringifier = {
          toString: throwRegexMarker,
          valueOf: throwRegexMarker
        };

        if (typeof Symbol.toPrimitive === "symbol") {
          badStringifier[Symbol.toPrimitive] = throwRegexMarker;
        }
      }

      var $toString = callBound("Object.prototype.toString");
      var gOPD = Object.getOwnPropertyDescriptor;
      var regexClass = "[object RegExp]";

      module.exports = hasToStringTag
        ? // eslint-disable-next-line consistent-return
          function isRegex(value) {
            if (!value || typeof value !== "object") {
              return false;
            }

            var descriptor = gOPD(value, "lastIndex");
            var hasLastIndexDataProperty =
              descriptor && has(descriptor, "value");
            if (!hasLastIndexDataProperty) {
              return false;
            }

            try {
              $exec(value, badStringifier);
            } catch (e) {
              return e === isRegexMarker;
            }
          }
        : function isRegex(value) {
            // In older browsers, typeof regex incorrectly returns 'function'
            if (
              !value ||
              (typeof value !== "object" && typeof value !== "function")
            ) {
              return false;
            }

            return $toString(value) === regexClass;
          };

      /***/
    },

    /***/ "B1c+": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique input field names
       *
       * A GraphQL input object value is only valid if all supplied fields are
       * uniquely named.
       */
      function UniqueInputFieldNamesRule(context) {
        var knownNameStack = [];
        var knownNames = Object.create(null);
        return {
          ObjectValue: {
            enter: function enter() {
              knownNameStack.push(knownNames);
              knownNames = Object.create(null);
            },
            leave: function leave() {
              knownNames = knownNameStack.pop();
            }
          },
          ObjectField: function ObjectField(node) {
            var fieldName = node.name.value;

            if (knownNames[fieldName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'There can be only one input field named "'.concat(
                    fieldName,
                    '".'
                  ),
                  [knownNames[fieldName], node.name]
                )
              );
            } else {
              knownNames[fieldName] = node.name;
            }
          }
        };
      }

      /***/
    },

    /***/ Bgkv: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports = function sign(number) {
        return number >= 0 ? 1 : -1;
      };

      /***/
    },

    /***/ Bnag: /***/ function(module, exports) {
      function _nonIterableSpread() {
        throw new TypeError(
          "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }

      module.exports = _nonIterableSpread;

      /***/
    },

    /***/ BwaV: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var CreateDataProperty = __webpack_require__("RWgL");
      var IsPropertyKey = __webpack_require__("ml7t");
      var Type = __webpack_require__("zOLO");

      // // https://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow

      module.exports = function CreateDataPropertyOrThrow(O, P, V) {
        if (Type(O) !== "Object") {
          throw new $TypeError("Assertion failed: Type(O) is not Object");
        }
        if (!IsPropertyKey(P)) {
          throw new $TypeError(
            "Assertion failed: IsPropertyKey(P) is not true"
          );
        }
        var success = CreateDataProperty(O, P, V);
        if (!success) {
          throw new $TypeError("unable to create data property");
        }
        return success;
      };

      /***/
    },

    /***/ CApm: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      const tslib = __webpack_require__("WvnP");

      var cleanInternalStack = function(stack) {
        return stack.replace(
          /\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g,
          ""
        );
      };

      /**
Escape RegExp special characters.
You can also use this to escape a string that is inserted into the middle of a regex, for example, into a character class.
@example
```
import escapeStringRegexp = require('escape-string-regexp');
const escapedString = escapeStringRegexp('How much $ for a 🦄?');
//=> 'How much \\$ for a 🦄\\?'
new RegExp(escapedString);
```
*/
      var escapeStringRegexp = function(string) {
        if (typeof string !== "string") {
          throw new TypeError("Expected a string");
        }
        // Escape characters with special meaning either inside or outside character sets.
        // Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
        return string
          .replace(/[|\\{}()[\]^$+*?.]/g, "\\$&")
          .replace(/-/g, "\\x2d");
      };

      var extractPathRegex = /\s+at.*[(\s](.*)\)?/;
      var pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
      /**
Clean up error stack traces. Removes the mostly unhelpful internal Node.js entries.
@param stack - The `stack` property of an `Error`.
@example
```
import cleanStack = require('clean-stack');
const error = new Error('Missing unicorn');
console.log(error.stack);
// Error: Missing unicorn
//     at Object.<anonymous> (/Users/sindresorhus/dev/clean-stack/unicorn.js:2:15)
//     at Module._compile (module.js:409:26)
//     at Object.Module._extensions..js (module.js:416:10)
//     at Module.load (module.js:343:32)
//     at Function.Module._load (module.js:300:12)
//     at Function.Module.runMain (module.js:441:10)
//     at startup (node.js:139:18)
console.log(cleanStack(error.stack));
// Error: Missing unicorn
//     at Object.<anonymous> (/Users/sindresorhus/dev/clean-stack/unicorn.js:2:15)
```
*/
      var cleanStack = function(stack, basePath) {
        var basePathRegex =
          basePath &&
          new RegExp("(at | \\()" + escapeStringRegexp(basePath), "g");
        return stack
          .replace(/\\/g, "/")
          .split("\n")
          .filter(function(line) {
            var pathMatches = line.match(extractPathRegex);
            if (pathMatches === null || !pathMatches[1]) {
              return true;
            }
            var match = pathMatches[1];
            // Electron
            if (
              match.includes(".app/Contents/Resources/electron.asar") ||
              match.includes(".app/Contents/Resources/default_app.asar")
            ) {
              return false;
            }
            return !pathRegex.test(match);
          })
          .filter(function(line) {
            return line.trim() !== "";
          })
          .map(function(line) {
            if (basePathRegex) {
              line = line.replace(basePathRegex, "$1");
            }
            return line;
          })
          .join("\n");
      };

      /**
Indent each line in a string.
@param string - The string to indent.
@param count - How many times you want `options.indent` repeated. Default: `1`.
@example
```
import indentString = require('indent-string');
indentString('Unicorns\nRainbows', 4);
//=> '    Unicorns\n    Rainbows'
indentString('Unicorns\nRainbows', 4, {indent: '♥'});
//=> '♥♥♥♥Unicorns\n♥♥♥♥Rainbows'
```
*/
      var indentString = function(string, count, options) {
        if (count === void 0) {
          count = 1;
        }
        options = Object.assign(
          {
            indent: " ",
            includeEmptyLines: false
          },
          options
        );
        if (typeof string !== "string") {
          throw new TypeError(
            "Expected `input` to be a `string`, got `" + typeof string + "`"
          );
        }
        if (typeof count !== "number") {
          throw new TypeError(
            "Expected `count` to be a `number`, got `" + typeof count + "`"
          );
        }
        if (count < 0) {
          throw new RangeError(
            "Expected `count` to be at least 0, got `" + count + "`"
          );
        }
        if (typeof options.indent !== "string") {
          throw new TypeError(
            "Expected `options.indent` to be a `string`, got `" +
              typeof options.indent +
              "`"
          );
        }
        if (count === 0) {
          return string;
        }
        var regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
        return string.replace(regex, options.indent.repeat(count));
      };

      var AggregateError = /** @class */ (function(_super) {
        tslib.__extends(AggregateError, _super);
        function AggregateError(errors) {
          var _this = this;
          if (!Array.isArray(errors)) {
            throw new TypeError(
              "Expected input to be an Array, got " + typeof errors
            );
          }
          var normalizedErrors = errors.map(function(error) {
            if (error instanceof Error) {
              return error;
            }
            if (error !== null && typeof error === "object") {
              // Handle plain error objects with message property and/or possibly other metadata
              return Object.assign(new Error(error.message), error);
            }
            return new Error(error);
          });
          var message = normalizedErrors
            .map(function(error) {
              // The `stack` property is not standardized, so we can't assume it exists
              return typeof error.stack === "string"
                ? cleanInternalStack(cleanStack(error.stack))
                : String(error);
            })
            .join("\n");
          message = "\n" + indentString(message, 4);
          _this = _super.call(this, message) || this;
          _this.name = "AggregateError";
          Object.defineProperty(_this, Symbol.iterator, {
            get: function() {
              return function() {
                return normalizedErrors[Symbol.iterator]();
              };
            }
          });
          return _this;
        }
        return AggregateError;
      })(Error);

      module.exports = AggregateError;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ CJUq: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.specifiedSDLRules = exports.specifiedRules = void 0;

      var _ExecutableDefinitionsRule = __webpack_require__("1J+l");

      var _UniqueOperationNamesRule = __webpack_require__("M2y6");

      var _LoneAnonymousOperationRule = __webpack_require__("WNUp");

      var _SingleFieldSubscriptionsRule = __webpack_require__("TdCP");

      var _KnownTypeNamesRule = __webpack_require__("Afiz");

      var _FragmentsOnCompositeTypesRule = __webpack_require__("aB4s");

      var _VariablesAreInputTypesRule = __webpack_require__("x+L2");

      var _ScalarLeafsRule = __webpack_require__("ma1s");

      var _FieldsOnCorrectTypeRule = __webpack_require__("tieQ");

      var _UniqueFragmentNamesRule = __webpack_require__("sEmH");

      var _KnownFragmentNamesRule = __webpack_require__("J5Ui");

      var _NoUnusedFragmentsRule = __webpack_require__("mw0H");

      var _PossibleFragmentSpreadsRule = __webpack_require__("EjDe");

      var _NoFragmentCyclesRule = __webpack_require__("knwK");

      var _UniqueVariableNamesRule = __webpack_require__("PZUk");

      var _NoUndefinedVariablesRule = __webpack_require__("cDAi");

      var _NoUnusedVariablesRule = __webpack_require__("K73K");

      var _KnownDirectivesRule = __webpack_require__("wiWP");

      var _UniqueDirectivesPerLocationRule = __webpack_require__("9ohr");

      var _KnownArgumentNamesRule = __webpack_require__("EBNW");

      var _UniqueArgumentNamesRule = __webpack_require__("yESJ");

      var _ValuesOfCorrectTypeRule = __webpack_require__("6DTX");

      var _ProvidedRequiredArgumentsRule = __webpack_require__("HY1T");

      var _VariablesInAllowedPositionRule = __webpack_require__("GcDG");

      var _OverlappingFieldsCanBeMergedRule = __webpack_require__("i2do");

      var _UniqueInputFieldNamesRule = __webpack_require__("B1c+");

      var _LoneSchemaDefinitionRule = __webpack_require__("p8j7");

      var _UniqueOperationTypesRule = __webpack_require__("Qmaf");

      var _UniqueTypeNamesRule = __webpack_require__("cHvl");

      var _UniqueEnumValueNamesRule = __webpack_require__("2WnT");

      var _UniqueFieldDefinitionNamesRule = __webpack_require__("feWH");

      var _UniqueDirectiveNamesRule = __webpack_require__("TkMy");

      var _PossibleTypeExtensionsRule = __webpack_require__("Ug9W");

      // Spec Section: "Executable Definitions"
      // Spec Section: "Operation Name Uniqueness"
      // Spec Section: "Lone Anonymous Operation"
      // Spec Section: "Subscriptions with Single Root Field"
      // Spec Section: "Fragment Spread Type Existence"
      // Spec Section: "Fragments on Composite Types"
      // Spec Section: "Variables are Input Types"
      // Spec Section: "Leaf Field Selections"
      // Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
      // Spec Section: "Fragment Name Uniqueness"
      // Spec Section: "Fragment spread target defined"
      // Spec Section: "Fragments must be used"
      // Spec Section: "Fragment spread is possible"
      // Spec Section: "Fragments must not form cycles"
      // Spec Section: "Variable Uniqueness"
      // Spec Section: "All Variable Used Defined"
      // Spec Section: "All Variables Used"
      // Spec Section: "Directives Are Defined"
      // Spec Section: "Directives Are Unique Per Location"
      // Spec Section: "Argument Names"
      // Spec Section: "Argument Uniqueness"
      // Spec Section: "Value Type Correctness"
      // Spec Section: "Argument Optionality"
      // Spec Section: "All Variable Usages Are Allowed"
      // Spec Section: "Field Selection Merging"
      // Spec Section: "Input Object Field Uniqueness"
      // SDL-specific validation rules

      /**
       * This set includes all validation rules defined by the GraphQL spec.
       *
       * The order of the rules in this list has been adjusted to lead to the
       * most clear output when encountering multiple validation errors.
       */
      var specifiedRules = Object.freeze([
        _ExecutableDefinitionsRule.ExecutableDefinitionsRule,
        _UniqueOperationNamesRule.UniqueOperationNamesRule,
        _LoneAnonymousOperationRule.LoneAnonymousOperationRule,
        _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule,
        _KnownTypeNamesRule.KnownTypeNamesRule,
        _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule,
        _VariablesAreInputTypesRule.VariablesAreInputTypesRule,
        _ScalarLeafsRule.ScalarLeafsRule,
        _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule,
        _UniqueFragmentNamesRule.UniqueFragmentNamesRule,
        _KnownFragmentNamesRule.KnownFragmentNamesRule,
        _NoUnusedFragmentsRule.NoUnusedFragmentsRule,
        _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule,
        _NoFragmentCyclesRule.NoFragmentCyclesRule,
        _UniqueVariableNamesRule.UniqueVariableNamesRule,
        _NoUndefinedVariablesRule.NoUndefinedVariablesRule,
        _NoUnusedVariablesRule.NoUnusedVariablesRule,
        _KnownDirectivesRule.KnownDirectivesRule,
        _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
        _KnownArgumentNamesRule.KnownArgumentNamesRule,
        _UniqueArgumentNamesRule.UniqueArgumentNamesRule,
        _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule,
        _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule,
        _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule,
        _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule,
        _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule
      ]);
      /**
       * @internal
       */

      exports.specifiedRules = specifiedRules;
      var specifiedSDLRules = Object.freeze([
        _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule,
        _UniqueOperationTypesRule.UniqueOperationTypesRule,
        _UniqueTypeNamesRule.UniqueTypeNamesRule,
        _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule,
        _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule,
        _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule,
        _KnownTypeNamesRule.KnownTypeNamesRule,
        _KnownDirectivesRule.KnownDirectivesRule,
        _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
        _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule,
        _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule,
        _UniqueArgumentNamesRule.UniqueArgumentNamesRule,
        _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
        _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule
      ]);
      exports.specifiedSDLRules = specifiedSDLRules;

      /***/
    },

    /***/ "CPS/": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));

      class FlowOperationVariablesToObject extends visitorPluginCommon.OperationVariablesToObject {
        clearOptional(str) {
          if (str.startsWith("?")) {
            return str.replace(/^\?(.*?)$/i, "$1");
          }
          return str;
        }
        getScalar(name) {
          const prefix = this._namespacedImportName
            ? `${this._namespacedImportName}.`
            : "";
          return `$ElementType<${prefix}Scalars, '${name}'>`;
        }
        wrapAstTypeWithModifiers(baseType, typeNode, applyCoercion = false) {
          if (typeNode.kind === graphql.Kind.NON_NULL_TYPE) {
            const type = this.wrapAstTypeWithModifiers(
              baseType,
              typeNode.type,
              applyCoercion
            );
            return this.clearOptional(type);
          } else if (typeNode.kind === graphql.Kind.LIST_TYPE) {
            const innerType = this.wrapAstTypeWithModifiers(
              baseType,
              typeNode.type,
              applyCoercion
            );
            const listInputCoercionExtension = applyCoercion
              ? ` | ${innerType}`
              : "";
            return `?Array<${innerType}>${listInputCoercionExtension}`;
          } else {
            return `?${baseType}`;
          }
        }
        formatFieldString(fieldName, isNonNullType, hasDefaultValue) {
          if (hasDefaultValue || isNonNullType) {
            return fieldName;
          } else {
            return `${fieldName}?`;
          }
        }
        formatTypeString(fieldType, isNonNullType, hasDefaultValue) {
          if (hasDefaultValue && !isNonNullType) {
            return this.clearOptional(fieldType);
          }
          return fieldType;
        }
      }

      class FlowVisitor extends visitorPluginCommon.BaseTypesVisitor {
        constructor(schema, pluginConfig) {
          super(schema, pluginConfig, {
            useFlowExactObjects: visitorPluginCommon.getConfigValue(
              pluginConfig.useFlowExactObjects,
              true
            ),
            useFlowReadOnlyTypes: visitorPluginCommon.getConfigValue(
              pluginConfig.useFlowReadOnlyTypes,
              false
            )
          });
          autoBind(this);
          const enumNames = Object.values(schema.getTypeMap())
            .map(type =>
              type instanceof graphql.GraphQLEnumType ? type.name : undefined
            )
            .filter(t => t);
          this.setArgumentsTransformer(
            new FlowOperationVariablesToObject(
              this.scalars,
              this.convertName,
              null,
              enumNames,
              pluginConfig.enumPrefix
            )
          );
          this.setDeclarationBlockConfig({
            blockWrapper: this.config.useFlowExactObjects ? "|" : ""
          });
        }
        _getScalar(name) {
          return `$ElementType<Scalars, '${name}'>`;
        }
        InputValueDefinition(node, key, parent) {
          const originalFieldNode = parent[key];
          const addOptionalSign =
            originalFieldNode.type.kind !== graphql.Kind.NON_NULL_TYPE;
          const comment = visitorPluginCommon.transformComment(
            node.description,
            1
          );
          return (
            comment +
            visitorPluginCommon.indent(
              `${node.name}${addOptionalSign ? "?" : ""}: ${node.type},`
            )
          );
        }
        NamedType(node, key, parent, path, ancestors) {
          return `?${super.NamedType(node, key, parent, path, ancestors)}`;
        }
        ListType(node) {
          return `?${super.ListType(node)}`;
        }
        NonNullType(node) {
          const baseValue = super.NonNullType(node);
          if (baseValue.startsWith("?")) {
            return baseValue.substr(1);
          }
          return baseValue;
        }
        FieldDefinition(node) {
          const typeString = node.type;
          const namePostfix = typeString.startsWith("?") ? "?" : "";
          const comment = visitorPluginCommon.transformComment(
            node.description,
            1
          );
          return (
            comment +
            visitorPluginCommon.indent(
              `${this.config.useFlowReadOnlyTypes ? "+" : ""}${
                node.name
              }${namePostfix}: ${typeString},`
            )
          );
        }
        ObjectTypeDefinition(node, key, parent) {
          return super.ObjectTypeDefinition(
            {
              ...node,
              interfaces:
                node.interfaces && node.interfaces.length > 0
                  ? node.interfaces.map(name => name.replace("?", ""))
                  : []
            },
            key,
            parent
          );
        }
        _buildTypeImport(identifier, source) {
          return `import { type ${identifier} } from '${source}';`;
        }
        mergeInterfaces(interfaces, hasOtherFields) {
          if (!interfaces.length) {
            return "";
          }
          return (
            interfaces
              .map(i => visitorPluginCommon.indent(`...${i}`))
              .join(",\n") + (hasOtherFields ? ",\n  " : "")
          );
        }
        appendInterfacesAndFieldsToBlock(block, interfaces, fields) {
          block.withBlock(
            this.mergeInterfaces(interfaces, fields.length > 0) +
              this.mergeAllFields(fields, interfaces.length > 0)
          );
        }
        mergeAllFields(allFields, hasInterfaces) {
          if (allFields.length === 0) {
            return "";
          }
          if (!hasInterfaces) {
            return allFields.join("\n");
          }
          return `...{${
            this.config.useFlowExactObjects ? "|" : ""
          }\n${allFields
            .map(s => visitorPluginCommon.indent(s))
            .join("\n")}\n  ${this.config.useFlowExactObjects ? "|" : ""}}`;
        }
        handleEnumValueMapper(
          typeIdentifier,
          importIdentifier,
          sourceIdentifier,
          sourceFile
        ) {
          let identifier = sourceIdentifier;
          if (
            sourceIdentifier !== typeIdentifier &&
            !sourceIdentifier.includes(" as ")
          ) {
            identifier = `${sourceIdentifier} as ${typeIdentifier}`;
          }
          return [this._buildTypeImport(identifier, sourceFile)];
        }
        EnumTypeDefinition(node) {
          const typeName = node.name;
          if (
            this.config.enumValues[typeName] &&
            this.config.enumValues[typeName].sourceFile
          ) {
            return null;
          }
          const enumValuesName = this.convertName(node, {
            suffix: "Values",
            useTypesPrefix: this.config.enumPrefix
          });
          const enumValues = new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("const")
            .withName(enumValuesName)
            .withMethodCall("Object.freeze", true)
            .withBlock(
              node.values
                .map(enumOption => {
                  const comment = visitorPluginCommon.transformComment(
                    enumOption.description,
                    1
                  );
                  const optionName = this.convertName(enumOption, {
                    transformUnderscore: true,
                    useTypesPrefix: false
                  });
                  let enumValue = enumOption.name;
                  if (
                    this.config.enumValues[typeName] &&
                    this.config.enumValues[typeName].mappedValues &&
                    typeof this.config.enumValues[typeName].mappedValues[
                      enumValue
                    ] !== "undefined"
                  ) {
                    enumValue = this.config.enumValues[typeName].mappedValues[
                      enumValue
                    ];
                  }
                  return (
                    comment +
                    visitorPluginCommon.indent(
                      `${optionName}: ${visitorPluginCommon.wrapWithSingleQuotes(
                        enumValue
                      )}`
                    )
                  );
                })
                .join(", \n")
            ).string;
          const enumType = new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("type")
            .withName(
              this.convertName(node, { useTypesPrefix: this.config.enumPrefix })
            )
            .withComment(node.description)
            .withContent(`$Values<typeof ${enumValuesName}>`).string;
          return [enumValues, enumType].join("\n\n");
        }
        getPunctuation(declarationKind) {
          return declarationKind === "type" ? "," : ";";
        }
      }

      const plugin = (schema, documents, config) => {
        const header = `// @flow\n`;
        const printedSchema = graphql.printSchema(schema);
        const astNode = graphql.parse(printedSchema);
        const visitor = new FlowVisitor(schema, config);
        const visitorResult = graphql.visit(astNode, {
          leave: visitor
        });
        return {
          prepend: [header, ...visitor.getEnumsImports()],
          content: [
            visitor.scalarsDefinition,
            ...visitorResult.definitions
          ].join("\n")
        };
      };

      exports.FlowOperationVariablesToObject = FlowOperationVariablesToObject;
      exports.FlowVisitor = FlowVisitor;
      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ D3zA: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var implementation = __webpack_require__("aI7X");

      module.exports = Function.prototype.bind || implementation;

      /***/
    },

    /***/ D4qp: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $abs = GetIntrinsic("%Math.abs%");

      // http://262.ecma-international.org/5.1/#sec-5.2

      module.exports = function abs(x) {
        return $abs(x);
      };

      /***/
    },

    /***/ DBuX: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "subscribe", {
        enumerable: true,
        get: function get() {
          return _subscribe.subscribe;
        }
      });
      Object.defineProperty(exports, "createSourceEventStream", {
        enumerable: true,
        get: function get() {
          return _subscribe.createSourceEventStream;
        }
      });

      var _subscribe = __webpack_require__("Jv8X");

      /***/
    },

    /***/ DELC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");
      var $SyntaxError = GetIntrinsic("%SyntaxError%");

      var has = __webpack_require__("oNNP");

      var predicates = {
        // https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
        "Property Descriptor": function isPropertyDescriptor(Type, Desc) {
          if (Type(Desc) !== "Object") {
            return false;
          }
          var allowed = {
            "[[Configurable]]": true,
            "[[Enumerable]]": true,
            "[[Get]]": true,
            "[[Set]]": true,
            "[[Value]]": true,
            "[[Writable]]": true
          };

          for (var key in Desc) {
            // eslint-disable-line
            if (has(Desc, key) && !allowed[key]) {
              return false;
            }
          }

          var isData = has(Desc, "[[Value]]");
          var IsAccessor = has(Desc, "[[Get]]") || has(Desc, "[[Set]]");
          if (isData && IsAccessor) {
            throw new $TypeError(
              "Property Descriptors may not be both accessor and data descriptors"
            );
          }
          return true;
        }
      };

      module.exports = function assertRecord(
        Type,
        recordType,
        argumentName,
        value
      ) {
        var predicate = predicates[recordType];
        if (typeof predicate !== "function") {
          throw new $SyntaxError("unknown record type: " + recordType);
        }
        if (!predicate(Type, value)) {
          throw new $TypeError(argumentName + " must be a " + recordType);
        }
      };

      /***/
    },

    /***/ DEM2: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.parse = parse;
      exports.parseValue = parseValue;
      exports.parseType = parseType;
      exports.Parser = void 0;

      var _syntaxError = __webpack_require__("glbf");

      var _kinds = __webpack_require__("xaK5");

      var _ast = __webpack_require__("fZhc");

      var _tokenKind = __webpack_require__("XfSa");

      var _source = __webpack_require__("k84H");

      var _directiveLocation = __webpack_require__("R1IW");

      var _lexer = __webpack_require__("wimG");

      /**
       * Given a GraphQL source, parses it into a Document.
       * Throws GraphQLError if a syntax error is encountered.
       */
      function parse(source, options) {
        var parser = new Parser(source, options);
        return parser.parseDocument();
      }
      /**
       * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
       * that value.
       * Throws GraphQLError if a syntax error is encountered.
       *
       * This is useful within tools that operate upon GraphQL Values directly and
       * in isolation of complete GraphQL documents.
       *
       * Consider providing the results to the utility function: valueFromAST().
       */

      function parseValue(source, options) {
        var parser = new Parser(source, options);
        parser.expectToken(_tokenKind.TokenKind.SOF);
        var value = parser.parseValueLiteral(false);
        parser.expectToken(_tokenKind.TokenKind.EOF);
        return value;
      }
      /**
       * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
       * that type.
       * Throws GraphQLError if a syntax error is encountered.
       *
       * This is useful within tools that operate upon GraphQL Types directly and
       * in isolation of complete GraphQL documents.
       *
       * Consider providing the results to the utility function: typeFromAST().
       */

      function parseType(source, options) {
        var parser = new Parser(source, options);
        parser.expectToken(_tokenKind.TokenKind.SOF);
        var type = parser.parseTypeReference();
        parser.expectToken(_tokenKind.TokenKind.EOF);
        return type;
      }
      /**
       * This class is exported only to assist people in implementing their own parsers
       * without duplicating too much code and should be used only as last resort for cases
       * such as experimental syntax or if certain features could not be contributed upstream.
       *
       * It is still part of the internal API and is versioned, so any changes to it are never
       * considered breaking changes. If you still need to support multiple versions of the
       * library, please use the `versionInfo` variable for version detection.
       *
       * @internal
       */

      var Parser = /*#__PURE__*/ (function() {
        function Parser(source, options) {
          var sourceObj = (0, _source.isSource)(source)
            ? source
            : new _source.Source(source);
          this._lexer = new _lexer.Lexer(sourceObj);
          this._options = options;
        }
        /**
         * Converts a name lex token into a name parse node.
         */

        var _proto = Parser.prototype;

        _proto.parseName = function parseName() {
          var token = this.expectToken(_tokenKind.TokenKind.NAME);
          return {
            kind: _kinds.Kind.NAME,
            value: token.value,
            loc: this.loc(token)
          };
        }; // Implements the parsing rules in the Document section.

        /**
         * Document : Definition+
         */

        _proto.parseDocument = function parseDocument() {
          var start = this._lexer.token;
          return {
            kind: _kinds.Kind.DOCUMENT,
            definitions: this.many(
              _tokenKind.TokenKind.SOF,
              this.parseDefinition,
              _tokenKind.TokenKind.EOF
            ),
            loc: this.loc(start)
          };
        };
        /**
         * Definition :
         *   - ExecutableDefinition
         *   - TypeSystemDefinition
         *   - TypeSystemExtension
         *
         * ExecutableDefinition :
         *   - OperationDefinition
         *   - FragmentDefinition
         */

        _proto.parseDefinition = function parseDefinition() {
          if (this.peek(_tokenKind.TokenKind.NAME)) {
            switch (this._lexer.token.value) {
              case "query":
              case "mutation":
              case "subscription":
                return this.parseOperationDefinition();

              case "fragment":
                return this.parseFragmentDefinition();

              case "schema":
              case "scalar":
              case "type":
              case "interface":
              case "union":
              case "enum":
              case "input":
              case "directive":
                return this.parseTypeSystemDefinition();

              case "extend":
                return this.parseTypeSystemExtension();
            }
          } else if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
            return this.parseOperationDefinition();
          } else if (this.peekDescription()) {
            return this.parseTypeSystemDefinition();
          }

          throw this.unexpected();
        }; // Implements the parsing rules in the Operations section.

        /**
         * OperationDefinition :
         *  - SelectionSet
         *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
         */

        _proto.parseOperationDefinition = function parseOperationDefinition() {
          var start = this._lexer.token;

          if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
            return {
              kind: _kinds.Kind.OPERATION_DEFINITION,
              operation: "query",
              name: undefined,
              variableDefinitions: [],
              directives: [],
              selectionSet: this.parseSelectionSet(),
              loc: this.loc(start)
            };
          }

          var operation = this.parseOperationType();
          var name;

          if (this.peek(_tokenKind.TokenKind.NAME)) {
            name = this.parseName();
          }

          return {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: operation,
            name: name,
            variableDefinitions: this.parseVariableDefinitions(),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        };
        /**
         * OperationType : one of query mutation subscription
         */

        _proto.parseOperationType = function parseOperationType() {
          var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);

          switch (operationToken.value) {
            case "query":
              return "query";

            case "mutation":
              return "mutation";

            case "subscription":
              return "subscription";
          }

          throw this.unexpected(operationToken);
        };
        /**
         * VariableDefinitions : ( VariableDefinition+ )
         */

        _proto.parseVariableDefinitions = function parseVariableDefinitions() {
          return this.optionalMany(
            _tokenKind.TokenKind.PAREN_L,
            this.parseVariableDefinition,
            _tokenKind.TokenKind.PAREN_R
          );
        };
        /**
         * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
         */

        _proto.parseVariableDefinition = function parseVariableDefinition() {
          var start = this._lexer.token;
          return {
            kind: _kinds.Kind.VARIABLE_DEFINITION,
            variable: this.parseVariable(),
            type:
              (this.expectToken(_tokenKind.TokenKind.COLON),
              this.parseTypeReference()),
            defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)
              ? this.parseValueLiteral(true)
              : undefined,
            directives: this.parseDirectives(true),
            loc: this.loc(start)
          };
        };
        /**
         * Variable : $ Name
         */

        _proto.parseVariable = function parseVariable() {
          var start = this._lexer.token;
          this.expectToken(_tokenKind.TokenKind.DOLLAR);
          return {
            kind: _kinds.Kind.VARIABLE,
            name: this.parseName(),
            loc: this.loc(start)
          };
        };
        /**
         * SelectionSet : { Selection+ }
         */

        _proto.parseSelectionSet = function parseSelectionSet() {
          var start = this._lexer.token;
          return {
            kind: _kinds.Kind.SELECTION_SET,
            selections: this.many(
              _tokenKind.TokenKind.BRACE_L,
              this.parseSelection,
              _tokenKind.TokenKind.BRACE_R
            ),
            loc: this.loc(start)
          };
        };
        /**
         * Selection :
         *   - Field
         *   - FragmentSpread
         *   - InlineFragment
         */

        _proto.parseSelection = function parseSelection() {
          return this.peek(_tokenKind.TokenKind.SPREAD)
            ? this.parseFragment()
            : this.parseField();
        };
        /**
         * Field : Alias? Name Arguments? Directives? SelectionSet?
         *
         * Alias : Name :
         */

        _proto.parseField = function parseField() {
          var start = this._lexer.token;
          var nameOrAlias = this.parseName();
          var alias;
          var name;

          if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
            alias = nameOrAlias;
            name = this.parseName();
          } else {
            name = nameOrAlias;
          }

          return {
            kind: _kinds.Kind.FIELD,
            alias: alias,
            name: name,
            arguments: this.parseArguments(false),
            directives: this.parseDirectives(false),
            selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L)
              ? this.parseSelectionSet()
              : undefined,
            loc: this.loc(start)
          };
        };
        /**
         * Arguments[Const] : ( Argument[?Const]+ )
         */

        _proto.parseArguments = function parseArguments(isConst) {
          var item = isConst ? this.parseConstArgument : this.parseArgument;
          return this.optionalMany(
            _tokenKind.TokenKind.PAREN_L,
            item,
            _tokenKind.TokenKind.PAREN_R
          );
        };
        /**
         * Argument[Const] : Name : Value[?Const]
         */

        _proto.parseArgument = function parseArgument() {
          var start = this._lexer.token;
          var name = this.parseName();
          this.expectToken(_tokenKind.TokenKind.COLON);
          return {
            kind: _kinds.Kind.ARGUMENT,
            name: name,
            value: this.parseValueLiteral(false),
            loc: this.loc(start)
          };
        };

        _proto.parseConstArgument = function parseConstArgument() {
          var start = this._lexer.token;
          return {
            kind: _kinds.Kind.ARGUMENT,
            name: this.parseName(),
            value:
              (this.expectToken(_tokenKind.TokenKind.COLON),
              this.parseValueLiteral(true)),
            loc: this.loc(start)
          };
        }; // Implements the parsing rules in the Fragments section.

        /**
         * Corresponds to both FragmentSpread and InlineFragment in the spec.
         *
         * FragmentSpread : ... FragmentName Directives?
         *
         * InlineFragment : ... TypeCondition? Directives? SelectionSet
         */

        _proto.parseFragment = function parseFragment() {
          var start = this._lexer.token;
          this.expectToken(_tokenKind.TokenKind.SPREAD);
          var hasTypeCondition = this.expectOptionalKeyword("on");

          if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
            return {
              kind: _kinds.Kind.FRAGMENT_SPREAD,
              name: this.parseFragmentName(),
              directives: this.parseDirectives(false),
              loc: this.loc(start)
            };
          }

          return {
            kind: _kinds.Kind.INLINE_FRAGMENT,
            typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        };
        /**
         * FragmentDefinition :
         *   - fragment FragmentName on TypeCondition Directives? SelectionSet
         *
         * TypeCondition : NamedType
         */

        _proto.parseFragmentDefinition = function parseFragmentDefinition() {
          var _this$_options;

          var start = this._lexer.token;
          this.expectKeyword("fragment"); // Experimental support for defining variables within fragments changes
          // the grammar of FragmentDefinition:
          //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

          if (
            ((_this$_options = this._options) === null ||
            _this$_options === void 0
              ? void 0
              : _this$_options.experimentalFragmentVariables) === true
          ) {
            return {
              kind: _kinds.Kind.FRAGMENT_DEFINITION,
              name: this.parseFragmentName(),
              variableDefinitions: this.parseVariableDefinitions(),
              typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
              directives: this.parseDirectives(false),
              selectionSet: this.parseSelectionSet(),
              loc: this.loc(start)
            };
          }

          return {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        };
        /**
         * FragmentName : Name but not `on`
         */

        _proto.parseFragmentName = function parseFragmentName() {
          if (this._lexer.token.value === "on") {
            throw this.unexpected();
          }

          return this.parseName();
        }; // Implements the parsing rules in the Values section.

        /**
         * Value[Const] :
         *   - [~Const] Variable
         *   - IntValue
         *   - FloatValue
         *   - StringValue
         *   - BooleanValue
         *   - NullValue
         *   - EnumValue
         *   - ListValue[?Const]
         *   - ObjectValue[?Const]
         *
         * BooleanValue : one of `true` `false`
         *
         * NullValue : `null`
         *
         * EnumValue : Name but not `true`, `false` or `null`
         */

        _proto.parseValueLiteral = function parseValueLiteral(isConst) {
          var token = this._lexer.token;

          switch (token.kind) {
            case _tokenKind.TokenKind.BRACKET_L:
              return this.parseList(isConst);

            case _tokenKind.TokenKind.BRACE_L:
              return this.parseObject(isConst);

            case _tokenKind.TokenKind.INT:
              this._lexer.advance();

              return {
                kind: _kinds.Kind.INT,
                value: token.value,
                loc: this.loc(token)
              };

            case _tokenKind.TokenKind.FLOAT:
              this._lexer.advance();

              return {
                kind: _kinds.Kind.FLOAT,
                value: token.value,
                loc: this.loc(token)
              };

            case _tokenKind.TokenKind.STRING:
            case _tokenKind.TokenKind.BLOCK_STRING:
              return this.parseStringLiteral();

            case _tokenKind.TokenKind.NAME:
              this._lexer.advance();

              switch (token.value) {
                case "true":
                  return {
                    kind: _kinds.Kind.BOOLEAN,
                    value: true,
                    loc: this.loc(token)
                  };

                case "false":
                  return {
                    kind: _kinds.Kind.BOOLEAN,
                    value: false,
                    loc: this.loc(token)
                  };

                case "null":
                  return {
                    kind: _kinds.Kind.NULL,
                    loc: this.loc(token)
                  };

                default:
                  return {
                    kind: _kinds.Kind.ENUM,
                    value: token.value,
                    loc: this.loc(token)
                  };
              }

            case _tokenKind.TokenKind.DOLLAR:
              if (!isConst) {
                return this.parseVariable();
              }

              break;
          }

          throw this.unexpected();
        };

        _proto.parseStringLiteral = function parseStringLiteral() {
          var token = this._lexer.token;

          this._lexer.advance();

          return {
            kind: _kinds.Kind.STRING,
            value: token.value,
            block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,
            loc: this.loc(token)
          };
        };
        /**
         * ListValue[Const] :
         *   - [ ]
         *   - [ Value[?Const]+ ]
         */

        _proto.parseList = function parseList(isConst) {
          var _this = this;

          var start = this._lexer.token;

          var item = function item() {
            return _this.parseValueLiteral(isConst);
          };

          return {
            kind: _kinds.Kind.LIST,
            values: this.any(
              _tokenKind.TokenKind.BRACKET_L,
              item,
              _tokenKind.TokenKind.BRACKET_R
            ),
            loc: this.loc(start)
          };
        };
        /**
         * ObjectValue[Const] :
         *   - { }
         *   - { ObjectField[?Const]+ }
         */

        _proto.parseObject = function parseObject(isConst) {
          var _this2 = this;

          var start = this._lexer.token;

          var item = function item() {
            return _this2.parseObjectField(isConst);
          };

          return {
            kind: _kinds.Kind.OBJECT,
            fields: this.any(
              _tokenKind.TokenKind.BRACE_L,
              item,
              _tokenKind.TokenKind.BRACE_R
            ),
            loc: this.loc(start)
          };
        };
        /**
         * ObjectField[Const] : Name : Value[?Const]
         */

        _proto.parseObjectField = function parseObjectField(isConst) {
          var start = this._lexer.token;
          var name = this.parseName();
          this.expectToken(_tokenKind.TokenKind.COLON);
          return {
            kind: _kinds.Kind.OBJECT_FIELD,
            name: name,
            value: this.parseValueLiteral(isConst),
            loc: this.loc(start)
          };
        }; // Implements the parsing rules in the Directives section.

        /**
         * Directives[Const] : Directive[?Const]+
         */

        _proto.parseDirectives = function parseDirectives(isConst) {
          var directives = [];

          while (this.peek(_tokenKind.TokenKind.AT)) {
            directives.push(this.parseDirective(isConst));
          }

          return directives;
        };
        /**
         * Directive[Const] : @ Name Arguments[?Const]?
         */

        _proto.parseDirective = function parseDirective(isConst) {
          var start = this._lexer.token;
          this.expectToken(_tokenKind.TokenKind.AT);
          return {
            kind: _kinds.Kind.DIRECTIVE,
            name: this.parseName(),
            arguments: this.parseArguments(isConst),
            loc: this.loc(start)
          };
        }; // Implements the parsing rules in the Types section.

        /**
         * Type :
         *   - NamedType
         *   - ListType
         *   - NonNullType
         */

        _proto.parseTypeReference = function parseTypeReference() {
          var start = this._lexer.token;
          var type;

          if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
            type = this.parseTypeReference();
            this.expectToken(_tokenKind.TokenKind.BRACKET_R);
            type = {
              kind: _kinds.Kind.LIST_TYPE,
              type: type,
              loc: this.loc(start)
            };
          } else {
            type = this.parseNamedType();
          }

          if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
            return {
              kind: _kinds.Kind.NON_NULL_TYPE,
              type: type,
              loc: this.loc(start)
            };
          }

          return type;
        };
        /**
         * NamedType : Name
         */

        _proto.parseNamedType = function parseNamedType() {
          var start = this._lexer.token;
          return {
            kind: _kinds.Kind.NAMED_TYPE,
            name: this.parseName(),
            loc: this.loc(start)
          };
        }; // Implements the parsing rules in the Type Definition section.

        /**
         * TypeSystemDefinition :
         *   - SchemaDefinition
         *   - TypeDefinition
         *   - DirectiveDefinition
         *
         * TypeDefinition :
         *   - ScalarTypeDefinition
         *   - ObjectTypeDefinition
         *   - InterfaceTypeDefinition
         *   - UnionTypeDefinition
         *   - EnumTypeDefinition
         *   - InputObjectTypeDefinition
         */

        _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
          // Many definitions begin with a description and require a lookahead.
          var keywordToken = this.peekDescription()
            ? this._lexer.lookahead()
            : this._lexer.token;

          if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
            switch (keywordToken.value) {
              case "schema":
                return this.parseSchemaDefinition();

              case "scalar":
                return this.parseScalarTypeDefinition();

              case "type":
                return this.parseObjectTypeDefinition();

              case "interface":
                return this.parseInterfaceTypeDefinition();

              case "union":
                return this.parseUnionTypeDefinition();

              case "enum":
                return this.parseEnumTypeDefinition();

              case "input":
                return this.parseInputObjectTypeDefinition();

              case "directive":
                return this.parseDirectiveDefinition();
            }
          }

          throw this.unexpected(keywordToken);
        };

        _proto.peekDescription = function peekDescription() {
          return (
            this.peek(_tokenKind.TokenKind.STRING) ||
            this.peek(_tokenKind.TokenKind.BLOCK_STRING)
          );
        };
        /**
         * Description : StringValue
         */

        _proto.parseDescription = function parseDescription() {
          if (this.peekDescription()) {
            return this.parseStringLiteral();
          }
        };
        /**
         * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
         */

        _proto.parseSchemaDefinition = function parseSchemaDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("schema");
          var directives = this.parseDirectives(true);
          var operationTypes = this.many(
            _tokenKind.TokenKind.BRACE_L,
            this.parseOperationTypeDefinition,
            _tokenKind.TokenKind.BRACE_R
          );
          return {
            kind: _kinds.Kind.SCHEMA_DEFINITION,
            description: description,
            directives: directives,
            operationTypes: operationTypes,
            loc: this.loc(start)
          };
        };
        /**
         * OperationTypeDefinition : OperationType : NamedType
         */

        _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
          var start = this._lexer.token;
          var operation = this.parseOperationType();
          this.expectToken(_tokenKind.TokenKind.COLON);
          var type = this.parseNamedType();
          return {
            kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
            operation: operation,
            type: type,
            loc: this.loc(start)
          };
        };
        /**
         * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
         */

        _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("scalar");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          return {
            kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            loc: this.loc(start)
          };
        };
        /**
         * ObjectTypeDefinition :
         *   Description?
         *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
         */

        _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("type");
          var name = this.parseName();
          var interfaces = this.parseImplementsInterfaces();
          var directives = this.parseDirectives(true);
          var fields = this.parseFieldsDefinition();
          return {
            kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
            description: description,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
          };
        };
        /**
         * ImplementsInterfaces :
         *   - implements `&`? NamedType
         *   - ImplementsInterfaces & NamedType
         */

        _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
          var _this$_options2;

          if (!this.expectOptionalKeyword("implements")) {
            return [];
          }

          if (
            ((_this$_options2 = this._options) === null ||
            _this$_options2 === void 0
              ? void 0
              : _this$_options2.allowLegacySDLImplementsInterfaces) === true
          ) {
            var types = []; // Optional leading ampersand

            this.expectOptionalToken(_tokenKind.TokenKind.AMP);

            do {
              types.push(this.parseNamedType());
            } while (
              this.expectOptionalToken(_tokenKind.TokenKind.AMP) ||
              this.peek(_tokenKind.TokenKind.NAME)
            );

            return types;
          }

          return this.delimitedMany(
            _tokenKind.TokenKind.AMP,
            this.parseNamedType
          );
        };
        /**
         * FieldsDefinition : { FieldDefinition+ }
         */

        _proto.parseFieldsDefinition = function parseFieldsDefinition() {
          var _this$_options3;

          // Legacy support for the SDL?
          if (
            ((_this$_options3 = this._options) === null ||
            _this$_options3 === void 0
              ? void 0
              : _this$_options3.allowLegacySDLEmptyFields) === true &&
            this.peek(_tokenKind.TokenKind.BRACE_L) &&
            this._lexer.lookahead().kind === _tokenKind.TokenKind.BRACE_R
          ) {
            this._lexer.advance();

            this._lexer.advance();

            return [];
          }

          return this.optionalMany(
            _tokenKind.TokenKind.BRACE_L,
            this.parseFieldDefinition,
            _tokenKind.TokenKind.BRACE_R
          );
        };
        /**
         * FieldDefinition :
         *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
         */

        _proto.parseFieldDefinition = function parseFieldDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          var name = this.parseName();
          var args = this.parseArgumentDefs();
          this.expectToken(_tokenKind.TokenKind.COLON);
          var type = this.parseTypeReference();
          var directives = this.parseDirectives(true);
          return {
            kind: _kinds.Kind.FIELD_DEFINITION,
            description: description,
            name: name,
            arguments: args,
            type: type,
            directives: directives,
            loc: this.loc(start)
          };
        };
        /**
         * ArgumentsDefinition : ( InputValueDefinition+ )
         */

        _proto.parseArgumentDefs = function parseArgumentDefs() {
          return this.optionalMany(
            _tokenKind.TokenKind.PAREN_L,
            this.parseInputValueDef,
            _tokenKind.TokenKind.PAREN_R
          );
        };
        /**
         * InputValueDefinition :
         *   - Description? Name : Type DefaultValue? Directives[Const]?
         */

        _proto.parseInputValueDef = function parseInputValueDef() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          var name = this.parseName();
          this.expectToken(_tokenKind.TokenKind.COLON);
          var type = this.parseTypeReference();
          var defaultValue;

          if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
            defaultValue = this.parseValueLiteral(true);
          }

          var directives = this.parseDirectives(true);
          return {
            kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
            description: description,
            name: name,
            type: type,
            defaultValue: defaultValue,
            directives: directives,
            loc: this.loc(start)
          };
        };
        /**
         * InterfaceTypeDefinition :
         *   - Description? interface Name Directives[Const]? FieldsDefinition?
         */

        _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("interface");
          var name = this.parseName();
          var interfaces = this.parseImplementsInterfaces();
          var directives = this.parseDirectives(true);
          var fields = this.parseFieldsDefinition();
          return {
            kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
            description: description,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
          };
        };
        /**
         * UnionTypeDefinition :
         *   - Description? union Name Directives[Const]? UnionMemberTypes?
         */

        _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("union");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          var types = this.parseUnionMemberTypes();
          return {
            kind: _kinds.Kind.UNION_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            types: types,
            loc: this.loc(start)
          };
        };
        /**
         * UnionMemberTypes :
         *   - = `|`? NamedType
         *   - UnionMemberTypes | NamedType
         */

        _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
          return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)
            ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType)
            : [];
        };
        /**
         * EnumTypeDefinition :
         *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
         */

        _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("enum");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          var values = this.parseEnumValuesDefinition();
          return {
            kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            values: values,
            loc: this.loc(start)
          };
        };
        /**
         * EnumValuesDefinition : { EnumValueDefinition+ }
         */

        _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
          return this.optionalMany(
            _tokenKind.TokenKind.BRACE_L,
            this.parseEnumValueDefinition,
            _tokenKind.TokenKind.BRACE_R
          );
        };
        /**
         * EnumValueDefinition : Description? EnumValue Directives[Const]?
         *
         * EnumValue : Name
         */

        _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          return {
            kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            loc: this.loc(start)
          };
        };
        /**
         * InputObjectTypeDefinition :
         *   - Description? input Name Directives[Const]? InputFieldsDefinition?
         */

        _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("input");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          var fields = this.parseInputFieldsDefinition();
          return {
            kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
          };
        };
        /**
         * InputFieldsDefinition : { InputValueDefinition+ }
         */

        _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
          return this.optionalMany(
            _tokenKind.TokenKind.BRACE_L,
            this.parseInputValueDef,
            _tokenKind.TokenKind.BRACE_R
          );
        };
        /**
         * TypeSystemExtension :
         *   - SchemaExtension
         *   - TypeExtension
         *
         * TypeExtension :
         *   - ScalarTypeExtension
         *   - ObjectTypeExtension
         *   - InterfaceTypeExtension
         *   - UnionTypeExtension
         *   - EnumTypeExtension
         *   - InputObjectTypeDefinition
         */

        _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
          var keywordToken = this._lexer.lookahead();

          if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
            switch (keywordToken.value) {
              case "schema":
                return this.parseSchemaExtension();

              case "scalar":
                return this.parseScalarTypeExtension();

              case "type":
                return this.parseObjectTypeExtension();

              case "interface":
                return this.parseInterfaceTypeExtension();

              case "union":
                return this.parseUnionTypeExtension();

              case "enum":
                return this.parseEnumTypeExtension();

              case "input":
                return this.parseInputObjectTypeExtension();
            }
          }

          throw this.unexpected(keywordToken);
        };
        /**
         * SchemaExtension :
         *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
         *  - extend schema Directives[Const]
         */

        _proto.parseSchemaExtension = function parseSchemaExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("schema");
          var directives = this.parseDirectives(true);
          var operationTypes = this.optionalMany(
            _tokenKind.TokenKind.BRACE_L,
            this.parseOperationTypeDefinition,
            _tokenKind.TokenKind.BRACE_R
          );

          if (directives.length === 0 && operationTypes.length === 0) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.SCHEMA_EXTENSION,
            directives: directives,
            operationTypes: operationTypes,
            loc: this.loc(start)
          };
        };
        /**
         * ScalarTypeExtension :
         *   - extend scalar Name Directives[Const]
         */

        _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("scalar");
          var name = this.parseName();
          var directives = this.parseDirectives(true);

          if (directives.length === 0) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
            name: name,
            directives: directives,
            loc: this.loc(start)
          };
        };
        /**
         * ObjectTypeExtension :
         *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
         *  - extend type Name ImplementsInterfaces? Directives[Const]
         *  - extend type Name ImplementsInterfaces
         */

        _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("type");
          var name = this.parseName();
          var interfaces = this.parseImplementsInterfaces();
          var directives = this.parseDirectives(true);
          var fields = this.parseFieldsDefinition();

          if (
            interfaces.length === 0 &&
            directives.length === 0 &&
            fields.length === 0
          ) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
          };
        };
        /**
         * InterfaceTypeExtension :
         *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
         *  - extend interface Name ImplementsInterfaces? Directives[Const]
         *  - extend interface Name ImplementsInterfaces
         */

        _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("interface");
          var name = this.parseName();
          var interfaces = this.parseImplementsInterfaces();
          var directives = this.parseDirectives(true);
          var fields = this.parseFieldsDefinition();

          if (
            interfaces.length === 0 &&
            directives.length === 0 &&
            fields.length === 0
          ) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
          };
        };
        /**
         * UnionTypeExtension :
         *   - extend union Name Directives[Const]? UnionMemberTypes
         *   - extend union Name Directives[Const]
         */

        _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("union");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          var types = this.parseUnionMemberTypes();

          if (directives.length === 0 && types.length === 0) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.UNION_TYPE_EXTENSION,
            name: name,
            directives: directives,
            types: types,
            loc: this.loc(start)
          };
        };
        /**
         * EnumTypeExtension :
         *   - extend enum Name Directives[Const]? EnumValuesDefinition
         *   - extend enum Name Directives[Const]
         */

        _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("enum");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          var values = this.parseEnumValuesDefinition();

          if (directives.length === 0 && values.length === 0) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
            name: name,
            directives: directives,
            values: values,
            loc: this.loc(start)
          };
        };
        /**
         * InputObjectTypeExtension :
         *   - extend input Name Directives[Const]? InputFieldsDefinition
         *   - extend input Name Directives[Const]
         */

        _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
          var start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("input");
          var name = this.parseName();
          var directives = this.parseDirectives(true);
          var fields = this.parseInputFieldsDefinition();

          if (directives.length === 0 && fields.length === 0) {
            throw this.unexpected();
          }

          return {
            kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
            name: name,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
          };
        };
        /**
         * DirectiveDefinition :
         *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
         */

        _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
          var start = this._lexer.token;
          var description = this.parseDescription();
          this.expectKeyword("directive");
          this.expectToken(_tokenKind.TokenKind.AT);
          var name = this.parseName();
          var args = this.parseArgumentDefs();
          var repeatable = this.expectOptionalKeyword("repeatable");
          this.expectKeyword("on");
          var locations = this.parseDirectiveLocations();
          return {
            kind: _kinds.Kind.DIRECTIVE_DEFINITION,
            description: description,
            name: name,
            arguments: args,
            repeatable: repeatable,
            locations: locations,
            loc: this.loc(start)
          };
        };
        /**
         * DirectiveLocations :
         *   - `|`? DirectiveLocation
         *   - DirectiveLocations | DirectiveLocation
         */

        _proto.parseDirectiveLocations = function parseDirectiveLocations() {
          return this.delimitedMany(
            _tokenKind.TokenKind.PIPE,
            this.parseDirectiveLocation
          );
        };
        /*
         * DirectiveLocation :
         *   - ExecutableDirectiveLocation
         *   - TypeSystemDirectiveLocation
         *
         * ExecutableDirectiveLocation : one of
         *   `QUERY`
         *   `MUTATION`
         *   `SUBSCRIPTION`
         *   `FIELD`
         *   `FRAGMENT_DEFINITION`
         *   `FRAGMENT_SPREAD`
         *   `INLINE_FRAGMENT`
         *
         * TypeSystemDirectiveLocation : one of
         *   `SCHEMA`
         *   `SCALAR`
         *   `OBJECT`
         *   `FIELD_DEFINITION`
         *   `ARGUMENT_DEFINITION`
         *   `INTERFACE`
         *   `UNION`
         *   `ENUM`
         *   `ENUM_VALUE`
         *   `INPUT_OBJECT`
         *   `INPUT_FIELD_DEFINITION`
         */

        _proto.parseDirectiveLocation = function parseDirectiveLocation() {
          var start = this._lexer.token;
          var name = this.parseName();

          if (_directiveLocation.DirectiveLocation[name.value] !== undefined) {
            return name;
          }

          throw this.unexpected(start);
        }; // Core parsing utility functions

        /**
         * Returns a location object, used to identify the place in the source that created a given parsed object.
         */

        _proto.loc = function loc(startToken) {
          var _this$_options4;

          if (
            ((_this$_options4 = this._options) === null ||
            _this$_options4 === void 0
              ? void 0
              : _this$_options4.noLocation) !== true
          ) {
            return new _ast.Location(
              startToken,
              this._lexer.lastToken,
              this._lexer.source
            );
          }
        };
        /**
         * Determines if the next token is of a given kind
         */

        _proto.peek = function peek(kind) {
          return this._lexer.token.kind === kind;
        };
        /**
         * If the next token is of the given kind, return that token after advancing the lexer.
         * Otherwise, do not change the parser state and throw an error.
         */

        _proto.expectToken = function expectToken(kind) {
          var token = this._lexer.token;

          if (token.kind === kind) {
            this._lexer.advance();

            return token;
          }

          throw (0, _syntaxError.syntaxError)(
            this._lexer.source,
            token.start,
            "Expected "
              .concat(getTokenKindDesc(kind), ", found ")
              .concat(getTokenDesc(token), ".")
          );
        };
        /**
         * If the next token is of the given kind, return that token after advancing the lexer.
         * Otherwise, do not change the parser state and return undefined.
         */

        _proto.expectOptionalToken = function expectOptionalToken(kind) {
          var token = this._lexer.token;

          if (token.kind === kind) {
            this._lexer.advance();

            return token;
          }

          return undefined;
        };
        /**
         * If the next token is a given keyword, advance the lexer.
         * Otherwise, do not change the parser state and throw an error.
         */

        _proto.expectKeyword = function expectKeyword(value) {
          var token = this._lexer.token;

          if (
            token.kind === _tokenKind.TokenKind.NAME &&
            token.value === value
          ) {
            this._lexer.advance();
          } else {
            throw (0, _syntaxError.syntaxError)(
              this._lexer.source,
              token.start,
              'Expected "'
                .concat(value, '", found ')
                .concat(getTokenDesc(token), ".")
            );
          }
        };
        /**
         * If the next token is a given keyword, return "true" after advancing the lexer.
         * Otherwise, do not change the parser state and return "false".
         */

        _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
          var token = this._lexer.token;

          if (
            token.kind === _tokenKind.TokenKind.NAME &&
            token.value === value
          ) {
            this._lexer.advance();

            return true;
          }

          return false;
        };
        /**
         * Helper function for creating an error when an unexpected lexed token is encountered.
         */

        _proto.unexpected = function unexpected(atToken) {
          var token =
            atToken !== null && atToken !== void 0
              ? atToken
              : this._lexer.token;
          return (0, _syntaxError.syntaxError)(
            this._lexer.source,
            token.start,
            "Unexpected ".concat(getTokenDesc(token), ".")
          );
        };
        /**
         * Returns a possibly empty list of parse nodes, determined by the parseFn.
         * This list begins with a lex token of openKind and ends with a lex token of closeKind.
         * Advances the parser to the next lex token after the closing token.
         */

        _proto.any = function any(openKind, parseFn, closeKind) {
          this.expectToken(openKind);
          var nodes = [];

          while (!this.expectOptionalToken(closeKind)) {
            nodes.push(parseFn.call(this));
          }

          return nodes;
        };
        /**
         * Returns a list of parse nodes, determined by the parseFn.
         * It can be empty only if open token is missing otherwise it will always return non-empty list
         * that begins with a lex token of openKind and ends with a lex token of closeKind.
         * Advances the parser to the next lex token after the closing token.
         */

        _proto.optionalMany = function optionalMany(
          openKind,
          parseFn,
          closeKind
        ) {
          if (this.expectOptionalToken(openKind)) {
            var nodes = [];

            do {
              nodes.push(parseFn.call(this));
            } while (!this.expectOptionalToken(closeKind));

            return nodes;
          }

          return [];
        };
        /**
         * Returns a non-empty list of parse nodes, determined by the parseFn.
         * This list begins with a lex token of openKind and ends with a lex token of closeKind.
         * Advances the parser to the next lex token after the closing token.
         */

        _proto.many = function many(openKind, parseFn, closeKind) {
          this.expectToken(openKind);
          var nodes = [];

          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));

          return nodes;
        };
        /**
         * Returns a non-empty list of parse nodes, determined by the parseFn.
         * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
         * Advances the parser to the next lex token after last item in the list.
         */

        _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
          this.expectOptionalToken(delimiterKind);
          var nodes = [];

          do {
            nodes.push(parseFn.call(this));
          } while (this.expectOptionalToken(delimiterKind));

          return nodes;
        };

        return Parser;
      })();
      /**
       * A helper function to describe a token as a string for debugging.
       */

      exports.Parser = Parser;

      function getTokenDesc(token) {
        var value = token.value;
        return (
          getTokenKindDesc(token.kind) +
          (value != null ? ' "'.concat(value, '"') : "")
        );
      }
      /**
       * A helper function to describe a token kind as a string for debugging.
       */

      function getTokenKindDesc(kind) {
        return (0, _lexer.isPunctuatorTokenKind)(kind)
          ? '"'.concat(kind, '"')
          : kind;
      }

      /***/
    },

    /***/ "Db/j": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = invariant;

      function invariant(condition, message) {
        var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

        if (!booleanCondition) {
          throw new Error(
            message != null ? message : "Unexpected invariant triggered."
          );
        }
      }

      /***/
    },

    /***/ DiUC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _symbols = __webpack_require__("6CEn");

      /* eslint-disable no-redeclare */
      // $FlowFixMe[name-already-bound]
      var arrayFrom =
        Array.from ||
        function(obj, mapFn, thisArg) {
          if (obj == null) {
            throw new TypeError(
              "Array.from requires an array-like object - not null or undefined"
            );
          } // Is Iterable?

          var iteratorMethod = obj[_symbols.SYMBOL_ITERATOR];

          if (typeof iteratorMethod === "function") {
            var iterator = iteratorMethod.call(obj);
            var result = [];
            var step;

            for (var i = 0; !(step = iterator.next()).done; ++i) {
              result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.
              // After a very large number of iterations, produce an error.
              // istanbul ignore if (Too big to actually test)

              if (i > 9999999) {
                throw new TypeError("Near-infinite iteration.");
              }
            }

            return result;
          } // Is Array like?

          var length = obj.length;

          if (typeof length === "number" && length >= 0 && length % 1 === 0) {
            var _result = [];

            for (var _i = 0; _i < length; ++_i) {
              if (Object.prototype.hasOwnProperty.call(obj, _i)) {
                _result.push(mapFn.call(thisArg, obj[_i], _i));
              }
            }

            return _result;
          }

          return [];
        };

      var _default = arrayFrom;
      exports.default = _default;

      /***/
    },

    /***/ DmXP: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var getDay = Date.prototype.getDay;
      var tryDateObject = function tryDateGetDayCall(value) {
        try {
          getDay.call(value);
          return true;
        } catch (e) {
          return false;
        }
      };

      var toStr = Object.prototype.toString;
      var dateClass = "[object Date]";
      var hasToStringTag =
        typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";

      module.exports = function isDateObject(value) {
        if (typeof value !== "object" || value === null) {
          return false;
        }
        return hasToStringTag
          ? tryDateObject(value)
          : toStr.call(value) === dateClass;
      };

      /***/
    },

    /***/ Dugd: /***/ function(module, exports, __webpack_require__) {
      (function(global, factory) {
        true ? factory() : undefined;
      })(this, function() {
        "use strict";

        var parser = __webpack_require__("DEM2");

        var parse = parser.parse;

        // Strip insignificant whitespace
        // Note that this could do a lot more, such as reorder fields etc.
        function normalize(string) {
          return string.replace(/[\s,]+/g, " ").trim();
        }

        // A map docString -> graphql document
        var docCache = {};

        // A map fragmentName -> [normalized source]
        var fragmentSourceMap = {};

        function cacheKeyFromLoc(loc) {
          return normalize(loc.source.body.substring(loc.start, loc.end));
        }

        // For testing.
        function resetCaches() {
          docCache = {};
          fragmentSourceMap = {};
        }

        // Take a unstripped parsed document (query/mutation or even fragment), and
        // check all fragment definitions, checking for name->source uniqueness.
        // We also want to make sure only unique fragments exist in the document.
        var printFragmentWarnings = true;
        function processFragments(ast) {
          var astFragmentMap = {};
          var definitions = [];

          for (var i = 0; i < ast.definitions.length; i++) {
            var fragmentDefinition = ast.definitions[i];

            if (fragmentDefinition.kind === "FragmentDefinition") {
              var fragmentName = fragmentDefinition.name.value;
              var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);

              // We know something about this fragment
              if (
                fragmentSourceMap.hasOwnProperty(fragmentName) &&
                !fragmentSourceMap[fragmentName][sourceKey]
              ) {
                // this is a problem because the app developer is trying to register another fragment with
                // the same name as one previously registered. So, we tell them about it.
                if (printFragmentWarnings) {
                  console.warn(
                    "Warning: fragment with name " +
                      fragmentName +
                      " already exists.\n" +
                      "graphql-tag enforces all fragment names across your application to be unique; read more about\n" +
                      "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"
                  );
                }

                fragmentSourceMap[fragmentName][sourceKey] = true;
              } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {
                fragmentSourceMap[fragmentName] = {};
                fragmentSourceMap[fragmentName][sourceKey] = true;
              }

              if (!astFragmentMap[sourceKey]) {
                astFragmentMap[sourceKey] = true;
                definitions.push(fragmentDefinition);
              }
            } else {
              definitions.push(fragmentDefinition);
            }
          }

          ast.definitions = definitions;
          return ast;
        }

        function disableFragmentWarnings() {
          printFragmentWarnings = false;
        }

        function stripLoc(doc, removeLocAtThisLevel) {
          var docType = Object.prototype.toString.call(doc);

          if (docType === "[object Array]") {
            return doc.map(function(d) {
              return stripLoc(d, removeLocAtThisLevel);
            });
          }

          if (docType !== "[object Object]") {
            throw new Error("Unexpected input.");
          }

          // We don't want to remove the root loc field so we can use it
          // for fragment substitution (see below)
          if (removeLocAtThisLevel && doc.loc) {
            delete doc.loc;
          }

          // https://github.com/apollographql/graphql-tag/issues/40
          if (doc.loc) {
            delete doc.loc.startToken;
            delete doc.loc.endToken;
          }

          var keys = Object.keys(doc);
          var key;
          var value;
          var valueType;

          for (key in keys) {
            if (keys.hasOwnProperty(key)) {
              value = doc[keys[key]];
              valueType = Object.prototype.toString.call(value);

              if (
                valueType === "[object Object]" ||
                valueType === "[object Array]"
              ) {
                doc[keys[key]] = stripLoc(value, true);
              }
            }
          }

          return doc;
        }

        var experimentalFragmentVariables = false;
        function parseDocument(doc) {
          var cacheKey = normalize(doc);

          if (docCache[cacheKey]) {
            return docCache[cacheKey];
          }

          var parsed = parse(doc, {
            experimentalFragmentVariables: experimentalFragmentVariables
          });
          if (!parsed || parsed.kind !== "Document") {
            throw new Error("Not a valid GraphQL document.");
          }

          // check that all "new" fragments inside the documents are consistent with
          // existing fragments of the same name
          parsed = processFragments(parsed);
          parsed = stripLoc(parsed, false);
          docCache[cacheKey] = parsed;

          return parsed;
        }

        function enableExperimentalFragmentVariables() {
          experimentalFragmentVariables = true;
        }

        function disableExperimentalFragmentVariables() {
          experimentalFragmentVariables = false;
        }

        // XXX This should eventually disallow arbitrary string interpolation, like Relay does
        function gql(/* arguments */) {
          var args = Array.prototype.slice.call(arguments);

          var literals = args[0];

          // We always get literals[0] and then matching post literals for each arg given
          var result = typeof literals === "string" ? literals : literals[0];

          for (var i = 1; i < args.length; i++) {
            if (args[i] && args[i].kind && args[i].kind === "Document") {
              result += args[i].loc.source.body;
            } else {
              result += args[i];
            }

            result += literals[i];
          }

          return parseDocument(result);
        }

        // Support typescript, which isn't as nice as Babel about default exports
        gql.default = gql;
        gql.resetCaches = resetCaches;
        gql.disableFragmentWarnings = disableFragmentWarnings;
        gql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
        gql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;

        module.exports = gql;
      });
      //# sourceMappingURL=graphql-tag.umd.js.map

      /***/
    },

    /***/ E690: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      /**
       * Partitions an array given a predicate. All elements satisfying the predicate
       * are part of the first returned array, and all elements that don't are in the
       * second.
       */

      function partitionArray(array, predicate) {
        var first = [];
        var second = [];

        for (var i = 0; i < array.length; i++) {
          var item = array[i];

          if (predicate(item)) {
            first.push(item);
          } else {
            second.push(item);
          }
        }

        return [first, second];
      }

      module.exports = partitionArray;

      /***/
    },

    /***/ EBNW: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
      exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _directives = __webpack_require__("L9+1");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Known argument names
       *
       * A GraphQL field is only valid if all supplied arguments are defined by
       * that field.
       */
      function KnownArgumentNamesRule(context) {
        return _objectSpread(
          _objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)),
          {},
          {
            Argument: function Argument(argNode) {
              var argDef = context.getArgument();
              var fieldDef = context.getFieldDef();
              var parentType = context.getParentType();

              if (!argDef && fieldDef && parentType) {
                var argName = argNode.name.value;
                var knownArgsNames = fieldDef.args.map(function(arg) {
                  return arg.name;
                });
                var suggestions = (0, _suggestionList.default)(
                  argName,
                  knownArgsNames
                );
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Unknown argument "'
                      .concat(argName, '" on field "')
                      .concat(parentType.name, ".")
                      .concat(fieldDef.name, '".') +
                      (0, _didYouMean.default)(suggestions),
                    argNode
                  )
                );
              }
            }
          }
        );
      }
      /**
       * @internal
       */

      function KnownArgumentNamesOnDirectivesRule(context) {
        var directiveArgs = Object.create(null);
        var schema = context.getSchema();
        var definedDirectives = schema
          ? schema.getDirectives()
          : _directives.specifiedDirectives;

        for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
          var directive = definedDirectives[_i2];
          directiveArgs[directive.name] = directive.args.map(function(arg) {
            return arg.name;
          });
        }

        var astDefinitions = context.getDocument().definitions;

        for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
          var def = astDefinitions[_i4];

          if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
            var _def$arguments;

            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var argsNodes =
              (_def$arguments = def.arguments) !== null &&
              _def$arguments !== void 0
                ? _def$arguments
                : [];
            directiveArgs[def.name.value] = argsNodes.map(function(arg) {
              return arg.name.value;
            });
          }
        }

        return {
          Directive: function Directive(directiveNode) {
            var directiveName = directiveNode.name.value;
            var knownArgs = directiveArgs[directiveName];

            if (directiveNode.arguments && knownArgs) {
              for (
                var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments;
                _i6 < _directiveNode$argume2.length;
                _i6++
              ) {
                var argNode = _directiveNode$argume2[_i6];
                var argName = argNode.name.value;

                if (knownArgs.indexOf(argName) === -1) {
                  var suggestions = (0, _suggestionList.default)(
                    argName,
                    knownArgs
                  );
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      'Unknown argument "'
                        .concat(argName, '" on directive "@')
                        .concat(directiveName, '".') +
                        (0, _didYouMean.default)(suggestions),
                      argNode
                    )
                  );
                }
              }
            }

            return false;
          }
        };
      }

      /***/
    },

    /***/ EQxW: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var invariant = __webpack_require__("OUqe");

      var _require = __webpack_require__("/HjL"),
        printArguments = _require.printArguments,
        printDirectives = _require.printDirectives;

      /**
       * Generates an identifier that is unique to a given selection: the alias for
       * fields, the type for inline fragments, and a summary of the condition
       * variable and passing value for conditions.
       */
      function getIdentifierForSelection(schema, node) {
        if (node.kind === "LinkedField" || node.kind === "ScalarField") {
          return "Field: " + node.directives.length === 0
            ? node.alias
            : node.alias + printDirectives(schema, node.directives);
        } else if (node.kind === "FragmentSpread") {
          return "FragmentSpread:" + node.args.length === 0
            ? node.name
            : node.name + printArguments(schema, node.args);
        } else if (node.kind === "ModuleImport") {
          return "ModuleImport:";
        } else if (node.kind === "Defer") {
          return "Defer:" + node.label;
        } else if (node.kind === "Stream") {
          return "Stream:" + node.label;
        } else if (node.kind === "InlineFragment") {
          return (
            "InlineFragment:" +
            schema.getTypeString(node.typeCondition) +
            printDirectives(schema, node.directives)
          );
        } else if (node.kind === "ClientExtension") {
          return "ClientExtension:";
        } else if (node.kind === "InlineDataFragmentSpread") {
          return "InlineDataFragment:" + node.name;
        } else if (node.kind === "Condition") {
          return (
            "Condition:" +
            (node.condition.kind === "Variable"
              ? "$" + node.condition.variableName
              : String(node.condition.value)) +
            String(node.passingValue)
          );
        } else {
          true ? (false ? undefined : invariant(false)) : undefined;
        }
      }

      module.exports = getIdentifierForSelection;

      /***/
    },

    /***/ ES7E: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const typescript = __webpack_require__("fRMO");

      class TypeScriptOperationVariablesToObject extends typescript.TypeScriptOperationVariablesToObject {
        formatTypeString(fieldType, isNonNullType, _hasDefaultValue) {
          return fieldType;
        }
      }

      class TypeScriptSelectionSetProcessor extends visitorPluginCommon.BaseSelectionSetProcessor {
        transformPrimitiveFields(schemaType, fields) {
          if (fields.length === 0) {
            return [];
          }
          const parentName =
            (this.config.namespacedImportName
              ? `${this.config.namespacedImportName}.`
              : "") +
            this.config.convertName(schemaType.name, {
              useTypesPrefix: true
            });
          let hasConditionals = false;
          const conditilnalsList = [];
          let resString = `Pick<${parentName}, ${fields
            .map(field => {
              if (field.isConditional) {
                hasConditionals = true;
                conditilnalsList.push(field.fieldName);
              }
              return `'${field.fieldName}'`;
            })
            .join(" | ")}>`;
          if (hasConditionals) {
            const avoidOptional =
              // TODO: check type and exec only if relevant
              this.config.avoidOptionals === true ||
              this.config.avoidOptionals.field ||
              this.config.avoidOptionals.inputValue ||
              this.config.avoidOptionals.object;
            const transform = avoidOptional ? "MakeMaybe" : "MakeOptional";
            resString = `${
              this.config.namespacedImportName
                ? `${this.config.namespacedImportName}.`
                : ""
            }${transform}<${resString}, ${conditilnalsList
              .map(field => `'${field}'`)
              .join(" | ")}>`;
          }
          return [resString];
        }
        transformTypenameField(type, name) {
          return [`{ ${name}: ${type} }`];
        }
        transformAliasesPrimitiveFields(schemaType, fields) {
          if (fields.length === 0) {
            return [];
          }
          const parentName =
            (this.config.namespacedImportName
              ? `${this.config.namespacedImportName}.`
              : "") +
            this.config.convertName(schemaType.name, {
              useTypesPrefix: true
            });
          return [
            `{ ${fields
              .map(aliasedField => {
                const value =
                  aliasedField.fieldName === "__typename"
                    ? `'${schemaType.name}'`
                    : `${parentName}['${aliasedField.fieldName}']`;
                return `${aliasedField.alias}: ${value}`;
              })
              .join(", ")} }`
          ];
        }
        transformLinkFields(fields) {
          if (fields.length === 0) {
            return [];
          }
          return [
            `{ ${fields
              .map(
                field => `${field.alias || field.name}: ${field.selectionSet}`
              )
              .join(", ")} }`
          ];
        }
      }

      class TypeScriptDocumentsVisitor extends visitorPluginCommon.BaseDocumentsVisitor {
        constructor(schema, config, allFragments) {
          super(
            config,
            {
              arrayInputCoercion: visitorPluginCommon.getConfigValue(
                config.arrayInputCoercion,
                true
              ),
              noExport: visitorPluginCommon.getConfigValue(
                config.noExport,
                false
              ),
              avoidOptionals: visitorPluginCommon.normalizeAvoidOptionals(
                visitorPluginCommon.getConfigValue(config.avoidOptionals, false)
              ),
              immutableTypes: visitorPluginCommon.getConfigValue(
                config.immutableTypes,
                false
              ),
              nonOptionalTypename: visitorPluginCommon.getConfigValue(
                config.nonOptionalTypename,
                false
              )
            },
            schema
          );
          autoBind(this);
          const wrapOptional = type => {
            const prefix = this.config.namespacedImportName
              ? `${this.config.namespacedImportName}.`
              : "";
            return `${prefix}Maybe<${type}>`;
          };
          const wrapArray = type => {
            const listModifier = this.config.immutableTypes
              ? "ReadonlyArray"
              : "Array";
            return `${listModifier}<${type}>`;
          };
          const formatNamedField = (name, type, isConditional = false) => {
            const optional =
              isConditional ||
              (!this.config.avoidOptionals.field &&
                !!type &&
                !graphql.isNonNullType(type));
            return (
              (this.config.immutableTypes ? `readonly ${name}` : name) +
              (optional ? "?" : "")
            );
          };
          const processorConfig = {
            namespacedImportName: this.config.namespacedImportName,
            convertName: this.convertName.bind(this),
            enumPrefix: this.config.enumPrefix,
            scalars: this.scalars,
            formatNamedField,
            wrapTypeWithModifiers(baseType, type) {
              return visitorPluginCommon.wrapTypeWithModifiers(baseType, type, {
                wrapOptional,
                wrapArray
              });
            },
            avoidOptionals: this.config.avoidOptionals
          };
          const processor = new (config.preResolveTypes
            ? visitorPluginCommon.PreResolveTypesProcessor
            : TypeScriptSelectionSetProcessor)(processorConfig);
          this.setSelectionSetHandler(
            new visitorPluginCommon.SelectionSetToObject(
              processor,
              this.scalars,
              this.schema,
              this.convertName.bind(this),
              this.getFragmentSuffix.bind(this),
              allFragments,
              this.config
            )
          );
          const enumsNames = Object.keys(schema.getTypeMap()).filter(typeName =>
            graphql.isEnumType(schema.getType(typeName))
          );
          this.setVariablesTransformer(
            new TypeScriptOperationVariablesToObject(
              this.scalars,
              this.convertName.bind(this),
              this.config.avoidOptionals.object,
              this.config.immutableTypes,
              this.config.namespacedImportName,
              enumsNames,
              this.config.enumPrefix,
              this.config.enumValues,
              this.config.arrayInputCoercion
            )
          );
          this._declarationBlockConfig = {
            ignoreExport: this.config.noExport
          };
        }
        getImports() {
          return !this.config.globalNamespace
            ? this.config.fragmentImports.map(fragmentImport =>
                visitorPluginCommon.generateFragmentImportStatement(
                  fragmentImport,
                  "type"
                )
              )
            : [];
        }
        getPunctuation(_declarationKind) {
          return ";";
        }
        applyVariablesWrapper(variablesBlock) {
          const prefix = this.config.namespacedImportName
            ? `${this.config.namespacedImportName}.`
            : "";
          return `${prefix}Exact<${
            variablesBlock === "{}"
              ? `{ [key: string]: never; }`
              : variablesBlock
          }>`;
        }
      }

      const plugin = (schema, rawDocuments, config) => {
        const documents = config.flattenGeneratedTypes
          ? visitorPluginCommon.optimizeOperations(schema, rawDocuments)
          : rawDocuments;
        const allAst = graphql.concatAST(documents.map(v => v.document));
        const allFragments = [
          ...allAst.definitions
            .filter(d => d.kind === graphql.Kind.FRAGMENT_DEFINITION)
            .map(fragmentDef => ({
              node: fragmentDef,
              name: fragmentDef.name.value,
              onType: fragmentDef.typeCondition.name.value,
              isExternal: false
            })),
          ...(config.externalFragments || [])
        ];
        const visitor = new TypeScriptDocumentsVisitor(
          schema,
          config,
          allFragments
        );
        const visitorResult = graphql.visit(allAst, {
          leave: visitor
        });
        let content = visitorResult.definitions.join("\n");
        if (config.addOperationExport) {
          const exportConsts = [];
          allAst.definitions.forEach(d => {
            if ("name" in d) {
              exportConsts.push(
                `export declare const ${d.name.value}: import("graphql").DocumentNode;`
              );
            }
          });
          content = visitorResult.definitions.concat(exportConsts).join("\n");
        }
        if (config.globalNamespace) {
          content = `
    declare global { 
      ${content} 
    }`;
        }
        return {
          prepend: [
            ...visitor.getImports(),
            ...visitor.getGlobalDeclarations(visitor.config.noExport)
          ],
          content
        };
      };

      exports.TypeScriptDocumentsVisitor = TypeScriptDocumentsVisitor;
      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ EZ6x: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $gOPD = __webpack_require__("me4n");
      var $TypeError = GetIntrinsic("%TypeError%");

      var callBound = __webpack_require__("VF6F");

      var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");

      var has = __webpack_require__("oNNP");

      var IsArray = __webpack_require__("plxK");
      var IsPropertyKey = __webpack_require__("ml7t");
      var IsRegExp = __webpack_require__("8lxt");
      var ToPropertyDescriptor = __webpack_require__("FiDd");
      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-ordinarygetownproperty

      module.exports = function OrdinaryGetOwnProperty(O, P) {
        if (Type(O) !== "Object") {
          throw new $TypeError("Assertion failed: O must be an Object");
        }
        if (!IsPropertyKey(P)) {
          throw new $TypeError("Assertion failed: P must be a Property Key");
        }
        if (!has(O, P)) {
          return void 0;
        }
        if (!$gOPD) {
          // ES3 / IE 8 fallback
          var arrayLength = IsArray(O) && P === "length";
          var regexLastIndex = IsRegExp(O) && P === "lastIndex";
          return {
            "[[Configurable]]": !(arrayLength || regexLastIndex),
            "[[Enumerable]]": $isEnumerable(O, P),
            "[[Value]]": O[P],
            "[[Writable]]": true
          };
        }
        return ToPropertyDescriptor($gOPD(O, P));
      };

      /***/
    },

    /***/ EbDI: /***/ function(module, exports) {
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
          return Array.from(iter);
      }

      module.exports = _iterableToArray;

      /***/
    },

    /***/ EjDe: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      var _typeComparators = __webpack_require__("aulS");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Possible fragment spread
       *
       * A fragment spread is only valid if the type condition could ever possibly
       * be true: if there is a non-empty intersection of the possible parent types,
       * and possible types which pass the type condition.
       */
      function PossibleFragmentSpreadsRule(context) {
        return {
          InlineFragment: function InlineFragment(node) {
            var fragType = context.getType();
            var parentType = context.getParentType();

            if (
              (0, _definition.isCompositeType)(fragType) &&
              (0, _definition.isCompositeType)(parentType) &&
              !(0, _typeComparators.doTypesOverlap)(
                context.getSchema(),
                fragType,
                parentType
              )
            ) {
              var parentTypeStr = (0, _inspect.default)(parentType);
              var fragTypeStr = (0, _inspect.default)(fragType);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Fragment cannot be spread here as objects of type "'
                    .concat(parentTypeStr, '" can never be of type "')
                    .concat(fragTypeStr, '".'),
                  node
                )
              );
            }
          },
          FragmentSpread: function FragmentSpread(node) {
            var fragName = node.name.value;
            var fragType = getFragmentType(context, fragName);
            var parentType = context.getParentType();

            if (
              fragType &&
              parentType &&
              !(0, _typeComparators.doTypesOverlap)(
                context.getSchema(),
                fragType,
                parentType
              )
            ) {
              var parentTypeStr = (0, _inspect.default)(parentType);
              var fragTypeStr = (0, _inspect.default)(fragType);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Fragment "'
                    .concat(
                      fragName,
                      '" cannot be spread here as objects of type "'
                    )
                    .concat(parentTypeStr, '" can never be of type "')
                    .concat(fragTypeStr, '".'),
                  node
                )
              );
            }
          }
        };
      }

      function getFragmentType(context, name) {
        var frag = context.getFragment(name);

        if (frag) {
          var type = (0, _typeFromAST.typeFromAST)(
            context.getSchema(),
            frag.typeCondition
          );

          if ((0, _definition.isCompositeType)(type)) {
            return type;
          }
        }
      }

      /***/
    },

    /***/ FFNC: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _require = __webpack_require__("VrDQ"),
        createCompilerError = _require.createCompilerError;

      var ID = "id";
      /**
       * @public
       *
       * Determine if an AST node contains a fragment/operation definition.
       */

      function isExecutableDefinitionAST(ast) {
        return (
          ast.kind === "FragmentDefinition" ||
          ast.kind === "OperationDefinition"
        );
      }
      /**
       * @public
       *
       * Determine if an AST node contains a schema definition.
       */

      function isSchemaDefinitionAST(ast) {
        return (
          ast.kind === "SchemaDefinition" ||
          ast.kind === "ScalarTypeDefinition" ||
          ast.kind === "ObjectTypeDefinition" ||
          ast.kind === "InterfaceTypeDefinition" ||
          ast.kind === "UnionTypeDefinition" ||
          ast.kind === "EnumTypeDefinition" ||
          ast.kind === "InputObjectTypeDefinition" ||
          ast.kind === "DirectiveDefinition" ||
          ast.kind === "ScalarTypeExtension" ||
          ast.kind === "ObjectTypeExtension" ||
          ast.kind === "InterfaceTypeExtension" ||
          ast.kind === "UnionTypeExtension" ||
          ast.kind === "EnumTypeExtension" ||
          ast.kind === "InputObjectTypeExtension"
        );
      }
      /**
       * Generates an id field on the given type.
       */

      function generateIDField(schema, type) {
        var idField = schema.getFieldByName(type, "id");

        if (idField == null) {
          throw new createCompilerError(
            "Expected an 'id' field on type '".concat(
              schema.getTypeString(type),
              "'."
            )
          );
        }

        var idType = schema.assertScalarFieldType(schema.getFieldType(idField));
        return {
          kind: "ScalarField",
          alias: ID,
          args: [],
          directives: [],
          handles: null,
          loc: {
            kind: "Generated"
          },
          metadata: null,
          name: ID,
          type: idType
        };
      }

      function getNullableBooleanInput(schema) {
        return schema.assertInputType(schema.expectBooleanType());
      }

      function getNonNullBooleanInput(schema) {
        return schema.assertInputType(
          schema.getNonNullType(schema.expectBooleanType())
        );
      }

      function getNullableStringInput(schema) {
        return schema.assertInputType(schema.expectStringType());
      }

      function getNonNullStringInput(schema) {
        return schema.assertInputType(
          schema.getNonNullType(schema.expectStringType())
        );
      }

      function getNullableIdInput(schema) {
        return schema.assertInputType(schema.expectIdType());
      }

      function getNonNullIdInput(schema) {
        return schema.assertInputType(
          schema.getNonNullType(schema.expectIdType())
        );
      }

      module.exports = {
        generateIDField: generateIDField,
        isExecutableDefinitionAST: isExecutableDefinitionAST,
        isSchemaDefinitionAST: isSchemaDefinitionAST,
        getNullableBooleanInput: getNullableBooleanInput,
        getNonNullBooleanInput: getNonNullBooleanInput,
        getNullableStringInput: getNullableStringInput,
        getNonNullStringInput: getNonNullStringInput,
        getNullableIdInput: getNullableIdInput,
        getNonNullIdInput: getNonNullIdInput
      };

      /***/
    },

    /***/ FiDd: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var has = __webpack_require__("oNNP");

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var Type = __webpack_require__("zOLO");
      var ToBoolean = __webpack_require__("8cd+");
      var IsCallable = __webpack_require__("K4mF");

      // https://262.ecma-international.org/5.1/#sec-8.10.5

      module.exports = function ToPropertyDescriptor(Obj) {
        if (Type(Obj) !== "Object") {
          throw new $TypeError("ToPropertyDescriptor requires an object");
        }

        var desc = {};
        if (has(Obj, "enumerable")) {
          desc["[[Enumerable]]"] = ToBoolean(Obj.enumerable);
        }
        if (has(Obj, "configurable")) {
          desc["[[Configurable]]"] = ToBoolean(Obj.configurable);
        }
        if (has(Obj, "value")) {
          desc["[[Value]]"] = Obj.value;
        }
        if (has(Obj, "writable")) {
          desc["[[Writable]]"] = ToBoolean(Obj.writable);
        }
        if (has(Obj, "get")) {
          var getter = Obj.get;
          if (typeof getter !== "undefined" && !IsCallable(getter)) {
            throw new $TypeError("getter must be a function");
          }
          desc["[[Get]]"] = getter;
        }
        if (has(Obj, "set")) {
          var setter = Obj.set;
          if (typeof setter !== "undefined" && !IsCallable(setter)) {
            throw new $TypeError("setter must be a function");
          }
          desc["[[Set]]"] = setter;
        }

        if (
          (has(desc, "[[Get]]") || has(desc, "[[Set]]")) &&
          (has(desc, "[[Value]]") || has(desc, "[[Writable]]"))
        ) {
          throw new $TypeError(
            "Invalid property descriptor. Cannot both specify accessors and a value or writable attribute"
          );
        }
        return desc;
      };

      /***/
    },

    /***/ Fo5y: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var abs = __webpack_require__("D4qp");
      var floor = __webpack_require__("OM4Y");

      var $isNaN = __webpack_require__("7qPd");
      var $isFinite = __webpack_require__("QO3R");

      // https://ecma-international.org/ecma-262/6.0/#sec-isinteger

      module.exports = function IsInteger(argument) {
        if (
          typeof argument !== "number" ||
          $isNaN(argument) ||
          !$isFinite(argument)
        ) {
          return false;
        }
        var absValue = abs(argument);
        return floor(absValue) === absValue;
      };

      /***/
    },

    /***/ FpZJ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      /* eslint complexity: [2, 18], max-statements: [2, 33] */
      module.exports = function hasSymbols() {
        if (
          typeof Symbol !== "function" ||
          typeof Object.getOwnPropertySymbols !== "function"
        ) {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }

        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }

        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }

        // temp disabled per https://github.com/ljharb/object.assign/issues/17
        // if (sym instanceof Symbol) { return false; }
        // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
        // if (!(symObj instanceof Symbol)) { return false; }

        // if (typeof Symbol.prototype.toString !== 'function') { return false; }
        // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        } // eslint-disable-line no-restricted-syntax
        if (
          typeof Object.keys === "function" &&
          Object.keys(obj).length !== 0
        ) {
          return false;
        }

        if (
          typeof Object.getOwnPropertyNames === "function" &&
          Object.getOwnPropertyNames(obj).length !== 0
        ) {
          return false;
        }

        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }

        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }

        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }

        return true;
      };

      /***/
    },

    /***/ GcDG: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      var _typeComparators = __webpack_require__("aulS");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Variables passed to field arguments conform to type
       */
      function VariablesInAllowedPositionRule(context) {
        var varDefMap = Object.create(null);
        return {
          OperationDefinition: {
            enter: function enter() {
              varDefMap = Object.create(null);
            },
            leave: function leave(operation) {
              var usages = context.getRecursiveVariableUsages(operation);

              for (var _i2 = 0; _i2 < usages.length; _i2++) {
                var _ref2 = usages[_i2];
                var node = _ref2.node;
                var type = _ref2.type;
                var defaultValue = _ref2.defaultValue;
                var varName = node.name.value;
                var varDef = varDefMap[varName];

                if (varDef && type) {
                  // A var type is allowed if it is the same or more strict (e.g. is
                  // a subtype of) than the expected type. It can be more strict if
                  // the variable type is non-null when the expected type is nullable.
                  // If both are list types, the variable item type can be more strict
                  // than the expected item type (contravariant).
                  var schema = context.getSchema();
                  var varType = (0, _typeFromAST.typeFromAST)(
                    schema,
                    varDef.type
                  );

                  if (
                    varType &&
                    !allowedVariableUsage(
                      schema,
                      varType,
                      varDef.defaultValue,
                      type,
                      defaultValue
                    )
                  ) {
                    var varTypeStr = (0, _inspect.default)(varType);
                    var typeStr = (0, _inspect.default)(type);
                    context.reportError(
                      new _GraphQLError.GraphQLError(
                        'Variable "$'
                          .concat(varName, '" of type "')
                          .concat(
                            varTypeStr,
                            '" used in position expecting type "'
                          )
                          .concat(typeStr, '".'),
                        [varDef, node]
                      )
                    );
                  }
                }
              }
            }
          },
          VariableDefinition: function VariableDefinition(node) {
            varDefMap[node.variable.name.value] = node;
          }
        };
      }
      /**
       * Returns true if the variable is allowed in the location it was found,
       * which includes considering if default values exist for either the variable
       * or the location at which it is located.
       */

      function allowedVariableUsage(
        schema,
        varType,
        varDefaultValue,
        locationType,
        locationDefaultValue
      ) {
        if (
          (0, _definition.isNonNullType)(locationType) &&
          !(0, _definition.isNonNullType)(varType)
        ) {
          var hasNonNullVariableDefaultValue =
            varDefaultValue != null &&
            varDefaultValue.kind !== _kinds.Kind.NULL;
          var hasLocationDefaultValue = locationDefaultValue !== undefined;

          if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
            return false;
          }

          var nullableLocationType = locationType.ofType;
          return (0, _typeComparators.isTypeSubTypeOf)(
            schema,
            varType,
            nullableLocationType
          );
        }

        return (0, _typeComparators.isTypeSubTypeOf)(
          schema,
          varType,
          locationType
        );
      }

      /***/
    },

    /***/ Ggmd: /***/ function(
      module,
      __webpack_exports__,
      __webpack_require__
    ) {
      "use strict";
      // ESM COMPAT FLAG
      __webpack_require__.r(__webpack_exports__);

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/core/index.cjs.js
      var index_cjs = __webpack_require__("wbUw");

      // EXTERNAL MODULE: ./node_modules/graphql/index.js
      var graphql = __webpack_require__("uKhV");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript/index.cjs.js
      var typescript_index_cjs = __webpack_require__("fRMO");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-operations/index.cjs.js
      var typescript_operations_index_cjs = __webpack_require__("ES7E");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/flow/index.cjs.js
      var flow_index_cjs = __webpack_require__("CPS/");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/flow-operations/index.cjs.js
      var flow_operations_index_cjs = __webpack_require__("45CS");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/introspection/index.cjs.js
      var introspection_index_cjs = __webpack_require__("WHKI");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/fragment-matcher/index.cjs.js
      var fragment_matcher_index_cjs = __webpack_require__("fAto");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/schema-ast/index.cjs.js
      var schema_ast_index_cjs = __webpack_require__("Sghh");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/java/index.cjs.js
      var java_index_cjs = __webpack_require__("avzg");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-apollo-angular/index.cjs.js
      var typescript_apollo_angular_index_cjs = __webpack_require__("ZrYX");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-react-apollo/index.cjs.js
      var typescript_react_apollo_index_cjs = __webpack_require__("+cEM");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-stencil-apollo/index.cjs.js
      var typescript_stencil_apollo_index_cjs = __webpack_require__("qZCK");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-resolvers/index.cjs.js
      var typescript_resolvers_index_cjs = __webpack_require__("Ui9M");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/flow-resolvers/index.cjs.js
      var flow_resolvers_index_cjs = __webpack_require__("KEI4");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/java-resolvers/index.cjs.js
      var java_resolvers_index_cjs = __webpack_require__("A3X2");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-mongodb/index.cjs.js
      var typescript_mongodb_index_cjs = __webpack_require__("aE2W");

      // EXTERNAL MODULE: ./node_modules/@graphql-codegen/typescript-urql/index.cjs.js
      var typescript_urql_index_cjs = __webpack_require__("o++3");

      // CONCATENATED MODULE: ./constants/graphqlTransforms.ts
      let GraphqlTransforms;

      (function(GraphqlTransforms) {
        GraphqlTransforms[(GraphqlTransforms["TO_TYPESCRIPT"] = 1)] =
          "TO_TYPESCRIPT";
        GraphqlTransforms[(GraphqlTransforms["TO_FLOW"] = 2)] = "TO_FLOW";
        GraphqlTransforms[(GraphqlTransforms["TO_INTROSPECTION_JSON"] = 3)] =
          "TO_INTROSPECTION_JSON";
        GraphqlTransforms[(GraphqlTransforms["TO_FRAGMENT_MATCHER"] = 4)] =
          "TO_FRAGMENT_MATCHER";
        GraphqlTransforms[(GraphqlTransforms["TO_SCHEMA_AST"] = 5)] =
          "TO_SCHEMA_AST";
        GraphqlTransforms[(GraphqlTransforms["TO_JAVA"] = 6)] = "TO_JAVA";
        GraphqlTransforms[(GraphqlTransforms["TO_REACT_APOLLO"] = 7)] =
          "TO_REACT_APOLLO";
        GraphqlTransforms[(GraphqlTransforms["TO_APOLLO_ANGULAR"] = 8)] =
          "TO_APOLLO_ANGULAR";
        GraphqlTransforms[(GraphqlTransforms["TO_STENCIL_APOLLO"] = 9)] =
          "TO_STENCIL_APOLLO";
        GraphqlTransforms[
          (GraphqlTransforms["TO_JAVA_RESOLVERS_SIGNATURE"] = 10)
        ] = "TO_JAVA_RESOLVERS_SIGNATURE";
        GraphqlTransforms[
          (GraphqlTransforms["TO_TYPESCRIPT_RESOLVERS_SIGNATURE"] = 11)
        ] = "TO_TYPESCRIPT_RESOLVERS_SIGNATURE";
        GraphqlTransforms[
          (GraphqlTransforms["TO_FLOW_RESOLVERS_SIGNATURE"] = 12)
        ] = "TO_FLOW_RESOLVERS_SIGNATURE";
        GraphqlTransforms[(GraphqlTransforms["TO_URQL"] = 13)] = "TO_URQL";
        GraphqlTransforms[(GraphqlTransforms["TO_TYPESCRIPT_MONGODB"] = 14)] =
          "TO_TYPESCRIPT_MONGODB";
      })(GraphqlTransforms || (GraphqlTransforms = {}));
      // CONCATENATED MODULE: ./node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--5!./workers/graphql.worker.ts

      const _self = self;

      function getPlugins(type) {
        switch (type) {
          case GraphqlTransforms.TO_TYPESCRIPT:
            return [typescript_index_cjs, typescript_operations_index_cjs];

          case GraphqlTransforms.TO_FLOW:
            return [flow_index_cjs, flow_operations_index_cjs];

          case GraphqlTransforms.TO_INTROSPECTION_JSON:
            return [introspection_index_cjs];

          case GraphqlTransforms.TO_FRAGMENT_MATCHER:
            return [fragment_matcher_index_cjs];

          case GraphqlTransforms.TO_SCHEMA_AST:
            return [schema_ast_index_cjs];

          case GraphqlTransforms.TO_JAVA:
            return [java_index_cjs];

          case GraphqlTransforms.TO_REACT_APOLLO:
            return [
              typescript_index_cjs,
              typescript_operations_index_cjs,
              typescript_react_apollo_index_cjs
            ];

          case GraphqlTransforms.TO_APOLLO_ANGULAR:
            return [
              typescript_index_cjs,
              typescript_operations_index_cjs,
              typescript_apollo_angular_index_cjs
            ];

          case GraphqlTransforms.TO_STENCIL_APOLLO:
            return [
              typescript_index_cjs,
              typescript_operations_index_cjs,
              typescript_stencil_apollo_index_cjs
            ];

          case GraphqlTransforms.TO_TYPESCRIPT_RESOLVERS_SIGNATURE:
            return [typescript_index_cjs, typescript_resolvers_index_cjs];

          case GraphqlTransforms.TO_JAVA_RESOLVERS_SIGNATURE:
            return [java_resolvers_index_cjs];

          case GraphqlTransforms.TO_FLOW_RESOLVERS_SIGNATURE:
            return [flow_index_cjs, flow_resolvers_index_cjs];

          case GraphqlTransforms.TO_URQL:
            return [
              typescript_index_cjs,
              typescript_operations_index_cjs,
              typescript_urql_index_cjs
            ];

          case GraphqlTransforms.TO_TYPESCRIPT_MONGODB:
            return [typescript_index_cjs, typescript_mongodb_index_cjs];
        }
      }

      _self.onmessage = async ({ data: { id, payload } }) => {
        const { value, document = "", type, extension = "tsx" } = payload;

        try {
          const plugins = getPlugins(type);
          const pluginMap = {};
          plugins.forEach((plugin, i) => {
            pluginMap[i + 1] = plugin;
          });
          const result = await Object(index_cjs["codegen"])({
            filename: `a.${extension}`,
            schema: Object(graphql["parse"])(value),
            // @ts-ignore
            plugins: plugins.map((_plugin, i) => ({
              [i + 1]: {}
            })),
            documents: document.trim()
              ? [
                  {
                    location: "",
                    document: Object(graphql["parse"])(document)
                  }
                ]
              : [],
            config: {},
            pluginMap
          });

          _self.postMessage({
            id,
            payload: result
          });
        } catch (e) {
          _self.postMessage({
            id,
            err: e.message
          });
        }
      };

      /***/
    },

    /***/ Gpy1: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pathCase = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var dot_case_1 = __webpack_require__("sgrp");
      function pathCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return dot_case_1.dotCase(
          input,
          tslib_1.__assign({ delimiter: "/" }, options)
        );
      }
      exports.pathCase = pathCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ HCwE: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var IRTransformer = __webpack_require__("OHCT");

      var invariant = __webpack_require__("OUqe");

      /**
       * A transform that inlines all fragments and removes them.
       */
      function inlineFragmentsTransform(context) {
        var visitFragmentSpread = fragmentSpreadVisitor(new Map());
        return IRTransformer.transform(context, {
          Fragment: visitFragment,
          FragmentSpread: visitFragmentSpread
        });
      }

      function visitFragment(fragment) {
        return null;
      }

      function fragmentSpreadVisitor(cache) {
        return function visitFragmentSpread(fragmentSpread) {
          var traverseResult = cache.get(fragmentSpread);

          if (traverseResult != null) {
            return traverseResult;
          }

          !(fragmentSpread.args.length === 0)
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          var fragment = this.getContext().getFragment(
            fragmentSpread.name,
            fragmentSpread.loc
          );
          var result = {
            kind: "InlineFragment",
            directives: fragmentSpread.directives,
            loc: {
              kind: "Derived",
              source: fragmentSpread.loc
            },
            metadata: fragmentSpread.metadata,
            selections: fragment.selections,
            typeCondition: fragment.type
          };
          traverseResult = this.traverse(result);
          cache.set(fragmentSpread, traverseResult);
          return traverseResult;
        };
      }

      module.exports = {
        transform: inlineFragmentsTransform
      };

      /***/
    },

    /***/ HY1T: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
      exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _printer = __webpack_require__("gCJq");

      var _directives = __webpack_require__("L9+1");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Provided required arguments
       *
       * A field or directive is only valid if all required (non-null without a
       * default value) field arguments have been provided.
       */
      function ProvidedRequiredArgumentsRule(context) {
        return _objectSpread(
          _objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)),
          {},
          {
            Field: {
              // Validate on leave to allow for deeper errors to appear first.
              leave: function leave(fieldNode) {
                var _fieldNode$arguments;

                var fieldDef = context.getFieldDef();

                if (!fieldDef) {
                  return false;
                } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

                var argNodes =
                  (_fieldNode$arguments = fieldNode.arguments) !== null &&
                  _fieldNode$arguments !== void 0
                    ? _fieldNode$arguments
                    : [];
                var argNodeMap = (0, _keyMap.default)(argNodes, function(arg) {
                  return arg.name.value;
                });

                for (
                  var _i2 = 0, _fieldDef$args2 = fieldDef.args;
                  _i2 < _fieldDef$args2.length;
                  _i2++
                ) {
                  var argDef = _fieldDef$args2[_i2];
                  var argNode = argNodeMap[argDef.name];

                  if (!argNode && (0, _definition.isRequiredArgument)(argDef)) {
                    var argTypeStr = (0, _inspect.default)(argDef.type);
                    context.reportError(
                      new _GraphQLError.GraphQLError(
                        'Field "'
                          .concat(fieldDef.name, '" argument "')
                          .concat(argDef.name, '" of type "')
                          .concat(
                            argTypeStr,
                            '" is required, but it was not provided.'
                          ),
                        fieldNode
                      )
                    );
                  }
                }
              }
            }
          }
        );
      }
      /**
       * @internal
       */

      function ProvidedRequiredArgumentsOnDirectivesRule(context) {
        var requiredArgsMap = Object.create(null);
        var schema = context.getSchema();
        var definedDirectives = schema
          ? schema.getDirectives()
          : _directives.specifiedDirectives;

        for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {
          var directive = definedDirectives[_i4];
          requiredArgsMap[directive.name] = (0, _keyMap.default)(
            directive.args.filter(_definition.isRequiredArgument),
            function(arg) {
              return arg.name;
            }
          );
        }

        var astDefinitions = context.getDocument().definitions;

        for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {
          var def = astDefinitions[_i6];

          if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
            var _def$arguments;

            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var argNodes =
              (_def$arguments = def.arguments) !== null &&
              _def$arguments !== void 0
                ? _def$arguments
                : [];
            requiredArgsMap[def.name.value] = (0, _keyMap.default)(
              argNodes.filter(isRequiredArgumentNode),
              function(arg) {
                return arg.name.value;
              }
            );
          }
        }

        return {
          Directive: {
            // Validate on leave to allow for deeper errors to appear first.
            leave: function leave(directiveNode) {
              var directiveName = directiveNode.name.value;
              var requiredArgs = requiredArgsMap[directiveName];

              if (requiredArgs) {
                var _directiveNode$argume;

                // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
                var _argNodes =
                  (_directiveNode$argume = directiveNode.arguments) !== null &&
                  _directiveNode$argume !== void 0
                    ? _directiveNode$argume
                    : [];

                var argNodeMap = (0, _keyMap.default)(_argNodes, function(arg) {
                  return arg.name.value;
                });

                for (
                  var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs);
                  _i8 < _Object$keys2.length;
                  _i8++
                ) {
                  var argName = _Object$keys2[_i8];

                  if (!argNodeMap[argName]) {
                    var argType = requiredArgs[argName].type;
                    var argTypeStr = (0, _definition.isType)(argType)
                      ? (0, _inspect.default)(argType)
                      : (0, _printer.print)(argType);
                    context.reportError(
                      new _GraphQLError.GraphQLError(
                        'Directive "@'
                          .concat(directiveName, '" argument "')
                          .concat(argName, '" of type "')
                          .concat(
                            argTypeStr,
                            '" is required, but it was not provided.'
                          ),
                        directiveNode
                      )
                    );
                  }
                }
              }
            }
          }
        };
      }

      function isRequiredArgumentNode(arg) {
        return (
          arg.type.kind === _kinds.Kind.NON_NULL_TYPE &&
          arg.defaultValue == null
        );
      }

      /***/
    },

    /***/ HYxC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var ArraySpeciesCreate = __webpack_require__("PDty");
      var FlattenIntoArray = __webpack_require__("gi2y");
      var Get = __webpack_require__("V/hC");
      var IsCallable = __webpack_require__("K4mF");
      var ToLength = __webpack_require__("JyDY");
      var ToObject = __webpack_require__("6gHg");

      module.exports = function flatMap(mapperFunction) {
        var O = ToObject(this);
        var sourceLen = ToLength(Get(O, "length"));

        if (!IsCallable(mapperFunction)) {
          throw new TypeError("mapperFunction must be a function");
        }

        var T;
        if (arguments.length > 1) {
          T = arguments[1];
        }

        var A = ArraySpeciesCreate(O, 0);
        FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T);
        return A;
      };

      /***/
    },

    /***/ HZad: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var toPrimitive = __webpack_require__("WZeS");

      // https://ecma-international.org/ecma-262/6.0/#sec-toprimitive

      module.exports = function ToPrimitive(input) {
        if (arguments.length > 1) {
          return toPrimitive(input, arguments[1]);
        }
        return toPrimitive(input);
      };

      /***/
    },

    /***/ HcOx: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.lowerCase = exports.localeLowerCase = void 0;
      /**
       * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
       */
      var SUPPORTED_LOCALE = {
        tr: {
          regexp: /\u0130|\u0049|\u0049\u0307/g,
          map: {
            İ: "\u0069",
            I: "\u0131",
            İ: "\u0069"
          }
        },
        az: {
          regexp: /\u0130/g,
          map: {
            İ: "\u0069",
            I: "\u0131",
            İ: "\u0069"
          }
        },
        lt: {
          regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
          map: {
            I: "\u0069\u0307",
            J: "\u006A\u0307",
            Į: "\u012F\u0307",
            Ì: "\u0069\u0307\u0300",
            Í: "\u0069\u0307\u0301",
            Ĩ: "\u0069\u0307\u0303"
          }
        }
      };
      /**
       * Localized lower case.
       */
      function localeLowerCase(str, locale) {
        var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
        if (lang)
          return lowerCase(
            str.replace(lang.regexp, function(m) {
              return lang.map[m];
            })
          );
        return lowerCase(str);
      }
      exports.localeLowerCase = localeLowerCase;
      /**
       * Lower case as a function.
       */
      function lowerCase(str) {
        return str.toLowerCase();
      }
      exports.lowerCase = lowerCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ HnjU: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");
      const valueOrPromise = __webpack_require__("qDO/");
      const utils = __webpack_require__("kOHh");

      // wraps all resolvers of query, mutation or subscription fields
      // with the provided function to simulate a root schema level resolver
      function addSchemaLevelResolver(schema, fn) {
        // TODO test that schema is a schema, fn is a function
        const fnToRunOnlyOnce = runAtMostOncePerRequest(fn);
        return utils.mapSchema(schema, {
          [utils.MapperKind.ROOT_FIELD]: (
            fieldConfig,
            _fieldName,
            typeName,
            schema
          ) => {
            // XXX this should run at most once per request to simulate a true root resolver
            // for graphql-js this is an approximation that works with queries but not mutations
            // XXX if the type is a subscription, a same query AST will be ran multiple times so we
            // deactivate here the runOnce if it's a subscription. This may not be optimal though...
            const subscription = schema.getSubscriptionType();
            if (subscription != null && subscription.name === typeName) {
              return {
                ...fieldConfig,
                resolve: wrapResolver(fieldConfig.resolve, fn)
              };
            }
            return {
              ...fieldConfig,
              resolve: wrapResolver(fieldConfig.resolve, fnToRunOnlyOnce)
            };
          }
        });
      }
      // XXX badly named function. this doesn't really wrap, it just chains resolvers...
      function wrapResolver(innerResolver, outerResolver) {
        return (obj, args, ctx, info) => {
          return new valueOrPromise.ValueOrPromise(() =>
            outerResolver(obj, args, ctx, info)
          )
            .then(root => {
              if (innerResolver != null) {
                return innerResolver(root, args, ctx, info);
              }
              return graphql.defaultFieldResolver(root, args, ctx, info);
            })
            .resolve();
        };
      }
      // XXX this function only works for resolvers
      // XXX very hacky way to remember if the function
      // already ran for this request. This will only work
      // if people don't actually cache the operation.
      // if they do cache the operation, they will have to
      // manually remove the __runAtMostOnce before every request.
      function runAtMostOncePerRequest(fn) {
        let value;
        const randomNumber = Math.random();
        return (root, args, ctx, info) => {
          if (!info.operation["__runAtMostOnce"]) {
            info.operation["__runAtMostOnce"] = {};
          }
          if (!info.operation["__runAtMostOnce"][randomNumber]) {
            info.operation["__runAtMostOnce"][randomNumber] = true;
            value = fn(root, args, ctx, info);
          }
          return value;
        };
      }

      function assertResolversPresent(schema, resolverValidationOptions = {}) {
        const {
          requireResolversForArgs,
          requireResolversForNonScalar,
          requireResolversForAllFields
        } = resolverValidationOptions;
        if (
          requireResolversForAllFields &&
          (requireResolversForArgs || requireResolversForNonScalar)
        ) {
          throw new TypeError(
            "requireResolversForAllFields takes precedence over the more specific assertions. " +
              "Please configure either requireResolversForAllFields or requireResolversForArgs / " +
              "requireResolversForNonScalar, but not a combination of them."
          );
        }
        utils.forEachField(schema, (field, typeName, fieldName) => {
          // requires a resolver for *every* field.
          if (requireResolversForAllFields) {
            expectResolver(
              "requireResolversForAllFields",
              requireResolversForAllFields,
              field,
              typeName,
              fieldName
            );
          }
          // requires a resolver on every field that has arguments
          if (requireResolversForArgs && field.args.length > 0) {
            expectResolver(
              "requireResolversForArgs",
              requireResolversForArgs,
              field,
              typeName,
              fieldName
            );
          }
          // requires a resolver on every field that returns a non-scalar type
          if (
            requireResolversForNonScalar !== "ignore" &&
            !graphql.isScalarType(graphql.getNamedType(field.type))
          ) {
            expectResolver(
              "requireResolversForNonScalar",
              requireResolversForNonScalar,
              field,
              typeName,
              fieldName
            );
          }
        });
      }
      function expectResolver(validator, behavior, field, typeName, fieldName) {
        if (!field.resolve) {
          const message = `Resolver missing for "${typeName}.${fieldName}".
To disable this validator, use:
  resolverValidationOptions: {
    ${validator}: 'ignore'
  }`;
          if (behavior === "error") {
            throw new Error(message);
          }
          if (behavior === "warn") {
            // eslint-disable-next-line no-console
            console.warn(message);
          }
          return;
        }
        if (typeof field.resolve !== "function") {
          throw new Error(
            `Resolver "${typeName}.${fieldName}" must be a function`
          );
        }
      }

      function attachDirectiveResolvers(schema, directiveResolvers) {
        if (typeof directiveResolvers !== "object") {
          throw new Error(
            `Expected directiveResolvers to be of type object, got ${typeof directiveResolvers}`
          );
        }
        if (Array.isArray(directiveResolvers)) {
          throw new Error(
            "Expected directiveResolvers to be of type object, got Array"
          );
        }
        return utils.mapSchema(schema, {
          [utils.MapperKind.OBJECT_FIELD]: fieldConfig => {
            const newFieldConfig = { ...fieldConfig };
            const directives = utils.getDirectives(schema, fieldConfig);
            Object.keys(directives).forEach(directiveName => {
              if (directiveResolvers[directiveName]) {
                const resolver = directiveResolvers[directiveName];
                const originalResolver =
                  newFieldConfig.resolve != null
                    ? newFieldConfig.resolve
                    : graphql.defaultFieldResolver;
                const directiveArgs = directives[directiveName];
                newFieldConfig.resolve = (
                  source,
                  originalArgs,
                  context,
                  info
                ) => {
                  return resolver(
                    () =>
                      new Promise((resolve, reject) => {
                        const result = originalResolver(
                          source,
                          originalArgs,
                          context,
                          info
                        );
                        if (result instanceof Error) {
                          reject(result);
                        }
                        resolve(result);
                      }),
                    source,
                    directiveArgs,
                    context,
                    info
                  );
                };
              }
            });
            return newFieldConfig;
          }
        });
      }

      const isExtensionNode = def =>
        def.kind === graphql.Kind.OBJECT_TYPE_EXTENSION ||
        def.kind === graphql.Kind.INTERFACE_TYPE_EXTENSION ||
        def.kind === graphql.Kind.INPUT_OBJECT_TYPE_EXTENSION ||
        def.kind === graphql.Kind.UNION_TYPE_EXTENSION ||
        def.kind === graphql.Kind.ENUM_TYPE_EXTENSION ||
        def.kind === graphql.Kind.SCALAR_TYPE_EXTENSION ||
        def.kind === graphql.Kind.SCHEMA_EXTENSION;
      function filterAndExtractExtensionDefinitions(ast) {
        const extensionDefs = [];
        const typesDefs = [];
        ast.definitions.forEach(def => {
          if (isExtensionNode(def)) {
            extensionDefs.push(def);
          } else {
            typesDefs.push(def);
          }
        });
        return {
          typesAst: {
            ...ast,
            definitions: typesDefs
          },
          extensionsAst: {
            ...ast,
            definitions: extensionDefs
          }
        };
      }
      function filterExtensionDefinitions(ast) {
        const { typesAst } = filterAndExtractExtensionDefinitions(ast);
        return typesAst;
      }
      function extractExtensionDefinitions(ast) {
        const { extensionsAst } = filterAndExtractExtensionDefinitions(ast);
        return extensionsAst;
      }

      function concatenateTypeDefs(
        typeDefinitionsAry,
        calledFunctionRefs = new Set()
      ) {
        const resolvedTypeDefinitions = new Set();
        typeDefinitionsAry.forEach(typeDef => {
          if (typeof typeDef === "function") {
            if (!calledFunctionRefs.has(typeDef)) {
              calledFunctionRefs.add(typeDef);
              resolvedTypeDefinitions.add(
                concatenateTypeDefs(typeDef(), calledFunctionRefs)
              );
            }
          } else if (typeof typeDef === "string") {
            resolvedTypeDefinitions.add(typeDef.trim());
          } else if (typeDef.kind !== undefined) {
            resolvedTypeDefinitions.add(graphql.print(typeDef).trim());
          } else {
            const type = typeof typeDef;
            throw new Error(
              `typeDef array must contain only strings, documents, or functions, got ${type}`
            );
          }
        });
        return [...resolvedTypeDefinitions].join("\n");
      }

      function buildSchemaFromTypeDefinitions(
        typeDefinitions,
        parseOptions,
        noExtensionExtraction
      ) {
        const document = buildDocumentFromTypeDefinitions(
          typeDefinitions,
          parseOptions
        );
        if (noExtensionExtraction) {
          return graphql.buildASTSchema(document);
        }
        const {
          typesAst,
          extensionsAst
        } = filterAndExtractExtensionDefinitions(document);
        const backcompatOptions = { commentDescriptions: true };
        let schema = graphql.buildASTSchema(typesAst, backcompatOptions);
        if (extensionsAst.definitions.length > 0) {
          schema = graphql.extendSchema(
            schema,
            extensionsAst,
            backcompatOptions
          );
        }
        return schema;
      }
      function buildDocumentFromTypeDefinitions(typeDefinitions, parseOptions) {
        let document;
        if (typeof typeDefinitions === "string") {
          document = utils.parseGraphQLSDL("", typeDefinitions, parseOptions)
            .document;
        } else if (Array.isArray(typeDefinitions)) {
          document = utils.parseGraphQLSDL(
            "",
            concatenateTypeDefs(typeDefinitions),
            parseOptions
          ).document;
        } else if (utils.isDocumentNode(typeDefinitions)) {
          document = typeDefinitions;
        } else {
          const type = typeof typeDefinitions;
          throw new Error(
            `typeDefs must be a string, array or schema AST, got ${type}`
          );
        }
        return document;
      }

      function chainResolvers(resolvers) {
        return (root, args, ctx, info) =>
          resolvers.reduce((prev, curResolver) => {
            if (curResolver != null) {
              return curResolver(prev, args, ctx, info);
            }
            return graphql.defaultFieldResolver(prev, args, ctx, info);
          }, root);
      }

      /*
       * fn: The function to decorate with the logger
       * logger: an object instance of type Logger
       * hint: an optional hint to add to the error's message
       */
      function decorateWithLogger(fn, logger, hint) {
        const resolver = fn != null ? fn : graphql.defaultFieldResolver;
        const logError = e => {
          // TODO: clone the error properly
          const newE = new Error();
          newE.stack = e.stack;
          /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */
          if (hint) {
            newE["originalMessage"] = e.message;
            newE.message = `Error in resolver ${hint}\n${e.message}`;
          }
          logger.log(newE);
        };
        return (root, args, ctx, info) => {
          try {
            const result = resolver(root, args, ctx, info);
            // If the resolver returns a Promise log any Promise rejects.
            if (
              result &&
              typeof result.then === "function" &&
              typeof result.catch === "function"
            ) {
              result.catch(reason => {
                // make sure that it's an error we're logging.
                const error =
                  reason instanceof Error ? reason : new Error(reason);
                logError(error);
                // We don't want to leave an unhandled exception so pass on error.
                return reason;
              });
            }
            return result;
          } catch (e) {
            logError(e);
            // we want to pass on the error, just in case.
            throw e;
          }
        };
      }

      // If we have any union or interface types throw if no there is no resolveType resolver
      function checkForResolveTypeResolver(
        schema,
        requireResolversForResolveType
      ) {
        utils.mapSchema(schema, {
          [utils.MapperKind.ABSTRACT_TYPE]: type => {
            if (!type.resolveType) {
              const message =
                `Type "${type.name}" is missing a "__resolveType" resolver. Pass 'ignore' into ` +
                '"resolverValidationOptions.requireResolversForResolveType" to disable this error.';
              if (requireResolversForResolveType === "error") {
                throw new Error(message);
              }
              if (requireResolversForResolveType === "warn") {
                // eslint-disable-next-line no-console
                console.warn(message);
              }
            }
            return undefined;
          }
        });
      }

      function extendResolversFromInterfaces(schema, resolvers) {
        const typeNames = Object.keys({
          ...schema.getTypeMap(),
          ...resolvers
        });
        const extendedResolvers = {};
        typeNames.forEach(typeName => {
          const type = schema.getType(typeName);
          if (type && "getInterfaces" in type) {
            const allInterfaceResolvers = type
              .getInterfaces()
              .map(iFace => resolvers[iFace.name])
              .filter(interfaceResolvers => interfaceResolvers != null);
            extendedResolvers[typeName] = {};
            allInterfaceResolvers.forEach(interfaceResolvers => {
              Object.keys(interfaceResolvers).forEach(fieldName => {
                if (fieldName === "__isTypeOf" || !fieldName.startsWith("__")) {
                  extendedResolvers[typeName][fieldName] =
                    interfaceResolvers[fieldName];
                }
              });
            });
            const typeResolvers = resolvers[typeName];
            extendedResolvers[typeName] = {
              ...extendedResolvers[typeName],
              ...typeResolvers
            };
          } else {
            const typeResolvers = resolvers[typeName];
            if (typeResolvers != null) {
              extendedResolvers[typeName] = typeResolvers;
            }
          }
        });
        return extendedResolvers;
      }

      function addResolversToSchema(
        schemaOrOptions,
        legacyInputResolvers,
        legacyInputValidationOptions
      ) {
        const options = graphql.isSchema(schemaOrOptions)
          ? {
              schema: schemaOrOptions,
              resolvers: legacyInputResolvers,
              resolverValidationOptions: legacyInputValidationOptions
            }
          : schemaOrOptions;
        let {
          schema,
          resolvers: inputResolvers,
          defaultFieldResolver,
          resolverValidationOptions = {},
          inheritResolversFromInterfaces = false,
          updateResolversInPlace = false
        } = options;
        const {
          requireResolversToMatchSchema = "error",
          requireResolversForResolveType
        } = resolverValidationOptions;
        const resolvers = inheritResolversFromInterfaces
          ? extendResolversFromInterfaces(schema, inputResolvers)
          : inputResolvers;
        Object.keys(resolvers).forEach(typeName => {
          const resolverValue = resolvers[typeName];
          const resolverType = typeof resolverValue;
          if (typeName === "__schema") {
            if (resolverType !== "function") {
              throw new Error(
                `"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". A schema resolver's value must be of type object or function.`
              );
            }
          } else {
            if (resolverType !== "object") {
              throw new Error(
                `"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". The resolver's value must be of type object.`
              );
            }
            const type = schema.getType(typeName);
            if (type == null) {
              if (requireResolversToMatchSchema === "ignore") {
                return;
              }
              throw new Error(
                `"${typeName}" defined in resolvers, but not in schema`
              );
            } else if (graphql.isSpecifiedScalarType(type)) {
              // allow -- without recommending -- overriding of specified scalar types
              Object.keys(resolverValue).forEach(fieldName => {
                if (fieldName.startsWith("__")) {
                  type[fieldName.substring(2)] = resolverValue[fieldName];
                } else {
                  type[fieldName] = resolverValue[fieldName];
                }
              });
            } else if (graphql.isEnumType(type)) {
              const values = type.getValues();
              Object.keys(resolverValue).forEach(fieldName => {
                if (
                  !fieldName.startsWith("__") &&
                  !values.some(value => value.name === fieldName) &&
                  requireResolversToMatchSchema &&
                  requireResolversToMatchSchema !== "ignore"
                ) {
                  throw new Error(
                    `${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`
                  );
                }
              });
            } else if (graphql.isUnionType(type)) {
              Object.keys(resolverValue).forEach(fieldName => {
                if (
                  !fieldName.startsWith("__") &&
                  requireResolversToMatchSchema &&
                  requireResolversToMatchSchema !== "ignore"
                ) {
                  throw new Error(
                    `${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`
                  );
                }
              });
            } else if (
              graphql.isObjectType(type) ||
              graphql.isInterfaceType(type)
            ) {
              Object.keys(resolverValue).forEach(fieldName => {
                if (!fieldName.startsWith("__")) {
                  const fields = type.getFields();
                  const field = fields[fieldName];
                  if (
                    field == null &&
                    requireResolversToMatchSchema &&
                    requireResolversToMatchSchema !== "ignore"
                  ) {
                    throw new Error(
                      `${typeName}.${fieldName} defined in resolvers, but not in schema`
                    );
                  }
                  const fieldResolve = resolverValue[fieldName];
                  if (
                    typeof fieldResolve !== "function" &&
                    typeof fieldResolve !== "object"
                  ) {
                    throw new Error(
                      `Resolver ${typeName}.${fieldName} must be object or function`
                    );
                  }
                }
              });
            }
          }
        });
        schema = updateResolversInPlace
          ? addResolversToExistingSchema(
              schema,
              resolvers,
              defaultFieldResolver
            )
          : createNewSchemaWithResolvers(
              schema,
              resolvers,
              defaultFieldResolver
            );
        if (
          requireResolversForResolveType ||
          requireResolversForResolveType !== "ignore"
        ) {
          checkForResolveTypeResolver(schema, requireResolversForResolveType);
        }
        return schema;
      }
      function addResolversToExistingSchema(
        schema,
        resolvers,
        defaultFieldResolver
      ) {
        const typeMap = schema.getTypeMap();
        Object.keys(resolvers).forEach(typeName => {
          if (typeName !== "__schema") {
            const type = schema.getType(typeName);
            const resolverValue = resolvers[typeName];
            if (graphql.isScalarType(type)) {
              Object.keys(resolverValue).forEach(fieldName => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                if (fieldName.startsWith("__")) {
                  type[fieldName.substring(2)] = resolverValue[fieldName];
                } else if (fieldName === "astNode" && type.astNode != null) {
                  type.astNode = {
                    ...type.astNode,
                    description:
                      (_c =
                        (_b =
                          (_a = resolverValue) === null || _a === void 0
                            ? void 0
                            : _a.astNode) === null || _b === void 0
                          ? void 0
                          : _b.description) !== null && _c !== void 0
                        ? _c
                        : type.astNode.description,
                    directives: ((_d = type.astNode.directives) !== null &&
                    _d !== void 0
                      ? _d
                      : []
                    ).concat(
                      (_g =
                        (_f =
                          (_e = resolverValue) === null || _e === void 0
                            ? void 0
                            : _e.astNode) === null || _f === void 0
                          ? void 0
                          : _f.directives) !== null && _g !== void 0
                        ? _g
                        : []
                    )
                  };
                } else if (
                  fieldName === "extensionASTNodes" &&
                  type.extensionASTNodes != null
                ) {
                  type.extensionASTNodes = ((_h = []) !== null && _h !== void 0
                    ? _h
                    : type.extensionASTNodes
                  ).concat(
                    (_k =
                      (_j = resolverValue) === null || _j === void 0
                        ? void 0
                        : _j.extensionASTNodes) !== null && _k !== void 0
                      ? _k
                      : []
                  );
                } else if (
                  fieldName === "extensions" &&
                  type.extensions != null &&
                  resolverValue.extensions != null
                ) {
                  type.extensions = Object.assign(
                    {},
                    type.extensions,
                    resolverValue.extensions
                  );
                } else {
                  type[fieldName] = resolverValue[fieldName];
                }
              });
            } else if (graphql.isEnumType(type)) {
              const config = type.toConfig();
              const enumValueConfigMap = config.values;
              Object.keys(resolverValue).forEach(fieldName => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                if (fieldName.startsWith("__")) {
                  config[fieldName.substring(2)] = resolverValue[fieldName];
                } else if (fieldName === "astNode" && config.astNode != null) {
                  config.astNode = {
                    ...config.astNode,
                    description:
                      (_c =
                        (_b =
                          (_a = resolverValue) === null || _a === void 0
                            ? void 0
                            : _a.astNode) === null || _b === void 0
                          ? void 0
                          : _b.description) !== null && _c !== void 0
                        ? _c
                        : config.astNode.description,
                    directives: ((_d = config.astNode.directives) !== null &&
                    _d !== void 0
                      ? _d
                      : []
                    ).concat(
                      (_g =
                        (_f =
                          (_e = resolverValue) === null || _e === void 0
                            ? void 0
                            : _e.astNode) === null || _f === void 0
                          ? void 0
                          : _f.directives) !== null && _g !== void 0
                        ? _g
                        : []
                    )
                  };
                } else if (
                  fieldName === "extensionASTNodes" &&
                  config.extensionASTNodes != null
                ) {
                  config.extensionASTNodes = config.extensionASTNodes.concat(
                    (_j =
                      (_h = resolverValue) === null || _h === void 0
                        ? void 0
                        : _h.extensionASTNodes) !== null && _j !== void 0
                      ? _j
                      : []
                  );
                } else if (
                  fieldName === "extensions" &&
                  type.extensions != null &&
                  resolverValue.extensions != null
                ) {
                  type.extensions = Object.assign(
                    {},
                    type.extensions,
                    resolverValue.extensions
                  );
                } else if (enumValueConfigMap[fieldName]) {
                  enumValueConfigMap[fieldName].value =
                    resolverValue[fieldName];
                }
              });
              typeMap[typeName] = new graphql.GraphQLEnumType(config);
            } else if (graphql.isUnionType(type)) {
              Object.keys(resolverValue).forEach(fieldName => {
                if (fieldName.startsWith("__")) {
                  type[fieldName.substring(2)] = resolverValue[fieldName];
                }
              });
            } else if (
              graphql.isObjectType(type) ||
              graphql.isInterfaceType(type)
            ) {
              Object.keys(resolverValue).forEach(fieldName => {
                if (fieldName.startsWith("__")) {
                  // this is for isTypeOf and resolveType and all the other stuff.
                  type[fieldName.substring(2)] = resolverValue[fieldName];
                  return;
                }
                const fields = type.getFields();
                const field = fields[fieldName];
                if (field != null) {
                  const fieldResolve = resolverValue[fieldName];
                  if (typeof fieldResolve === "function") {
                    // for convenience. Allows shorter syntax in resolver definition file
                    field.resolve = fieldResolve;
                  } else {
                    setFieldProperties(field, fieldResolve);
                  }
                }
              });
            }
          }
        });
        // serialize all default values prior to healing fields with new scalar/enum types.
        utils.forEachDefaultValue(schema, utils.serializeInputValue);
        // schema may have new scalar/enum types that require healing
        utils.healSchema(schema);
        // reparse all default values with new parsing functions.
        utils.forEachDefaultValue(schema, utils.parseInputValue);
        if (defaultFieldResolver != null) {
          utils.forEachField(schema, field => {
            if (!field.resolve) {
              field.resolve = defaultFieldResolver;
            }
          });
        }
        return schema;
      }
      function createNewSchemaWithResolvers(
        schema,
        resolvers,
        defaultFieldResolver
      ) {
        schema = utils.mapSchema(schema, {
          [utils.MapperKind.SCALAR_TYPE]: type => {
            const config = type.toConfig();
            const resolverValue = resolvers[type.name];
            if (!graphql.isSpecifiedScalarType(type) && resolverValue != null) {
              Object.keys(resolverValue).forEach(fieldName => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                if (fieldName.startsWith("__")) {
                  config[fieldName.substring(2)] = resolverValue[fieldName];
                } else if (fieldName === "astNode" && config.astNode != null) {
                  config.astNode = {
                    ...config.astNode,
                    description:
                      (_c =
                        (_b =
                          (_a = resolverValue) === null || _a === void 0
                            ? void 0
                            : _a.astNode) === null || _b === void 0
                          ? void 0
                          : _b.description) !== null && _c !== void 0
                        ? _c
                        : config.astNode.description,
                    directives: ((_d = config.astNode.directives) !== null &&
                    _d !== void 0
                      ? _d
                      : []
                    ).concat(
                      (_g =
                        (_f =
                          (_e = resolverValue) === null || _e === void 0
                            ? void 0
                            : _e.astNode) === null || _f === void 0
                          ? void 0
                          : _f.directives) !== null && _g !== void 0
                        ? _g
                        : []
                    )
                  };
                } else if (
                  fieldName === "extensionASTNodes" &&
                  config.extensionASTNodes != null
                ) {
                  config.extensionASTNodes = config.extensionASTNodes.concat(
                    (_j =
                      (_h = resolverValue) === null || _h === void 0
                        ? void 0
                        : _h.extensionASTNodes) !== null && _j !== void 0
                      ? _j
                      : []
                  );
                } else if (
                  fieldName === "extensions" &&
                  config.extensions != null &&
                  resolverValue.extensions != null
                ) {
                  config.extensions = Object.assign(
                    {},
                    type.extensions,
                    resolverValue.extensions
                  );
                } else {
                  config[fieldName] = resolverValue[fieldName];
                }
              });
              return new graphql.GraphQLScalarType(config);
            }
          },
          [utils.MapperKind.ENUM_TYPE]: type => {
            const resolverValue = resolvers[type.name];
            const config = type.toConfig();
            const enumValueConfigMap = config.values;
            if (resolverValue != null) {
              Object.keys(resolverValue).forEach(fieldName => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                if (fieldName.startsWith("__")) {
                  config[fieldName.substring(2)] = resolverValue[fieldName];
                } else if (fieldName === "astNode" && config.astNode != null) {
                  config.astNode = {
                    ...config.astNode,
                    description:
                      (_c =
                        (_b =
                          (_a = resolverValue) === null || _a === void 0
                            ? void 0
                            : _a.astNode) === null || _b === void 0
                          ? void 0
                          : _b.description) !== null && _c !== void 0
                        ? _c
                        : config.astNode.description,
                    directives: ((_d = config.astNode.directives) !== null &&
                    _d !== void 0
                      ? _d
                      : []
                    ).concat(
                      (_g =
                        (_f =
                          (_e = resolverValue) === null || _e === void 0
                            ? void 0
                            : _e.astNode) === null || _f === void 0
                          ? void 0
                          : _f.directives) !== null && _g !== void 0
                        ? _g
                        : []
                    )
                  };
                } else if (
                  fieldName === "extensionASTNodes" &&
                  config.extensionASTNodes != null
                ) {
                  config.extensionASTNodes = config.extensionASTNodes.concat(
                    (_j =
                      (_h = resolverValue) === null || _h === void 0
                        ? void 0
                        : _h.extensionASTNodes) !== null && _j !== void 0
                      ? _j
                      : []
                  );
                } else if (
                  fieldName === "extensions" &&
                  config.extensions != null &&
                  resolverValue.extensions != null
                ) {
                  config.extensions = Object.assign(
                    {},
                    type.extensions,
                    resolverValue.extensions
                  );
                } else if (enumValueConfigMap[fieldName]) {
                  enumValueConfigMap[fieldName].value =
                    resolverValue[fieldName];
                }
              });
              return new graphql.GraphQLEnumType(config);
            }
          },
          [utils.MapperKind.UNION_TYPE]: type => {
            const resolverValue = resolvers[type.name];
            if (resolverValue != null) {
              const config = type.toConfig();
              Object.keys(resolverValue).forEach(fieldName => {
                if (fieldName.startsWith("__")) {
                  config[fieldName.substring(2)] = resolverValue[fieldName];
                }
              });
              return new graphql.GraphQLUnionType(config);
            }
          },
          [utils.MapperKind.OBJECT_TYPE]: type => {
            const resolverValue = resolvers[type.name];
            if (resolverValue != null) {
              const config = type.toConfig();
              Object.keys(resolverValue).forEach(fieldName => {
                if (fieldName.startsWith("__")) {
                  config[fieldName.substring(2)] = resolverValue[fieldName];
                }
              });
              return new graphql.GraphQLObjectType(config);
            }
          },
          [utils.MapperKind.INTERFACE_TYPE]: type => {
            const resolverValue = resolvers[type.name];
            if (resolverValue != null) {
              const config = type.toConfig();
              Object.keys(resolverValue).forEach(fieldName => {
                if (fieldName.startsWith("__")) {
                  config[fieldName.substring(2)] = resolverValue[fieldName];
                }
              });
              return new graphql.GraphQLInterfaceType(config);
            }
          },
          [utils.MapperKind.COMPOSITE_FIELD]: (
            fieldConfig,
            fieldName,
            typeName
          ) => {
            const resolverValue = resolvers[typeName];
            if (resolverValue != null) {
              const fieldResolve = resolverValue[fieldName];
              if (fieldResolve != null) {
                const newFieldConfig = { ...fieldConfig };
                if (typeof fieldResolve === "function") {
                  // for convenience. Allows shorter syntax in resolver definition file
                  newFieldConfig.resolve = fieldResolve;
                } else {
                  setFieldProperties(newFieldConfig, fieldResolve);
                }
                return newFieldConfig;
              }
            }
          }
        });
        if (defaultFieldResolver != null) {
          schema = utils.mapSchema(schema, {
            [utils.MapperKind.OBJECT_FIELD]: fieldConfig => ({
              ...fieldConfig,
              resolve:
                fieldConfig.resolve != null
                  ? fieldConfig.resolve
                  : defaultFieldResolver
            })
          });
        }
        return schema;
      }
      function setFieldProperties(field, propertiesObj) {
        Object.keys(propertiesObj).forEach(propertyName => {
          field[propertyName] = propertiesObj[propertyName];
        });
      }

      function addErrorLoggingToSchema(schema, logger) {
        if (!logger) {
          throw new Error("Must provide a logger");
        }
        if (typeof logger.log !== "function") {
          throw new Error("Logger.log must be a function");
        }
        return utils.mapSchema(schema, {
          [utils.MapperKind.OBJECT_FIELD]: (
            fieldConfig,
            fieldName,
            typeName
          ) => ({
            ...fieldConfig,
            resolve: decorateWithLogger(
              fieldConfig.resolve,
              logger,
              `${typeName}.${fieldName}`
            )
          })
        });
      }

      function decorateToCatchUndefined(fn, hint) {
        const resolve = fn == null ? graphql.defaultFieldResolver : fn;
        return (root, args, ctx, info) => {
          const result = resolve(root, args, ctx, info);
          if (typeof result === "undefined") {
            throw new Error(`Resolver for "${hint}" returned undefined`);
          }
          return result;
        };
      }
      function addCatchUndefinedToSchema(schema) {
        return utils.mapSchema(schema, {
          [utils.MapperKind.OBJECT_FIELD]: (
            fieldConfig,
            fieldName,
            typeName
          ) => ({
            ...fieldConfig,
            resolve: decorateToCatchUndefined(
              fieldConfig.resolve,
              `${typeName}.${fieldName}`
            )
          })
        });
      }

      /**
       * Builds a schema from the provided type definitions and resolvers.
       *
       * The type definitions are written using Schema Definition Language (SDL). They
       * can be provided as a string, a `DocumentNode`, a function, or an array of any
       * of these. If a function is provided, it will be passed no arguments and
       * should return an array of strings or `DocumentNode`s.
       *
       * Note: You can use `graphql-tag` to not only parse a string into a
       * `DocumentNode` but also to provide additional syntax highlighting in your
       * editor (with the appropriate editor plugin).
       *
       * ```js
       * const typeDefs = gql`
       *   type Query {
       *     posts: [Post]
       *     author(id: Int!): Author
       *   }
       * `;
       * ```
       *
       * The `resolvers` object should be a map of type names to nested object, which
       * themselves map the type's fields to their appropriate resolvers.
       * See the [Resolvers](/docs/resolvers) section of the documentation for more details.
       *
       * ```js
       * const resolvers = {
       *   Query: {
       *     posts: (obj, args, ctx, info) => getAllPosts(),
       *     author: (obj, args, ctx, info) => getAuthorById(args.id)
       *   }
       * };
       * ```
       *
       * Once you've defined both the `typeDefs` and `resolvers`, you can create your
       * schema:
       *
       * ```js
       * const schema = makeExecutableSchema({
       *   typeDefs,
       *   resolvers,
       * })
       * ```
       */
      function makeExecutableSchema({
        typeDefs,
        resolvers = {},
        logger,
        allowUndefinedInResolve = true,
        resolverValidationOptions = {},
        directiveResolvers,
        schemaDirectives,
        schemaTransforms: userProvidedSchemaTransforms,
        parseOptions = {},
        inheritResolversFromInterfaces = false,
        pruningOptions,
        updateResolversInPlace = false,
        noExtensionExtraction = false
      }) {
        // Validate and clean up arguments
        if (typeof resolverValidationOptions !== "object") {
          throw new Error(
            "Expected `resolverValidationOptions` to be an object"
          );
        }
        if (!typeDefs) {
          throw new Error("Must provide typeDefs");
        }
        // Arguments are now validated and cleaned up
        const schemaTransforms = [
          schema => {
            // We allow passing in an array of resolver maps, in which case we merge them
            const resolverMap = Array.isArray(resolvers)
              ? resolvers.reduce(utils.mergeDeep, {})
              : resolvers;
            const schemaWithResolvers = addResolversToSchema({
              schema,
              resolvers: resolverMap,
              resolverValidationOptions,
              inheritResolversFromInterfaces,
              updateResolversInPlace
            });
            if (Object.keys(resolverValidationOptions).length > 0) {
              assertResolversPresent(
                schemaWithResolvers,
                resolverValidationOptions
              );
            }
            return schemaWithResolvers;
          }
        ];
        if (!allowUndefinedInResolve) {
          schemaTransforms.push(addCatchUndefinedToSchema);
        }
        if (logger != null) {
          schemaTransforms.push(schema =>
            addErrorLoggingToSchema(schema, logger)
          );
        }
        if (typeof resolvers["__schema"] === "function") {
          // TODO a bit of a hack now, better rewrite generateSchema to attach it there.
          // not doing that now, because I'd have to rewrite a lot of tests.
          schemaTransforms.push(schema =>
            addSchemaLevelResolver(schema, resolvers["__schema"])
          );
        }
        if (userProvidedSchemaTransforms) {
          schemaTransforms.push(schema =>
            userProvidedSchemaTransforms.reduce(
              (s, schemaTransform) => schemaTransform(s),
              schema
            )
          );
        }
        // directive resolvers are implemented using SchemaDirectiveVisitor.visitSchemaDirectives
        // schema visiting modifies the schema in place
        if (directiveResolvers != null) {
          schemaTransforms.push(schema =>
            attachDirectiveResolvers(schema, directiveResolvers)
          );
        }
        if (schemaDirectives != null) {
          schemaTransforms.push(schema => {
            utils.SchemaDirectiveVisitor.visitSchemaDirectives(
              schema,
              schemaDirectives
            );
            return schema;
          });
        }
        if (pruningOptions) {
          schemaTransforms.push(utils.pruneSchema);
        }
        const schemaFromTypeDefs = buildSchemaFromTypeDefinitions(
          typeDefs,
          parseOptions,
          noExtensionExtraction
        );
        return schemaTransforms.reduce(
          (schema, schemaTransform) => schemaTransform(schema),
          schemaFromTypeDefs
        );
      }

      exports.addCatchUndefinedToSchema = addCatchUndefinedToSchema;
      exports.addErrorLoggingToSchema = addErrorLoggingToSchema;
      exports.addResolversToSchema = addResolversToSchema;
      exports.addSchemaLevelResolver = addSchemaLevelResolver;
      exports.assertResolversPresent = assertResolversPresent;
      exports.attachDirectiveResolvers = attachDirectiveResolvers;
      exports.buildDocumentFromTypeDefinitions = buildDocumentFromTypeDefinitions;
      exports.buildSchemaFromTypeDefinitions = buildSchemaFromTypeDefinitions;
      exports.chainResolvers = chainResolvers;
      exports.checkForResolveTypeResolver = checkForResolveTypeResolver;
      exports.concatenateTypeDefs = concatenateTypeDefs;
      exports.decorateWithLogger = decorateWithLogger;
      exports.extendResolversFromInterfaces = extendResolversFromInterfaces;
      exports.extractExtensionDefinitions = extractExtensionDefinitions;
      exports.filterAndExtractExtensionDefinitions = filterAndExtractExtensionDefinitions;
      exports.filterExtensionDefinitions = filterExtensionDefinitions;
      exports.makeExecutableSchema = makeExecutableSchema;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ IFkQ: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       * @emails oncall+relay
       */
      // flowlint ambiguous-object-type:error

      var _interopRequireDefault = __webpack_require__("TqRt");

      var _inheritsLoose2 = _interopRequireDefault(__webpack_require__("VbXa"));

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (
            Array.isArray(o) ||
            (it = _unsupportedIterableToArray(o)) ||
            (allowArrayLike && o && typeof o.length === "number")
          ) {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
              s: F,
              n: function n() {
                if (i >= o.length) return { done: true };
                return { done: false, value: o[i++] };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        var normalCompletion = true,
          didErr = false,
          err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it["return"] != null) it["return"]();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }

      var _require = __webpack_require__("VrDQ"),
        createCompilerError = _require.createCompilerError;

      var _require2 = __webpack_require__("FFNC"),
        isSchemaDefinitionAST = _require2.isSchemaDefinitionAST;

      var _require3 = __webpack_require__("uKhV"),
        GraphQLFloat = _require3.GraphQLFloat,
        GraphQLInt = _require3.GraphQLInt,
        GraphQLBoolean = _require3.GraphQLBoolean,
        GraphQLString = _require3.GraphQLString,
        GraphQLID = _require3.GraphQLID,
        parse = _require3.parse,
        parseType = _require3.parseType,
        print = _require3.print,
        valueFromASTUntyped = _require3.valueFromASTUntyped;

      /**
       * @private
       */
      var Type = /*#__PURE__*/ (function() {
        function Type(name, isClient) {
          this.name = name;
          this.isClient = isClient;
        }

        var _proto = Type.prototype;

        _proto.toString = function toString() {
          return this.name;
        };

        _proto.toJSON = function toJSON() {
          return String(this);
        };

        return Type;
      })();
      /**
       * @private
       */

      var ScalarType = /*#__PURE__*/ (function(_Type) {
        (0, _inheritsLoose2["default"])(ScalarType, _Type);

        function ScalarType() {
          return _Type.apply(this, arguments) || this;
        }

        return ScalarType;
      })(Type);
      /**
       * @private
       */

      var EnumType = /*#__PURE__*/ (function(_Type2) {
        (0, _inheritsLoose2["default"])(EnumType, _Type2);

        function EnumType(name, values, isClient) {
          var _this;

          _this = _Type2.call(this, name, isClient) || this;
          _this.values = values;
          return _this;
        }

        return EnumType;
      })(Type);
      /**
       * @private
       */

      var UnionType = /*#__PURE__*/ (function(_Type3) {
        (0, _inheritsLoose2["default"])(UnionType, _Type3);

        function UnionType() {
          return _Type3.apply(this, arguments) || this;
        }

        return UnionType;
      })(Type);
      /**
       * @private
       */

      var ObjectType = /*#__PURE__*/ (function(_Type4) {
        (0, _inheritsLoose2["default"])(ObjectType, _Type4);

        function ObjectType() {
          return _Type4.apply(this, arguments) || this;
        }

        return ObjectType;
      })(Type);
      /**
       * @private
       */

      var InputObjectType = /*#__PURE__*/ (function(_Type5) {
        (0, _inheritsLoose2["default"])(InputObjectType, _Type5);

        function InputObjectType() {
          return _Type5.apply(this, arguments) || this;
        }

        return InputObjectType;
      })(Type);
      /**
       * @private
       */

      var InterfaceType = /*#__PURE__*/ (function(_Type6) {
        (0, _inheritsLoose2["default"])(InterfaceType, _Type6);

        function InterfaceType() {
          return _Type6.apply(this, arguments) || this;
        }

        return InterfaceType;
      })(Type);
      /**
       * @private
       */

      var List = /*#__PURE__*/ (function() {
        function List(type) {
          this.ofType = type;
          this._typeString = "[".concat(String(this.ofType), "]");
        }

        var _proto2 = List.prototype;

        _proto2.toString = function toString() {
          return this._typeString;
        };

        _proto2.toJSON = function toJSON() {
          return this.toString();
        };

        return List;
      })();
      /**
       * @private
       */

      var NonNull = /*#__PURE__*/ (function() {
        function NonNull(type) {
          this.ofType = type;
          this._typeString = "".concat(String(this.ofType), "!");
        }

        var _proto3 = NonNull.prototype;

        _proto3.toString = function toString() {
          return this._typeString;
        };

        _proto3.toJSON = function toJSON() {
          return this.toString();
        };

        return NonNull;
      })();
      /**
       * @private
       */

      var Field = function Field(
        schema,
        name,
        type,
        belongsTo,
        args,
        directives,
        isClient
      ) {
        this.name = name;
        this.type = type;
        this.belongsTo = belongsTo;
        this.isClient = isClient;
        this.args = parseInputArgumentDefinitionsMap(schema, args);
        this.directives = directives;
      };
      /**
       * @private
       */

      function unwrap(type) {
        if (type instanceof NonNull || type instanceof List) {
          return unwrap(type.ofType);
        }

        return type;
      }
      /**
       * @private
       */

      function hasConcreteTypeThatImplements(schema, type, interfaceType) {
        return (
          _isAbstractType(type) &&
          getConcreteTypes(schema, type).some(function(concreteType) {
            return schema.implementsInterface(
              schema.assertCompositeType(concreteType),
              interfaceType
            );
          })
        );
      }
      /**
       * @private
       */

      function getConcreteTypes(schema, type) {
        var concreteTypes = new Set();
        schema.getPossibleTypes(type).forEach(function(possibleType) {
          if (_isObject(possibleType)) {
            concreteTypes.add(possibleType);
          }
        });
        return Array.from(concreteTypes);
      }

      var TYPENAME_FIELD = "__typename";
      var CLIENT_ID_FIELD = "__id";
      var QUERY_TYPE_KEY = Symbol("Query");
      var MUTATION_TYPE_KEY = Symbol("Mutation");
      var SUBSCRIPTION_TYPE_KEY = Symbol("Subscription");

      function _isScalar(type) {
        return type instanceof ScalarType;
      }

      function _isObject(type) {
        return type instanceof ObjectType;
      }

      function _isEnum(type) {
        return type instanceof EnumType;
      }

      function _isUnion(type) {
        return type instanceof UnionType;
      }

      function _isInputObject(type) {
        return type instanceof InputObjectType;
      }

      function _isInterface(type) {
        return type instanceof InterfaceType;
      }

      function _isWrapper(type) {
        return type instanceof List || type instanceof NonNull;
      }

      function isBaseType(type) {
        return (
          type instanceof ScalarType ||
          type instanceof ObjectType ||
          type instanceof EnumType ||
          type instanceof UnionType ||
          type instanceof InputObjectType ||
          type instanceof InterfaceType
        );
      }

      function _isAbstractType(type) {
        return type instanceof UnionType || type instanceof InterfaceType;
      }

      function _isCompositeType(type) {
        return (
          type instanceof ObjectType ||
          type instanceof UnionType ||
          type instanceof InterfaceType
        );
      }

      function _isInputType(type) {
        return (
          type instanceof InputObjectType ||
          type instanceof ScalarType ||
          type instanceof EnumType
        );
      }

      var Schema = /*#__PURE__*/ (function() {
        /**
         * @private
         */
        function Schema(typeMap) {
          var _this2 = this;

          this._typeMap = typeMap;
          this._typeWrappersMap = new Map();
          this._fieldsMap = new Map();
          this._typeNameMap = new Map();
          this._clientIdMap = new Map();
          this._directiveMap = new Map(
            typeMap.getDirectives().map(function(directive) {
              return [
                directive.name,
                {
                  locations: directive.locations,
                  args: parseInputArgumentDefinitions(_this2, directive.args),
                  name: directive.name,
                  isClient: directive.isClient
                }
              ];
            })
          );
        }

        var _proto4 = Schema.prototype;

        _proto4.getTypes = function getTypes() {
          return this._typeMap.getTypes();
        };

        _proto4.getTypeFromAST = function getTypeFromAST(typeNode) {
          if (typeNode.kind === "NonNullType") {
            var innerType = this.getTypeFromAST(typeNode.type);

            if (!innerType) {
              return;
            }

            if (innerType instanceof NonNull) {
              throw createCompilerError(
                "Unable to wrap non-nullable type with non-null wrapper."
              );
            }

            var cacheKey = "".concat(this.getTypeString(innerType), "!");

            var type = this._typeWrappersMap.get(cacheKey);

            if (type) {
              return type;
            }

            type = new NonNull(innerType);

            this._typeWrappersMap.set(cacheKey, type);

            return type;
          } else if (typeNode.kind === "ListType") {
            var _innerType = this.getTypeFromAST(typeNode.type);

            if (!_innerType) {
              return;
            }

            var _cacheKey = "[".concat(this.getTypeString(_innerType), "]");

            var _type = this._typeWrappersMap.get(_cacheKey);

            if (_type) {
              return _type;
            }

            _type = new List(_innerType);

            this._typeWrappersMap.set(_cacheKey, _type);

            return _type;
          }

          return this._typeMap.getTypeByName(typeNode.name.value);
        };

        _proto4._getRawType = function _getRawType(typeName) {
          var type = this._typeWrappersMap.get(typeName);

          if (type) {
            return type;
          }

          if (typeof typeName === "string") {
            return this.getTypeFromAST(parseType(typeName));
          } else {
            var operationType;

            if (typeName === QUERY_TYPE_KEY) {
              operationType = this._typeMap.getQueryType();
            } else if (typeName === MUTATION_TYPE_KEY) {
              operationType = this._typeMap.getMutationType();
            } else if (typeName === SUBSCRIPTION_TYPE_KEY) {
              operationType = this._typeMap.getSubscriptionType();
            }

            if (operationType instanceof ObjectType) {
              return operationType;
            }
          }
        };

        _proto4.getTypeFromString = function getTypeFromString(typeName) {
          return this._getRawType(typeName);
        };

        _proto4.expectTypeFromString = function expectTypeFromString(typeName) {
          var type = this.getTypeFromString(typeName);

          if (type == null) {
            throw createCompilerError("Unknown type: '".concat(typeName, "'."));
          }

          return type;
        };

        _proto4.expectTypeFromAST = function expectTypeFromAST(ast) {
          var type = this.getTypeFromAST(ast);

          if (type == null) {
            throw createCompilerError(
              "Unknown type: '".concat(print(ast), "'."),
              null,
              [ast]
            );
          }

          return type;
        };

        _proto4.getNonNullType = function getNonNullType(type) {
          if (type instanceof NonNull) {
            return type;
          }

          var cacheKey = "".concat(String(type), "!");

          var nonNullType = this._typeWrappersMap.get(cacheKey);

          if (nonNullType) {
            return nonNullType;
          }

          nonNullType = new NonNull(type);

          this._typeWrappersMap.set(cacheKey, nonNullType);

          return nonNullType;
        };

        _proto4.getRawType = function getRawType(type) {
          return unwrap(type);
        };

        _proto4.getNullableType = function getNullableType(type) {
          if (type instanceof NonNull) {
            return type.ofType;
          }

          return type;
        };

        _proto4.getListItemType = function getListItemType(type) {
          if (type instanceof List) {
            return type.ofType;
          }

          return type;
        };

        _proto4.mapListItemType = function mapListItemType(type, mapper) {
          if (!(type instanceof List)) {
            throw createCompilerError("Expected List type");
          }

          var innerType = mapper(type.ofType);
          var cacheKey = "[".concat(this.getTypeString(innerType), "]");

          var newType = this._typeWrappersMap.get(cacheKey);

          if (newType) {
            return newType;
          }

          newType = new List(innerType);

          this._typeWrappersMap.set(cacheKey, newType);

          return newType;
        };

        _proto4.areEqualTypes = function areEqualTypes(typeA, typeB) {
          if (typeA === typeB) {
            return true;
          }

          if (typeA instanceof NonNull && typeB instanceof NonNull) {
            return this.areEqualTypes(typeA.ofType, typeB.ofType);
          }

          if (typeA instanceof List && typeB instanceof List) {
            return this.areEqualTypes(typeA.ofType, typeB.ofType);
          }

          if (isBaseType(typeA) && isBaseType(typeB)) {
            return typeA.name === typeB.name;
          }

          return false;
        };
        /**
         * Determine if the given type may implement the named type:
         * - it is the named type
         * - it implements the named interface
         * - it is an abstract type and *some* of its concrete types may
         *   implement the named type
         */

        _proto4.mayImplement = function mayImplement(type, interfaceType) {
          return (
            this.areEqualTypes(type, interfaceType) ||
            this.implementsInterface(type, interfaceType) ||
            (this.isAbstractType(type) &&
              hasConcreteTypeThatImplements(this, type, interfaceType))
          );
        };

        _proto4.implementsInterface = function implementsInterface(
          type,
          interfaceType
        ) {
          var _this3 = this;

          return this.getInterfaces(type).some(function(typeInterface) {
            return _this3.areEqualTypes(typeInterface, interfaceType);
          });
        };

        _proto4.canHaveSelections = function canHaveSelections(type) {
          return this.isObject(type) || this.isInterface(type);
        };

        _proto4.getTypeString = function getTypeString(type) {
          return type.toString();
        };

        _proto4.isTypeSubTypeOf = function isTypeSubTypeOf(
          maybeSubType,
          superType
        ) {
          // Equivalent type is a valid subtype
          if (maybeSubType === superType) {
            return true;
          } // If superType is non-null, maybeSubType must also be non-null.

          if (superType instanceof NonNull) {
            if (maybeSubType instanceof NonNull) {
              return this.isTypeSubTypeOf(
                maybeSubType.ofType,
                superType.ofType
              );
            }

            return false;
          }

          if (maybeSubType instanceof NonNull) {
            // If superType is nullable, maybeSubType may be non-null or nullable.
            return this.isTypeSubTypeOf(maybeSubType.ofType, superType);
          } // If superType type is a list, maybeSubType type must also be a list.

          if (superType instanceof List) {
            if (maybeSubType instanceof List) {
              return this.isTypeSubTypeOf(
                maybeSubType.ofType,
                superType.ofType
              );
            }

            return false;
          }

          if (maybeSubType instanceof List) {
            // If superType is not a list, maybeSubType must also be not a list.
            return false;
          } // If superType type is an abstract type, maybeSubType type may be a currently
          // possible object type.

          if (
            this.isAbstractType(superType) &&
            this.isObject(maybeSubType) &&
            this.isPossibleType(
              this.assertAbstractType(superType),
              this.assertObjectType(maybeSubType)
            )
          ) {
            return true;
          } // Otherwise, maybeSubType is not a valid subtype of the superType.

          return false;
        };
        /**
         * Provided two composite types, determine if they "overlap". Two composite
         * types overlap when the Sets of possible concrete types for each intersect.
         *
         * This is often used to determine if a fragment of a given type could possibly
         * be visited in a context of another type.
         *
         * This function is commutative.
         */

        _proto4.doTypesOverlap = function doTypesOverlap(typeA, typeB) {
          var _this4 = this;

          // Equivalent types overlap
          if (typeA === typeB) {
            return true;
          }

          if (_isAbstractType(typeA)) {
            if (_isAbstractType(typeB)) {
              // If both types are abstract, then determine if there is any intersection
              // between possible concrete types of each.
              return Array.from(this.getPossibleTypes(typeA)).some(function(
                type
              ) {
                if (_isObject(type)) {
                  return _this4.isPossibleType(typeB, type);
                }
              });
            } // Determine if the latter type is a possible concrete type of the former.

            return this.isPossibleType(typeA, typeB);
          }

          if (_isAbstractType(typeB)) {
            // Determine if the former type is a possible concrete type of the latter.
            return this.isPossibleType(typeB, typeA);
          } // Otherwise the types do not overlap.

          return false;
        };

        _proto4.isPossibleType = function isPossibleType(
          superType,
          maybeSubType
        ) {
          return this._typeMap.getPossibleTypeSet(superType).has(maybeSubType);
        };

        _proto4.assertScalarFieldType = function assertScalarFieldType(type) {
          // Scalar type fields can be wrappers / or can be scalars/enums
          if (
            (_isWrapper(type) &&
              !_isScalar(unwrap(type)) &&
              !_isEnum(unwrap(type))) ||
            (!_isWrapper(type) && !_isScalar(type) && !_isEnum(type))
          ) {
            throw createCompilerError(
              "Expected ".concat(String(type), " to be a Scalar or Enum type.")
            );
          }

          return type;
        };

        _proto4.assertLinkedFieldType = function assertLinkedFieldType(type) {
          // Linked Field types can be wrappers / or can be composite types
          if (
            (_isWrapper(type) && !_isCompositeType(unwrap(type))) ||
            (!_isWrapper(type) && !_isCompositeType(type))
          ) {
            throw createCompilerError(
              "Expected ".concat(
                String(type),
                " to be a Object, Interface or a Union Type."
              )
            );
          }

          return type;
        };

        _proto4.assertInputType = function assertInputType(type) {
          // Input type fields can be wrappers / or can be scalars/enums
          if (
            (_isWrapper(type) && !_isInputType(unwrap(type))) ||
            (!_isWrapper(type) && !_isInputType(type))
          ) {
            throw createCompilerError(
              "Expected ".concat(
                String(type),
                " to be a Input, Scalar or Enum type."
              )
            );
          }

          return type;
        };

        _proto4.asCompositeType = function asCompositeType(type) {
          if (_isCompositeType(type)) {
            return type;
          }
        };

        _proto4.asInputType = function asInputType(type) {
          if (
            (_isWrapper(type) && _isInputType(unwrap(type))) ||
            (!_isWrapper(type) && _isInputType(type))
          ) {
            return type;
          }
        };

        _proto4.asScalarFieldType = function asScalarFieldType(type) {
          if (_isScalar(type) || _isEnum(type)) {
            return type;
          }
        };

        _proto4.assertScalarType = function assertScalarType(type) {
          if (!_isScalar(type)) {
            throw createCompilerError(
              "Expected "
                .concat(this.getTypeString(type), " to be a scalar type, got ")
                .concat(this.getTypeString(type), ".")
            );
          }

          return type;
        };

        _proto4.assertObjectType = function assertObjectType(type) {
          if (!_isObject(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be an object type."
              )
            );
          }

          return type;
        };

        _proto4.assertInputObjectType = function assertInputObjectType(type) {
          if (!_isInputObject(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be an input type."
              )
            );
          }

          return type;
        };

        _proto4.asInputObjectType = function asInputObjectType(type) {
          if (!_isInputObject(type)) {
            return null;
          }

          return type;
        };

        _proto4.assertInterfaceType = function assertInterfaceType(type) {
          if (!_isInterface(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be an interface type."
              )
            );
          }

          return type;
        };

        _proto4.assertCompositeType = function assertCompositeType(type) {
          if (!_isCompositeType(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be a composite type."
              )
            );
          }

          return type;
        };

        _proto4.assertAbstractType = function assertAbstractType(type) {
          if (!_isAbstractType(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be an abstract type."
              )
            );
          }

          return type;
        };

        _proto4.assertLeafType = function assertLeafType(type) {
          if (!this.isLeafType(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be a leaf type."
              )
            );
          }

          return type;
        };

        _proto4.assertUnionType = function assertUnionType(type) {
          if (!_isUnion(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be a union type."
              )
            );
          }

          return type;
        };

        _proto4.assertEnumType = function assertEnumType(type) {
          if (!_isEnum(type)) {
            throw createCompilerError(
              "Expected ".concat(String(type), " to be an enum type.")
            );
          }

          return type;
        };

        _proto4.assertIntType = function assertIntType(type) {
          if (!_isScalar(type) || !this.isInt(type)) {
            throw createCompilerError(
              "Expected ".concat(String(type), " to be an 'Int' type.")
            );
          }

          return type;
        };

        _proto4.assertFloatType = function assertFloatType(type) {
          if (!_isScalar(type) || !this.isFloat(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be a 'Float' type."
              )
            );
          }

          return type;
        };

        _proto4.assertBooleanType = function assertBooleanType(type) {
          if (!_isScalar(type) || !this.isBoolean(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be a 'Boolean' type."
              )
            );
          }

          return type;
        };

        _proto4.assertStringType = function assertStringType(type) {
          if (!_isScalar(type) || !this.isString(type)) {
            throw createCompilerError(
              "Expected ".concat(
                this.getTypeString(type),
                " to be a 'String' type."
              )
            );
          }

          return type;
        };

        _proto4.assertIdType = function assertIdType(type) {
          if (!_isScalar(type) || !this.isId(type)) {
            throw createCompilerError(
              "Expected ".concat(this.getTypeString(type), " to be an ID type.")
            );
          }

          return type;
        };

        _proto4.expectBooleanType = function expectBooleanType() {
          return this.assertScalarType(this.expectTypeFromString("Boolean"));
        };

        _proto4.expectIntType = function expectIntType() {
          return this.assertScalarType(this.expectTypeFromString("Int"));
        };

        _proto4.expectFloatType = function expectFloatType() {
          return this.assertScalarType(this.expectTypeFromString("Float"));
        };

        _proto4.expectStringType = function expectStringType() {
          return this.assertScalarType(this.expectTypeFromString("String"));
        };

        _proto4.expectIdType = function expectIdType() {
          return this.assertScalarType(this.expectTypeFromString("ID"));
        };

        _proto4.getQueryType = function getQueryType() {
          var queryType = this._getRawType(QUERY_TYPE_KEY);

          if (queryType && _isObject(queryType)) {
            return queryType;
          }
        };

        _proto4.getMutationType = function getMutationType() {
          var mutationType = this._getRawType(MUTATION_TYPE_KEY);

          if (mutationType && _isObject(mutationType)) {
            return mutationType;
          }
        };

        _proto4.getSubscriptionType = function getSubscriptionType() {
          var subscriptionType = this._getRawType(SUBSCRIPTION_TYPE_KEY);

          if (subscriptionType && _isObject(subscriptionType)) {
            return subscriptionType;
          }
        };

        _proto4.expectQueryType = function expectQueryType() {
          var queryType = this.getQueryType();

          if (queryType == null) {
            throw createCompilerError(
              "Query type is not defined on the Schema"
            );
          }

          return queryType;
        };

        _proto4.expectMutationType = function expectMutationType() {
          var mutationType = this.getMutationType();

          if (mutationType == null) {
            throw createCompilerError(
              "Mutation type is not defined the Schema"
            );
          }

          return mutationType;
        };

        _proto4.expectSubscriptionType = function expectSubscriptionType() {
          var subscriptionType = this.getSubscriptionType();

          if (subscriptionType == null) {
            throw createCompilerError(
              "Subscription type is not defined the Schema"
            );
          }

          return subscriptionType;
        };

        _proto4.isNonNull = function isNonNull(type) {
          return type instanceof NonNull;
        };

        _proto4.isList = function isList(type) {
          return type instanceof List;
        };

        _proto4.isWrapper = function isWrapper(type) {
          return _isWrapper(type);
        };

        _proto4.isScalar = function isScalar(type) {
          return _isScalar(type);
        };

        _proto4.isObject = function isObject(type) {
          return _isObject(type);
        };

        _proto4.isEnum = function isEnum(type) {
          return _isEnum(type);
        };

        _proto4.isUnion = function isUnion(type) {
          return _isUnion(type);
        };

        _proto4.isInputObject = function isInputObject(type) {
          return _isInputObject(type);
        };

        _proto4.isInterface = function isInterface(type) {
          return _isInterface(type);
        };

        _proto4.isInputType = function isInputType(type) {
          // Wrappers can be input types (so it's save to check unwrapped type here)
          return (
            _isInputType(type) ||
            (_isWrapper(type) && _isInputType(unwrap(type)))
          );
        };

        _proto4.isCompositeType = function isCompositeType(type) {
          return _isCompositeType(type);
        };

        _proto4.isAbstractType = function isAbstractType(type) {
          return _isAbstractType(type);
        };

        _proto4.isLeafType = function isLeafType(type) {
          return this.isScalar(type) || this.isEnum(type);
        };

        _proto4.isId = function isId(type) {
          if (type instanceof ScalarType) {
            return type.name === "ID";
          }

          return false;
        };

        _proto4.isInt = function isInt(type) {
          if (type instanceof ScalarType) {
            return type.name === "Int";
          }

          return false;
        };

        _proto4.isFloat = function isFloat(type) {
          if (type instanceof ScalarType) {
            return type.name === "Float";
          }

          return false;
        };

        _proto4.isBoolean = function isBoolean(type) {
          if (type instanceof ScalarType) {
            return type.name === "Boolean";
          }

          return false;
        };

        _proto4.isString = function isString(type) {
          if (type instanceof ScalarType) {
            return type.name === "String";
          }

          return false;
        };

        _proto4.hasField = function hasField(type, fieldName) {
          var canHaveTypename =
            this.isObject(type) || this.isAbstractType(type); // Special case for __typename field

          if (
            canHaveTypename &&
            (fieldName === TYPENAME_FIELD || fieldName === CLIENT_ID_FIELD)
          ) {
            return true;
          }

          if (type instanceof ObjectType || type instanceof InterfaceType) {
            return this._typeMap.getField(type, fieldName) != null;
          } else if (type instanceof InputObjectType) {
            return this._typeMap.getInputField(type, fieldName) != null;
          }

          return false;
        };

        _proto4.hasId = function hasId(type) {
          if (!this.hasField(type, "id")) {
            return false;
          }

          var idField = this.expectField(type, "id");
          return this.areEqualTypes(
            this.getNullableType(this.getFieldType(idField)),
            this.expectIdType()
          );
        };

        _proto4.getFields = function getFields(type) {
          var fieldsMap = this._getFieldsMap(type);

          return Array.from(fieldsMap.values());
        };

        _proto4._getFieldsMap = function _getFieldsMap(type) {
          var cachedMap = this._fieldsMap.get(type);

          if (cachedMap != null) {
            return cachedMap;
          }

          var fieldsMap = new Map();

          if (type instanceof ObjectType || type instanceof InterfaceType) {
            var fields = this._typeMap.getFieldMap(type);

            if (fields) {
              var _iterator = _createForOfIteratorHelper(fields),
                _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var _step$value = _step.value,
                    fieldName = _step$value[0],
                    fieldDefinition = _step$value[1];
                  var fieldType = this.expectTypeFromAST(fieldDefinition.type);
                  fieldsMap.set(
                    fieldName,
                    new Field(
                      this,
                      fieldName,
                      fieldType,
                      this.assertCompositeType(type),
                      fieldDefinition.arguments,
                      fieldDefinition.directives,
                      fieldDefinition.isClient
                    )
                  );
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            }
          } else if (type instanceof InputObjectType) {
            var _fields = this._typeMap.getInputFieldMap(type);

            if (_fields) {
              var _iterator2 = _createForOfIteratorHelper(_fields),
                _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var _step2$value = _step2.value,
                    _fieldName = _step2$value[0],
                    typeNode = _step2$value[1];

                  var _fieldType = this.expectTypeFromAST(typeNode);

                  fieldsMap.set(
                    _fieldName,
                    new Field(
                      this,
                      _fieldName,
                      _fieldType,
                      type,
                      [],
                      null,
                      false
                    )
                  );
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
          }

          if (fieldsMap.size === 0) {
            throw createCompilerError(
              "_getFieldsMap: Type '".concat(type.name, "' should have fields.")
            );
          }

          this._fieldsMap.set(type, fieldsMap);

          return fieldsMap;
        };

        _proto4.getFieldByName = function getFieldByName(type, fieldName) {
          if (!this.hasField(type, fieldName)) {
            return;
          } // A "special" case for __typename and __id fields - which should
          // not be in the list of type fields, but should be fine to select

          if (fieldName === TYPENAME_FIELD) {
            var typename = this._typeNameMap.get(type);

            if (!typename) {
              typename = new Field(
                this,
                TYPENAME_FIELD,
                this.getNonNullType(this.expectStringType()),
                type,
                [],
                null,
                false
              );

              this._typeNameMap.set(type, typename);
            }

            return typename;
          }

          if (fieldName === CLIENT_ID_FIELD) {
            var clientId = this._clientIdMap.get(type);

            if (!clientId) {
              clientId = new Field(
                this,
                CLIENT_ID_FIELD,
                this.getNonNullType(this.expectIdType()),
                type,
                [],
                null,
                true
              );

              this._clientIdMap.set(type, clientId);
            }

            return clientId;
          }

          if (_isUnion(type)) {
            throw createCompilerError(
              "Unexpected union type '".concat(
                this.getTypeString(type),
                "' in the 'getFieldByName(...)'. Expected type with fields"
              )
            );
          }

          var fieldsMap = this._getFieldsMap(type);

          return fieldsMap.get(fieldName);
        };

        _proto4.expectField = function expectField(type, fieldName) {
          var field = this.getFieldByName(type, fieldName);

          if (!field) {
            throw createCompilerError(
              "Unknown field '"
                .concat(fieldName, "' on type '")
                .concat(this.getTypeString(type), "'.")
            );
          }

          return field;
        };

        _proto4.getFieldConfig = function getFieldConfig(field) {
          return {
            type: field.type,
            args: Array.from(field.args.values())
          };
        };

        _proto4.getFieldName = function getFieldName(field) {
          return field.name;
        };

        _proto4.getFieldType = function getFieldType(field) {
          return field.type;
        };

        _proto4.getFieldParentType = function getFieldParentType(field) {
          return field.belongsTo;
        };

        _proto4.getFieldArgs = function getFieldArgs(field) {
          return Array.from(field.args.values());
        };

        _proto4.getFieldArgByName = function getFieldArgByName(field, argName) {
          return field.args.get(argName);
        };

        _proto4.getEnumValues = function getEnumValues(type) {
          return type.values;
        };

        _proto4.getUnionTypes = function getUnionTypes(type) {
          return Array.from(this._typeMap.getPossibleTypeSet(type));
        };

        _proto4.getInterfaces = function getInterfaces(type) {
          if (type instanceof ObjectType) {
            return this._typeMap.getInterfaces(type);
          }

          return [];
        };

        _proto4.getPossibleTypes = function getPossibleTypes(type) {
          return this._typeMap.getPossibleTypeSet(type);
        };

        _proto4.getFetchableFieldName = function getFetchableFieldName(type) {
          return this._typeMap.getFetchableFieldName(type);
        };

        _proto4.parseLiteral = function parseLiteral(type, valueNode) {
          if (type instanceof EnumType && valueNode.kind === "EnumValue") {
            return this.parseValue(type, valueNode.value);
          } else if (type instanceof ScalarType) {
            if (valueNode.kind === "BooleanValue" && type.name === "Boolean") {
              return GraphQLBoolean.parseLiteral(valueNode);
            } else if (
              valueNode.kind === "FloatValue" &&
              type.name === "Float"
            ) {
              return GraphQLFloat.parseLiteral(valueNode);
            } else if (
              valueNode.kind === "IntValue" &&
              (type.name === "Int" ||
                type.name === "ID" ||
                type.name === "Float")
            ) {
              return GraphQLInt.parseLiteral(valueNode);
            } else if (
              valueNode.kind === "StringValue" &&
              (type.name === "String" || type.name === "ID")
            ) {
              return GraphQLString.parseLiteral(valueNode);
            } else if (!isDefaultScalar(type.name)) {
              return valueFromASTUntyped(valueNode);
            }
          }
        };

        _proto4.parseValue = function parseValue(type, value) {
          if (type instanceof EnumType) {
            return type.values.includes(value) ? value : undefined;
          } else if (type instanceof ScalarType) {
            switch (type.name) {
              case "Boolean":
                return GraphQLBoolean.parseValue(value);

              case "Float":
                return GraphQLFloat.parseValue(value);

              case "Int":
                return GraphQLInt.parseValue(value);

              case "String":
                return GraphQLString.parseValue(value);

              case "ID":
                return GraphQLID.parseValue(value);

              default:
                return value;
            }
          }
        };

        _proto4.serialize = function serialize(type, value) {
          if (type instanceof EnumType) {
            return type.values.includes(value) ? value : undefined;
          } else if (type instanceof ScalarType) {
            switch (type.name) {
              case "Boolean":
                return GraphQLBoolean.serialize(value);

              case "Float":
                return GraphQLFloat.serialize(value);

              case "Int":
                return GraphQLInt.serialize(value);

              case "String":
                return GraphQLString.serialize(value);

              case "ID":
                return GraphQLID.serialize(value);

              default:
                return value;
            }
          }
        };

        _proto4.getDirectives = function getDirectives() {
          return Array.from(this._directiveMap.values());
        };

        _proto4.getDirective = function getDirective(directiveName) {
          return this._directiveMap.get(directiveName);
        };

        _proto4.isServerType = function isServerType(type) {
          var unwrapped = unwrap(type);
          return unwrapped.isClient === false;
        };

        _proto4.isServerField = function isServerField(field) {
          return field.isClient === false;
        };

        _proto4.isServerDirective = function isServerDirective(directiveName) {
          var directive = this._directiveMap.get(directiveName);

          return (
            (directive === null || directive === void 0
              ? void 0
              : directive.isClient) === false
          );
        };

        _proto4.isServerDefinedField = function isServerDefinedField(
          type,
          field
        ) {
          return (
            (this.isAbstractType(type) &&
              field.directives.some(function(_ref) {
                var name = _ref.name;
                return name === "fixme_fat_interface";
              })) ||
            (this.hasField(type, field.name) &&
              this.isServerField(this.expectField(type, field.name)))
          );
        };

        _proto4.isClientDefinedField = function isClientDefinedField(
          type,
          field
        ) {
          return !this.isServerDefinedField(type, field);
        };

        _proto4.extend = function extend(extensions) {
          var doc = Array.isArray(extensions)
            ? parse(extensions.join("\n"))
            : extensions;
          var schemaExtensions = [];
          doc.definitions.forEach(function(definition) {
            if (isSchemaDefinitionAST(definition)) {
              schemaExtensions.push(definition);
            }
          });

          if (schemaExtensions.length > 0) {
            return new Schema(this._typeMap.extend(schemaExtensions));
          }

          return this;
        };

        return Schema;
      })();

      var TypeMap = /*#__PURE__*/ (function() {
        function TypeMap(source, extensions) {
          this._types = new Map([
            ["ID", new ScalarType("ID", false)],
            ["String", new ScalarType("String", false)],
            ["Boolean", new ScalarType("Boolean", false)],
            ["Float", new ScalarType("Float", false)],
            ["Int", new ScalarType("Int", false)]
          ]);
          this._typeInterfaces = new Map();
          this._unionTypes = new Map();
          this._interfaceImplementations = new Map();
          this._fields = new Map();
          this._inputFields = new Map();
          this._directives = new Map([
            [
              "include",
              {
                name: "include",
                isClient: false,
                locations: ["FIELD", "FRAGMENT_SPREAD", "INLINE_FRAGMENT"],
                args: [
                  {
                    name: "if",
                    typeNode: parseType("Boolean!"),
                    defaultValue: undefined
                  }
                ]
              }
            ],
            [
              "skip",
              {
                name: "skip",
                isClient: false,
                locations: ["FIELD", "FRAGMENT_SPREAD", "INLINE_FRAGMENT"],
                args: [
                  {
                    name: "if",
                    typeNode: parseType("Boolean!"),
                    defaultValue: undefined
                  }
                ]
              }
            ],
            [
              "deprecated",
              {
                name: "deprecated",
                isClient: false,
                locations: ["FIELD_DEFINITION", "ENUM_VALUE"],
                args: [
                  {
                    name: "reason",
                    typeNode: parseType("String"),
                    defaultValue: {
                      kind: "StringValue",
                      value: "No longer supported"
                    }
                  }
                ]
              }
            ]
          ]);
          this._queryTypeName = "Query";
          this._mutationTypeName = "Mutation";
          this._subscriptionTypeName = "Subscription";
          this._source = source;
          this._extensions = extensions;
          this._fetchable = new Map();

          this._parse(source);

          this._extend(extensions);
        }

        var _proto5 = TypeMap.prototype;

        _proto5._parse = function _parse(source) {
          var _this5 = this;

          var document = parse(source, {
            noLocation: true
          });
          document.definitions.forEach(function(definition) {
            switch (definition.kind) {
              case "SchemaDefinition": {
                _this5._parseSchemaDefinition(definition);

                break;
              }

              case "ScalarTypeDefinition": {
                _this5._parseScalarNode(definition, false);

                break;
              }

              case "EnumTypeDefinition": {
                _this5._parseEnumNode(definition, false);

                break;
              }

              case "ObjectTypeDefinition": {
                _this5._parseObjectTypeNode(definition, false);

                break;
              }

              case "InputObjectTypeDefinition": {
                _this5._parseInputObjectTypeNode(definition, false);

                break;
              }

              case "UnionTypeDefinition": {
                _this5._parseUnionNode(definition, false);

                break;
              }

              case "InterfaceTypeDefinition": {
                _this5._parseInterfaceNode(definition, false);

                break;
              }

              case "DirectiveDefinition": {
                _this5._parseDirective(definition, false);

                break;
              }
            }
          });
        };

        _proto5._parseSchemaDefinition = function _parseSchemaDefinition(node) {
          var _this6 = this;

          node.operationTypes.forEach(function(operationType) {
            switch (operationType.operation) {
              case "query":
                _this6._queryTypeName = operationType.type.name.value;
                break;

              case "mutation":
                _this6._mutationTypeName = operationType.type.name.value;
                break;

              case "subscription":
                _this6._subscriptionTypeName = operationType.type.name.value;
                break;
            }
          });
        };

        _proto5._parseScalarNode = function _parseScalarNode(node, isClient) {
          var name = node.name.value;

          if (!isDefaultScalar(name) && this._types.has(name)) {
            throw createCompilerError(
              "_parseScalarNode: Duplicate definition for type ".concat(
                name,
                "."
              ),
              null,
              [node]
            );
          }

          this._types.set(name, new ScalarType(name, isClient));
        };

        _proto5._parseEnumNode = function _parseEnumNode(node, isClient) {
          var name = node.name.value;

          if (this._types.has(name)) {
            throw createCompilerError(
              "_parseEnumNode: Duplicate definition for type ".concat(
                name,
                "."
              ),
              null,
              [node]
            );
          } // SDL doesn't have information about the actual ENUM values

          var values = node.values
            ? node.values.map(function(value) {
                return value.name.value;
              })
            : [];

          this._types.set(name, new EnumType(name, values, isClient));
        };

        _proto5._parseObjectTypeNode = function _parseObjectTypeNode(
          node,
          isClient
        ) {
          var _this7 = this;

          var _this$_types$get;

          var name = node.name.value; // Objects may be created by _parseUnionNode

          var type =
            (_this$_types$get = this._types.get(name)) !== null &&
            _this$_types$get !== void 0
              ? _this$_types$get
              : new ObjectType(name, isClient);

          if (!(type instanceof ObjectType)) {
            throw createCompilerError(
              "_parseObjectTypeNode: Expected object type, got ".concat(
                String(type)
              ),
              null,
              [node]
            );
          }

          if (type.isClient !== isClient) {
            throw createCompilerError(
              "_parseObjectTypeNode: Cannot create object type '".concat(
                name,
                "' defined as a client type."
              ),
              null,
              [node]
            );
          }

          var typeInterfaces = [];
          node.interfaces &&
            node.interfaces.forEach(function(interfaceTypeNode) {
              var _this$_interfaceImple;

              var interfaceName = interfaceTypeNode.name.value;

              var interfaceType = _this7._types.get(interfaceName);

              if (!interfaceType) {
                interfaceType = new InterfaceType(interfaceName, isClient);

                _this7._types.set(interfaceName, interfaceType);
              }

              if (!(interfaceType instanceof InterfaceType)) {
                throw createCompilerError(
                  "_parseObjectTypeNode: Expected interface type",
                  null,
                  [interfaceTypeNode]
                );
              }

              var implementations =
                (_this$_interfaceImple = _this7._interfaceImplementations.get(
                  interfaceType
                )) !== null && _this$_interfaceImple !== void 0
                  ? _this$_interfaceImple
                  : new Set();
              implementations.add(type);

              _this7._interfaceImplementations.set(
                interfaceType,
                implementations
              );

              typeInterfaces.push(interfaceType);
            });
          var fetchable = null;
          node.directives &&
            node.directives.forEach(function(directiveNode) {
              if (directiveNode.name.value === "fetchable") {
                var field_name_arg =
                  directiveNode.arguments &&
                  directiveNode.arguments.find(function(arg) {
                    return arg.name.value === "field_name";
                  });

                if (
                  field_name_arg != null &&
                  field_name_arg.value.kind === "StringValue"
                ) {
                  fetchable = {
                    field_name: field_name_arg.value.value
                  };
                }
              }
            });

          this._typeInterfaces.set(type, typeInterfaces);

          this._types.set(name, type);

          if (fetchable != null) {
            this._fetchable.set(type, fetchable);
          }

          node.fields &&
            this._handleTypeFieldsStrict(type, node.fields, isClient);
        };

        _proto5._parseInputObjectTypeNode = function _parseInputObjectTypeNode(
          node,
          isClient
        ) {
          var name = node.name.value;

          if (this._types.has(name)) {
            throw createCompilerError(
              "_parseInputObjectTypeNode: Unable to parse schema file. Duplicate definition for object type",
              null,
              [node]
            );
          }

          var type = new InputObjectType(name, isClient);

          this._types.set(name, type);

          this._parseInputObjectFields(type, node);
        };

        _proto5._parseUnionNode = function _parseUnionNode(node, isClient) {
          var _this8 = this;

          var name = node.name.value;

          if (this._types.has(name)) {
            throw createCompilerError(
              "_parseUnionNode: Unable to parse schema file. Duplicate definition for object type",
              null,
              [node]
            );
          }

          var union = new UnionType(name, isClient);

          this._types.set(name, union);

          this._unionTypes.set(
            union,
            new Set(
              node.types
                ? node.types.map(function(typeInUnion) {
                    var _this$_types$get2;

                    var typeInUnionName = typeInUnion.name.value;
                    var object =
                      (_this$_types$get2 = _this8._types.get(
                        typeInUnionName
                      )) !== null && _this$_types$get2 !== void 0
                        ? _this$_types$get2
                        : new ObjectType(typeInUnionName, false);

                    if (!(object instanceof ObjectType)) {
                      throw createCompilerError(
                        "_parseUnionNode: Expected object type",
                        null,
                        [typeInUnion]
                      );
                    }

                    _this8._types.set(typeInUnionName, object);

                    return object;
                  })
                : []
            )
          );
        };

        _proto5._parseInterfaceNode = function _parseInterfaceNode(
          node,
          isClient
        ) {
          var name = node.name.value;

          var type = this._types.get(name);

          if (!type) {
            type = new InterfaceType(name, isClient);

            this._types.set(name, type);
          }

          if (!(type instanceof InterfaceType)) {
            throw createCompilerError(
              "_parseInterfaceNode: Expected interface type. Got ".concat(
                String(type)
              ),
              null,
              [node]
            );
          }

          if (type.isClient !== isClient) {
            throw createCompilerError(
              "_parseInterfaceNode: Cannot create interface '".concat(
                name,
                "' defined as a client interface"
              ),
              null,
              [node]
            );
          }

          node.fields &&
            this._handleTypeFieldsStrict(type, node.fields, isClient);
        };

        _proto5._handleTypeFieldsStrict = function _handleTypeFieldsStrict(
          type,
          fields,
          isClient
        ) {
          if (this._fields.has(type)) {
            throw createCompilerError(
              "_handleTypeFieldsStrict: Unable to parse schema file. Duplicate definition for object type"
            );
          }

          this._handleTypeFields(type, fields, isClient);
        };

        _proto5._handleTypeFields = function _handleTypeFields(
          type,
          fields,
          isClient
        ) {
          var _this$_fields$get;

          var fieldsMap =
            (_this$_fields$get = this._fields.get(type)) !== null &&
            _this$_fields$get !== void 0
              ? _this$_fields$get
              : new Map();
          fields.forEach(function(fieldNode) {
            var fieldName = fieldNode.name.value;

            if (fieldsMap.has(fieldName)) {
              throw createCompilerError(
                "_handleTypeFields: Duplicate definition for field '".concat(
                  fieldName,
                  "'."
                )
              );
            }

            fieldsMap.set(fieldName, {
              arguments: fieldNode.arguments
                ? fieldNode.arguments.map(function(arg) {
                    return {
                      name: arg.name.value,
                      typeNode: arg.type,
                      defaultValue: arg.defaultValue
                    };
                  })
                : [],
              directives: fieldNode.directives
                ? fieldNode.directives.map(function(directive) {
                    return {
                      name: directive.name.value,
                      args: directive.arguments
                        ? directive.arguments.map(function(arg) {
                            return {
                              name: arg.name.value,
                              value: arg.value
                            };
                          })
                        : []
                    };
                  })
                : null,
              type: fieldNode.type,
              isClient: isClient
            });
          });

          this._fields.set(type, fieldsMap);
        };

        _proto5._parseInputObjectFields = function _parseInputObjectFields(
          type,
          node
        ) {
          if (this._inputFields.has(type)) {
            throw createCompilerError(
              "_parseInputObjectFields: Unable to parse schema file. Duplicate definition for type",
              null,
              [node]
            );
          }

          var fields = new Map();

          if (node.fields) {
            node.fields.forEach(function(fieldNode) {
              fields.set(fieldNode.name.value, fieldNode.type);
            });
          }

          this._inputFields.set(type, fields);
        };

        _proto5._parseDirective = function _parseDirective(node, isClient) {
          var name = node.name.value;

          this._directives.set(name, {
            name: name,
            args: node.arguments
              ? node.arguments.map(function(arg) {
                  return {
                    name: arg.name.value,
                    typeNode: arg.type,
                    defaultValue: arg.defaultValue
                  };
                })
              : [],
            locations: node.locations.map(function(location) {
              switch (location.value) {
                case "QUERY":
                case "MUTATION":
                case "SUBSCRIPTION":
                case "FIELD":
                case "FRAGMENT_DEFINITION":
                case "FRAGMENT_SPREAD":
                case "INLINE_FRAGMENT":
                case "VARIABLE_DEFINITION":
                case "SCHEMA":
                case "SCALAR":
                case "OBJECT":
                case "FIELD_DEFINITION":
                case "ARGUMENT_DEFINITION":
                case "INTERFACE":
                case "UNION":
                case "ENUM":
                case "ENUM_VALUE":
                case "INPUT_OBJECT":
                case "INPUT_FIELD_DEFINITION":
                  return location.value;

                default:
                  throw createCompilerError("Invalid directive location");
              }
            }),
            isClient: isClient
          });
        };

        _proto5._parseObjectTypeExtension = function _parseObjectTypeExtension(
          node
        ) {
          var type = this._types.get(node.name.value);

          if (!(type instanceof ObjectType)) {
            throw createCompilerError(
              "_parseObjectTypeExtension: Expected to find type with the name '".concat(
                node.name.value,
                "'"
              ),
              null,
              [node]
            );
          }

          node.fields &&
            this._handleTypeFields(
              type,
              node.fields,
              true
              /** client fields */
            );
        };

        _proto5._parseInterfaceTypeExtension = function _parseInterfaceTypeExtension(
          node
        ) {
          var type = this._types.get(node.name.value);

          if (!(type instanceof InterfaceType)) {
            throw createCompilerError(
              "_parseInterfaceTypeExtension: Expected to have an interface type"
            );
          }

          node.fields && this._handleTypeFields(type, node.fields, true);
        };

        _proto5._extend = function _extend(extensions) {
          var _this9 = this;

          extensions.forEach(function(definition) {
            if (definition.kind === "ObjectTypeDefinition") {
              _this9._parseObjectTypeNode(definition, true);
            } else if (definition.kind === "InterfaceTypeDefinition") {
              _this9._parseInterfaceNode(definition, true);
            } else if (definition.kind === "ScalarTypeDefinition") {
              _this9._parseScalarNode(definition, true);
            } else if (definition.kind === "EnumTypeDefinition") {
              _this9._parseEnumNode(definition, true);
            } else if (definition.kind === "InterfaceTypeExtension") {
              _this9._parseInterfaceTypeExtension(definition);
            } else if (definition.kind === "ObjectTypeExtension") {
              _this9._parseObjectTypeExtension(definition);
            } else if (definition.kind === "DirectiveDefinition") {
              _this9._parseDirective(
                definition,
                true
                /* client directive */
              );
            } else {
              throw createCompilerError(
                "Unexpected extension kind: '".concat(definition.kind, "'"),
                null,
                [definition]
              );
            }
          });
        };

        _proto5.getTypes = function getTypes() {
          return Array.from(this._types.values());
        };

        _proto5.getTypeByName = function getTypeByName(typename) {
          return this._types.get(typename);
        };

        _proto5.getInterfaces = function getInterfaces(type) {
          var _this$_typeInterfaces;

          return (_this$_typeInterfaces = this._typeInterfaces.get(type)) !==
            null && _this$_typeInterfaces !== void 0
            ? _this$_typeInterfaces
            : [];
        };

        _proto5.getPossibleTypeSet = function getPossibleTypeSet(type) {
          var set;

          if (type instanceof InterfaceType) {
            var _this$_interfaceImple2;

            set =
              (_this$_interfaceImple2 = this._interfaceImplementations.get(
                type
              )) !== null && _this$_interfaceImple2 !== void 0
                ? _this$_interfaceImple2
                : new Set();
          } else if (type instanceof UnionType) {
            var _this$_unionTypes$get;

            set =
              (_this$_unionTypes$get = this._unionTypes.get(type)) !== null &&
              _this$_unionTypes$get !== void 0
                ? _this$_unionTypes$get
                : new Set();
          } else {
            throw createCompilerError(
              'Invalid type supplied to "getPossibleTypeSet"'
            );
          }

          if (!set) {
            throw createCompilerError(
              "Unable to find possible types for ".concat(type.name)
            );
          }

          return set;
        };

        _proto5.getFetchableFieldName = function getFetchableFieldName(type) {
          var _this$_fetchable$get$, _this$_fetchable$get;

          return (_this$_fetchable$get$ =
            (_this$_fetchable$get = this._fetchable.get(type)) === null ||
            _this$_fetchable$get === void 0
              ? void 0
              : _this$_fetchable$get.field_name) !== null &&
            _this$_fetchable$get$ !== void 0
            ? _this$_fetchable$get$
            : null;
        };

        _proto5.getQueryType = function getQueryType() {
          return this._types.get(this._queryTypeName);
        };

        _proto5.getMutationType = function getMutationType() {
          return this._types.get(this._mutationTypeName);
        };

        _proto5.getSubscriptionType = function getSubscriptionType() {
          return this._types.get(this._subscriptionTypeName);
        };

        _proto5.getField = function getField(type, fieldName) {
          var fields = this._fields.get(type);

          if (fields) {
            return fields.get(fieldName);
          }
        };

        _proto5.getFieldMap = function getFieldMap(type) {
          return this._fields.get(type);
        };

        _proto5.getInputField = function getInputField(type, fieldName) {
          var inputFields = this._inputFields.get(type);

          if (inputFields) {
            return inputFields.get(fieldName);
          }
        };

        _proto5.getInputFieldMap = function getInputFieldMap(type) {
          return this._inputFields.get(type);
        };

        _proto5.getDirectives = function getDirectives() {
          return Array.from(this._directives.values());
        };

        _proto5.extend = function extend(extensions) {
          return new TypeMap(this._source, this._extensions.concat(extensions));
        };

        return TypeMap;
      })();

      function create(baseSchema, schemaExtensionDocuments, schemaExtensions) {
        var extensions = [];
        schemaExtensions &&
          schemaExtensions.forEach(function(source) {
            var doc = parse(source, {
              noLocation: true
            });
            doc.definitions.forEach(function(definition) {
              if (isSchemaDefinitionAST(definition)) {
                extensions.push(definition);
              }
            });
          });
        schemaExtensionDocuments &&
          schemaExtensionDocuments.forEach(function(doc) {
            doc.definitions.forEach(function(definition) {
              if (isSchemaDefinitionAST(definition)) {
                extensions.push(definition);
              }
            });
          });
        return new Schema(new TypeMap(baseSchema, extensions));
      }

      function parseInputArgumentDefinitions(schema, args) {
        return args.map(function(arg) {
          var argType = schema.assertInputType(
            schema.expectTypeFromAST(arg.typeNode)
          );
          var defaultValue;
          var defaultValueNode = arg.defaultValue;

          if (defaultValueNode != null) {
            var nullableType = schema.getNullableType(argType);
            var isNullable = schema.isNonNull(argType) === false;

            if (isNullable && defaultValueNode.kind === "NullValue") {
              defaultValue = null;
            } else {
              if (
                nullableType instanceof ScalarType ||
                nullableType instanceof EnumType
              ) {
                defaultValue = schema.parseLiteral(
                  nullableType,
                  defaultValueNode
                );
              } else if (
                (nullableType instanceof List &&
                  defaultValueNode.kind === "ListValue") ||
                (nullableType instanceof InputObjectType &&
                  defaultValueNode.kind === "ObjectValue")
              ) {
                defaultValue = valueFromASTUntyped(defaultValueNode);
              }
            }

            if (defaultValue === undefined) {
              throw createCompilerError(
                "parseInputArgumentDefinitions: Unexpected default value: "
                  .concat(
                    String(defaultValueNode),
                    ". Expected to have a value of type "
                  )
                  .concat(String(nullableType), ".")
              );
            }
          }

          return {
            name: arg.name,
            type: argType,
            defaultValue: defaultValue
          };
        });
      }

      function parseInputArgumentDefinitionsMap(schema, args) {
        return new Map(
          parseInputArgumentDefinitions(schema, args).map(function(arg) {
            return [arg.name, arg];
          })
        );
      }

      function isDefaultScalar(name) {
        return new Set(["ID", "String", "Boolean", "Int", "Float"]).has(name);
      }

      module.exports = {
        create: create
      };

      /***/
    },

    /***/ IatC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = keyValMap;

      /**
       * Creates a keyed JS object from an array, given a function to produce the keys
       * and a function to produce the values from each item in the array.
       *
       *     const phoneBook = [
       *       { name: 'Jon', num: '555-1234' },
       *       { name: 'Jenny', num: '867-5309' }
       *     ]
       *
       *     // { Jon: '555-1234', Jenny: '867-5309' }
       *     const phonesByName = keyValMap(
       *       phoneBook,
       *       entry => entry.name,
       *       entry => entry.num
       *     )
       *
       */
      function keyValMap(list, keyFn, valFn) {
        return list.reduce(function(map, item) {
          map[keyFn(item)] = valFn(item);
          return map;
        }, Object.create(null));
      }

      /***/
    },

    /***/ IdCN: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var fnToStr = Function.prototype.toString;
      var reflectApply =
        typeof Reflect === "object" && Reflect !== null && Reflect.apply;
      var badArrayLike;
      var isCallableMarker;
      if (
        typeof reflectApply === "function" &&
        typeof Object.defineProperty === "function"
      ) {
        try {
          badArrayLike = Object.defineProperty({}, "length", {
            get: function() {
              throw isCallableMarker;
            }
          });
          isCallableMarker = {};
        } catch (_) {
          reflectApply = null;
        }
      } else {
        reflectApply = null;
      }

      var constructorRegex = /^\s*class\b/;
      var isES6ClassFn = function isES6ClassFunction(value) {
        try {
          var fnStr = fnToStr.call(value);
          return constructorRegex.test(fnStr);
        } catch (e) {
          return false; // not a function
        }
      };

      var tryFunctionObject = function tryFunctionToStr(value) {
        try {
          if (isES6ClassFn(value)) {
            return false;
          }
          fnToStr.call(value);
          return true;
        } catch (e) {
          return false;
        }
      };
      var toStr = Object.prototype.toString;
      var fnClass = "[object Function]";
      var genClass = "[object GeneratorFunction]";
      var hasToStringTag =
        typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";

      module.exports = reflectApply
        ? function isCallable(value) {
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (typeof value === "function" && !value.prototype) {
              return true;
            }
            try {
              reflectApply(value, null, badArrayLike);
            } catch (e) {
              if (e !== isCallableMarker) {
                return false;
              }
            }
            return !isES6ClassFn(value);
          }
        : function isCallable(value) {
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (typeof value === "function" && !value.prototype) {
              return true;
            }
            if (hasToStringTag) {
              return tryFunctionObject(value);
            }
            if (isES6ClassFn(value)) {
              return false;
            }
            var strClass = toStr.call(value);
            return strClass === fnClass || strClass === genClass;
          };

      /***/
    },

    /***/ Ijbi: /***/ function(module, exports, __webpack_require__) {
      var arrayLikeToArray = __webpack_require__("WkPL");

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return arrayLikeToArray(arr);
      }

      module.exports = _arrayWithoutHoles;

      /***/
    },

    /***/ J5Ui: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.KnownFragmentNamesRule = KnownFragmentNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Known fragment names
       *
       * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
       * to fragments defined in the same document.
       */
      function KnownFragmentNamesRule(context) {
        return {
          FragmentSpread: function FragmentSpread(node) {
            var fragmentName = node.name.value;
            var fragment = context.getFragment(fragmentName);

            if (!fragment) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Unknown fragment "'.concat(fragmentName, '".'),
                  node.name
                )
              );
            }
          }
        };
      }

      /***/
    },

    /***/ JI1D: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /*!
       * map-cache <https://github.com/jonschlinkert/map-cache>
       *
       * Copyright (c) 2015, Jon Schlinkert.
       * Licensed under the MIT License.
       */

      var hasOwn = Object.prototype.hasOwnProperty;

      /**
       * Expose `MapCache`
       */

      module.exports = MapCache;

      /**
       * Creates a cache object to store key/value pairs.
       *
       * ```js
       * var cache = new MapCache();
       * ```
       *
       * @api public
       */

      function MapCache(data) {
        this.__data__ = data || {};
      }

      /**
       * Adds `value` to `key` on the cache.
       *
       * ```js
       * cache.set('foo', 'bar');
       * ```
       *
       * @param {String} `key` The key of the value to cache.
       * @param {*} `value` The value to cache.
       * @returns {Object} Returns the `Cache` object for chaining.
       * @api public
       */

      MapCache.prototype.set = function mapSet(key, value) {
        if (key !== "__proto__") {
          this.__data__[key] = value;
        }
        return this;
      };

      /**
       * Gets the cached value for `key`.
       *
       * ```js
       * cache.get('foo');
       * //=> 'bar'
       * ```
       *
       * @param {String} `key` The key of the value to get.
       * @returns {*} Returns the cached value.
       * @api public
       */

      MapCache.prototype.get = function mapGet(key) {
        return key === "__proto__" ? undefined : this.__data__[key];
      };

      /**
       * Checks if a cached value for `key` exists.
       *
       * ```js
       * cache.has('foo');
       * //=> true
       * ```
       *
       * @param {String} `key` The key of the entry to check.
       * @returns {Boolean} Returns `true` if an entry for `key` exists, else `false`.
       * @api public
       */

      MapCache.prototype.has = function mapHas(key) {
        return key !== "__proto__" && hasOwn.call(this.__data__, key);
      };

      /**
       * Removes `key` and its value from the cache.
       *
       * ```js
       * cache.del('foo');
       * ```
       * @title .del
       * @param {String} `key` The key of the value to remove.
       * @returns {Boolean} Returns `true` if the entry was removed successfully, else `false`.
       * @api public
       */

      MapCache.prototype.del = function mapDelete(key) {
        return this.has(key) && delete this.__data__[key];
      };

      /***/
    },

    /***/ JIc4: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isIntrospectionType = isIntrospectionType;
      exports.introspectionTypes = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = void 0;

      var _objectValues = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _printer = __webpack_require__("gCJq");

      var _directiveLocation = __webpack_require__("R1IW");

      var _astFromValue = __webpack_require__("bi9y");

      var _scalars = __webpack_require__("0N00");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      var __Schema = new _definition.GraphQLObjectType({
        name: "__Schema",
        description:
          "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
        fields: function fields() {
          return {
            description: {
              type: _scalars.GraphQLString,
              resolve: function resolve(schema) {
                return schema.description;
              }
            },
            types: {
              description: "A list of all types supported by this server.",
              type: new _definition.GraphQLNonNull(
                new _definition.GraphQLList(
                  new _definition.GraphQLNonNull(__Type)
                )
              ),
              resolve: function resolve(schema) {
                return (0, _objectValues.default)(schema.getTypeMap());
              }
            },
            queryType: {
              description: "The type that query operations will be rooted at.",
              type: new _definition.GraphQLNonNull(__Type),
              resolve: function resolve(schema) {
                return schema.getQueryType();
              }
            },
            mutationType: {
              description:
                "If this server supports mutation, the type that mutation operations will be rooted at.",
              type: __Type,
              resolve: function resolve(schema) {
                return schema.getMutationType();
              }
            },
            subscriptionType: {
              description:
                "If this server support subscription, the type that subscription operations will be rooted at.",
              type: __Type,
              resolve: function resolve(schema) {
                return schema.getSubscriptionType();
              }
            },
            directives: {
              description: "A list of all directives supported by this server.",
              type: new _definition.GraphQLNonNull(
                new _definition.GraphQLList(
                  new _definition.GraphQLNonNull(__Directive)
                )
              ),
              resolve: function resolve(schema) {
                return schema.getDirectives();
              }
            }
          };
        }
      });

      exports.__Schema = __Schema;

      var __Directive = new _definition.GraphQLObjectType({
        name: "__Directive",
        description:
          "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
        fields: function fields() {
          return {
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: function resolve(directive) {
                return directive.name;
              }
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: function resolve(directive) {
                return directive.description;
              }
            },
            isRepeatable: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: function resolve(directive) {
                return directive.isRepeatable;
              }
            },
            locations: {
              type: new _definition.GraphQLNonNull(
                new _definition.GraphQLList(
                  new _definition.GraphQLNonNull(__DirectiveLocation)
                )
              ),
              resolve: function resolve(directive) {
                return directive.locations;
              }
            },
            args: {
              type: new _definition.GraphQLNonNull(
                new _definition.GraphQLList(
                  new _definition.GraphQLNonNull(__InputValue)
                )
              ),
              resolve: function resolve(directive) {
                return directive.args;
              }
            }
          };
        }
      });

      exports.__Directive = __Directive;

      var __DirectiveLocation = new _definition.GraphQLEnumType({
        name: "__DirectiveLocation",
        description:
          "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
        values: {
          QUERY: {
            value: _directiveLocation.DirectiveLocation.QUERY,
            description: "Location adjacent to a query operation."
          },
          MUTATION: {
            value: _directiveLocation.DirectiveLocation.MUTATION,
            description: "Location adjacent to a mutation operation."
          },
          SUBSCRIPTION: {
            value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
            description: "Location adjacent to a subscription operation."
          },
          FIELD: {
            value: _directiveLocation.DirectiveLocation.FIELD,
            description: "Location adjacent to a field."
          },
          FRAGMENT_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
            description: "Location adjacent to a fragment definition."
          },
          FRAGMENT_SPREAD: {
            value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
            description: "Location adjacent to a fragment spread."
          },
          INLINE_FRAGMENT: {
            value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
            description: "Location adjacent to an inline fragment."
          },
          VARIABLE_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
            description: "Location adjacent to a variable definition."
          },
          SCHEMA: {
            value: _directiveLocation.DirectiveLocation.SCHEMA,
            description: "Location adjacent to a schema definition."
          },
          SCALAR: {
            value: _directiveLocation.DirectiveLocation.SCALAR,
            description: "Location adjacent to a scalar definition."
          },
          OBJECT: {
            value: _directiveLocation.DirectiveLocation.OBJECT,
            description: "Location adjacent to an object type definition."
          },
          FIELD_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
            description: "Location adjacent to a field definition."
          },
          ARGUMENT_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
            description: "Location adjacent to an argument definition."
          },
          INTERFACE: {
            value: _directiveLocation.DirectiveLocation.INTERFACE,
            description: "Location adjacent to an interface definition."
          },
          UNION: {
            value: _directiveLocation.DirectiveLocation.UNION,
            description: "Location adjacent to a union definition."
          },
          ENUM: {
            value: _directiveLocation.DirectiveLocation.ENUM,
            description: "Location adjacent to an enum definition."
          },
          ENUM_VALUE: {
            value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
            description: "Location adjacent to an enum value definition."
          },
          INPUT_OBJECT: {
            value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
            description: "Location adjacent to an input object type definition."
          },
          INPUT_FIELD_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
            description:
              "Location adjacent to an input object field definition."
          }
        }
      });

      exports.__DirectiveLocation = __DirectiveLocation;

      var __Type = new _definition.GraphQLObjectType({
        name: "__Type",
        description:
          "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
        fields: function fields() {
          return {
            kind: {
              type: new _definition.GraphQLNonNull(__TypeKind),
              resolve: function resolve(type) {
                if ((0, _definition.isScalarType)(type)) {
                  return TypeKind.SCALAR;
                }

                if ((0, _definition.isObjectType)(type)) {
                  return TypeKind.OBJECT;
                }

                if ((0, _definition.isInterfaceType)(type)) {
                  return TypeKind.INTERFACE;
                }

                if ((0, _definition.isUnionType)(type)) {
                  return TypeKind.UNION;
                }

                if ((0, _definition.isEnumType)(type)) {
                  return TypeKind.ENUM;
                }

                if ((0, _definition.isInputObjectType)(type)) {
                  return TypeKind.INPUT_OBJECT;
                }

                if ((0, _definition.isListType)(type)) {
                  return TypeKind.LIST;
                } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

                if ((0, _definition.isNonNullType)(type)) {
                  return TypeKind.NON_NULL;
                } // istanbul ignore next (Not reachable. All possible types have been considered)

                false ||
                  (0, _invariant.default)(
                    0,
                    'Unexpected type: "'.concat(
                      (0, _inspect.default)(type),
                      '".'
                    )
                  );
              }
            },
            name: {
              type: _scalars.GraphQLString,
              resolve: function resolve(type) {
                return type.name !== undefined ? type.name : undefined;
              }
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: function resolve(type) {
                return type.description !== undefined
                  ? type.description
                  : undefined;
              }
            },
            specifiedByUrl: {
              type: _scalars.GraphQLString,
              resolve: function resolve(obj) {
                return obj.specifiedByUrl !== undefined
                  ? obj.specifiedByUrl
                  : undefined;
              }
            },
            fields: {
              type: new _definition.GraphQLList(
                new _definition.GraphQLNonNull(__Field)
              ),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve: function resolve(type, _ref) {
                var includeDeprecated = _ref.includeDeprecated;

                if (
                  (0, _definition.isObjectType)(type) ||
                  (0, _definition.isInterfaceType)(type)
                ) {
                  var fields = (0, _objectValues.default)(type.getFields());
                  return includeDeprecated
                    ? fields
                    : fields.filter(function(field) {
                        return field.deprecationReason == null;
                      });
                }
              }
            },
            interfaces: {
              type: new _definition.GraphQLList(
                new _definition.GraphQLNonNull(__Type)
              ),
              resolve: function resolve(type) {
                if (
                  (0, _definition.isObjectType)(type) ||
                  (0, _definition.isInterfaceType)(type)
                ) {
                  return type.getInterfaces();
                }
              }
            },
            possibleTypes: {
              type: new _definition.GraphQLList(
                new _definition.GraphQLNonNull(__Type)
              ),
              resolve: function resolve(type, _args, _context, _ref2) {
                var schema = _ref2.schema;

                if ((0, _definition.isAbstractType)(type)) {
                  return schema.getPossibleTypes(type);
                }
              }
            },
            enumValues: {
              type: new _definition.GraphQLList(
                new _definition.GraphQLNonNull(__EnumValue)
              ),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve: function resolve(type, _ref3) {
                var includeDeprecated = _ref3.includeDeprecated;

                if ((0, _definition.isEnumType)(type)) {
                  var values = type.getValues();
                  return includeDeprecated
                    ? values
                    : values.filter(function(field) {
                        return field.deprecationReason == null;
                      });
                }
              }
            },
            inputFields: {
              type: new _definition.GraphQLList(
                new _definition.GraphQLNonNull(__InputValue)
              ),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve: function resolve(type, _ref4) {
                var includeDeprecated = _ref4.includeDeprecated;

                if ((0, _definition.isInputObjectType)(type)) {
                  var values = (0, _objectValues.default)(type.getFields());
                  return includeDeprecated
                    ? values
                    : values.filter(function(field) {
                        return field.deprecationReason == null;
                      });
                }
              }
            },
            ofType: {
              type: __Type,
              resolve: function resolve(type) {
                return type.ofType !== undefined ? type.ofType : undefined;
              }
            }
          };
        }
      });

      exports.__Type = __Type;

      var __Field = new _definition.GraphQLObjectType({
        name: "__Field",
        description:
          "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
        fields: function fields() {
          return {
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: function resolve(field) {
                return field.name;
              }
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: function resolve(field) {
                return field.description;
              }
            },
            args: {
              type: new _definition.GraphQLNonNull(
                new _definition.GraphQLList(
                  new _definition.GraphQLNonNull(__InputValue)
                )
              ),
              args: {
                includeDeprecated: {
                  type: _scalars.GraphQLBoolean,
                  defaultValue: false
                }
              },
              resolve: function resolve(field, _ref5) {
                var includeDeprecated = _ref5.includeDeprecated;
                return includeDeprecated
                  ? field.args
                  : field.args.filter(function(arg) {
                      return arg.deprecationReason == null;
                    });
              }
            },
            type: {
              type: new _definition.GraphQLNonNull(__Type),
              resolve: function resolve(field) {
                return field.type;
              }
            },
            isDeprecated: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: function resolve(field) {
                return field.deprecationReason != null;
              }
            },
            deprecationReason: {
              type: _scalars.GraphQLString,
              resolve: function resolve(field) {
                return field.deprecationReason;
              }
            }
          };
        }
      });

      exports.__Field = __Field;

      var __InputValue = new _definition.GraphQLObjectType({
        name: "__InputValue",
        description:
          "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
        fields: function fields() {
          return {
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: function resolve(inputValue) {
                return inputValue.name;
              }
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: function resolve(inputValue) {
                return inputValue.description;
              }
            },
            type: {
              type: new _definition.GraphQLNonNull(__Type),
              resolve: function resolve(inputValue) {
                return inputValue.type;
              }
            },
            defaultValue: {
              type: _scalars.GraphQLString,
              description:
                "A GraphQL-formatted string representing the default value for this input value.",
              resolve: function resolve(inputValue) {
                var type = inputValue.type,
                  defaultValue = inputValue.defaultValue;
                var valueAST = (0, _astFromValue.astFromValue)(
                  defaultValue,
                  type
                );
                return valueAST ? (0, _printer.print)(valueAST) : null;
              }
            },
            isDeprecated: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: function resolve(field) {
                return field.deprecationReason != null;
              }
            },
            deprecationReason: {
              type: _scalars.GraphQLString,
              resolve: function resolve(obj) {
                return obj.deprecationReason;
              }
            }
          };
        }
      });

      exports.__InputValue = __InputValue;

      var __EnumValue = new _definition.GraphQLObjectType({
        name: "__EnumValue",
        description:
          "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
        fields: function fields() {
          return {
            name: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
              resolve: function resolve(enumValue) {
                return enumValue.name;
              }
            },
            description: {
              type: _scalars.GraphQLString,
              resolve: function resolve(enumValue) {
                return enumValue.description;
              }
            },
            isDeprecated: {
              type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
              resolve: function resolve(enumValue) {
                return enumValue.deprecationReason != null;
              }
            },
            deprecationReason: {
              type: _scalars.GraphQLString,
              resolve: function resolve(enumValue) {
                return enumValue.deprecationReason;
              }
            }
          };
        }
      });

      exports.__EnumValue = __EnumValue;
      var TypeKind = Object.freeze({
        SCALAR: "SCALAR",
        OBJECT: "OBJECT",
        INTERFACE: "INTERFACE",
        UNION: "UNION",
        ENUM: "ENUM",
        INPUT_OBJECT: "INPUT_OBJECT",
        LIST: "LIST",
        NON_NULL: "NON_NULL"
      });
      exports.TypeKind = TypeKind;

      var __TypeKind = new _definition.GraphQLEnumType({
        name: "__TypeKind",
        description:
          "An enum describing what kind of type a given `__Type` is.",
        values: {
          SCALAR: {
            value: TypeKind.SCALAR,
            description: "Indicates this type is a scalar."
          },
          OBJECT: {
            value: TypeKind.OBJECT,
            description:
              "Indicates this type is an object. `fields` and `interfaces` are valid fields."
          },
          INTERFACE: {
            value: TypeKind.INTERFACE,
            description:
              "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
          },
          UNION: {
            value: TypeKind.UNION,
            description:
              "Indicates this type is a union. `possibleTypes` is a valid field."
          },
          ENUM: {
            value: TypeKind.ENUM,
            description:
              "Indicates this type is an enum. `enumValues` is a valid field."
          },
          INPUT_OBJECT: {
            value: TypeKind.INPUT_OBJECT,
            description:
              "Indicates this type is an input object. `inputFields` is a valid field."
          },
          LIST: {
            value: TypeKind.LIST,
            description:
              "Indicates this type is a list. `ofType` is a valid field."
          },
          NON_NULL: {
            value: TypeKind.NON_NULL,
            description:
              "Indicates this type is a non-null. `ofType` is a valid field."
          }
        }
      });
      /**
       * Note that these are GraphQLField and not GraphQLFieldConfig,
       * so the format for args is different.
       */

      exports.__TypeKind = __TypeKind;
      var SchemaMetaFieldDef = {
        name: "__schema",
        type: new _definition.GraphQLNonNull(__Schema),
        description: "Access the current type schema of this server.",
        args: [],
        resolve: function resolve(_source, _args, _context, _ref6) {
          var schema = _ref6.schema;
          return schema;
        },
        isDeprecated: false,
        deprecationReason: undefined,
        extensions: undefined,
        astNode: undefined
      };
      exports.SchemaMetaFieldDef = SchemaMetaFieldDef;
      var TypeMetaFieldDef = {
        name: "__type",
        type: __Type,
        description: "Request the type information of a single type.",
        args: [
          {
            name: "name",
            description: undefined,
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            defaultValue: undefined,
            deprecationReason: undefined,
            extensions: undefined,
            astNode: undefined
          }
        ],
        resolve: function resolve(_source, _ref7, _context, _ref8) {
          var name = _ref7.name;
          var schema = _ref8.schema;
          return schema.getType(name);
        },
        isDeprecated: false,
        deprecationReason: undefined,
        extensions: undefined,
        astNode: undefined
      };
      exports.TypeMetaFieldDef = TypeMetaFieldDef;
      var TypeNameMetaFieldDef = {
        name: "__typename",
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        description: "The name of the current Object type at runtime.",
        args: [],
        resolve: function resolve(_source, _args, _context, _ref9) {
          var parentType = _ref9.parentType;
          return parentType.name;
        },
        isDeprecated: false,
        deprecationReason: undefined,
        extensions: undefined,
        astNode: undefined
      };
      exports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
      var introspectionTypes = Object.freeze([
        __Schema,
        __Directive,
        __DirectiveLocation,
        __Type,
        __Field,
        __InputValue,
        __EnumValue,
        __TypeKind
      ]);
      exports.introspectionTypes = introspectionTypes;

      function isIntrospectionType(type) {
        return introspectionTypes.some(function(_ref10) {
          var name = _ref10.name;
          return type.name === name;
        });
      }

      /***/
    },

    /***/ JqXL: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var path = __webpack_require__("oyvS");
      var isAbsolute = __webpack_require__("3Tnt");
      var pathRoot = __webpack_require__("Z4WY");
      var MapCache = __webpack_require__("JI1D");
      var cache = new MapCache();

      module.exports = function(filepath) {
        if (typeof filepath !== "string") {
          throw new TypeError("parse-filepath expects a string");
        }

        if (cache.has(filepath)) {
          return cache.get(filepath);
        }

        var obj = {};
        if (typeof path.parse === "function") {
          obj = path.parse(filepath);
          obj.extname = obj.ext;
          obj.basename = obj.base;
          obj.dirname = obj.dir;
          obj.stem = obj.name;
        } else {
          define(obj, "root", function() {
            return pathRoot(this.path);
          });

          define(obj, "extname", function() {
            return path.extname(filepath);
          });

          define(obj, "ext", function() {
            return this.extname;
          });

          define(obj, "name", function() {
            return path.basename(filepath, this.ext);
          });

          define(obj, "stem", function() {
            return this.name;
          });

          define(obj, "base", function() {
            return this.name + this.ext;
          });

          define(obj, "basename", function() {
            return this.base;
          });

          define(obj, "dir", function() {
            var dir = path.dirname(filepath);
            if (dir === ".") {
              return filepath[0] === "." ? dir : "";
            } else {
              return dir;
            }
          });

          define(obj, "dirname", function() {
            return this.dir;
          });
        }

        obj.path = filepath;

        define(obj, "absolute", function() {
          return path.resolve(this.path);
        });

        define(obj, "isAbsolute", function() {
          return isAbsolute(this.path);
        });

        cache.set(filepath, obj);
        return obj;
      };

      function define(obj, prop, fn) {
        var cached;
        Object.defineProperty(obj, prop, {
          configurable: true,
          enumerable: true,
          set: function(val) {
            cached = val;
          },
          get: function() {
            return cached || (cached = fn.call(obj));
          }
        });
      }

      /***/
    },

    /***/ Jv8X: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.subscribe = subscribe;
      exports.createSourceEventStream = createSourceEventStream;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _isAsyncIterable = _interopRequireDefault(
        __webpack_require__("LRj1")
      );

      var _Path = __webpack_require__("Z7K8");

      var _GraphQLError = __webpack_require__("MafX");

      var _locatedError = __webpack_require__("dPEW");

      var _values = __webpack_require__("aQB7");

      var _execute = __webpack_require__("TcFd");

      var _getOperationRootType = __webpack_require__("58fJ");

      var _mapAsyncIterator = _interopRequireDefault(
        __webpack_require__("k8TY")
      );

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function subscribe(
        argsOrSchema,
        document,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        subscribeFieldResolver
      ) {
        /* eslint-enable no-redeclare */
        // Extract arguments from object args if provided.
        return arguments.length === 1
          ? subscribeImpl(argsOrSchema)
          : subscribeImpl({
              schema: argsOrSchema,
              document: document,
              rootValue: rootValue,
              contextValue: contextValue,
              variableValues: variableValues,
              operationName: operationName,
              fieldResolver: fieldResolver,
              subscribeFieldResolver: subscribeFieldResolver
            });
      }
      /**
       * This function checks if the error is a GraphQLError. If it is, report it as
       * an ExecutionResult, containing only errors and no data. Otherwise treat the
       * error as a system-class error and re-throw it.
       */

      function reportGraphQLError(error) {
        if (error instanceof _GraphQLError.GraphQLError) {
          return {
            errors: [error]
          };
        }

        throw error;
      }

      function subscribeImpl(args) {
        var schema = args.schema,
          document = args.document,
          rootValue = args.rootValue,
          contextValue = args.contextValue,
          variableValues = args.variableValues,
          operationName = args.operationName,
          fieldResolver = args.fieldResolver,
          subscribeFieldResolver = args.subscribeFieldResolver;
        var sourcePromise = createSourceEventStream(
          schema,
          document,
          rootValue,
          contextValue,
          variableValues,
          operationName,
          subscribeFieldResolver
        ); // For each payload yielded from a subscription, map it over the normal
        // GraphQL `execute` function, with `payload` as the rootValue.
        // This implements the "MapSourceToResponseEvent" algorithm described in
        // the GraphQL specification. The `execute` function provides the
        // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
        // "ExecuteQuery" algorithm, for which `execute` is also used.

        var mapSourceToResponse = function mapSourceToResponse(payload) {
          return (0, _execute.execute)({
            schema: schema,
            document: document,
            rootValue: payload,
            contextValue: contextValue,
            variableValues: variableValues,
            operationName: operationName,
            fieldResolver: fieldResolver
          });
        }; // Resolve the Source Stream, then map every source value to a
        // ExecutionResult value as described above.

        return sourcePromise.then(function(resultOrStream) {
          return (
            // Note: Flow can't refine isAsyncIterable, so explicit casts are used.
            (0, _isAsyncIterable.default)(resultOrStream)
              ? (0, _mapAsyncIterator.default)(
                  resultOrStream,
                  mapSourceToResponse,
                  reportGraphQLError
                )
              : resultOrStream
          );
        });
      }
      /**
       * Implements the "CreateSourceEventStream" algorithm described in the
       * GraphQL specification, resolving the subscription source event stream.
       *
       * Returns a Promise which resolves to either an AsyncIterable (if successful)
       * or an ExecutionResult (error). The promise will be rejected if the schema or
       * other arguments to this function are invalid, or if the resolved event stream
       * is not an async iterable.
       *
       * If the client-provided arguments to this function do not result in a
       * compliant subscription, a GraphQL Response (ExecutionResult) with
       * descriptive errors and no data will be returned.
       *
       * If the the source stream could not be created due to faulty subscription
       * resolver logic or underlying systems, the promise will resolve to a single
       * ExecutionResult containing `errors` and no `data`.
       *
       * If the operation succeeded, the promise resolves to the AsyncIterable for the
       * event stream returned by the resolver.
       *
       * A Source Event Stream represents a sequence of events, each of which triggers
       * a GraphQL execution for that event.
       *
       * This may be useful when hosting the stateful subscription service in a
       * different process or machine than the stateless GraphQL execution engine,
       * or otherwise separating these two steps. For more on this, see the
       * "Supporting Subscriptions at Scale" information in the GraphQL specification.
       */

      function createSourceEventStream(
        schema,
        document,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver
      ) {
        // If arguments are missing or incorrectly typed, this is an internal
        // developer mistake which should throw an early error.
        (0, _execute.assertValidExecutionArguments)(
          schema,
          document,
          variableValues
        );
        return new Promise(function(resolve) {
          // If a valid context cannot be created due to incorrect arguments,
          // this will throw an error.
          var exeContext = (0, _execute.buildExecutionContext)(
            schema,
            document,
            rootValue,
            contextValue,
            variableValues,
            operationName,
            fieldResolver
          );
          resolve(
            // Return early errors if execution context failed.
            Array.isArray(exeContext)
              ? {
                  errors: exeContext
                }
              : executeSubscription(exeContext)
          );
        }).catch(reportGraphQLError);
      }

      function executeSubscription(exeContext) {
        var schema = exeContext.schema,
          operation = exeContext.operation,
          variableValues = exeContext.variableValues,
          rootValue = exeContext.rootValue;
        var type = (0, _getOperationRootType.getOperationRootType)(
          schema,
          operation
        );
        var fields = (0, _execute.collectFields)(
          exeContext,
          type,
          operation.selectionSet,
          Object.create(null),
          Object.create(null)
        );
        var responseNames = Object.keys(fields);
        var responseName = responseNames[0];
        var fieldNodes = fields[responseName];
        var fieldNode = fieldNodes[0];
        var fieldName = fieldNode.name.value;
        var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);

        if (!fieldDef) {
          throw new _GraphQLError.GraphQLError(
            'The subscription field "'.concat(fieldName, '" is not defined.'),
            fieldNodes
          );
        }

        var path = (0, _Path.addPath)(undefined, responseName, type.name);
        var info = (0, _execute.buildResolveInfo)(
          exeContext,
          fieldDef,
          fieldNodes,
          type,
          path
        ); // Coerce to Promise for easier error handling and consistent return type.

        return new Promise(function(resolveResult) {
          var _fieldDef$subscribe;

          // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
          // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
          // Build a JS object of arguments from the field.arguments AST, using the
          // variables scope to fulfill any variable references.
          var args = (0, _values.getArgumentValues)(
            fieldDef,
            fieldNodes[0],
            variableValues
          ); // The resolve function's optional third argument is a context value that
          // is provided to every resolve function within an execution. It is commonly
          // used to represent an authenticated user, or request-specific caches.

          var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
          // AsyncIterable yielding raw payloads.

          var resolveFn =
            (_fieldDef$subscribe = fieldDef.subscribe) !== null &&
            _fieldDef$subscribe !== void 0
              ? _fieldDef$subscribe
              : exeContext.fieldResolver;
          resolveResult(resolveFn(rootValue, args, contextValue, info));
        }).then(
          function(eventStream) {
            if (eventStream instanceof Error) {
              throw (0, _locatedError.locatedError)(
                eventStream,
                fieldNodes,
                (0, _Path.pathToArray)(path)
              );
            } // Assert field returned an event stream, otherwise yield an error.

            if (!(0, _isAsyncIterable.default)(eventStream)) {
              throw new Error(
                "Subscription field must return Async Iterable. " +
                  "Received: ".concat((0, _inspect.default)(eventStream), ".")
              );
            }

            return eventStream;
          },
          function(error) {
            throw (0, _locatedError.locatedError)(
              error,
              fieldNodes,
              (0, _Path.pathToArray)(path)
            );
          }
        );
      }

      /***/
    },

    /***/ JyDY: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var MAX_SAFE_INTEGER = __webpack_require__("yVdY");

      var ToInteger = __webpack_require__("atWj");

      module.exports = function ToLength(argument) {
        var len = ToInteger(argument);
        if (len <= 0) {
          return 0;
        } // includes converting -0 to +0
        if (len > MAX_SAFE_INTEGER) {
          return MAX_SAFE_INTEGER;
        }
        return len;
      };

      /***/
    },

    /***/ K4mF: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // http://262.ecma-international.org/5.1/#sec-9.11

      module.exports = __webpack_require__("lXvH");

      /***/
    },

    /***/ K73K: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoUnusedVariablesRule = NoUnusedVariablesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * No unused variables
       *
       * A GraphQL operation is only valid if all variables defined by an operation
       * are used, either directly or within a spread fragment.
       */
      function NoUnusedVariablesRule(context) {
        var variableDefs = [];
        return {
          OperationDefinition: {
            enter: function enter() {
              variableDefs = [];
            },
            leave: function leave(operation) {
              var variableNameUsed = Object.create(null);
              var usages = context.getRecursiveVariableUsages(operation);

              for (var _i2 = 0; _i2 < usages.length; _i2++) {
                var _ref2 = usages[_i2];
                var node = _ref2.node;
                variableNameUsed[node.name.value] = true;
              }

              for (
                var _i4 = 0, _variableDefs2 = variableDefs;
                _i4 < _variableDefs2.length;
                _i4++
              ) {
                var variableDef = _variableDefs2[_i4];
                var variableName = variableDef.variable.name.value;

                if (variableNameUsed[variableName] !== true) {
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      operation.name
                        ? 'Variable "$'
                            .concat(
                              variableName,
                              '" is never used in operation "'
                            )
                            .concat(operation.name.value, '".')
                        : 'Variable "$'.concat(
                            variableName,
                            '" is never used.'
                          ),
                      variableDef
                    )
                  );
                }
              }
            }
          },
          VariableDefinition: function VariableDefinition(def) {
            variableDefs.push(def);
          }
        };
      }

      /***/
    },

    /***/ KEI4: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const utils = __webpack_require__("kOHh");
      const pluginHelpers = __webpack_require__("ac+X");
      const graphql = __webpack_require__("uKhV");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const visitorPluginCommon = __webpack_require__("MBzn");
      const flow = __webpack_require__("CPS/");

      const FLOW_REQUIRE_FIELDS_TYPE = `export type $RequireFields<Origin, Keys> = $Diff<Origin, Keys> & $ObjMapi<Keys, <Key>(k: Key) => $NonMaybeType<$ElementType<Origin, Key>>>;`;

      const ENUM_RESOLVERS_SIGNATURE =
        "export type EnumResolverSignature<T, AllowedValues = any> = $ObjMap<T, () => AllowedValues>;";
      class FlowResolversVisitor extends visitorPluginCommon.BaseResolversVisitor {
        constructor(pluginConfig, schema) {
          super(pluginConfig, null, schema);
          autoBind(this);
          this.setVariablesTransformer(
            new flow.FlowOperationVariablesToObject(
              this.scalars,
              this.convertName,
              this.config.namespacedImportName
            )
          );
        }
        _getScalar(name) {
          return `$ElementType<Scalars, '${name}'>`;
        }
        applyRequireFields(argsType, fields) {
          this._globalDeclarations.add(FLOW_REQUIRE_FIELDS_TYPE);
          return `$RequireFields<${argsType}, { ${fields
            .map(f => `${f.name.value}: *`)
            .join(", ")} }>`;
        }
        applyOptionalFields(argsType, _fields) {
          return argsType;
        }
        buildMapperImport(source, types) {
          if (types[0] && types[0].asDefault) {
            return `import type ${types[0].identifier} from '${source}';`;
          }
          return `import { ${types
            .map(t => `type ${t.identifier}`)
            .join(", ")} } from '${source}';`;
        }
        formatRootResolver(schemaTypeName, resolverType, declarationKind) {
          return `${schemaTypeName}?: ${resolverType}${
            resolverType.includes("<") ? "" : "<>"
          }${this.getPunctuation(declarationKind)}`;
        }
        transformParentGenericType(parentType) {
          return `ParentType = ${parentType}`;
        }
        ListType(node) {
          return `?${super.ListType(node)}`;
        }
        NamedType(node) {
          return `?${super.NamedType(node)}`;
        }
        NonNullType(node) {
          const baseValue = super.NonNullType(node);
          if (baseValue.startsWith("?")) {
            return baseValue.substr(1);
          }
          return baseValue;
        }
        applyMaybe(str) {
          return `?${str}`;
        }
        clearMaybe(str) {
          if (str.startsWith("?")) {
            return str.substr(1);
          }
          return str;
        }
        getTypeToUse(name) {
          const resolversType = this.convertName("ResolversTypes");
          return `$ElementType<${resolversType}, '${name}'>`;
        }
        getParentTypeToUse(name) {
          const resolversType = this.convertName("ResolversParentTypes");
          return `$ElementType<${resolversType}, '${name}'>`;
        }
        replaceFieldsInType(typeName, relevantFields) {
          return `$Diff<${typeName}, { ${relevantFields
            .map(f => `${f.fieldName}: * `)
            .join(", ")} }> & { ${relevantFields
            .map(f => `${f.fieldName}: ${f.replaceWithType}`)
            .join(", ")} }`;
        }
        ScalarTypeDefinition(node) {
          const nameAsString = node.name;
          const baseName = this.getTypeToUse(nameAsString);
          this._collectedResolvers[node.name] = "GraphQLScalarType";
          return new visitorPluginCommon.DeclarationBlock({
            ...this._declarationBlockConfig,
            blockTransformer(block) {
              return block;
            }
          })
            .export()
            .asKind("type")
            .withName(
              this.convertName(node, {
                suffix: "ScalarConfig"
              })
            )
            .withBlock(
              [
                visitorPluginCommon.indent(
                  `...GraphQLScalarTypeConfig<${baseName}, any>`
                ),
                visitorPluginCommon.indent(`name: '${node.name}'`)
              ].join(", \n")
            ).string;
        }
        getPunctuation(declarationKind) {
          return declarationKind === "type" ? "," : ";";
        }
        buildEnumResolverContentBlock(node, mappedEnumType) {
          const valuesMap = `{| ${(node.values || [])
            .map(v => `${v.name}${this.config.avoidOptionals ? "" : "?"}: *`)
            .join(", ")} |}`;
          this._globalDeclarations.add(ENUM_RESOLVERS_SIGNATURE);
          return `EnumResolverSignature<${valuesMap}, ${mappedEnumType}>`;
        }
        buildEnumResolversExplicitMappedValues(node, valuesMapping) {
          return `{| ${(node.values || [])
            .map(v => {
              const valueName = v.name;
              const mappedValue = valuesMapping[valueName];
              return `${valueName}: ${
                typeof mappedValue === "number"
                  ? mappedValue
                  : `'${mappedValue}'`
              }`;
            })
            .join(", ")} |}`;
        }
      }

      const plugin = (schema, documents, config) => {
        const imports = ["type GraphQLResolveInfo"];
        const showUnusedMappers =
          typeof config.showUnusedMappers === "boolean"
            ? config.showUnusedMappers
            : true;
        const gqlImports = `import { ${imports.join(", ")} } from 'graphql';`;
        const transformedSchema = config.federation
          ? pluginHelpers.addFederationReferencesToSchema(schema)
          : schema;
        const printedSchema = config.federation
          ? utils.printSchemaWithDirectives(transformedSchema)
          : graphql.printSchema(transformedSchema);
        const astNode = graphql.parse(printedSchema);
        const visitor = new FlowResolversVisitor(config, transformedSchema);
        const visitorResult = graphql.visit(astNode, { leave: visitor });
        const defsToInclude = [visitor.getResolverTypeWrapperSignature()];
        if (visitor.hasFederation()) {
          defsToInclude.push(`
    export type ReferenceResolver<TResult, TReference, TContext> = (
      reference: TReference,
      context: TContext,
      info: GraphQLResolveInfo
    ) => Promise<TResult> | TResult;
    `);
          defsToInclude.push(`export type RecursivePick<T, U> = T`);
        }
        const header = `export type Resolver<Result, Parent = {}, Context = {}, Args = {}> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Promise<Result> | Result;

export type SubscriptionSubscribeFn<Result, Parent, Context, Args> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => AsyncIterator<Result> | Promise<AsyncIterator<Result>>;

export type SubscriptionResolveFn<Result, Parent, Context, Args> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Result | Promise<Result>;

export interface SubscriptionSubscriberObject<Result, Key: string, Parent, Context, Args> {
  subscribe: SubscriptionSubscribeFn<{ [key: Key]: Result }, Parent, Context, Args>;
  resolve?: SubscriptionResolveFn<Result, { [key: Key]: Result }, Context, Args>;
}

export interface SubscriptionResolverObject<Result, Parent, Context, Args> {
  subscribe: SubscriptionSubscribeFn<mixed, Parent, Context, Args>;
  resolve: SubscriptionResolveFn<Result, mixed, Context, Args>;
}

export type SubscriptionObject<Result, Key: string, Parent, Context, Args> =
  | SubscriptionSubscriberObject<Result, Key, Parent, Context, Args>
  | SubscriptionResolverObject<Result, Parent, Context, Args>;

export type SubscriptionResolver<Result, Key: string, Parent = {}, Context = {}, Args = {}> =
  | ((...args: Array<any>) => SubscriptionObject<Result, Key, Parent, Context, Args>)
  | SubscriptionObject<Result, Key, Parent, Context, Args>;

export type TypeResolveFn<Types, Parent = {}, Context = {}> = (
  parent: Parent,
  context: Context,
  info: GraphQLResolveInfo
) => ?Types | Promise<?Types>;

export type IsTypeOfResolverFn<T = {}, Context = {}> = (obj: T, context: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<Result = {}, Parent = {}, Args = {}, Context = {}> = (
  next: NextResolverFn<Result>,
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Result | Promise<Result>;

${defsToInclude.join("\n")}
`;
        const resolversTypeMapping = visitor.buildResolversTypes();
        const resolversParentTypeMapping = visitor.buildResolversParentTypes();
        const {
          getRootResolver,
          getAllDirectiveResolvers,
          mappersImports,
          unusedMappers,
          hasScalars
        } = visitor;
        if (hasScalars()) {
          imports.push("type GraphQLScalarTypeConfig");
        }
        if (showUnusedMappers && unusedMappers.length) {
          // eslint-disable-next-line no-console
          console.warn(`Unused mappers: ${unusedMappers.join(",")}`);
        }
        return {
          prepend: [
            gqlImports,
            ...mappersImports,
            ...visitor.globalDeclarations
          ],
          content: [
            header,
            resolversTypeMapping,
            resolversParentTypeMapping,
            ...visitorResult.definitions.filter(d => typeof d === "string"),
            getRootResolver(),
            getAllDirectiveResolvers()
          ].join("\n")
        };
      };

      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ KPrL: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);

      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          // IE 8 has a broken defineProperty
          $defineProperty = null;
        }
      }

      var callBound = __webpack_require__("VF6F");

      var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");

      // eslint-disable-next-line max-params
      module.exports = function DefineOwnProperty(
        IsDataDescriptor,
        SameValue,
        FromPropertyDescriptor,
        O,
        P,
        desc
      ) {
        if (!$defineProperty) {
          if (!IsDataDescriptor(desc)) {
            // ES3 does not support getters/setters
            return false;
          }
          if (!desc["[[Configurable]]"] || !desc["[[Writable]]"]) {
            return false;
          }

          // fallback for ES3
          if (P in O && $isEnumerable(O, P) !== !!desc["[[Enumerable]]"]) {
            // a non-enumerable existing property
            return false;
          }

          // property does not exist at all, or exists but is enumerable
          var V = desc["[[Value]]"];
          // eslint-disable-next-line no-param-reassign
          O[P] = V; // will use [[Define]]
          return SameValue(O[P], V);
        }
        $defineProperty(O, P, FromPropertyDescriptor(desc));
        return true;
      };

      /***/
    },

    /***/ "L9+1": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isDirective = isDirective;
      exports.assertDirective = assertDirective;
      exports.isSpecifiedDirective = isSpecifiedDirective;
      exports.specifiedDirectives = exports.GraphQLSpecifiedByDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = void 0;

      var _objectEntries = _interopRequireDefault(__webpack_require__("NKuU"));

      var _symbols = __webpack_require__("6CEn");

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _toObjMap = _interopRequireDefault(__webpack_require__("UjIq"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _instanceOf = _interopRequireDefault(__webpack_require__("VwI2"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _defineInspect = _interopRequireDefault(__webpack_require__("wqAJ"));

      var _directiveLocation = __webpack_require__("R1IW");

      var _scalars = __webpack_require__("0N00");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      // eslint-disable-next-line no-redeclare
      function isDirective(directive) {
        return (0, _instanceOf.default)(directive, GraphQLDirective);
      }

      function assertDirective(directive) {
        if (!isDirective(directive)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(directive),
              " to be a GraphQL directive."
            )
          );
        }

        return directive;
      }
      /**
       * Directives are used by the GraphQL runtime as a way of modifying execution
       * behavior. Type system creators will usually not create these directly.
       */

      var GraphQLDirective = /*#__PURE__*/ (function() {
        function GraphQLDirective(config) {
          var _config$isRepeatable, _config$args;

          this.name = config.name;
          this.description = config.description;
          this.locations = config.locations;
          this.isRepeatable =
            (_config$isRepeatable = config.isRepeatable) !== null &&
            _config$isRepeatable !== void 0
              ? _config$isRepeatable
              : false;
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          config.name || (0, _devAssert.default)(0, "Directive must be named.");
          Array.isArray(config.locations) ||
            (0, _devAssert.default)(
              0,
              "@".concat(config.name, " locations must be an Array.")
            );
          var args =
            (_config$args = config.args) !== null && _config$args !== void 0
              ? _config$args
              : {};
          ((0, _isObjectLike.default)(args) && !Array.isArray(args)) ||
            (0, _devAssert.default)(
              0,
              "@".concat(
                config.name,
                " args must be an object with argument names as keys."
              )
            );
          this.args = (0, _objectEntries.default)(args).map(function(_ref) {
            var argName = _ref[0],
              argConfig = _ref[1];
            return {
              name: argName,
              description: argConfig.description,
              type: argConfig.type,
              defaultValue: argConfig.defaultValue,
              deprecationReason: argConfig.deprecationReason,
              extensions:
                argConfig.extensions &&
                (0, _toObjMap.default)(argConfig.extensions),
              astNode: argConfig.astNode
            };
          });
        }

        var _proto = GraphQLDirective.prototype;

        _proto.toConfig = function toConfig() {
          return {
            name: this.name,
            description: this.description,
            locations: this.locations,
            args: (0, _definition.argsToArgsConfig)(this.args),
            isRepeatable: this.isRepeatable,
            extensions: this.extensions,
            astNode: this.astNode
          };
        };

        _proto.toString = function toString() {
          return "@" + this.name;
        };

        _proto.toJSON = function toJSON() {
          return this.toString();
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLDirective, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLDirective";
            }
          }
        ]);

        return GraphQLDirective;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLDirective = GraphQLDirective;
      (0, _defineInspect.default)(GraphQLDirective);

      /**
       * Used to conditionally include fields or fragments.
       */
      var GraphQLIncludeDirective = new GraphQLDirective({
        name: "include",
        description:
          "Directs the executor to include this field or fragment only when the `if` argument is true.",
        locations: [
          _directiveLocation.DirectiveLocation.FIELD,
          _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
          _directiveLocation.DirectiveLocation.INLINE_FRAGMENT
        ],
        args: {
          if: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            description: "Included when true."
          }
        }
      });
      /**
       * Used to conditionally skip (exclude) fields or fragments.
       */

      exports.GraphQLIncludeDirective = GraphQLIncludeDirective;
      var GraphQLSkipDirective = new GraphQLDirective({
        name: "skip",
        description:
          "Directs the executor to skip this field or fragment when the `if` argument is true.",
        locations: [
          _directiveLocation.DirectiveLocation.FIELD,
          _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
          _directiveLocation.DirectiveLocation.INLINE_FRAGMENT
        ],
        args: {
          if: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            description: "Skipped when true."
          }
        }
      });
      /**
       * Constant string used for default reason for a deprecation.
       */

      exports.GraphQLSkipDirective = GraphQLSkipDirective;
      var DEFAULT_DEPRECATION_REASON = "No longer supported";
      /**
       * Used to declare element of a GraphQL schema as deprecated.
       */

      exports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
      var GraphQLDeprecatedDirective = new GraphQLDirective({
        name: "deprecated",
        description:
          "Marks an element of a GraphQL schema as no longer supported.",
        locations: [
          _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
          _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
          _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
          _directiveLocation.DirectiveLocation.ENUM_VALUE
        ],
        args: {
          reason: {
            type: _scalars.GraphQLString,
            description:
              "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
            defaultValue: DEFAULT_DEPRECATION_REASON
          }
        }
      });
      /**
       * Used to provide a URL for specifying the behaviour of custom scalar definitions.
       */

      exports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;
      var GraphQLSpecifiedByDirective = new GraphQLDirective({
        name: "specifiedBy",
        description:
          "Exposes a URL that specifies the behaviour of this scalar.",
        locations: [_directiveLocation.DirectiveLocation.SCALAR],
        args: {
          url: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            description: "The URL that specifies the behaviour of this scalar."
          }
        }
      });
      /**
       * The full list of specified directives.
       */

      exports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
      var specifiedDirectives = Object.freeze([
        GraphQLIncludeDirective,
        GraphQLSkipDirective,
        GraphQLDeprecatedDirective,
        GraphQLSpecifiedByDirective
      ]);
      exports.specifiedDirectives = specifiedDirectives;

      function isSpecifiedDirective(directive) {
        return specifiedDirectives.some(function(_ref2) {
          var name = _ref2.name;
          return name === directive.name;
        });
      }

      /***/
    },

    /***/ LHBN: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = promiseForObject;

      /**
       * This function transforms a JS object `ObjMap<Promise<T>>` into
       * a `Promise<ObjMap<T>>`
       *
       * This is akin to bluebird's `Promise.props`, but implemented only using
       * `Promise.all` so it will work with any implementation of ES6 promises.
       */
      function promiseForObject(object) {
        var keys = Object.keys(object);
        var valuesAndPromises = keys.map(function(name) {
          return object[name];
        });
        return Promise.all(valuesAndPromises).then(function(values) {
          return values.reduce(function(resolvedObject, value, i) {
            resolvedObject[keys[i]] = value;
            return resolvedObject;
          }, Object.create(null));
        });
      }

      /***/
    },

    /***/ LHp5: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sentenceCase = exports.sentenceCaseTransform = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var no_case_1 = __webpack_require__("3yyI");
      var upper_case_first_1 = __webpack_require__("wb9o");
      function sentenceCaseTransform(input, index) {
        var result = input.toLowerCase();
        if (index === 0) return upper_case_first_1.upperCaseFirst(result);
        return result;
      }
      exports.sentenceCaseTransform = sentenceCaseTransform;
      function sentenceCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return no_case_1.noCase(
          input,
          tslib_1.__assign(
            { delimiter: " ", transform: sentenceCaseTransform },
            options
          )
        );
      }
      exports.sentenceCase = sentenceCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "LQ/U": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "validate", {
        enumerable: true,
        get: function get() {
          return _validate.validate;
        }
      });
      Object.defineProperty(exports, "ValidationContext", {
        enumerable: true,
        get: function get() {
          return _ValidationContext.ValidationContext;
        }
      });
      Object.defineProperty(exports, "specifiedRules", {
        enumerable: true,
        get: function get() {
          return _specifiedRules.specifiedRules;
        }
      });
      Object.defineProperty(exports, "ExecutableDefinitionsRule", {
        enumerable: true,
        get: function get() {
          return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
        }
      });
      Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
        enumerable: true,
        get: function get() {
          return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
        }
      });
      Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
        enumerable: true,
        get: function get() {
          return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
        }
      });
      Object.defineProperty(exports, "KnownArgumentNamesRule", {
        enumerable: true,
        get: function get() {
          return _KnownArgumentNamesRule.KnownArgumentNamesRule;
        }
      });
      Object.defineProperty(exports, "KnownDirectivesRule", {
        enumerable: true,
        get: function get() {
          return _KnownDirectivesRule.KnownDirectivesRule;
        }
      });
      Object.defineProperty(exports, "KnownFragmentNamesRule", {
        enumerable: true,
        get: function get() {
          return _KnownFragmentNamesRule.KnownFragmentNamesRule;
        }
      });
      Object.defineProperty(exports, "KnownTypeNamesRule", {
        enumerable: true,
        get: function get() {
          return _KnownTypeNamesRule.KnownTypeNamesRule;
        }
      });
      Object.defineProperty(exports, "LoneAnonymousOperationRule", {
        enumerable: true,
        get: function get() {
          return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
        }
      });
      Object.defineProperty(exports, "NoFragmentCyclesRule", {
        enumerable: true,
        get: function get() {
          return _NoFragmentCyclesRule.NoFragmentCyclesRule;
        }
      });
      Object.defineProperty(exports, "NoUndefinedVariablesRule", {
        enumerable: true,
        get: function get() {
          return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
        }
      });
      Object.defineProperty(exports, "NoUnusedFragmentsRule", {
        enumerable: true,
        get: function get() {
          return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
        }
      });
      Object.defineProperty(exports, "NoUnusedVariablesRule", {
        enumerable: true,
        get: function get() {
          return _NoUnusedVariablesRule.NoUnusedVariablesRule;
        }
      });
      Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
        enumerable: true,
        get: function get() {
          return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
        }
      });
      Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
        enumerable: true,
        get: function get() {
          return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
        }
      });
      Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
        enumerable: true,
        get: function get() {
          return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
        }
      });
      Object.defineProperty(exports, "ScalarLeafsRule", {
        enumerable: true,
        get: function get() {
          return _ScalarLeafsRule.ScalarLeafsRule;
        }
      });
      Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
        enumerable: true,
        get: function get() {
          return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
        }
      });
      Object.defineProperty(exports, "UniqueArgumentNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
        enumerable: true,
        get: function get() {
          return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
        }
      });
      Object.defineProperty(exports, "UniqueFragmentNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueOperationNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueOperationNamesRule.UniqueOperationNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueVariableNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueVariableNamesRule.UniqueVariableNamesRule;
        }
      });
      Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
        enumerable: true,
        get: function get() {
          return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
        }
      });
      Object.defineProperty(exports, "VariablesAreInputTypesRule", {
        enumerable: true,
        get: function get() {
          return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
        }
      });
      Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
        enumerable: true,
        get: function get() {
          return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
        }
      });
      Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
        enumerable: true,
        get: function get() {
          return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
        }
      });
      Object.defineProperty(exports, "UniqueOperationTypesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueOperationTypesRule.UniqueOperationTypesRule;
        }
      });
      Object.defineProperty(exports, "UniqueTypeNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueTypeNamesRule.UniqueTypeNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
        enumerable: true,
        get: function get() {
          return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
        }
      });
      Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
        enumerable: true,
        get: function get() {
          return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
        }
      });
      Object.defineProperty(exports, "NoDeprecatedCustomRule", {
        enumerable: true,
        get: function get() {
          return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
        }
      });
      Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
        enumerable: true,
        get: function get() {
          return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
        }
      });

      var _validate = __webpack_require__("sk25");

      var _ValidationContext = __webpack_require__("RqXf");

      var _specifiedRules = __webpack_require__("CJUq");

      var _ExecutableDefinitionsRule = __webpack_require__("1J+l");

      var _FieldsOnCorrectTypeRule = __webpack_require__("tieQ");

      var _FragmentsOnCompositeTypesRule = __webpack_require__("aB4s");

      var _KnownArgumentNamesRule = __webpack_require__("EBNW");

      var _KnownDirectivesRule = __webpack_require__("wiWP");

      var _KnownFragmentNamesRule = __webpack_require__("J5Ui");

      var _KnownTypeNamesRule = __webpack_require__("Afiz");

      var _LoneAnonymousOperationRule = __webpack_require__("WNUp");

      var _NoFragmentCyclesRule = __webpack_require__("knwK");

      var _NoUndefinedVariablesRule = __webpack_require__("cDAi");

      var _NoUnusedFragmentsRule = __webpack_require__("mw0H");

      var _NoUnusedVariablesRule = __webpack_require__("K73K");

      var _OverlappingFieldsCanBeMergedRule = __webpack_require__("i2do");

      var _PossibleFragmentSpreadsRule = __webpack_require__("EjDe");

      var _ProvidedRequiredArgumentsRule = __webpack_require__("HY1T");

      var _ScalarLeafsRule = __webpack_require__("ma1s");

      var _SingleFieldSubscriptionsRule = __webpack_require__("TdCP");

      var _UniqueArgumentNamesRule = __webpack_require__("yESJ");

      var _UniqueDirectivesPerLocationRule = __webpack_require__("9ohr");

      var _UniqueFragmentNamesRule = __webpack_require__("sEmH");

      var _UniqueInputFieldNamesRule = __webpack_require__("B1c+");

      var _UniqueOperationNamesRule = __webpack_require__("M2y6");

      var _UniqueVariableNamesRule = __webpack_require__("PZUk");

      var _ValuesOfCorrectTypeRule = __webpack_require__("6DTX");

      var _VariablesAreInputTypesRule = __webpack_require__("x+L2");

      var _VariablesInAllowedPositionRule = __webpack_require__("GcDG");

      var _LoneSchemaDefinitionRule = __webpack_require__("p8j7");

      var _UniqueOperationTypesRule = __webpack_require__("Qmaf");

      var _UniqueTypeNamesRule = __webpack_require__("cHvl");

      var _UniqueEnumValueNamesRule = __webpack_require__("2WnT");

      var _UniqueFieldDefinitionNamesRule = __webpack_require__("feWH");

      var _UniqueDirectiveNamesRule = __webpack_require__("TkMy");

      var _PossibleTypeExtensionsRule = __webpack_require__("Ug9W");

      var _NoDeprecatedCustomRule = __webpack_require__("6r8j");

      var _NoSchemaIntrospectionCustomRule = __webpack_require__("kX1W");

      /***/
    },

    /***/ LRj1: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isAsyncIterable;

      var _symbols = __webpack_require__("6CEn");

      // eslint-disable-next-line no-redeclare
      function isAsyncIterable(maybeAsyncIterable) {
        return (
          typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0
            ? void 0
            : maybeAsyncIterable[_symbols.SYMBOL_ASYNC_ITERATOR]) === "function"
        );
      }

      /***/
    },

    /***/ "LY+O": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.versionInfo = exports.version = void 0;

      /**
       * Note: This file is autogenerated using "resources/gen-version.js" script and
       * automatically updated by "npm version" command.
       */

      /**
       * A string containing the version of the GraphQL.js library
       */
      var version = "15.5.1";
      /**
       * An object containing the components of the GraphQL.js version string
       */

      exports.version = version;
      var versionInfo = Object.freeze({
        major: 15,
        minor: 5,
        patch: 1,
        preReleaseTag: null
      });
      exports.versionInfo = versionInfo;

      /***/
    },

    /***/ LY0y: /***/ function(module, exports) {
      /* WEBPACK VAR INJECTION */ (function(__dirname) {
        module.exports = /******/ (function() {
          // webpackBootstrap
          /******/ var __webpack_modules__ = {
            /***/ 880: /***/ function(module) {
              module.exports = function(module) {
                if (!module.webpackPolyfill) {
                  module.deprecate = function() {};
                  module.paths = [];
                  // module.parent = undefined by default
                  if (!module.children) module.children = [];
                  Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function() {
                      return module.l;
                    }
                  });
                  Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function() {
                      return module.i;
                    }
                  });
                  module.webpackPolyfill = 1;
                }
                return module;
              };

              /***/
            }

            /******/
          }; // The module cache
          /************************************************************************/
          /******/ /******/ var __webpack_module_cache__ = {}; // The require function
          /******/

          /******/ /******/ function __nccwpck_require__(moduleId) {
            /******/ // Check if module is in cache
            /******/ if (__webpack_module_cache__[moduleId]) {
              /******/ return __webpack_module_cache__[moduleId].exports;
              /******/
            } // Create a new module (and put it into the cache)
            /******/ /******/ var module = (__webpack_module_cache__[
              moduleId
            ] = {
              /******/ // no module.id needed
              /******/ // no module.loaded needed
              /******/ exports: {}
              /******/
            }); // Execute the module function
            /******/

            /******/ /******/ var threw = true;
            /******/ try {
              /******/ __webpack_modules__[moduleId](
                module,
                module.exports,
                __nccwpck_require__
              );
              /******/ threw = false;
              /******/
            } finally {
              /******/ if (threw) delete __webpack_module_cache__[moduleId];
              /******/
            } // Return the exports of the module
            /******/

            /******/ /******/ return module.exports;
            /******/
          } /* webpack/runtime/compat */
          /******/

          /************************************************************************/
          /******/ /******/

          /******/ __nccwpck_require__.ab =
            __dirname +
            "/"; /************************************************************************/ // module exports must be returned from runtime so entry inlining is disabled // startup // Load entry module and return exports
          /******/ /******/ /******/ /******/ return __nccwpck_require__(880);
          /******/
        })();
        /* WEBPACK VAR INJECTION */
      }.call(this, "/"));

      /***/
    },

    /***/ LidF: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var IsPropertyKey = __webpack_require__("ml7t");
      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-hasproperty

      module.exports = function HasProperty(O, P) {
        if (Type(O) !== "Object") {
          throw new $TypeError("Assertion failed: `O` must be an Object");
        }
        if (!IsPropertyKey(P)) {
          throw new $TypeError("Assertion failed: `P` must be a Property Key");
        }
        return P in O;
      };

      /***/
    },

    /***/ LvDl: /***/ function(module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function(module) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        /**
         * @license
         * Lodash <https://lodash.com/>
         * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */
        (function() {
          /** Used as a safe reference for `undefined` in pre-ES5 environments. */
          var undefined;

          /** Used as the semantic version number. */
          var VERSION = "4.17.21";

          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /** Error message constants. */
          var CORE_ERROR_TEXT =
              "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
            FUNC_ERROR_TEXT = "Expected a function",
            INVALID_TEMPL_VAR_ERROR_TEXT =
              "Invalid `variable` option passed into `_.template`";

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /** Used as the maximum memoize cache size. */
          var MAX_MEMOIZE_SIZE = 500;

          /** Used as the internal argument placeholder. */
          var PLACEHOLDER = "__lodash_placeholder__";

          /** Used to compose bitmasks for cloning. */
          var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /** Used to compose bitmasks for function metadata. */
          var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

          /** Used as default options for `_.truncate`. */
          var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = "...";

          /** Used to detect hot functions by number of calls within a span of milliseconds. */
          var HOT_COUNT = 800,
            HOT_SPAN = 16;

          /** Used to indicate the type of lazy iteratees. */
          var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e308,
            NAN = 0 / 0;

          /** Used as references for the maximum length and index of an array. */
          var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

          /** Used to associate wrap methods with their bit flags. */
          var wrapFlags = [
            ["ary", WRAP_ARY_FLAG],
            ["bind", WRAP_BIND_FLAG],
            ["bindKey", WRAP_BIND_KEY_FLAG],
            ["curry", WRAP_CURRY_FLAG],
            ["curryRight", WRAP_CURRY_RIGHT_FLAG],
            ["flip", WRAP_FLIP_FLAG],
            ["partial", WRAP_PARTIAL_FLAG],
            ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
            ["rearg", WRAP_REARG_FLAG]
          ];

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            asyncTag = "[object AsyncFunction]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            domExcTag = "[object DOMException]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            nullTag = "[object Null]",
            objectTag = "[object Object]",
            promiseTag = "[object Promise]",
            proxyTag = "[object Proxy]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]",
            undefinedTag = "[object Undefined]",
            weakMapTag = "[object WeakMap]",
            weakSetTag = "[object WeakSet]";

          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";

          /** Used to match empty string literals in compiled template source. */
          var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

          /** Used to match HTML entities and HTML characters. */
          var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

          /** Used to match template delimiters. */
          var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

          /** Used to match property names within property paths. */
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

          /** Used to match leading whitespace. */
          var reTrimStart = /^\s+/;

          /** Used to match a single whitespace character. */
          var reWhitespace = /\s/;

          /** Used to match wrap detail comments. */
          var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

          /** Used to match words composed of alphanumeric characters. */
          var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

          /**
           * Used to validate the `validate` option in `_.template` variable.
           *
           * Forbids characters which could potentially change the meaning of the function argument definition:
           * - "()," (modification of function parameters)
           * - "=" (default value)
           * - "[]{}" (destructuring of function parameters)
           * - "/" (beginning of a comment)
           * - whitespace
           */
          var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

          /** Used to match backslashes in property paths. */
          var reEscapeChar = /\\(\\)?/g;

          /**
           * Used to match
           * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
           */
          var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

          /** Used to match `RegExp` flags from their coerced string values. */
          var reFlags = /\w*$/;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /** Used to match Latin Unicode letters (excluding mathematical operators). */
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

          /** Used to ensure capturing order of template delimiters. */
          var reNoMatch = /($^)/;

          /** Used to match unescaped characters in compiled string literals. */
          var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

          /** Used to compose unicode character classes. */
          var rsAstralRange = "\\ud800-\\udfff",
            rsComboMarksRange = "\\u0300-\\u036f",
            reComboHalfMarksRange = "\\ufe20-\\ufe2f",
            rsComboSymbolsRange = "\\u20d0-\\u20ff",
            rsComboRange =
              rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = "\\u2700-\\u27bf",
            rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
            rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
            rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
            rsPunctuationRange = "\\u2000-\\u206f",
            rsSpaceRange =
              " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
            rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
            rsVarRange = "\\ufe0e\\ufe0f",
            rsBreakRange =
              rsMathOpRange +
              rsNonCharRange +
              rsPunctuationRange +
              rsSpaceRange;

          /** Used to compose unicode capture groups. */
          var rsApos = "['\u2019]",
            rsAstral = "[" + rsAstralRange + "]",
            rsBreak = "[" + rsBreakRange + "]",
            rsCombo = "[" + rsComboRange + "]",
            rsDigits = "\\d+",
            rsDingbat = "[" + rsDingbatRange + "]",
            rsLower = "[" + rsLowerRange + "]",
            rsMisc =
              "[^" +
              rsAstralRange +
              rsBreakRange +
              rsDigits +
              rsDingbatRange +
              rsLowerRange +
              rsUpperRange +
              "]",
            rsFitz = "\\ud83c[\\udffb-\\udfff]",
            rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
            rsNonAstral = "[^" + rsAstralRange + "]",
            rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
            rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rsUpper = "[" + rsUpperRange + "]",
            rsZWJ = "\\u200d";

          /** Used to compose unicode regexes. */
          var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
            rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
            rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
            rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
            reOptMod = rsModifier + "?",
            rsOptVar = "[" + rsVarRange + "]?",
            rsOptJoin =
              "(?:" +
              rsZWJ +
              "(?:" +
              [rsNonAstral, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsOptVar +
              reOptMod +
              ")*",
            rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
            rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji =
              "(?:" +
              [rsDingbat, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsSeq,
            rsSymbol =
              "(?:" +
              [
                rsNonAstral + rsCombo + "?",
                rsCombo,
                rsRegional,
                rsSurrPair,
                rsAstral
              ].join("|") +
              ")";

          /** Used to match apostrophes. */
          var reApos = RegExp(rsApos, "g");

          /**
           * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
           * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
           */
          var reComboMark = RegExp(rsCombo, "g");

          /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
          var reUnicode = RegExp(
            rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,
            "g"
          );

          /** Used to match complex or compound words. */
          var reUnicodeWord = RegExp(
            [
              rsUpper +
                "?" +
                rsLower +
                "+" +
                rsOptContrLower +
                "(?=" +
                [rsBreak, rsUpper, "$"].join("|") +
                ")",
              rsMiscUpper +
                "+" +
                rsOptContrUpper +
                "(?=" +
                [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
                ")",
              rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
              rsUpper + "+" + rsOptContrUpper,
              rsOrdUpper,
              rsOrdLower,
              rsDigits,
              rsEmoji
            ].join("|"),
            "g"
          );

          /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
          var reHasUnicode = RegExp(
            "[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]"
          );

          /** Used to detect strings that need a more robust regexp to match words. */
          var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

          /** Used to assign default `context` object properties. */
          var contextProps = [
            "Array",
            "Buffer",
            "DataView",
            "Date",
            "Error",
            "Float32Array",
            "Float64Array",
            "Function",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Map",
            "Math",
            "Object",
            "Promise",
            "RegExp",
            "Set",
            "String",
            "Symbol",
            "TypeError",
            "Uint8Array",
            "Uint8ClampedArray",
            "Uint16Array",
            "Uint32Array",
            "WeakMap",
            "_",
            "clearTimeout",
            "isFinite",
            "parseInt",
            "setTimeout"
          ];

          /** Used to make template sourceURLs easier to identify. */
          var templateCounter = -1;

          /** Used to identify `toStringTag` values of typed arrays. */
          var typedArrayTags = {};
          typedArrayTags[float32Tag] = typedArrayTags[
            float64Tag
          ] = typedArrayTags[int8Tag] = typedArrayTags[
            int16Tag
          ] = typedArrayTags[int32Tag] = typedArrayTags[
            uint8Tag
          ] = typedArrayTags[uint8ClampedTag] = typedArrayTags[
            uint16Tag
          ] = typedArrayTags[uint32Tag] = true;
          typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[
            arrayBufferTag
          ] = typedArrayTags[boolTag] = typedArrayTags[
            dataViewTag
          ] = typedArrayTags[dateTag] = typedArrayTags[
            errorTag
          ] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[
            numberTag
          ] = typedArrayTags[objectTag] = typedArrayTags[
            regexpTag
          ] = typedArrayTags[setTag] = typedArrayTags[
            stringTag
          ] = typedArrayTags[weakMapTag] = false;

          /** Used to identify `toStringTag` values supported by `_.clone`. */
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
            arrayBufferTag
          ] = cloneableTags[dataViewTag] = cloneableTags[
            boolTag
          ] = cloneableTags[dateTag] = cloneableTags[
            float32Tag
          ] = cloneableTags[float64Tag] = cloneableTags[
            int8Tag
          ] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[
            mapTag
          ] = cloneableTags[numberTag] = cloneableTags[
            objectTag
          ] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[
            stringTag
          ] = cloneableTags[symbolTag] = cloneableTags[
            uint8Tag
          ] = cloneableTags[uint8ClampedTag] = cloneableTags[
            uint16Tag
          ] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
            weakMapTag
          ] = false;

          /** Used to map Latin Unicode letters to basic Latin letters. */
          var deburredLetters = {
            // Latin-1 Supplement block.
            À: "A",
            Á: "A",
            Â: "A",
            Ã: "A",
            Ä: "A",
            Å: "A",
            à: "a",
            á: "a",
            â: "a",
            ã: "a",
            ä: "a",
            å: "a",
            Ç: "C",
            ç: "c",
            Ð: "D",
            ð: "d",
            È: "E",
            É: "E",
            Ê: "E",
            Ë: "E",
            è: "e",
            é: "e",
            ê: "e",
            ë: "e",
            Ì: "I",
            Í: "I",
            Î: "I",
            Ï: "I",
            ì: "i",
            í: "i",
            î: "i",
            ï: "i",
            Ñ: "N",
            ñ: "n",
            Ò: "O",
            Ó: "O",
            Ô: "O",
            Õ: "O",
            Ö: "O",
            Ø: "O",
            ò: "o",
            ó: "o",
            ô: "o",
            õ: "o",
            ö: "o",
            ø: "o",
            Ù: "U",
            Ú: "U",
            Û: "U",
            Ü: "U",
            ù: "u",
            ú: "u",
            û: "u",
            ü: "u",
            Ý: "Y",
            ý: "y",
            ÿ: "y",
            Æ: "Ae",
            æ: "ae",
            Þ: "Th",
            þ: "th",
            ß: "ss",
            // Latin Extended-A block.
            Ā: "A",
            Ă: "A",
            Ą: "A",
            ā: "a",
            ă: "a",
            ą: "a",
            Ć: "C",
            Ĉ: "C",
            Ċ: "C",
            Č: "C",
            ć: "c",
            ĉ: "c",
            ċ: "c",
            č: "c",
            Ď: "D",
            Đ: "D",
            ď: "d",
            đ: "d",
            Ē: "E",
            Ĕ: "E",
            Ė: "E",
            Ę: "E",
            Ě: "E",
            ē: "e",
            ĕ: "e",
            ė: "e",
            ę: "e",
            ě: "e",
            Ĝ: "G",
            Ğ: "G",
            Ġ: "G",
            Ģ: "G",
            ĝ: "g",
            ğ: "g",
            ġ: "g",
            ģ: "g",
            Ĥ: "H",
            Ħ: "H",
            ĥ: "h",
            ħ: "h",
            Ĩ: "I",
            Ī: "I",
            Ĭ: "I",
            Į: "I",
            İ: "I",
            ĩ: "i",
            ī: "i",
            ĭ: "i",
            į: "i",
            ı: "i",
            Ĵ: "J",
            ĵ: "j",
            Ķ: "K",
            ķ: "k",
            ĸ: "k",
            Ĺ: "L",
            Ļ: "L",
            Ľ: "L",
            Ŀ: "L",
            Ł: "L",
            ĺ: "l",
            ļ: "l",
            ľ: "l",
            ŀ: "l",
            ł: "l",
            Ń: "N",
            Ņ: "N",
            Ň: "N",
            Ŋ: "N",
            ń: "n",
            ņ: "n",
            ň: "n",
            ŋ: "n",
            Ō: "O",
            Ŏ: "O",
            Ő: "O",
            ō: "o",
            ŏ: "o",
            ő: "o",
            Ŕ: "R",
            Ŗ: "R",
            Ř: "R",
            ŕ: "r",
            ŗ: "r",
            ř: "r",
            Ś: "S",
            Ŝ: "S",
            Ş: "S",
            Š: "S",
            ś: "s",
            ŝ: "s",
            ş: "s",
            š: "s",
            Ţ: "T",
            Ť: "T",
            Ŧ: "T",
            ţ: "t",
            ť: "t",
            ŧ: "t",
            Ũ: "U",
            Ū: "U",
            Ŭ: "U",
            Ů: "U",
            Ű: "U",
            Ų: "U",
            ũ: "u",
            ū: "u",
            ŭ: "u",
            ů: "u",
            ű: "u",
            ų: "u",
            Ŵ: "W",
            ŵ: "w",
            Ŷ: "Y",
            ŷ: "y",
            Ÿ: "Y",
            Ź: "Z",
            Ż: "Z",
            Ž: "Z",
            ź: "z",
            ż: "z",
            ž: "z",
            Ĳ: "IJ",
            ĳ: "ij",
            Œ: "Oe",
            œ: "oe",
            ŉ: "'n",
            ſ: "s"
          };

          /** Used to map characters to HTML entities. */
          var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;"
          };

          /** Used to map HTML entities to characters. */
          var htmlUnescapes = {
            "&amp;": "&",
            "&lt;": "<",
            "&gt;": ">",
            "&quot;": '"',
            "&#39;": "'"
          };

          /** Used to escape characters for inclusion in compiled string literals. */
          var stringEscapes = {
            "\\": "\\",
            "'": "'",
            "\n": "n",
            "\r": "r",
            "\u2028": "u2028",
            "\u2029": "u2029"
          };

          /** Built-in method references without a dependency on `root`. */
          var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /** Detect free variable `exports`. */
          var freeExports = true && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule =
            freeExports &&
            typeof module == "object" &&
            module &&
            !module.nodeType &&
            module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Detect free variable `process` from Node.js. */
          var freeProcess = moduleExports && freeGlobal.process;

          /** Used to access faster Node.js helpers. */
          var nodeUtil = (function() {
            try {
              // Use `util.types` for Node.js 10+.
              var types =
                freeModule &&
                freeModule.require &&
                freeModule.require("util").types;

              if (types) {
                return types;
              }

              // Legacy `process.binding('util')` for Node.js < 10.
              return (
                freeProcess &&
                freeProcess.binding &&
                freeProcess.binding("util")
              );
            } catch (e) {}
          })();

          /* Node.js helper references. */
          var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

          /*--------------------------------------------------------------------------*/

          /**
           * A faster alternative to `Function#apply`, this function invokes `func`
           * with the `this` binding of `thisArg` and the arguments of `args`.
           *
           * @private
           * @param {Function} func The function to invoke.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} args The arguments to invoke `func` with.
           * @returns {*} Returns the result of `func`.
           */
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);
              case 1:
                return func.call(thisArg, args[0]);
              case 2:
                return func.call(thisArg, args[0], args[1]);
              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
          }

          /**
           * A specialized version of `baseAggregator` for arrays.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              var value = array[index];
              setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.forEach` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.forEachRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
              if (iteratee(array[length], length, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.every` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           */
          function arrayEvery(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (!predicate(array[index], index, array)) {
                return false;
              }
            }
            return true;
          }

          /**
           * A specialized version of `_.filter` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }

          /**
           * A specialized version of `_.includes` for arrays without support for
           * specifying an index to search from.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }

          /**
           * This function is like `arrayIncludes` except that it accepts a comparator.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludesWith(array, value, comparator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }
            return false;
          }

          /**
           * A specialized version of `_.map` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }

          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          /**
           * A specialized version of `_.reduce` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the first element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
              length = array == null ? 0 : array.length;

            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.reduceRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the last element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.some` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }

          /**
           * Gets the size of an ASCII `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          var asciiSize = baseProperty("length");

          /**
           * Converts an ASCII `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function asciiToArray(string) {
            return string.split("");
          }

          /**
           * Splits an ASCII `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function asciiWords(string) {
            return string.match(reAsciiWord) || [];
          }

          /**
           * The base implementation of methods like `_.findKey` and `_.findLastKey`,
           * without support for iteratee shorthands, which iterates over `collection`
           * using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the found element or its key, else `undefined`.
           */
          function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function(value, key, collection) {
              if (predicate(value, key, collection)) {
                result = key;
                return false;
              }
            });
            return result;
          }

          /**
           * The base implementation of `_.findIndex` and `_.findLastIndex` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {number} fromIndex The index to search from.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOf(array, value, fromIndex) {
            return value === value
              ? strictIndexOf(array, value, fromIndex)
              : baseFindIndex(array, baseIsNaN, fromIndex);
          }

          /**
           * This function is like `baseIndexOf` except that it accepts a comparator.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (comparator(array[index], value)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.isNaN` without support for number objects.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           */
          function baseIsNaN(value) {
            return value !== value;
          }

          /**
           * The base implementation of `_.mean` and `_.meanBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the mean.
           */
          function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
          }

          /**
           * The base implementation of `_.property` without support for deep paths.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function baseProperty(key) {
            return function(object) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.propertyOf` without support for deep paths.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyOf(object) {
            return function(key) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.reduce` and `_.reduceRight`, without support
           * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} accumulator The initial value.
           * @param {boolean} initAccum Specify using the first or last element of
           *  `collection` as the initial value.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the accumulated value.
           */
          function baseReduce(
            collection,
            iteratee,
            accumulator,
            initAccum,
            eachFunc
          ) {
            eachFunc(collection, function(value, index, collection) {
              accumulator = initAccum
                ? ((initAccum = false), value)
                : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
          }

          /**
           * The base implementation of `_.sortBy` which uses `comparer` to define the
           * sort order of `array` and replaces criteria objects with their corresponding
           * values.
           *
           * @private
           * @param {Array} array The array to sort.
           * @param {Function} comparer The function to define sort order.
           * @returns {Array} Returns `array`.
           */
          function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }

          /**
           * The base implementation of `_.sum` and `_.sumBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the sum.
           */
          function baseSum(array, iteratee) {
            var result,
              index = -1,
              length = array.length;

            while (++index < length) {
              var current = iteratee(array[index]);
              if (current !== undefined) {
                result = result === undefined ? current : result + current;
              }
            }
            return result;
          }

          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          /**
           * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
           * of key-value pairs for `object` corresponding to the property names of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the key-value pairs.
           */
          function baseToPairs(object, props) {
            return arrayMap(props, function(key) {
              return [key, object[key]];
            });
          }

          /**
           * The base implementation of `_.trim`.
           *
           * @private
           * @param {string} string The string to trim.
           * @returns {string} Returns the trimmed string.
           */
          function baseTrim(string) {
            return string
              ? string
                  .slice(0, trimmedEndIndex(string) + 1)
                  .replace(reTrimStart, "")
              : string;
          }

          /**
           * The base implementation of `_.unary` without support for storing metadata.
           *
           * @private
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           */
          function baseUnary(func) {
            return function(value) {
              return func(value);
            };
          }

          /**
           * The base implementation of `_.values` and `_.valuesIn` which creates an
           * array of `object` property values corresponding to the property names
           * of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the array of property values.
           */
          function baseValues(object, props) {
            return arrayMap(props, function(key) {
              return object[key];
            });
          }

          /**
           * Checks if a `cache` value for `key` exists.
           *
           * @private
           * @param {Object} cache The cache to query.
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          /**
           * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the first unmatched string symbol.
           */
          function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
              length = strSymbols.length;

            while (
              ++index < length &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the last unmatched string symbol.
           */
          function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (
              index-- &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
          }

          /**
           * Gets the number of `placeholder` occurrences in `array`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} placeholder The placeholder to search for.
           * @returns {number} Returns the placeholder count.
           */
          function countHolders(array, placeholder) {
            var length = array.length,
              result = 0;

            while (length--) {
              if (array[length] === placeholder) {
                ++result;
              }
            }
            return result;
          }

          /**
           * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
           * letters to basic Latin letters.
           *
           * @private
           * @param {string} letter The matched letter to deburr.
           * @returns {string} Returns the deburred letter.
           */
          var deburrLetter = basePropertyOf(deburredLetters);

          /**
           * Used by `_.escape` to convert characters to HTML entities.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          var escapeHtmlChar = basePropertyOf(htmlEscapes);

          /**
           * Used by `_.template` to escape characters for inclusion in compiled string literals.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          function escapeStringChar(chr) {
            return "\\" + stringEscapes[chr];
          }

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `string` contains Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a symbol is found, else `false`.
           */
          function hasUnicode(string) {
            return reHasUnicode.test(string);
          }

          /**
           * Checks if `string` contains a word composed of Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a word is found, else `false`.
           */
          function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
          }

          /**
           * Converts `iterator` to an array.
           *
           * @private
           * @param {Object} iterator The iterator to convert.
           * @returns {Array} Returns the converted array.
           */
          function iteratorToArray(iterator) {
            var data,
              result = [];

            while (!(data = iterator.next()).done) {
              result.push(data.value);
            }
            return result;
          }

          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);

            map.forEach(function(value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function(arg) {
              return func(transform(arg));
            };
          }

          /**
           * Replaces all `placeholder` elements in `array` with an internal placeholder
           * and returns an array of their indexes.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {*} placeholder The placeholder to replace.
           * @returns {Array} Returns the new array of placeholder indexes.
           */
          function replaceHolders(array, placeholder) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
              }
            }
            return result;
          }

          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function(value) {
              result[++index] = value;
            });
            return result;
          }

          /**
           * Converts `set` to its value-value pairs.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the value-value pairs.
           */
          function setToPairs(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function(value) {
              result[++index] = [value, value];
            });
            return result;
          }

          /**
           * A specialized version of `_.indexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }

          /**
           * A specialized version of `_.lastIndexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
              if (array[index] === value) {
                return index;
              }
            }
            return index;
          }

          /**
           * Gets the number of symbols in `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the string size.
           */
          function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
          }

          /**
           * Converts `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function stringToArray(string) {
            return hasUnicode(string)
              ? unicodeToArray(string)
              : asciiToArray(string);
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
           * character of `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the index of the last non-whitespace character.
           */
          function trimmedEndIndex(string) {
            var index = string.length;

            while (index-- && reWhitespace.test(string.charAt(index))) {}
            return index;
          }

          /**
           * Used by `_.unescape` to convert HTML entities to characters.
           *
           * @private
           * @param {string} chr The matched character to unescape.
           * @returns {string} Returns the unescaped character.
           */
          var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

          /**
           * Gets the size of a Unicode `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          function unicodeSize(string) {
            var result = (reUnicode.lastIndex = 0);
            while (reUnicode.test(string)) {
              ++result;
            }
            return result;
          }

          /**
           * Converts a Unicode `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function unicodeToArray(string) {
            return string.match(reUnicode) || [];
          }

          /**
           * Splits a Unicode `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
          }

          /*--------------------------------------------------------------------------*/

          /**
           * Create a new pristine `lodash` function using the `context` object.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Util
           * @param {Object} [context=root] The context object.
           * @returns {Function} Returns a new `lodash` function.
           * @example
           *
           * _.mixin({ 'foo': _.constant('foo') });
           *
           * var lodash = _.runInContext();
           * lodash.mixin({ 'bar': lodash.constant('bar') });
           *
           * _.isFunction(_.foo);
           * // => true
           * _.isFunction(_.bar);
           * // => false
           *
           * lodash.isFunction(lodash.foo);
           * // => false
           * lodash.isFunction(lodash.bar);
           * // => true
           *
           * // Create a suped-up `defer` in Node.js.
           * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
           */
          var runInContext = function runInContext(context) {
            context =
              context == null
                ? root
                : _.defaults(
                    root.Object(),
                    context,
                    _.pick(root, contextProps)
                  );

            /** Built-in constructor references. */
            var Array = context.Array,
              Date = context.Date,
              Error = context.Error,
              Function = context.Function,
              Math = context.Math,
              Object = context.Object,
              RegExp = context.RegExp,
              String = context.String,
              TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
              funcProto = Function.prototype,
              objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context["__core-js_shared__"];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function() {
              var uid = /[^.]+$/.exec(
                (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) ||
                  ""
              );
              return uid ? "Symbol(src)_1." + uid : "";
            })();

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp(
              "^" +
                funcToString
                  .call(hasOwnProperty)
                  .replace(reRegExpChar, "\\$&")
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    "$1.*?"
                  ) +
                "$"
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined,
              Symbol = context.Symbol,
              Uint8Array = context.Uint8Array,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
              getPrototype = overArg(Object.getPrototypeOf, Object),
              objectCreate = Object.create,
              propertyIsEnumerable = objectProto.propertyIsEnumerable,
              splice = arrayProto.splice,
              spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
              symIterator = Symbol ? Symbol.iterator : undefined,
              symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            var defineProperty = (function() {
              try {
                var func = getNative(Object, "defineProperty");
                func({}, "", {});
                return func;
              } catch (e) {}
            })();

            /** Mocked built-ins. */
            var ctxClearTimeout =
                context.clearTimeout !== root.clearTimeout &&
                context.clearTimeout,
              ctxNow = Date && Date.now !== root.Date.now && Date.now,
              ctxSetTimeout =
                context.setTimeout !== root.setTimeout && context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
              nativeFloor = Math.floor,
              nativeGetSymbols = Object.getOwnPropertySymbols,
              nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
              nativeIsFinite = context.isFinite,
              nativeJoin = arrayProto.join,
              nativeKeys = overArg(Object.keys, Object),
              nativeMax = Math.max,
              nativeMin = Math.min,
              nativeNow = Date.now,
              nativeParseInt = context.parseInt,
              nativeRandom = Math.random,
              nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, "DataView"),
              Map = getNative(context, "Map"),
              Promise = getNative(context, "Promise"),
              Set = getNative(context, "Set"),
              WeakMap = getNative(context, "WeakMap"),
              nativeCreate = getNative(Object, "create");

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap();

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
              mapCtorString = toSource(Map),
              promiseCtorString = toSource(Promise),
              setCtorString = toSource(Set),
              weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
              symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
              symbolToString = symbolProto ? symbolProto.toString : undefined;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
              if (
                isObjectLike(value) &&
                !isArray(value) &&
                !(value instanceof LazyWrapper)
              ) {
                if (value instanceof LodashWrapper) {
                  return value;
                }
                if (hasOwnProperty.call(value, "__wrapped__")) {
                  return wrapperClone(value);
                }
              }
              return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function() {
              function object() {}
              return function(proto) {
                if (!isObject(proto)) {
                  return {};
                }
                if (objectCreate) {
                  return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
              };
            })();

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
              // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__chain__ = !!chainAll;
              this.__index__ = 0;
              this.__values__ = undefined;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
              /**
               * Used to detect `data` property values to be HTML-escaped.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              escape: reEscape,

              /**
               * Used to detect code to be evaluated.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              evaluate: reEvaluate,

              /**
               * Used to detect `data` property values to inject.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              interpolate: reInterpolate,

              /**
               * Used to reference the data object in the template text.
               *
               * @memberOf _.templateSettings
               * @type {string}
               */
              variable: "",

              /**
               * Used to import variables into the compiled template.
               *
               * @memberOf _.templateSettings
               * @type {Object}
               */
              imports: {
                /**
                 * A reference to the `lodash` function.
                 *
                 * @memberOf _.templateSettings.imports
                 * @type {Function}
                 */
                _: lodash
              }
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__dir__ = 1;
              this.__filtered__ = false;
              this.__iteratees__ = [];
              this.__takeCount__ = MAX_ARRAY_LENGTH;
              this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
              var result = new LazyWrapper(this.__wrapped__);
              result.__actions__ = copyArray(this.__actions__);
              result.__dir__ = this.__dir__;
              result.__filtered__ = this.__filtered__;
              result.__iteratees__ = copyArray(this.__iteratees__);
              result.__takeCount__ = this.__takeCount__;
              result.__views__ = copyArray(this.__views__);
              return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
              if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
              } else {
                result = this.clone();
                result.__dir__ *= -1;
              }
              return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
              var array = this.__wrapped__.value(),
                dir = this.__dir__,
                isArr = isArray(array),
                isRight = dir < 0,
                arrLength = isArr ? array.length : 0,
                view = getView(0, arrLength, this.__views__),
                start = view.start,
                end = view.end,
                length = end - start,
                index = isRight ? end : start - 1,
                iteratees = this.__iteratees__,
                iterLength = iteratees.length,
                resIndex = 0,
                takeCount = nativeMin(length, this.__takeCount__);

              if (
                !isArr ||
                (!isRight && arrLength == length && takeCount == length)
              ) {
                return baseWrapperValue(array, this.__actions__);
              }
              var result = [];

              outer: while (length-- && resIndex < takeCount) {
                index += dir;

                var iterIndex = -1,
                  value = array[index];

                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex],
                    iteratee = data.iteratee,
                    type = data.type,
                    computed = iteratee(value);

                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result[resIndex++] = value;
              }
              return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = nativeCreate ? nativeCreate(null) : {};
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return nativeCreate
                ? data[key] !== undefined
                : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] =
                nativeCreate && value === undefined ? HASH_UNDEFINED : value;
              return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype["delete"] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype["delete"] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                hash: new Hash(),
                map: new (Map || ListCache)(),
                string: new Hash()
              };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = getMapData(this, key)["delete"](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = getMapData(this, key),
                size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype["delete"] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
              var index = -1,
                length = values == null ? 0 : values.length;

              this.__data__ = new MapCache();
              while (++index < length) {
                this.add(values[index]);
              }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
              this.__data__.set(value, HASH_UNDEFINED);
              return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
              return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
              var data = (this.__data__ = new ListCache(entries));
              this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
              this.__data__ = new ListCache();
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
              var data = this.__data__,
                result = data["delete"](key);

              this.size = data.size;
              return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
              return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
              return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
              var data = this.__data__;
              if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                  pairs.push([key, value]);
                  this.size = ++data.size;
                  return this;
                }
                data = this.__data__ = new MapCache(pairs);
              }
              data.set(key, value);
              this.size = data.size;
              return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype["delete"] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

              for (var key in value) {
                if (
                  (inherited || hasOwnProperty.call(value, key)) &&
                  !(
                    skipIndexes &&
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == "length" ||
                      // Node.js 0.10 has enumerable non-index properties on buffers.
                      (isBuff && (key == "offset" || key == "parent")) ||
                      // PhantomJS 2 has enumerable non-index properties on typed arrays.
                      (isType &&
                        (key == "buffer" ||
                          key == "byteLength" ||
                          key == "byteOffset")) ||
                      // Skip index properties.
                      isIndex(key, length))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
              var length = array.length;
              return length ? array[baseRandom(0, length - 1)] : undefined;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
              return shuffleSelf(
                copyArray(array),
                baseClamp(n, 0, array.length)
              );
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
              return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
              if (
                (value !== undefined && !eq(object[key], value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (
                !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
              baseEach(collection, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
              return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
              return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == "__proto__" && defineProperty) {
                defineProperty(object, key, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true
                });
              } else {
                object[key] = value;
              }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
              var index = -1,
                length = paths.length,
                result = Array(length),
                skip = object == null;

              while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
              }
              return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
              if (number === number) {
                if (upper !== undefined) {
                  number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                  number = number >= lower ? number : lower;
                }
              }
              return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
              var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

              if (customizer) {
                result = object
                  ? customizer(value, key, object, stack)
                  : customizer(value);
              }
              if (result !== undefined) {
                return result;
              }
              if (!isObject(value)) {
                return value;
              }
              var isArr = isArray(value);
              if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                  return copyArray(value, result);
                }
              } else {
                var tag = getTag(value),
                  isFunc = tag == funcTag || tag == genTag;

                if (isBuffer(value)) {
                  return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                  result = isFlat || isFunc ? {} : initCloneObject(value);
                  if (!isDeep) {
                    return isFlat
                      ? copySymbolsIn(value, baseAssignIn(result, value))
                      : copySymbols(value, baseAssign(result, value));
                  }
                } else {
                  if (!cloneableTags[tag]) {
                    return object ? value : {};
                  }
                  result = initCloneByTag(value, tag, isDeep);
                }
              }
              // Check for circular references and return its corresponding clone.
              stack || (stack = new Stack());
              var stacked = stack.get(value);
              if (stacked) {
                return stacked;
              }
              stack.set(value, result);

              if (isSet(value)) {
                value.forEach(function(subValue) {
                  result.add(
                    baseClone(
                      subValue,
                      bitmask,
                      customizer,
                      subValue,
                      value,
                      stack
                    )
                  );
                });
              } else if (isMap(value)) {
                value.forEach(function(subValue, key) {
                  result.set(
                    key,
                    baseClone(subValue, bitmask, customizer, key, value, stack)
                  );
                });
              }

              var keysFunc = isFull
                ? isFlat
                  ? getAllKeysIn
                  : getAllKeys
                : isFlat
                ? keysIn
                : keys;

              var props = isArr ? undefined : keysFunc(value);
              arrayEach(props || value, function(subValue, key) {
                if (props) {
                  key = subValue;
                  subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(
                  result,
                  key,
                  baseClone(subValue, bitmask, customizer, key, value, stack)
                );
              });
              return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
              var props = keys(source);
              return function(object) {
                return baseConformsTo(object, source, props);
              };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
              var length = props.length;
              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (length--) {
                var key = props[length],
                  predicate = source[key],
                  value = object[key];

                if (
                  (value === undefined && !(key in object)) ||
                  !predicate(value)
                ) {
                  return false;
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return setTimeout(function() {
                func.apply(undefined, args);
              }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                isCommon = true,
                length = array.length,
                result = [],
                valuesLength = values.length;

              if (!length) {
                return result;
              }
              if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
              }
              if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
              } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee == null ? value : iteratee(value);

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result.push(value);
                } else if (!includes(values, computed, comparator)) {
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
              var result = true;
              baseEach(collection, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
              });
              return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
              var index = -1,
                length = array.length;

              while (++index < length) {
                var value = array[index],
                  current = iteratee(value);

                if (
                  current != null &&
                  (computed === undefined
                    ? current === current && !isSymbol(current)
                    : comparator(current, computed))
                ) {
                  var computed = current,
                    result = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
              var length = array.length;

              start = toInteger(start);
              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end === undefined || end > length ? length : toInteger(end);
              if (end < 0) {
                end += length;
              }
              end = start > end ? 0 : toLength(end);
              while (start < end) {
                array[start++] = value;
              }
              return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
              var result = [];
              baseEach(collection, function(value, index, collection) {
                if (predicate(value, index, collection)) {
                  result.push(value);
                }
              });
              return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
              var index = -1,
                length = array.length;

              predicate || (predicate = isFlattenable);
              result || (result = []);

              while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                  if (depth > 1) {
                    // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                  } else {
                    arrayPush(result, value);
                  }
                } else if (!isStrict) {
                  result[result.length] = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
              return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
              return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
              return arrayFilter(props, function(key) {
                return isFunction(object[key]);
              });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
              path = castPath(path, object);

              var index = 0,
                length = path.length;

              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }
              return index && index == length ? object : undefined;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
              var result = keysFunc(object);
              return isArray(object)
                ? result
                : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object(value)
                ? getRawTag(value)
                : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
              return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
              return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
              return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
              return (
                number >= nativeMin(start, end) &&
                number < nativeMax(start, end)
              );
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
              var includes = comparator ? arrayIncludesWith : arrayIncludes,
                length = arrays[0].length,
                othLength = arrays.length,
                othIndex = othLength,
                caches = Array(othLength),
                maxLength = Infinity,
                result = [];

              while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                  array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] =
                  !comparator &&
                  (iteratee || (length >= 120 && array.length >= 120))
                    ? new SetCache(othIndex && array)
                    : undefined;
              }
              array = arrays[0];

              var index = -1,
                seen = caches[0];

              outer: while (++index < length && result.length < maxLength) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (
                  !(seen
                    ? cacheHas(seen, computed)
                    : includes(result, computed, comparator))
                ) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (
                      !(cache
                        ? cacheHas(cache, computed)
                        : includes(arrays[othIndex], computed, comparator))
                    ) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
              baseForOwn(object, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
              path = castPath(path, object);
              object = parent(object, path);
              var func = object == null ? object : object[toKey(last(path))];
              return func == null ? undefined : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
              return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
              return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
              if (value === other) {
                return true;
              }
              if (
                value == null ||
                other == null ||
                (!isObjectLike(value) && !isObjectLike(other))
              ) {
                return value !== value && other !== other;
              }
              return baseIsEqualDeep(
                value,
                other,
                bitmask,
                customizer,
                baseIsEqual,
                stack
              );
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

              objTag = objTag == argsTag ? objectTag : objTag;
              othTag = othTag == argsTag ? objectTag : othTag;

              var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

              if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                  return false;
                }
                objIsArr = true;
                objIsObj = false;
              }
              if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object)
                  ? equalArrays(
                      object,
                      other,
                      bitmask,
                      customizer,
                      equalFunc,
                      stack
                    )
                  : equalByTag(
                      object,
                      other,
                      objTag,
                      bitmask,
                      customizer,
                      equalFunc,
                      stack
                    );
              }
              if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped =
                    objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                  othIsWrapped =
                    othIsObj && hasOwnProperty.call(other, "__wrapped__");

                if (objIsWrapped || othIsWrapped) {
                  var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                  stack || (stack = new Stack());
                  return equalFunc(
                    objUnwrapped,
                    othUnwrapped,
                    bitmask,
                    customizer,
                    stack
                  );
                }
              }
              if (!isSameTag) {
                return false;
              }
              stack || (stack = new Stack());
              return equalObjects(
                object,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
              );
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
              return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
              var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (index--) {
                var data = matchData[index];
                if (
                  noCustomizer && data[2]
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
                ) {
                  return false;
                }
              }
              while (++index < length) {
                data = matchData[index];
                var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];

                if (noCustomizer && data[2]) {
                  if (objValue === undefined && !(key in object)) {
                    return false;
                  }
                } else {
                  var stack = new Stack();
                  if (customizer) {
                    var result = customizer(
                      objValue,
                      srcValue,
                      key,
                      object,
                      source,
                      stack
                    );
                  }
                  if (
                    !(result === undefined
                      ? baseIsEqual(
                          srcValue,
                          objValue,
                          COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                          customizer,
                          stack
                        )
                      : result)
                  ) {
                    return false;
                  }
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject(value) || isMasked(value)) {
                return false;
              }
              var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
              return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
              return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
              return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
              return (
                isObjectLike(value) &&
                isLength(value.length) &&
                !!typedArrayTags[baseGetTag(value)]
              );
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
              // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
              // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
              if (typeof value == "function") {
                return value;
              }
              if (value == null) {
                return identity;
              }
              if (typeof value == "object") {
                return isArray(value)
                  ? baseMatchesProperty(value[0], value[1])
                  : baseMatches(value);
              }
              return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result = [];
              for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != "constructor") {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
              if (!isObject(object)) {
                return nativeKeysIn(object);
              }
              var isProto = isPrototype(object),
                result = [];

              for (var key in object) {
                if (
                  !(
                    key == "constructor" &&
                    (isProto || !hasOwnProperty.call(object, key))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
              return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
              var index = -1,
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
              });
              return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
              var matchData = getMatchData(source);
              if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(
                  matchData[0][0],
                  matchData[0][1]
                );
              }
              return function(object) {
                return (
                  object === source || baseIsMatch(object, source, matchData)
                );
              };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
              if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
              }
              return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue
                  ? hasIn(object, path)
                  : baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                    );
              };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
              if (object === source) {
                return;
              }
              baseFor(
                source,
                function(srcValue, key) {
                  stack || (stack = new Stack());
                  if (isObject(srcValue)) {
                    baseMergeDeep(
                      object,
                      source,
                      key,
                      srcIndex,
                      baseMerge,
                      customizer,
                      stack
                    );
                  } else {
                    var newValue = customizer
                      ? customizer(
                          safeGet(object, key),
                          srcValue,
                          key + "",
                          object,
                          source,
                          stack
                        )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                  }
                },
                keysIn
              );
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(
              object,
              source,
              key,
              srcIndex,
              mergeFunc,
              customizer,
              stack
            ) {
              var objValue = safeGet(object, key),
                srcValue = safeGet(source, key),
                stacked = stack.get(srcValue);

              if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
              }
              var newValue = customizer
                ? customizer(
                    objValue,
                    srcValue,
                    key + "",
                    object,
                    source,
                    stack
                  )
                : undefined;

              var isCommon = newValue === undefined;

              if (isCommon) {
                var isArr = isArray(srcValue),
                  isBuff = !isArr && isBuffer(srcValue),
                  isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                  if (isArray(objValue)) {
                    newValue = objValue;
                  } else if (isArrayLikeObject(objValue)) {
                    newValue = copyArray(objValue);
                  } else if (isBuff) {
                    isCommon = false;
                    newValue = cloneBuffer(srcValue, true);
                  } else if (isTyped) {
                    isCommon = false;
                    newValue = cloneTypedArray(srcValue, true);
                  } else {
                    newValue = [];
                  }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                  newValue = objValue;
                  if (isArguments(objValue)) {
                    newValue = toPlainObject(objValue);
                  } else if (!isObject(objValue) || isFunction(objValue)) {
                    newValue = initCloneObject(srcValue);
                  }
                } else {
                  isCommon = false;
                }
              }
              if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
              }
              assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
              var length = array.length;
              if (!length) {
                return;
              }
              n += n < 0 ? length : 0;
              return isIndex(n, length) ? array[n] : undefined;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
              if (iteratees.length) {
                iteratees = arrayMap(iteratees, function(iteratee) {
                  if (isArray(iteratee)) {
                    return function(value) {
                      return baseGet(
                        value,
                        iteratee.length === 1 ? iteratee[0] : iteratee
                      );
                    };
                  }
                  return iteratee;
                });
              } else {
                iteratees = [identity];
              }

              var index = -1;
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

              var result = baseMap(collection, function(
                value,
                key,
                collection
              ) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                  return iteratee(value);
                });
                return { criteria: criteria, index: ++index, value: value };
              });

              return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
              });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
              return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
              });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
              var index = -1,
                length = paths.length,
                result = {};

              while (++index < length) {
                var path = paths[index],
                  value = baseGet(object, path);

                if (predicate(value, path)) {
                  baseSet(result, castPath(path, object), value);
                }
              }
              return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
              return function(object) {
                return baseGet(object, path);
              };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
              var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                index = -1,
                length = values.length,
                seen = array;

              if (array === values) {
                values = copyArray(values);
              }
              if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
              }
              while (++index < length) {
                var fromIndex = 0,
                  value = values[index],
                  computed = iteratee ? iteratee(value) : value;

                while (
                  (fromIndex = indexOf(seen, computed, fromIndex, comparator)) >
                  -1
                ) {
                  if (seen !== array) {
                    splice.call(seen, fromIndex, 1);
                  }
                  splice.call(array, fromIndex, 1);
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
              var length = array ? indexes.length : 0,
                lastIndex = length - 1;

              while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                  var previous = index;
                  if (isIndex(index)) {
                    splice.call(array, index, 1);
                  } else {
                    baseUnset(array, index);
                  }
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
              return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
              var result = "";
              if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
              }
              // Leverage the exponentiation by squaring algorithm for a faster repeat.
              // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
              do {
                if (n % 2) {
                  result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                  string += string;
                }
              } while (n);

              return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
              return setToString(overRest(func, start, identity), func + "");
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
              return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
              var array = values(collection);
              return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject(object)) {
                return object;
              }
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

              while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                  newValue = value;

                if (
                  key === "__proto__" ||
                  key === "constructor" ||
                  key === "prototype"
                ) {
                  return object;
                }

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer
                    ? customizer(objValue, key, nested)
                    : undefined;
                  if (newValue === undefined) {
                    newValue = isObject(objValue)
                      ? objValue
                      : isIndex(path[index + 1])
                      ? []
                      : {};
                  }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap
              ? identity
              : function(func, data) {
                  metaMap.set(func, data);
                  return func;
                };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty
              ? identity
              : function(func, string) {
                  return defineProperty(func, "toString", {
                    configurable: true,
                    enumerable: false,
                    value: constant(string),
                    writable: true
                  });
                };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
              return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
              var index = -1,
                length = array.length;

              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end > length ? length : end;
              if (end < 0) {
                end += length;
              }
              length = start > end ? 0 : (end - start) >>> 0;
              start >>>= 0;

              var result = Array(length);
              while (++index < length) {
                result[index] = array[index + start];
              }
              return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
              var result;

              baseEach(collection, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
              });
              return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
              var low = 0,
                high = array == null ? low : array.length;

              if (
                typeof value == "number" &&
                value === value &&
                high <= HALF_MAX_ARRAY_LENGTH
              ) {
                while (low < high) {
                  var mid = (low + high) >>> 1,
                    computed = array[mid];

                  if (
                    computed !== null &&
                    !isSymbol(computed) &&
                    (retHighest ? computed <= value : computed < value)
                  ) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return high;
              }
              return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
              var low = 0,
                high = array == null ? 0 : array.length;
              if (high === 0) {
                return 0;
              }

              value = iteratee(value);
              var valIsNaN = value !== value,
                valIsNull = value === null,
                valIsSymbol = isSymbol(value),
                valIsUndefined = value === undefined;

              while (low < high) {
                var mid = nativeFloor((low + high) / 2),
                  computed = iteratee(array[mid]),
                  othIsDefined = computed !== undefined,
                  othIsNull = computed === null,
                  othIsReflexive = computed === computed,
                  othIsSymbol = isSymbol(computed);

                if (valIsNaN) {
                  var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                  setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    !othIsNull &&
                    (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                  setLow = false;
                } else {
                  setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
              var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                if (!index || !eq(computed, seen)) {
                  var seen = computed;
                  result[resIndex++] = value === 0 ? 0 : value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == "string") {
                return value;
              }
              if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + "";
              }
              if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : "";
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                length = array.length,
                isCommon = true,
                result = [],
                seen = result;

              if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
              } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                  return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
              } else {
                seen = iteratee ? [] : result;
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee) {
                    seen.push(computed);
                  }
                  result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                  if (seen !== result) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
              path = castPath(path, object);
              object = parent(object, path);
              return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
              return baseSet(
                object,
                path,
                updater(baseGet(object, path)),
                customizer
              );
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
              var length = array.length,
                index = fromRight ? length : -1;

              while (
                (fromRight ? index-- : ++index < length) &&
                predicate(array[index], index, array)
              ) {}

              return isDrop
                ? baseSlice(
                    array,
                    fromRight ? 0 : index,
                    fromRight ? index + 1 : length
                  )
                : baseSlice(
                    array,
                    fromRight ? index + 1 : 0,
                    fromRight ? length : index
                  );
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
              var result = value;
              if (result instanceof LazyWrapper) {
                result = result.value();
              }
              return arrayReduce(
                actions,
                function(result, action) {
                  return action.func.apply(
                    action.thisArg,
                    arrayPush([result], action.args)
                  );
                },
                result
              );
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
              var length = arrays.length;
              if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
              }
              var index = -1,
                result = Array(length);

              while (++index < length) {
                var array = arrays[index],
                  othIndex = -1;

                while (++othIndex < length) {
                  if (othIndex != index) {
                    result[index] = baseDifference(
                      result[index] || array,
                      arrays[othIndex],
                      iteratee,
                      comparator
                    );
                  }
                }
              }
              return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
              var index = -1,
                length = props.length,
                valsLength = values.length,
                result = {};

              while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
              }
              return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
              return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
              return typeof value == "function" ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray(value)) {
                return value;
              }
              return isKey(value, object)
                ? [value]
                : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
              var length = array.length;
              end = end === undefined ? length : end;
              return !start && end >= length
                ? array
                : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout =
              ctxClearTimeout ||
              function(id) {
                return root.clearTimeout(id);
              };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }
              var length = buffer.length,
                result = allocUnsafe
                  ? allocUnsafe(length)
                  : new buffer.constructor(length);

              buffer.copy(result);
              return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
              var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
              new Uint8Array(result).set(new Uint8Array(arrayBuffer));
              return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(dataView.buffer)
                : dataView.buffer;
              return new dataView.constructor(
                buffer,
                dataView.byteOffset,
                dataView.byteLength
              );
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
              var result = new regexp.constructor(
                regexp.source,
                reFlags.exec(regexp)
              );
              result.lastIndex = regexp.lastIndex;
              return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
              return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(typedArray.buffer)
                : typedArray.buffer;
              return new typedArray.constructor(
                buffer,
                typedArray.byteOffset,
                typedArray.length
              );
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
              if (value !== other) {
                var valIsDefined = value !== undefined,
                  valIsNull = value === null,
                  valIsReflexive = value === value,
                  valIsSymbol = isSymbol(value);

                var othIsDefined = other !== undefined,
                  othIsNull = other === null,
                  othIsReflexive = other === other,
                  othIsSymbol = isSymbol(other);

                if (
                  (!othIsNull &&
                    !othIsSymbol &&
                    !valIsSymbol &&
                    value > other) ||
                  (valIsSymbol &&
                    othIsDefined &&
                    othIsReflexive &&
                    !othIsNull &&
                    !othIsSymbol) ||
                  (valIsNull && othIsDefined && othIsReflexive) ||
                  (!valIsDefined && othIsReflexive) ||
                  !valIsReflexive
                ) {
                  return 1;
                }
                if (
                  (!valIsNull &&
                    !valIsSymbol &&
                    !othIsSymbol &&
                    value < other) ||
                  (othIsSymbol &&
                    valIsDefined &&
                    valIsReflexive &&
                    !valIsNull &&
                    !valIsSymbol) ||
                  (othIsNull && valIsDefined && valIsReflexive) ||
                  (!othIsDefined && valIsReflexive) ||
                  !othIsReflexive
                ) {
                  return -1;
                }
              }
              return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
              var index = -1,
                objCriteria = object.criteria,
                othCriteria = other.criteria,
                length = objCriteria.length,
                ordersLength = orders.length;

              while (++index < length) {
                var result = compareAscending(
                  objCriteria[index],
                  othCriteria[index]
                );
                if (result) {
                  if (index >= ordersLength) {
                    return result;
                  }
                  var order = orders[index];
                  return result * (order == "desc" ? -1 : 1);
                }
              }
              // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
              // that causes it, under certain circumstances, to provide the same value for
              // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
              // for more details.
              //
              // This also ensures a stable sort in V8 and other engines.
              // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
              return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersLength = holders.length,
                leftIndex = -1,
                leftLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(leftLength + rangeLength),
                isUncurried = !isCurried;

              while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
              }
              while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[holders[argsIndex]] = args[argsIndex];
                }
              }
              while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
              }
              return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersIndex = -1,
                holdersLength = holders.length,
                rightIndex = -1,
                rightLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(rangeLength + rightLength),
                isUncurried = !isCurried;

              while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
              }
              var offset = argsIndex;
              while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
              }
              while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
              }
              return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
              var index = -1,
                length = source.length;

              array || (array = Array(length));
              while (++index < length) {
                array[index] = source[index];
              }
              return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
              var isNew = !object;
              object || (object = {});

              var index = -1,
                length = props.length;

              while (++index < length) {
                var key = props[index];

                var newValue = customizer
                  ? customizer(object[key], source[key], key, object, source)
                  : undefined;

                if (newValue === undefined) {
                  newValue = source[key];
                }
                if (isNew) {
                  baseAssignValue(object, key, newValue);
                } else {
                  assignValue(object, key, newValue);
                }
              }
              return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
              return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
              return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
              return function(collection, iteratee) {
                var func = isArray(collection)
                    ? arrayAggregator
                    : baseAggregator,
                  accumulator = initializer ? initializer() : {};

                return func(
                  collection,
                  setter,
                  getIteratee(iteratee, 2),
                  accumulator
                );
              };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
              return baseRest(function(object, sources) {
                var index = -1,
                  length = sources.length,
                  customizer = length > 1 ? sources[length - 1] : undefined,
                  guard = length > 2 ? sources[2] : undefined;

                customizer =
                  assigner.length > 3 && typeof customizer == "function"
                    ? (length--, customizer)
                    : undefined;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                  customizer = length < 3 ? undefined : customizer;
                  length = 1;
                }
                object = Object(object);
                while (++index < length) {
                  var source = sources[index];
                  if (source) {
                    assigner(object, source, index, customizer);
                  }
                }
                return object;
              });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
              return function(collection, iteratee) {
                if (collection == null) {
                  return collection;
                }
                if (!isArrayLike(collection)) {
                  return eachFunc(collection, iteratee);
                }
                var length = collection.length,
                  index = fromRight ? length : -1,
                  iterable = Object(collection);

                while (fromRight ? index-- : ++index < length) {
                  if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                  }
                }
                return collection;
              };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
              return function(object, iteratee, keysFunc) {
                var index = -1,
                  iterable = Object(object),
                  props = keysFunc(object),
                  length = props.length;

                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return fn.apply(isBind ? thisArg : this, arguments);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
              return function(string) {
                string = toString(string);

                var strSymbols = hasUnicode(string)
                  ? stringToArray(string)
                  : undefined;

                var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                var trailing = strSymbols
                  ? castSlice(strSymbols, 1).join("")
                  : string.slice(1);

                return chr[methodName]() + trailing;
              };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
              return function(string) {
                return arrayReduce(
                  words(deburr(string).replace(reApos, "")),
                  callback,
                  ""
                );
              };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
              return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();
                  case 1:
                    return new Ctor(args[0]);
                  case 2:
                    return new Ctor(args[0], args[1]);
                  case 3:
                    return new Ctor(args[0], args[1], args[2]);
                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4]
                    );
                  case 6:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5]
                    );
                  case 7:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5],
                      args[6]
                    );
                }
                var thisBinding = baseCreate(Ctor.prototype),
                  result = Ctor.apply(thisBinding, args);

                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
              };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
              var Ctor = createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length,
                  placeholder = getHolder(wrapper);

                while (index--) {
                  args[index] = arguments[index];
                }
                var holders =
                  length < 3 &&
                  args[0] !== placeholder &&
                  args[length - 1] !== placeholder
                    ? []
                    : replaceHolders(args, placeholder);

                length -= holders.length;
                if (length < arity) {
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    undefined,
                    args,
                    holders,
                    undefined,
                    undefined,
                    arity - length
                  );
                }
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return apply(fn, this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
              return function(collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                  var iteratee = getIteratee(predicate, 3);
                  collection = keys(collection);
                  predicate = function(key) {
                    return iteratee(iterable[key], key, iterable);
                  };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1
                  ? iterable[iteratee ? collection[index] : index]
                  : undefined;
              };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
              return flatRest(function(funcs) {
                var length = funcs.length,
                  index = length,
                  prereq = LodashWrapper.prototype.thru;

                if (fromRight) {
                  funcs.reverse();
                }
                while (index--) {
                  var func = funcs[index];
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                    var wrapper = new LodashWrapper([], true);
                  }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                  func = funcs[index];

                  var funcName = getFuncName(func),
                    data = funcName == "wrapper" ? getData(func) : undefined;

                  if (
                    data &&
                    isLaziable(data[0]) &&
                    data[1] ==
                      (WRAP_ARY_FLAG |
                        WRAP_CURRY_FLAG |
                        WRAP_PARTIAL_FLAG |
                        WRAP_REARG_FLAG) &&
                    !data[4].length &&
                    data[9] == 1
                  ) {
                    wrapper = wrapper[getFuncName(data[0])].apply(
                      wrapper,
                      data[3]
                    );
                  } else {
                    wrapper =
                      func.length == 1 && isLaziable(func)
                        ? wrapper[funcName]()
                        : wrapper.thru(func);
                  }
                }
                return function() {
                  var args = arguments,
                    value = args[0];

                  if (wrapper && args.length == 1 && isArray(value)) {
                    return wrapper.plant(value).value();
                  }
                  var index = 0,
                    result = length ? funcs[index].apply(this, args) : value;

                  while (++index < length) {
                    result = funcs[index].call(this, result);
                  }
                  return result;
                };
              });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary,
              arity
            ) {
              var isAry = bitmask & WRAP_ARY_FLAG,
                isBind = bitmask & WRAP_BIND_FLAG,
                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                isFlip = bitmask & WRAP_FLIP_FLAG,
                Ctor = isBindKey ? undefined : createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length;

                while (index--) {
                  args[index] = arguments[index];
                }
                if (isCurried) {
                  var placeholder = getHolder(wrapper),
                    holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                  args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                  args = composeArgsRight(
                    args,
                    partialsRight,
                    holdersRight,
                    isCurried
                  );
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                  var newHolders = replaceHolders(args, placeholder);
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    thisArg,
                    args,
                    newHolders,
                    argPos,
                    ary,
                    arity - length
                  );
                }
                var thisBinding = isBind ? thisArg : this,
                  fn = isBindKey ? thisBinding[func] : func;

                length = args.length;
                if (argPos) {
                  args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                  args.reverse();
                }
                if (isAry && ary < length) {
                  args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                  fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
              return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
              };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
              return function(value, other) {
                var result;
                if (value === undefined && other === undefined) {
                  return defaultValue;
                }
                if (value !== undefined) {
                  result = value;
                }
                if (other !== undefined) {
                  if (result === undefined) {
                    return other;
                  }
                  if (typeof value == "string" || typeof other == "string") {
                    value = baseToString(value);
                    other = baseToString(other);
                  } else {
                    value = baseToNumber(value);
                    other = baseToNumber(other);
                  }
                  result = operator(value, other);
                }
                return result;
              };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
              return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                  var thisArg = this;
                  return arrayFunc(iteratees, function(iteratee) {
                    return apply(iteratee, thisArg, args);
                  });
                });
              });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
              chars = chars === undefined ? " " : baseToString(chars);

              var charsLength = chars.length;
              if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
              }
              var result = baseRepeat(
                chars,
                nativeCeil(length / stringSize(chars))
              );
              return hasUnicode(chars)
                ? castSlice(stringToArray(result), 0, length).join("")
                : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var argsIndex = -1,
                  argsLength = arguments.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  args = Array(leftLength + argsLength),
                  fn =
                    this && this !== root && this instanceof wrapper
                      ? Ctor
                      : func;

                while (++leftIndex < leftLength) {
                  args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                  args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function(start, end, step) {
                if (
                  step &&
                  typeof step != "number" &&
                  isIterateeCall(start, end, step)
                ) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step =
                  step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
              return function(value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                  value = toNumber(value);
                  other = toNumber(other);
                }
                return operator(value, other);
              };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(
              func,
              bitmask,
              wrapFunc,
              placeholder,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isCurry = bitmask & WRAP_CURRY_FLAG,
                newHolders = isCurry ? holders : undefined,
                newHoldersRight = isCurry ? undefined : holders,
                newPartials = isCurry ? partials : undefined,
                newPartialsRight = isCurry ? undefined : partials;

              bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
              bitmask &= ~(isCurry
                ? WRAP_PARTIAL_RIGHT_FLAG
                : WRAP_PARTIAL_FLAG);

              if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
              }
              var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
              ];

              var result = wrapFunc.apply(undefined, newData);
              if (isLaziable(func)) {
                setData(result, newData);
              }
              result.placeholder = placeholder;
              return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
              var func = Math[methodName];
              return function(number, precision) {
                number = toNumber(number);
                precision =
                  precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                  // Shift with exponential notation to avoid floating-point issues.
                  // See [MDN](https://mdn.io/round#Examples) for more details.
                  var pair = (toString(number) + "e").split("e"),
                    value = func(pair[0] + "e" + (+pair[1] + precision));

                  pair = (toString(value) + "e").split("e");
                  return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
              };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(
              Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
            )
              ? noop
              : function(values) {
                  return new Set(values);
                };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
              return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                  return mapToArray(object);
                }
                if (tag == setTag) {
                  return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
              };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
              if (!isBindKey && typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var length = partials ? partials.length : 0;
              if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
              }
              ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
              arity = arity === undefined ? arity : toInteger(arity);
              length -= holders ? holders.length : 0;

              if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials,
                  holdersRight = holders;

                partials = holders = undefined;
              }
              var data = isBindKey ? undefined : getData(func);

              var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
              ];

              if (data) {
                mergeData(newData, data);
              }
              func = newData[0];
              bitmask = newData[1];
              thisArg = newData[2];
              partials = newData[3];
              holders = newData[4];
              arity = newData[9] =
                newData[9] === undefined
                  ? isBindKey
                    ? 0
                    : func.length
                  : nativeMax(newData[9] - length, 0);

              if (
                !arity &&
                bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
              ) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
              }
              if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
              } else if (
                bitmask == WRAP_CURRY_FLAG ||
                bitmask == WRAP_CURRY_RIGHT_FLAG
              ) {
                result = createCurry(func, bitmask, arity);
              } else if (
                (bitmask == WRAP_PARTIAL_FLAG ||
                  bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                !holders.length
              ) {
                result = createPartial(func, bitmask, thisArg, partials);
              } else {
                result = createHybrid.apply(undefined, newData);
              }
              var setter = data ? baseSetData : setData;
              return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
              if (
                objValue === undefined ||
                (eq(objValue, objectProto[key]) &&
                  !hasOwnProperty.call(object, key))
              ) {
                return srcValue;
              }
              return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(
              objValue,
              srcValue,
              key,
              object,
              source,
              stack
            ) {
              if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(
                  objValue,
                  srcValue,
                  undefined,
                  customDefaultsMerge,
                  stack
                );
                stack["delete"](srcValue);
              }
              return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
              return isPlainObject(value) ? undefined : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(
              array,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

              if (
                arrLength != othLength &&
                !(isPartial && othLength > arrLength)
              ) {
                return false;
              }
              // Check that cyclic values are equal.
              var arrStacked = stack.get(array);
              var othStacked = stack.get(other);
              if (arrStacked && othStacked) {
                return arrStacked == other && othStacked == array;
              }
              var index = -1,
                result = true,
                seen =
                  bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

              stack.set(array, other);
              stack.set(other, array);

              // Ignore non-index properties.
              while (++index < arrLength) {
                var arrValue = array[index],
                  othValue = other[index];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(
                        arrValue,
                        othValue,
                        index,
                        array,
                        other,
                        stack
                      );
                }
                if (compared !== undefined) {
                  if (compared) {
                    continue;
                  }
                  result = false;
                  break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                  if (
                    !arraySome(other, function(othValue, othIndex) {
                      if (
                        !cacheHas(seen, othIndex) &&
                        (arrValue === othValue ||
                          equalFunc(
                            arrValue,
                            othValue,
                            bitmask,
                            customizer,
                            stack
                          ))
                      ) {
                        return seen.push(othIndex);
                      }
                    })
                  ) {
                    result = false;
                    break;
                  }
                } else if (
                  !(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                  )
                ) {
                  result = false;
                  break;
                }
              }
              stack["delete"](array);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(
              object,
              other,
              tag,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              switch (tag) {
                case dataViewTag:
                  if (
                    object.byteLength != other.byteLength ||
                    object.byteOffset != other.byteOffset
                  ) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;

                case arrayBufferTag:
                  if (
                    object.byteLength != other.byteLength ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))
                  ) {
                    return false;
                  }
                  return true;

                case boolTag:
                case dateTag:
                case numberTag:
                  // Coerce booleans to `1` or `0` and dates to milliseconds.
                  // Invalid dates are coerced to `NaN`.
                  return eq(+object, +other);

                case errorTag:
                  return (
                    object.name == other.name && object.message == other.message
                  );

                case regexpTag:
                case stringTag:
                  // Coerce regexes to strings and treat strings, primitives and objects,
                  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                  // for more details.
                  return object == other + "";

                case mapTag:
                  var convert = mapToArray;

                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);

                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;

                  // Recursively compare objects (susceptible to call stack limits).
                  stack.set(object, other);
                  var result = equalArrays(
                    convert(object),
                    convert(other),
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
                  stack["delete"](object);
                  return result;

                case symbolTag:
                  if (symbolValueOf) {
                    return (
                      symbolValueOf.call(object) == symbolValueOf.call(other)
                    );
                  }
              }
              return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

              if (objLength != othLength && !isPartial) {
                return false;
              }
              var index = objLength;
              while (index--) {
                var key = objProps[index];
                if (
                  !(isPartial ? key in other : hasOwnProperty.call(other, key))
                ) {
                  return false;
                }
              }
              // Check that cyclic values are equal.
              var objStacked = stack.get(object);
              var othStacked = stack.get(other);
              if (objStacked && othStacked) {
                return objStacked == other && othStacked == object;
              }
              var result = true;
              stack.set(object, other);
              stack.set(other, object);

              var skipCtor = isPartial;
              while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                  othValue = other[key];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (
                  !(compared === undefined
                    ? objValue === othValue ||
                      equalFunc(objValue, othValue, bitmask, customizer, stack)
                    : compared)
                ) {
                  result = false;
                  break;
                }
                skipCtor || (skipCtor = key == "constructor");
              }
              if (result && !skipCtor) {
                var objCtor = object.constructor,
                  othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (
                  objCtor != othCtor &&
                  "constructor" in object && "constructor" in other &&
                  !(
                    typeof objCtor == "function" &&
                    objCtor instanceof objCtor &&
                    typeof othCtor == "function" &&
                    othCtor instanceof othCtor
                  )
                ) {
                  result = false;
                }
              }
              stack["delete"](object);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
              return setToString(overRest(func, undefined, flatten), func + "");
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
              return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
              return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap
              ? noop
              : function(func) {
                  return metaMap.get(func);
                };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
              var result = func.name + "",
                array = realNames[result],
                length = hasOwnProperty.call(realNames, result)
                  ? array.length
                  : 0;

              while (length--) {
                var data = array[length],
                  otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                  return data.name;
                }
              }
              return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
              var object = hasOwnProperty.call(lodash, "placeholder")
                ? lodash
                : func;
              return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
              var result = lodash.iteratee || iteratee;
              result = result === iteratee ? baseIteratee : result;
              return arguments.length
                ? result(arguments[0], arguments[1])
                : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return isKeyable(key)
                ? data[typeof key == "string" ? "string" : "hash"]
                : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
              var result = keys(object),
                length = result.length;

              while (length--) {
                var key = result[length],
                  value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
              }
              return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = getValue(object, key);
              return baseIsNative(value) ? value : undefined;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) {}

              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols
              ? stubArray
              : function(object) {
                  if (object == null) {
                    return [];
                  }
                  object = Object(object);
                  return arrayFilter(nativeGetSymbols(object), function(
                    symbol
                  ) {
                    return propertyIsEnumerable.call(object, symbol);
                  });
                };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols
              ? stubArray
              : function(object) {
                  var result = [];
                  while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                  }
                  return result;
                };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if (
              (DataView &&
                getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
              (Map && getTag(new Map()) != mapTag) ||
              (Promise && getTag(Promise.resolve()) != promiseTag) ||
              (Set && getTag(new Set()) != setTag) ||
              (WeakMap && getTag(new WeakMap()) != weakMapTag)
            ) {
              getTag = function(value) {
                var result = baseGetTag(value),
                  Ctor = result == objectTag ? value.constructor : undefined,
                  ctorString = Ctor ? toSource(Ctor) : "";

                if (ctorString) {
                  switch (ctorString) {
                    case dataViewCtorString:
                      return dataViewTag;
                    case mapCtorString:
                      return mapTag;
                    case promiseCtorString:
                      return promiseTag;
                    case setCtorString:
                      return setTag;
                    case weakMapCtorString:
                      return weakMapTag;
                  }
                }
                return result;
              };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
              var index = -1,
                length = transforms.length;

              while (++index < length) {
                var data = transforms[index],
                  size = data.size;

                switch (data.type) {
                  case "drop":
                    start += size;
                    break;
                  case "dropRight":
                    end -= size;
                    break;
                  case "take":
                    end = nativeMin(end, start + size);
                    break;
                  case "takeRight":
                    start = nativeMax(start, end - size);
                    break;
                }
              }
              return { start: start, end: end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
              var match = source.match(reWrapDetails);
              return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                result = false;

              while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                  break;
                }
                object = object[key];
              }
              if (result || ++index != length) {
                return result;
              }
              length = object == null ? 0 : object.length;
              return (
                !!length &&
                isLength(length) &&
                isIndex(key, length) &&
                (isArray(object) || isArguments(object))
              );
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
              var length = array.length,
                result = new array.constructor(length);

              // Add properties assigned by `RegExp#exec`.
              if (
                length &&
                typeof array[0] == "string" &&
                hasOwnProperty.call(array, "index")
              ) {
                result.index = array.index;
                result.input = array.input;
              }
              return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
              return typeof object.constructor == "function" &&
                !isPrototype(object)
                ? baseCreate(getPrototype(object))
                : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
              var Ctor = object.constructor;
              switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);

                case boolTag:
                case dateTag:
                  return new Ctor(+object);

                case dataViewTag:
                  return cloneDataView(object, isDeep);

                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                  return cloneTypedArray(object, isDeep);

                case mapTag:
                  return new Ctor();

                case numberTag:
                case stringTag:
                  return new Ctor(object);

                case regexpTag:
                  return cloneRegExp(object);

                case setTag:
                  return new Ctor();

                case symbolTag:
                  return cloneSymbol(object);
              }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
              var length = details.length;
              if (!length) {
                return source;
              }
              var lastIndex = length - 1;
              details[lastIndex] =
                (length > 1 ? "& " : "") + details[lastIndex];
              details = details.join(length > 2 ? ", " : " ");
              return source.replace(
                reWrapComment,
                "{\n/* [wrapped with " + details + "] */\n"
              );
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
              return (
                isArray(value) ||
                isArguments(value) ||
                !!(spreadableSymbol && value && value[spreadableSymbol])
              );
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return (
                !!length &&
                (type == "number" ||
                  (type != "symbol" && reIsUint.test(value))) &&
                value > -1 && value % 1 == 0 && value < length
              );
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject(object)) {
                return false;
              }
              var type = typeof index;
              if (
                type == "number"
                  ? isArrayLike(object) && isIndex(index, object.length)
                  : type == "string" && index in object
              ) {
                return eq(object[index], value);
              }
              return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray(value)) {
                return false;
              }
              var type = typeof value;
              if (
                type == "number" ||
                type == "symbol" ||
                type == "boolean" ||
                value == null ||
                isSymbol(value)
              ) {
                return true;
              }
              return (
                reIsPlainProp.test(value) ||
                !reIsDeepProp.test(value) ||
                (object != null && value in Object(object))
              );
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return type == "string" ||
                type == "number" ||
                type == "symbol" ||
                type == "boolean"
                ? value !== "__proto__"
                : value === null;
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
              var funcName = getFuncName(func),
                other = lodash[funcName];

              if (
                typeof other != "function" ||
                !(funcName in LazyWrapper.prototype)
              ) {
                return false;
              }
              if (func === other) {
                return true;
              }
              var data = getData(other);
              return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && maskSrcKey in func;
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
              var Ctor = value && value.constructor,
                proto =
                  (typeof Ctor == "function" && Ctor.prototype) || objectProto;

              return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
              return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
              return function(object) {
                if (object == null) {
                  return false;
                }
                return (
                  object[key] === srcValue &&
                  (srcValue !== undefined || key in Object(object))
                );
              };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
              var bitmask = data[1],
                srcBitmask = source[1],
                newBitmask = bitmask | srcBitmask,
                isCommon =
                  newBitmask <
                  (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

              var isCombo =
                (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
                (srcBitmask == WRAP_ARY_FLAG &&
                  bitmask == WRAP_REARG_FLAG &&
                  data[7].length <= source[8]) ||
                (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                  source[7].length <= source[8] &&
                  bitmask == WRAP_CURRY_FLAG);

              // Exit early if metadata can't be merged.
              if (!(isCommon || isCombo)) {
                return data;
              }
              // Use source `thisArg` if available.
              if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |=
                  bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
              }
              // Compose partial arguments.
              var value = source[3];
              if (value) {
                var partials = data[3];
                data[3] = partials
                  ? composeArgs(partials, value, source[4])
                  : value;
                data[4] = partials
                  ? replaceHolders(data[3], PLACEHOLDER)
                  : source[4];
              }
              // Compose partial right arguments.
              value = source[5];
              if (value) {
                partials = data[5];
                data[5] = partials
                  ? composeArgsRight(partials, value, source[6])
                  : value;
                data[6] = partials
                  ? replaceHolders(data[5], PLACEHOLDER)
                  : source[6];
              }
              // Use source `argPos` if available.
              value = source[7];
              if (value) {
                data[7] = value;
              }
              // Use source `ary` if it's smaller.
              if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] =
                  data[8] == null ? source[8] : nativeMin(data[8], source[8]);
              }
              // Use source `arity` if one is not provided.
              if (data[9] == null) {
                data[9] = source[9];
              }
              // Use source `func` and merge bitmasks.
              data[0] = source[0];
              data[1] = newBitmask;

              return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
              var result = [];
              if (object != null) {
                for (var key in Object(object)) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
              return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
              start = nativeMax(
                start === undefined ? func.length - 1 : start,
                0
              );
              return function() {
                var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  array = Array(length);

                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
              };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
              return path.length < 2
                ? object
                : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
              var arrLength = array.length,
                length = nativeMin(indexes.length, arrLength),
                oldArray = copyArray(array);

              while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength)
                  ? oldArray[index]
                  : undefined;
              }
              return array;
            }

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
              if (key === "constructor" && typeof object[key] === "function") {
                return;
              }

              if (key == "__proto__") {
                return;
              }

              return object[key];
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout =
              ctxSetTimeout ||
              function(func, wait) {
                return root.setTimeout(func, wait);
              };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
              var source = reference + "";
              return setToString(
                wrapper,
                insertWrapDetails(
                  source,
                  updateWrapDetails(getWrapDetails(source), bitmask)
                )
              );
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
              var count = 0,
                lastCalled = 0;

              return function() {
                var stamp = nativeNow(),
                  remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                  if (++count >= HOT_COUNT) {
                    return arguments[0];
                  }
                } else {
                  count = 0;
                }
                return func.apply(undefined, arguments);
              };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
              var index = -1,
                length = array.length,
                lastIndex = length - 1;

              size = size === undefined ? length : size;
              while (++index < size) {
                var rand = baseRandom(index, lastIndex),
                  value = array[rand];

                array[rand] = array[index];
                array[index] = value;
              }
              array.length = size;
              return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function(string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push("");
              }
              string.replace(rePropName, function(
                match,
                number,
                quote,
                subString
              ) {
                result.push(
                  quote
                    ? subString.replace(reEscapeChar, "$1")
                    : number || match
                );
              });
              return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == "string" || isSymbol(value)) {
                return value;
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) {}
                try {
                  return func + "";
                } catch (e) {}
              }
              return "";
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
              arrayEach(wrapFlags, function(pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                  details.push(value);
                }
              });
              return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
              if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
              }
              var result = new LodashWrapper(
                wrapper.__wrapped__,
                wrapper.__chain__
              );
              result.__actions__ = copyArray(wrapper.__actions__);
              result.__index__ = wrapper.__index__;
              result.__values__ = wrapper.__values__;
              return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
              if (
                guard ? isIterateeCall(array, size, guard) : size === undefined
              ) {
                size = 1;
              } else {
                size = nativeMax(toInteger(size), 0);
              }
              var length = array == null ? 0 : array.length;
              if (!length || size < 1) {
                return [];
              }
              var index = 0,
                resIndex = 0,
                result = Array(nativeCeil(length / size));

              while (index < length) {
                result[resIndex++] = baseSlice(array, index, (index += size));
              }
              return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
              var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (value) {
                  result[resIndex++] = value;
                }
              }
              return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
              var length = arguments.length;
              if (!length) {
                return [];
              }
              var args = Array(length - 1),
                array = arguments[0],
                index = length;

              while (index--) {
                args[index - 1] = arguments[index];
              }
              return arrayPush(
                isArray(array) ? copyArray(array) : [array],
                baseFlatten(args, 1)
              );
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function(array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true)
                  )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function(array, values) {
              var iteratee = last(values);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true),
                    getIteratee(iteratee, 2)
                  )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function(array, values) {
              var comparator = last(values);
              if (isArrayLikeObject(comparator)) {
                comparator = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true),
                    undefined,
                    comparator
                  )
                : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true)
                : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                start &&
                typeof start != "number" &&
                isIterateeCall(array, value, start)
              ) {
                start = 0;
                end = length;
              }
              return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length - 1;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  fromIndex < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return baseFindIndex(
                array,
                getIteratee(predicate, 3),
                index,
                true
              );
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
              var index = -1,
                length = pairs == null ? 0 : pairs.length,
                result = {};

              while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
              }
              return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
              return array && array.length ? array[0] : undefined;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function(arrays) {
              var mapped = arrayMap(arrays, castArrayLikeObject);
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped)
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function(arrays) {
              var iteratee = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              if (iteratee === last(mapped)) {
                iteratee = undefined;
              } else {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function(arrays) {
              var comparator = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              comparator =
                typeof comparator == "function" ? comparator : undefined;
              if (comparator) {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, undefined, comparator)
                : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
              return array == null ? "" : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
              var length = array == null ? 0 : array.length;
              return length ? array[length - 1] : undefined;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  index < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return value === value
                ? strictLastIndexOf(array, value, index)
                : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
              return array && array.length
                ? baseNth(array, toInteger(n))
                : undefined;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
              return array && array.length && values && values.length
                ? basePullAll(array, values)
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, getIteratee(iteratee, 2))
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, undefined, comparator)
                : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function(array, indexes) {
              var length = array == null ? 0 : array.length,
                result = baseAt(array, indexes);

              basePullAt(
                array,
                arrayMap(indexes, function(index) {
                  return isIndex(index, length) ? +index : index;
                }).sort(compareAscending)
              );

              return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
              var result = [];
              if (!(array && array.length)) {
                return result;
              }
              var index = -1,
                indexes = [],
                length = array.length;

              predicate = getIteratee(predicate, 3);
              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result.push(value);
                  indexes.push(index);
                }
              }
              basePullAt(array, indexes);
              return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
              return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                end &&
                typeof end != "number" &&
                isIterateeCall(array, start, end)
              ) {
                start = 0;
                end = length;
              } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
              }
              return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
              return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
              return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(
                array,
                value,
                getIteratee(iteratee, 2),
                true
              );
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
              return array && array.length ? baseSortedUniq(array) : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
              return array && array.length
                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
              if (!(array && array.length)) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3))
                : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function(arrays) {
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function(arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function(arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                undefined,
                comparator
              );
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
              return array && array.length ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
              return array && array.length
                ? baseUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return array && array.length
                ? baseUniq(array, undefined, comparator)
                : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
              if (!(array && array.length)) {
                return [];
              }
              var length = 0;
              array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                  length = nativeMax(group.length, length);
                  return true;
                }
              });
              return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
              });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
              if (!(array && array.length)) {
                return [];
              }
              var result = unzip(array);
              if (iteratee == null) {
                return result;
              }
              return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
              });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function(array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(array, values)
                : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function(arrays) {
              return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function(arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function(arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                undefined,
                comparator
              );
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
              return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
              return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function(arrays) {
              var length = arrays.length,
                iteratee = length > 1 ? arrays[length - 1] : undefined;

              iteratee =
                typeof iteratee == "function"
                  ? (arrays.pop(), iteratee)
                  : undefined;
              return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
              var result = lodash(value);
              result.__chain__ = true;
              return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
              interceptor(value);
              return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
              return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function(paths) {
              var length = paths.length,
                start = length ? paths[0] : 0,
                value = this.__wrapped__,
                interceptor = function(object) {
                  return baseAt(object, paths);
                };

              if (
                length > 1 ||
                this.__actions__.length ||
                !(value instanceof LazyWrapper) ||
                !isIndex(start)
              ) {
                return this.thru(interceptor);
              }
              value = value.slice(start, +start + (length ? 1 : 0));
              value.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined
              });
              return new LodashWrapper(value, this.__chain__).thru(function(
                array
              ) {
                if (length && !array.length) {
                  array.push(undefined);
                }
                return array;
              });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
              return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
              return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
              if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
              }
              var done = this.__index__ >= this.__values__.length,
                value = done ? undefined : this.__values__[this.__index__++];

              return { done: done, value: value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
              return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
              var result,
                parent = this;

              while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                  previous.__wrapped__ = clone;
                } else {
                  result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
              }
              previous.__wrapped__ = value;
              return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
              var value = this.__wrapped__;
              if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                  wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                  func: thru,
                  args: [reverse],
                  thisArg: undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
              }
              return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
              return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function(result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                ++result[key];
              } else {
                baseAssignValue(result, key, 1);
              }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
              var func = isArray(collection) ? arrayEvery : baseEvery;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             *
             * // Combining several predicates using `_.overEvery` or `_.overSome`.
             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
             * // => objects for ['fred', 'barney']
             */
            function filter(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
              var func = isArray(collection) ? arrayEach : baseEach;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
              var func = isArray(collection) ? arrayEachRight : baseEachRight;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function(result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
              } else {
                baseAssignValue(result, key, [value]);
              }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
              collection = isArrayLike(collection)
                ? collection
                : values(collection);
              fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

              var length = collection.length;
              if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
              }
              return isString(collection)
                ? fromIndex <= length &&
                    collection.indexOf(value, fromIndex) > -1
                : !!length && baseIndexOf(collection, value, fromIndex) > -1;
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function(collection, path, args) {
              var index = -1,
                isFunc = typeof path == "function",
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function(value) {
                result[++index] = isFunc
                  ? apply(path, value, args)
                  : baseInvoke(value, path, args);
              });
              return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function(result, value, key) {
              baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
              var func = isArray(collection) ? arrayMap : baseMap;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
              if (collection == null) {
                return [];
              }
              if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
              }
              orders = guard ? undefined : orders;
              if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
              }
              return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(
              function(result, value, key) {
                result[key ? 0 : 1].push(value);
              },
              function() {
                return [[], []];
              }
            );

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduce : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEach
              );
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduceRight : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEachRight
              );
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
              var func = isArray(collection) ? arraySample : baseSample;
              return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
              if (
                guard ? isIterateeCall(collection, n, guard) : n === undefined
              ) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              var func = isArray(collection) ? arraySampleSize : baseSampleSize;
              return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
              var func = isArray(collection) ? arrayShuffle : baseShuffle;
              return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
              if (collection == null) {
                return 0;
              }
              if (isArrayLike(collection)) {
                return isString(collection)
                  ? stringSize(collection)
                  : collection.length;
              }
              var tag = getTag(collection);
              if (tag == mapTag || tag == setTag) {
                return collection.size;
              }
              return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
              var func = isArray(collection) ? arraySome : baseSome;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function(collection, iteratees) {
              if (collection == null) {
                return [];
              }
              var length = iteratees.length;
              if (
                length > 1 &&
                isIterateeCall(collection, iteratees[0], iteratees[1])
              ) {
                iteratees = [];
              } else if (
                length > 2 &&
                isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
              ) {
                iteratees = [iteratees[0]];
              }
              return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now =
              ctxNow ||
              function() {
                return root.Date.now();
              };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function() {
                if (--n < 1) {
                  return func.apply(this, arguments);
                }
              };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
              n = guard ? undefined : n;
              n = func && n == null ? func.length : n;
              return createWrap(
                func,
                WRAP_ARY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                n
              );
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
              var result;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function() {
                if (--n > 0) {
                  result = func.apply(this, arguments);
                }
                if (n <= 1) {
                  func = undefined;
                }
                return result;
              };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function(func, thisArg, partials) {
              var bitmask = WRAP_BIND_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function(object, key, partials) {
              var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curry.placeholder;
              return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_RIGHT_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curryRight.placeholder;
              return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
              var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing
                  ? nativeMax(toNumber(options.maxWait) || 0, wait)
                  : maxWait;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }

              function invokeFunc(time) {
                var args = lastArgs,
                  thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }

              function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
              }

              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  timeWaiting = wait - timeSinceLastCall;

                return maxing
                  ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                  : timeWaiting;
              }

              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime;

                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return (
                  lastCallTime === undefined ||
                  timeSinceLastCall >= wait ||
                  timeSinceLastCall < 0 ||
                  (maxing && timeSinceLastInvoke >= maxWait)
                );
              }

              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
              }

              function trailingEdge(time) {
                timerId = undefined;

                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
              }

              function cancel() {
                if (timerId !== undefined) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
              }

              function flush() {
                return timerId === undefined ? result : trailingEdge(now());
              }

              function debounced() {
                var time = now(),
                  isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                  if (timerId === undefined) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    // Handle invocations in a tight loop.
                    clearTimeout(timerId);
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === undefined) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function(func, args) {
              return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function(func, wait, args) {
              return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
              return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (
                typeof func != "function" ||
                (resolver != null && typeof resolver != "function")
              ) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function() {
                var args = arguments,
                  key = resolver ? resolver.apply(this, args) : args[0],
                  cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || MapCache)();
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
              if (typeof predicate != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return function() {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return !predicate.call(this);
                  case 1:
                    return !predicate.call(this, args[0]);
                  case 2:
                    return !predicate.call(this, args[0], args[1]);
                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
              };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
              return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function(func, transforms) {
              transforms =
                transforms.length == 1 && isArray(transforms[0])
                  ? arrayMap(transforms[0], baseUnary(getIteratee()))
                  : arrayMap(
                      baseFlatten(transforms, 1),
                      baseUnary(getIteratee())
                    );

              var funcsLength = transforms.length;
              return baseRest(function(args) {
                var index = -1,
                  length = nativeMin(args.length, funcsLength);

                while (++index < length) {
                  args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
              });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function(func, partials) {
              var holders = replaceHolders(partials, getHolder(partial));
              return createWrap(
                func,
                WRAP_PARTIAL_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function(func, partials) {
              var holders = replaceHolders(partials, getHolder(partialRight));
              return createWrap(
                func,
                WRAP_PARTIAL_RIGHT_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function(func, indexes) {
              return createWrap(
                func,
                WRAP_REARG_FLAG,
                undefined,
                undefined,
                undefined,
                indexes
              );
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start === undefined ? start : toInteger(start);
              return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start == null ? 0 : nativeMax(toInteger(start), 0);
              return baseRest(function(args) {
                var array = args[start],
                  otherArgs = castSlice(args, 0, start);

                if (array) {
                  arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
              });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
              var leading = true,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                leading: leading,
                maxWait: wait,
                trailing: trailing
              });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
              return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
              return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
              if (!arguments.length) {
                return [];
              }
              var value = arguments[0];
              return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
              return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(
                value,
                CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                customizer
              );
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
              return (
                source == null || baseConformsTo(object, source, keys(source))
              );
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function(value, other) {
              return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(
              (function() {
                return arguments;
              })()
            )
              ? baseIsArguments
              : function(value) {
                  return (
                    isObjectLike(value) &&
                    hasOwnProperty.call(value, "callee") &&
                    !propertyIsEnumerable.call(value, "callee")
                  );
                };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer
              ? baseUnary(nodeIsArrayBuffer)
              : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return (
                value != null && isLength(value.length) && !isFunction(value)
              );
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
              return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
              return (
                value === true ||
                value === false ||
                (isObjectLike(value) && baseGetTag(value) == boolTag)
              );
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
              return (
                isObjectLike(value) &&
                value.nodeType === 1 &&
                !isPlainObject(value)
              );
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
              if (value == null) {
                return true;
              }
              if (
                isArrayLike(value) &&
                (isArray(value) ||
                  typeof value == "string" ||
                  typeof value.splice == "function" ||
                  isBuffer(value) ||
                  isTypedArray(value) ||
                  isArguments(value))
              ) {
                return !value.length;
              }
              var tag = getTag(value);
              if (tag == mapTag || tag == setTag) {
                return !value.size;
              }
              if (isPrototype(value)) {
                return !baseKeys(value).length;
              }
              for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
              return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              var result = customizer ? customizer(value, other) : undefined;
              return result === undefined
                ? baseIsEqual(value, other, undefined, customizer)
                : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
              if (!isObjectLike(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return (
                tag == errorTag ||
                tag == domExcTag ||
                (typeof value.message == "string" &&
                  typeof value.name == "string" &&
                  !isPlainObject(value))
              );
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
              return typeof value == "number" && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = baseGetTag(value);
              return (
                tag == funcTag ||
                tag == genTag ||
                tag == asyncTag ||
                tag == proxyTag
              );
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
              return typeof value == "number" && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return (
                typeof value == "number" &&
                value > -1 &&
                value % 1 == 0 &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
              var type = typeof value;
              return value != null && (type == "object" || type == "function");
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == "object";
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
              return (
                object === source ||
                baseIsMatch(object, source, getMatchData(source))
              );
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseIsMatch(
                object,
                source,
                getMatchData(source),
                customizer
              );
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
              // An `NaN` primitive is the only value that is not equal to itself.
              // Perform the `toStringTag` check first to avoid errors with some
              // ActiveX objects in IE.
              return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
              if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
              }
              return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
              return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
              return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
              return (
                typeof value == "number" ||
                (isObjectLike(value) && baseGetTag(value) == numberTag)
              );
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
              if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor =
                hasOwnProperty.call(proto, "constructor") && proto.constructor;
              return (
                typeof Ctor == "function" &&
                Ctor instanceof Ctor &&
                funcToString.call(Ctor) == objectCtorString
              );
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp
              ? baseUnary(nodeIsRegExp)
              : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
              return (
                isInteger(value) &&
                value >= -MAX_SAFE_INTEGER &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
              return (
                typeof value == "string" ||
                (!isArray(value) &&
                  isObjectLike(value) &&
                  baseGetTag(value) == stringTag)
              );
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
              return (
                typeof value == "symbol" ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag)
              );
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray
              ? baseUnary(nodeIsTypedArray)
              : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
              return value === undefined;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
              return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
              return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function(value, other) {
              return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
              if (!value) {
                return [];
              }
              if (isArrayLike(value)) {
                return isString(value)
                  ? stringToArray(value)
                  : copyArray(value);
              }
              if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
              }
              var tag = getTag(value),
                func =
                  tag == mapTag
                    ? mapToArray
                    : tag == setTag
                    ? setToArray
                    : values;

              return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
              var result = toFinite(value),
                remainder = result % 1;

              return result === result
                ? remainder
                  ? result - remainder
                  : result
                : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
              return value
                ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other =
                  typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = baseTrim(value);
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value)
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : reIsBadHex.test(value)
                ? NAN
                : +value;
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
              return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
              return value
                ? baseClamp(
                    toInteger(value),
                    -MAX_SAFE_INTEGER,
                    MAX_SAFE_INTEGER
                  )
                : value === 0
                ? value
                : 0;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
              return value == null ? "" : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function(object, source) {
              if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
              }
              for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                  assignValue(object, key, source[key]);
                }
              }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function(object, source) {
              copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function(
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function(
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
              var result = baseCreate(prototype);
              return properties == null
                ? result
                : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function(object, sources) {
              object = Object(object);

              var index = -1;
              var length = sources.length;
              var guard = length > 2 ? sources[2] : undefined;

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
              }

              while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;

                while (++propsIndex < propsLength) {
                  var key = props[propsIndex];
                  var value = object[key];

                  if (
                    value === undefined ||
                    (eq(value, objectProto[key]) &&
                      !hasOwnProperty.call(object, key))
                  ) {
                    object[key] = source[key];
                  }
                }
              }

              return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function(args) {
              args.push(undefined, customDefaultsMerge);
              return apply(mergeWith, undefined, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
              return baseFindKey(
                object,
                getIteratee(predicate, 3),
                baseForOwnRight
              );
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
              return object == null
                ? object
                : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
              return object == null
                ? object
                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
              return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
              return (
                object && baseForOwnRight(object, getIteratee(iteratee, 3))
              );
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
              return object == null ? [] : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
              return object == null
                ? []
                : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
              var result = object == null ? undefined : baseGet(object, path);
              return result === undefined ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
              return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
              return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function(result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function(result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
              } else {
                result[value] = [key];
              }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object)
                : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object, true)
                : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
              });
              return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
              });
              return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function(object, source, srcIndex) {
              baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function(
              object,
              source,
              srcIndex,
              customizer
            ) {
              baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function(object, paths) {
              var result = {};
              if (object == null) {
                return result;
              }
              var isDeep = false;
              paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
              });
              copyObject(object, getAllKeysIn(object), result);
              if (isDeep) {
                result = baseClone(
                  result,
                  CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                  customOmitClone
                );
              }
              var length = paths.length;
              while (length--) {
                baseUnset(result, paths[length]);
              }
              return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
              return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function(object, paths) {
              return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
              if (object == null) {
                return {};
              }
              var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [prop];
              });
              predicate = getIteratee(predicate);
              return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
              });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
              path = castPath(path, object);

              var index = -1,
                length = path.length;

              // Ensure the loop is entered when path is empty.
              if (!length) {
                length = 1;
                object = undefined;
              }
              while (++index < length) {
                var value =
                  object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                  index = length;
                  value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
              }
              return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
              var isArr = isArray(object),
                isArrLike = isArr || isBuffer(object) || isTypedArray(object);

              iteratee = getIteratee(iteratee, 4);
              if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                  accumulator = isArr ? new Ctor() : [];
                } else if (isObject(object)) {
                  accumulator = isFunction(Ctor)
                    ? baseCreate(getPrototype(object))
                    : {};
                } else {
                  accumulator = {};
                }
              }
              (isArrLike ? arrayEach : baseForOwn)(object, function(
                value,
                index,
                object
              ) {
                return iteratee(accumulator, value, index, object);
              });
              return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
              return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater), customizer);
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
              return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
              return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
              if (upper === undefined) {
                upper = lower;
                lower = undefined;
              }
              if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
              }
              if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
              }
              return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
              start = toFinite(start);
              if (end === undefined) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              number = toNumber(number);
              return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
              if (
                floating &&
                typeof floating != "boolean" &&
                isIterateeCall(lower, upper, floating)
              ) {
                upper = floating = undefined;
              }
              if (floating === undefined) {
                if (typeof upper == "boolean") {
                  floating = upper;
                  upper = undefined;
                } else if (typeof lower == "boolean") {
                  floating = lower;
                  lower = undefined;
                }
              }
              if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
              } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                  upper = lower;
                  lower = 0;
                } else {
                  upper = toFinite(upper);
                }
              }
              if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
              }
              if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(
                  lower +
                    rand *
                      (upper -
                        lower +
                        freeParseFloat("1e-" + ((rand + "").length - 1))),
                  upper
                );
              }
              return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function(result, word, index) {
              word = word.toLowerCase();
              return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
              return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
              string = toString(string);
              return (
                string &&
                string.replace(reLatin, deburrLetter).replace(reComboMark, "")
              );
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
              string = toString(string);
              target = baseToString(target);

              var length = string.length;
              position =
                position === undefined
                  ? length
                  : baseClamp(toInteger(position), 0, length);

              var end = position;
              position -= target.length;
              return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
              string = toString(string);
              return string && reHasUnescapedHtml.test(string)
                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
              string = toString(string);
              return string && reHasRegExpChar.test(string)
                ? string.replace(reRegExpChar, "\\$&")
                : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function(result, word, index) {
              return result + (index ? "-" : "") + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function(result, word, index) {
              return result + (index ? " " : "") + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst("toLowerCase");

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              if (!length || strLength >= length) {
                return string;
              }
              var mid = (length - strLength) / 2;
              return (
                createPadding(nativeFloor(mid), chars) +
                string +
                createPadding(nativeCeil(mid), chars)
              );
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? string + createPadding(length - strLength, chars)
                : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? createPadding(length - strLength, chars) + string
                : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
              if (guard || radix == null) {
                radix = 0;
              } else if (radix) {
                radix = +radix;
              }
              return nativeParseInt(
                toString(string).replace(reTrimStart, ""),
                radix || 0
              );
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
              if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
              var args = arguments,
                string = toString(args[0]);

              return args.length < 3
                ? string
                : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function(result, word, index) {
              return result + (index ? "_" : "") + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
              if (
                limit &&
                typeof limit != "number" &&
                isIterateeCall(string, separator, limit)
              ) {
                separator = limit = undefined;
              }
              limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
              if (!limit) {
                return [];
              }
              string = toString(string);
              if (
                string &&
                (typeof separator == "string" ||
                  (separator != null && !isRegExp(separator)))
              ) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                  return castSlice(stringToArray(string), 0, limit);
                }
              }
              return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function(result, word, index) {
              return result + (index ? " " : "") + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
              string = toString(string);
              position =
                position == null
                  ? 0
                  : baseClamp(toInteger(position), 0, string.length);

              target = baseToString(target);
              return string.slice(position, position + target.length) == target;
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
              // Based on John Resig's `tmpl` implementation
              // (http://ejohn.org/blog/javascript-micro-templating/)
              // and Laura Doktorova's doT.js (https://github.com/olado/doT).
              var settings = lodash.templateSettings;

              if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
              }
              string = toString(string);
              options = assignInWith(
                {},
                options,
                settings,
                customDefaultsAssignIn
              );

              var imports = assignInWith(
                  {},
                  options.imports,
                  settings.imports,
                  customDefaultsAssignIn
                ),
                importsKeys = keys(imports),
                importsValues = baseValues(imports, importsKeys);

              var isEscaping,
                isEvaluating,
                index = 0,
                interpolate = options.interpolate || reNoMatch,
                source = "__p += '";

              // Compile the regexp to match each delimiter.
              var reDelimiters = RegExp(
                (options.escape || reNoMatch).source +
                  "|" +
                  interpolate.source +
                  "|" +
                  (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                    .source +
                  "|" +
                  (options.evaluate || reNoMatch).source +
                  "|$",
                "g"
              );

              // Use a sourceURL for easier debugging.
              // The sourceURL gets injected into the source that's eval-ed, so be careful
              // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
              // and escape the comment, thus injecting code that gets evaled.
              var sourceURL =
                "//# sourceURL=" +
                (hasOwnProperty.call(options, "sourceURL")
                  ? (options.sourceURL + "").replace(/\s/g, " ")
                  : "lodash.templateSources[" + ++templateCounter + "]") +
                "\n";

              string.replace(reDelimiters, function(
                match,
                escapeValue,
                interpolateValue,
                esTemplateValue,
                evaluateValue,
                offset
              ) {
                interpolateValue || (interpolateValue = esTemplateValue);

                // Escape characters that can't be included in string literals.
                source += string
                  .slice(index, offset)
                  .replace(reUnescapedString, escapeStringChar);

                // Replace delimiters with snippets.
                if (escapeValue) {
                  isEscaping = true;
                  source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                  isEvaluating = true;
                  source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) {
                  source +=
                    "' +\n((__t = (" +
                    interpolateValue +
                    ")) == null ? '' : __t) +\n'";
                }
                index = offset + match.length;

                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
              });

              source += "';\n";

              // If `variable` is not specified wrap a with-statement around the generated
              // code to add the data object to the top of the scope chain.
              var variable =
                hasOwnProperty.call(options, "variable") && options.variable;
              if (!variable) {
                source = "with (obj) {\n" + source + "\n}\n";
              }
              // Throw an error if a forbidden character was found in `variable`, to prevent
              // potential command injection attacks.
              else if (reForbiddenIdentifierChars.test(variable)) {
                throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
              }

              // Cleanup code by stripping empty strings.
              source = (isEvaluating
                ? source.replace(reEmptyStringLeading, "")
                : source
              )
                .replace(reEmptyStringMiddle, "$1")
                .replace(reEmptyStringTrailing, "$1;");

              // Frame code as the function body.
              source =
                "function(" +
                (variable || "obj") +
                ") {\n" +
                (variable ? "" : "obj || (obj = {});\n") +
                "var __t, __p = ''" +
                (isEscaping ? ", __e = _.escape" : "") +
                (isEvaluating
                  ? ", __j = Array.prototype.join;\n" +
                    "function print() { __p += __j.call(arguments, '') }\n"
                  : ";\n") +
                source +
                "return __p\n}";

              var result = attempt(function() {
                return Function(
                  importsKeys,
                  sourceURL + "return " + source
                ).apply(undefined, importsValues);
              });

              // Provide the compiled function's source by its `toString` method or
              // the `source` property as a convenience for inlining compiled templates.
              result.source = source;
              if (isError(result)) {
                throw result;
              }
              return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
              return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
              return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return baseTrim(string);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                chrSymbols = stringToArray(chars),
                start = charsStartIndex(strSymbols, chrSymbols),
                end = charsEndIndex(strSymbols, chrSymbols) + 1;

              return castSlice(strSymbols, start, end).join("");
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.slice(0, trimmedEndIndex(string) + 1);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

              return castSlice(strSymbols, 0, end).join("");
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                start = charsStartIndex(strSymbols, stringToArray(chars));

              return castSlice(strSymbols, start).join("");
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
              var length = DEFAULT_TRUNC_LENGTH,
                omission = DEFAULT_TRUNC_OMISSION;

              if (isObject(options)) {
                var separator =
                  "separator" in options ? options.separator : separator;
                length =
                  "length" in options ? toInteger(options.length) : length;
                omission =
                  "omission" in options
                    ? baseToString(options.omission)
                    : omission;
              }
              string = toString(string);

              var strLength = string.length;
              if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
              }
              if (length >= strLength) {
                return string;
              }
              var end = length - stringSize(omission);
              if (end < 1) {
                return omission;
              }
              var result = strSymbols
                ? castSlice(strSymbols, 0, end).join("")
                : string.slice(0, end);

              if (separator === undefined) {
                return result + omission;
              }
              if (strSymbols) {
                end += result.length - end;
              }
              if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                  var match,
                    substring = result;

                  if (!separator.global) {
                    separator = RegExp(
                      separator.source,
                      toString(reFlags.exec(separator)) + "g"
                    );
                  }
                  separator.lastIndex = 0;
                  while ((match = separator.exec(substring))) {
                    var newEnd = match.index;
                  }
                  result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
              } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                  result = result.slice(0, index);
                }
              }
              return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
              string = toString(string);
              return string && reHasEscapedHtml.test(string)
                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function(result, word, index) {
              return result + (index ? " " : "") + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst("toUpperCase");

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
              string = toString(string);
              pattern = guard ? undefined : pattern;

              if (pattern === undefined) {
                return hasUnicodeWord(string)
                  ? unicodeWords(string)
                  : asciiWords(string);
              }
              return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function(func, args) {
              try {
                return apply(func, undefined, args);
              } catch (e) {
                return isError(e) ? e : new Error(e);
              }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function(object, methodNames) {
              arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
              });
              return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
              var length = pairs == null ? 0 : pairs.length,
                toIteratee = getIteratee();

              pairs = !length
                ? []
                : arrayMap(pairs, function(pair) {
                    if (typeof pair[1] != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return [toIteratee(pair[0]), pair[1]];
                  });

              return baseRest(function(args) {
                var index = -1;
                while (++index < length) {
                  var pair = pairs[index];
                  if (apply(pair[0], this, args)) {
                    return apply(pair[1], this, args);
                  }
                }
              });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
              return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
              return function() {
                return value;
              };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
              return value == null || value !== value ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
              return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
              return baseIteratee(
                typeof func == "function"
                  ? func
                  : baseClone(func, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
              return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matchesProperty(path, srcValue) {
              return baseMatchesProperty(
                path,
                baseClone(srcValue, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function(path, args) {
              return function(object) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function(object, args) {
              return function(path) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
              var props = keys(source),
                methodNames = baseFunctions(source, props);

              if (
                options == null &&
                !(isObject(source) && (methodNames.length || !props.length))
              ) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
              }
              var chain =
                  !(isObject(options) && "chain" in options) || !!options.chain,
                isFunc = isFunction(object);

              arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                  object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                      var result = object(this.__wrapped__),
                        actions = (result.__actions__ = copyArray(
                          this.__actions__
                        ));

                      actions.push({
                        func: func,
                        args: arguments,
                        thisArg: object
                      });
                      result.__chain__ = chainAll;
                      return result;
                    }
                    return func.apply(
                      object,
                      arrayPush([this.value()], arguments)
                    );
                  };
                }
              });

              return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
              if (root._ === this) {
                root._ = oldDash;
              }
              return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
              // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
              n = toInteger(n);
              return baseRest(function(args) {
                return baseNth(args, n);
              });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             *
             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
              return isKey(path)
                ? baseProperty(toKey(path))
                : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
              return function(path) {
                return object == null ? undefined : baseGet(object, path);
              };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
              return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
              return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
              return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
              return "";
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
              return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
              n = toInteger(n);
              if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
              }
              var index = MAX_ARRAY_LENGTH,
                length = nativeMin(n, MAX_ARRAY_LENGTH);

              iteratee = getIteratee(iteratee);
              n -= MAX_ARRAY_LENGTH;

              var result = baseTimes(length, iteratee);
              while (++index < n) {
                iteratee(index);
              }
              return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
              if (isArray(value)) {
                return arrayMap(value, toKey);
              }
              return isSymbol(value)
                ? [value]
                : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
              var id = ++idCounter;
              return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function(augend, addend) {
              return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound("ceil");

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function(dividend, divisor) {
              return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound("floor");

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseGt)
                : undefined;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                : undefined;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
              return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
              return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseLt)
                : undefined;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                : undefined;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function(
              multiplier,
              multiplicand
            ) {
              return multiplier * multiplicand;
            },
            1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound("round");

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function(minuend, subtrahend) {
              return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
              return array && array.length ? baseSum(array, identity) : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
              return array && array.length
                ? baseSum(array, getIteratee(iteratee, 2))
                : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(
              lodash,
              (function() {
                var source = {};
                baseForOwn(lodash, function(func, methodName) {
                  if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                  }
                });
                return source;
              })(),
              { chain: false }
            );

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(
              [
                "bind",
                "bindKey",
                "curry",
                "curryRight",
                "partial",
                "partialRight"
              ],
              function(methodName) {
                lodash[methodName].placeholder = lodash;
              }
            );

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(["drop", "take"], function(methodName, index) {
              LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                var result =
                  this.__filtered__ && !index
                    ? new LazyWrapper(this)
                    : this.clone();

                if (result.__filtered__) {
                  result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                  result.__views__.push({
                    size: nativeMin(n, MAX_ARRAY_LENGTH),
                    type: methodName + (result.__dir__ < 0 ? "Right" : "")
                  });
                }
                return result;
              };

              LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()
                  [methodName](n)
                  .reverse();
              };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(["filter", "map", "takeWhile"], function(
              methodName,
              index
            ) {
              var type = index + 1,
                isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

              LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                  iteratee: getIteratee(iteratee, 3),
                  type: type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
              };
            });

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(["head", "last"], function(methodName, index) {
              var takeName = "take" + (index ? "Right" : "");

              LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
              };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(["initial", "tail"], function(methodName, index) {
              var dropName = "drop" + (index ? "" : "Right");

              LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__
                  ? new LazyWrapper(this)
                  : this[dropName](1);
              };
            });

            LazyWrapper.prototype.compact = function() {
              return this.filter(identity);
            };

            LazyWrapper.prototype.find = function(predicate) {
              return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function(predicate) {
              return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
              if (typeof path == "function") {
                return new LazyWrapper(this);
              }
              return this.map(function(value) {
                return baseInvoke(value, path, args);
              });
            });

            LazyWrapper.prototype.reject = function(predicate) {
              return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function(start, end) {
              start = toInteger(start);

              var result = this;
              if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
              }
              if (start < 0) {
                result = result.takeRight(-start);
              } else if (start) {
                result = result.drop(start);
              }
              if (end !== undefined) {
                end = toInteger(end);
                result =
                  end < 0 ? result.dropRight(-end) : result.take(end - start);
              }
              return result;
            };

            LazyWrapper.prototype.takeRightWhile = function(predicate) {
              return this.reverse()
                .takeWhile(predicate)
                .reverse();
            };

            LazyWrapper.prototype.toArray = function() {
              return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function(func, methodName) {
              var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                  methodName
                ),
                isTaker = /^(?:head|last)$/.test(methodName),
                lodashFunc =
                  lodash[
                    isTaker
                      ? "take" + (methodName == "last" ? "Right" : "")
                      : methodName
                  ],
                retUnwrapped = isTaker || /^find/.test(methodName);

              if (!lodashFunc) {
                return;
              }
              lodash.prototype[methodName] = function() {
                var value = this.__wrapped__,
                  args = isTaker ? [1] : arguments,
                  isLazy = value instanceof LazyWrapper,
                  iteratee = args[0],
                  useLazy = isLazy || isArray(value);

                var interceptor = function(value) {
                  var result = lodashFunc.apply(
                    lodash,
                    arrayPush([value], args)
                  );
                  return isTaker && chainAll ? result[0] : result;
                };

                if (
                  useLazy &&
                  checkIteratee &&
                  typeof iteratee == "function" &&
                  iteratee.length != 1
                ) {
                  // Avoid lazy use if the iteratee has a "length" value other than `1`.
                  isLazy = useLazy = false;
                }
                var chainAll = this.__chain__,
                  isHybrid = !!this.__actions__.length,
                  isUnwrapped = retUnwrapped && !chainAll,
                  onlyLazy = isLazy && !isHybrid;

                if (!retUnwrapped && useLazy) {
                  value = onlyLazy ? value : new LazyWrapper(this);
                  var result = func.apply(value, args);
                  result.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined
                  });
                  return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                  return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped
                  ? isTaker
                    ? result.value()[0]
                    : result.value()
                  : result;
              };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(
              ["pop", "push", "shift", "sort", "splice", "unshift"],
              function(methodName) {
                var func = arrayProto[methodName],
                  chainName = /^(?:push|sort|unshift)$/.test(methodName)
                    ? "tap"
                    : "thru",
                  retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                lodash.prototype[methodName] = function() {
                  var args = arguments;
                  if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                  }
                  return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                  });
                };
              }
            );

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function(func, methodName) {
              var lodashFunc = lodash[methodName];
              if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) {
                  realNames[key] = [];
                }
                realNames[key].push({ name: methodName, func: lodashFunc });
              }
            });

            realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
              {
                name: "wrapper",
                func: undefined
              }
            ];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
              lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
          };

          /*--------------------------------------------------------------------------*/

          // Export lodash.
          var _ = runInContext();

          // Some AMD build optimizers, like r.js, check for condition patterns like:
          if (true) {
            // Expose Lodash on the global object to prevent errors when Lodash is
            // loaded by a script tag in the presence of an AMD loader.
            // See http://requirejs.org/docs/errors.html#mismatch for more details.
            // Use `_.noConflict` to remove Lodash from the global object.
            root._ = _;

            // Define as an anonymous module so, through path mapping, it can be
            // referenced as the "underscore" module.
            !((__WEBPACK_AMD_DEFINE_RESULT__ = function() {
              return _;
            }.call(exports, __webpack_require__, exports, module)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
          // Check for `exports` after `define` in case a build optimizer adds it.
          else {
          }
        }.call(this));

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("LY0y")(module)));

      /***/
    },

    /***/ Lxf3: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var toStr = Object.prototype.toString;

      var isPrimitive = __webpack_require__("Teho");

      var isCallable = __webpack_require__("IdCN");

      // http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
      var ES5internalSlots = {
        "[[DefaultValue]]": function(O) {
          var actualHint;
          if (arguments.length > 1) {
            actualHint = arguments[1];
          } else {
            actualHint = toStr.call(O) === "[object Date]" ? String : Number;
          }

          if (actualHint === String || actualHint === Number) {
            var methods =
              actualHint === String
                ? ["toString", "valueOf"]
                : ["valueOf", "toString"];
            var value, i;
            for (i = 0; i < methods.length; ++i) {
              if (isCallable(O[methods[i]])) {
                value = O[methods[i]]();
                if (isPrimitive(value)) {
                  return value;
                }
              }
            }
            throw new TypeError("No default value");
          }
          throw new TypeError("invalid [[DefaultValue]] hint supplied");
        }
      };

      // http://ecma-international.org/ecma-262/5.1/#sec-9.1
      module.exports = function ToPrimitive(input) {
        if (isPrimitive(input)) {
          return input;
        }
        if (arguments.length > 1) {
          return ES5internalSlots["[[DefaultValue]]"](input, arguments[1]);
        }
        return ES5internalSlots["[[DefaultValue]]"](input);
      };

      /***/
    },

    /***/ M2y6: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueOperationNamesRule = UniqueOperationNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique operation names
       *
       * A GraphQL document is only valid if all defined operations have unique names.
       */
      function UniqueOperationNamesRule(context) {
        var knownOperationNames = Object.create(null);
        return {
          OperationDefinition: function OperationDefinition(node) {
            var operationName = node.name;

            if (operationName) {
              if (knownOperationNames[operationName.value]) {
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'There can be only one operation named "'.concat(
                      operationName.value,
                      '".'
                    ),
                    [knownOperationNames[operationName.value], operationName]
                  )
                );
              } else {
                knownOperationNames[operationName.value] = operationName;
              }
            }

            return false;
          },
          FragmentDefinition: function FragmentDefinition() {
            return false;
          }
        };
      }

      /***/
    },

    /***/ M31k: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.findBreakingChanges = findBreakingChanges;
      exports.findDangerousChanges = findDangerousChanges;
      exports.DangerousChangeType = exports.BreakingChangeType = void 0;

      var _objectValues = _interopRequireDefault(__webpack_require__("YDZp"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _naturalCompare = _interopRequireDefault(__webpack_require__("qoX3"));

      var _printer = __webpack_require__("gCJq");

      var _visitor = __webpack_require__("tqCx");

      var _scalars = __webpack_require__("0N00");

      var _definition = __webpack_require__("mAVk");

      var _astFromValue = __webpack_require__("bi9y");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      var BreakingChangeType = Object.freeze({
        TYPE_REMOVED: "TYPE_REMOVED",
        TYPE_CHANGED_KIND: "TYPE_CHANGED_KIND",
        TYPE_REMOVED_FROM_UNION: "TYPE_REMOVED_FROM_UNION",
        VALUE_REMOVED_FROM_ENUM: "VALUE_REMOVED_FROM_ENUM",
        REQUIRED_INPUT_FIELD_ADDED: "REQUIRED_INPUT_FIELD_ADDED",
        IMPLEMENTED_INTERFACE_REMOVED: "IMPLEMENTED_INTERFACE_REMOVED",
        FIELD_REMOVED: "FIELD_REMOVED",
        FIELD_CHANGED_KIND: "FIELD_CHANGED_KIND",
        REQUIRED_ARG_ADDED: "REQUIRED_ARG_ADDED",
        ARG_REMOVED: "ARG_REMOVED",
        ARG_CHANGED_KIND: "ARG_CHANGED_KIND",
        DIRECTIVE_REMOVED: "DIRECTIVE_REMOVED",
        DIRECTIVE_ARG_REMOVED: "DIRECTIVE_ARG_REMOVED",
        REQUIRED_DIRECTIVE_ARG_ADDED: "REQUIRED_DIRECTIVE_ARG_ADDED",
        DIRECTIVE_REPEATABLE_REMOVED: "DIRECTIVE_REPEATABLE_REMOVED",
        DIRECTIVE_LOCATION_REMOVED: "DIRECTIVE_LOCATION_REMOVED"
      });
      exports.BreakingChangeType = BreakingChangeType;
      var DangerousChangeType = Object.freeze({
        VALUE_ADDED_TO_ENUM: "VALUE_ADDED_TO_ENUM",
        TYPE_ADDED_TO_UNION: "TYPE_ADDED_TO_UNION",
        OPTIONAL_INPUT_FIELD_ADDED: "OPTIONAL_INPUT_FIELD_ADDED",
        OPTIONAL_ARG_ADDED: "OPTIONAL_ARG_ADDED",
        IMPLEMENTED_INTERFACE_ADDED: "IMPLEMENTED_INTERFACE_ADDED",
        ARG_DEFAULT_VALUE_CHANGE: "ARG_DEFAULT_VALUE_CHANGE"
      });
      exports.DangerousChangeType = DangerousChangeType;

      /**
       * Given two schemas, returns an Array containing descriptions of all the types
       * of breaking changes covered by the other functions down below.
       */
      function findBreakingChanges(oldSchema, newSchema) {
        var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(
          function(change) {
            return change.type in BreakingChangeType;
          }
        );
        return breakingChanges;
      }
      /**
       * Given two schemas, returns an Array containing descriptions of all the types
       * of potentially dangerous changes covered by the other functions down below.
       */

      function findDangerousChanges(oldSchema, newSchema) {
        var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(
          function(change) {
            return change.type in DangerousChangeType;
          }
        );
        return dangerousChanges;
      }

      function findSchemaChanges(oldSchema, newSchema) {
        return [].concat(
          findTypeChanges(oldSchema, newSchema),
          findDirectiveChanges(oldSchema, newSchema)
        );
      }

      function findDirectiveChanges(oldSchema, newSchema) {
        var schemaChanges = [];
        var directivesDiff = diff(
          oldSchema.getDirectives(),
          newSchema.getDirectives()
        );

        for (
          var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed;
          _i2 < _directivesDiff$remov2.length;
          _i2++
        ) {
          var oldDirective = _directivesDiff$remov2[_i2];
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REMOVED,
            description: "".concat(oldDirective.name, " was removed.")
          });
        }

        for (
          var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted;
          _i4 < _directivesDiff$persi2.length;
          _i4++
        ) {
          var _ref2 = _directivesDiff$persi2[_i4];
          var _oldDirective = _ref2[0];
          var newDirective = _ref2[1];
          var argsDiff = diff(_oldDirective.args, newDirective.args);

          for (
            var _i6 = 0, _argsDiff$added2 = argsDiff.added;
            _i6 < _argsDiff$added2.length;
            _i6++
          ) {
            var newArg = _argsDiff$added2[_i6];

            if ((0, _definition.isRequiredArgument)(newArg)) {
              schemaChanges.push({
                type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
                description: "A required arg "
                  .concat(newArg.name, " on directive ")
                  .concat(_oldDirective.name, " was added.")
              });
            }
          }

          for (
            var _i8 = 0, _argsDiff$removed2 = argsDiff.removed;
            _i8 < _argsDiff$removed2.length;
            _i8++
          ) {
            var oldArg = _argsDiff$removed2[_i8];
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
              description: ""
                .concat(oldArg.name, " was removed from ")
                .concat(_oldDirective.name, ".")
            });
          }

          if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
              description: "Repeatable flag was removed from ".concat(
                _oldDirective.name,
                "."
              )
            });
          }

          for (
            var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations;
            _i10 < _oldDirective$locatio2.length;
            _i10++
          ) {
            var location = _oldDirective$locatio2[_i10];

            if (newDirective.locations.indexOf(location) === -1) {
              schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
                description: ""
                  .concat(location, " was removed from ")
                  .concat(_oldDirective.name, ".")
              });
            }
          }
        }

        return schemaChanges;
      }

      function findTypeChanges(oldSchema, newSchema) {
        var schemaChanges = [];
        var typesDiff = diff(
          (0, _objectValues.default)(oldSchema.getTypeMap()),
          (0, _objectValues.default)(newSchema.getTypeMap())
        );

        for (
          var _i12 = 0, _typesDiff$removed2 = typesDiff.removed;
          _i12 < _typesDiff$removed2.length;
          _i12++
        ) {
          var oldType = _typesDiff$removed2[_i12];
          schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED,
            description: (0, _scalars.isSpecifiedScalarType)(oldType)
              ? "Standard scalar ".concat(
                  oldType.name,
                  " was removed because it is not referenced anymore."
                )
              : "".concat(oldType.name, " was removed.")
          });
        }

        for (
          var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted;
          _i14 < _typesDiff$persisted2.length;
          _i14++
        ) {
          var _ref4 = _typesDiff$persisted2[_i14];
          var _oldType = _ref4[0];
          var newType = _ref4[1];

          if (
            (0, _definition.isEnumType)(_oldType) &&
            (0, _definition.isEnumType)(newType)
          ) {
            schemaChanges.push.apply(
              schemaChanges,
              findEnumTypeChanges(_oldType, newType)
            );
          } else if (
            (0, _definition.isUnionType)(_oldType) &&
            (0, _definition.isUnionType)(newType)
          ) {
            schemaChanges.push.apply(
              schemaChanges,
              findUnionTypeChanges(_oldType, newType)
            );
          } else if (
            (0, _definition.isInputObjectType)(_oldType) &&
            (0, _definition.isInputObjectType)(newType)
          ) {
            schemaChanges.push.apply(
              schemaChanges,
              findInputObjectTypeChanges(_oldType, newType)
            );
          } else if (
            (0, _definition.isObjectType)(_oldType) &&
            (0, _definition.isObjectType)(newType)
          ) {
            schemaChanges.push.apply(
              schemaChanges,
              findFieldChanges(_oldType, newType).concat(
                findImplementedInterfacesChanges(_oldType, newType)
              )
            );
          } else if (
            (0, _definition.isInterfaceType)(_oldType) &&
            (0, _definition.isInterfaceType)(newType)
          ) {
            schemaChanges.push.apply(
              schemaChanges,
              findFieldChanges(_oldType, newType).concat(
                findImplementedInterfacesChanges(_oldType, newType)
              )
            );
          } else if (_oldType.constructor !== newType.constructor) {
            schemaChanges.push({
              type: BreakingChangeType.TYPE_CHANGED_KIND,
              description:
                "".concat(_oldType.name, " changed from ") +
                ""
                  .concat(typeKindName(_oldType), " to ")
                  .concat(typeKindName(newType), ".")
            });
          }
        }

        return schemaChanges;
      }

      function findInputObjectTypeChanges(oldType, newType) {
        var schemaChanges = [];
        var fieldsDiff = diff(
          (0, _objectValues.default)(oldType.getFields()),
          (0, _objectValues.default)(newType.getFields())
        );

        for (
          var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added;
          _i16 < _fieldsDiff$added2.length;
          _i16++
        ) {
          var newField = _fieldsDiff$added2[_i16];

          if ((0, _definition.isRequiredInputField)(newField)) {
            schemaChanges.push({
              type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
              description: "A required field "
                .concat(newField.name, " on input type ")
                .concat(oldType.name, " was added.")
            });
          } else {
            schemaChanges.push({
              type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
              description: "An optional field "
                .concat(newField.name, " on input type ")
                .concat(oldType.name, " was added.")
            });
          }
        }

        for (
          var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed;
          _i18 < _fieldsDiff$removed2.length;
          _i18++
        ) {
          var oldField = _fieldsDiff$removed2[_i18];
          schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: ""
              .concat(oldType.name, ".")
              .concat(oldField.name, " was removed.")
          });
        }

        for (
          var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted;
          _i20 < _fieldsDiff$persisted2.length;
          _i20++
        ) {
          var _ref6 = _fieldsDiff$persisted2[_i20];
          var _oldField = _ref6[0];
          var _newField = _ref6[1];
          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(
            _oldField.type,
            _newField.type
          );

          if (!isSafe) {
            schemaChanges.push({
              type: BreakingChangeType.FIELD_CHANGED_KIND,
              description:
                ""
                  .concat(oldType.name, ".")
                  .concat(_oldField.name, " changed type from ") +
                ""
                  .concat(String(_oldField.type), " to ")
                  .concat(String(_newField.type), ".")
            });
          }
        }

        return schemaChanges;
      }

      function findUnionTypeChanges(oldType, newType) {
        var schemaChanges = [];
        var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());

        for (
          var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added;
          _i22 < _possibleTypesDiff$ad2.length;
          _i22++
        ) {
          var newPossibleType = _possibleTypesDiff$ad2[_i22];
          schemaChanges.push({
            type: DangerousChangeType.TYPE_ADDED_TO_UNION,
            description: ""
              .concat(newPossibleType.name, " was added to union type ")
              .concat(oldType.name, ".")
          });
        }

        for (
          var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed;
          _i24 < _possibleTypesDiff$re2.length;
          _i24++
        ) {
          var oldPossibleType = _possibleTypesDiff$re2[_i24];
          schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
            description: ""
              .concat(oldPossibleType.name, " was removed from union type ")
              .concat(oldType.name, ".")
          });
        }

        return schemaChanges;
      }

      function findEnumTypeChanges(oldType, newType) {
        var schemaChanges = [];
        var valuesDiff = diff(oldType.getValues(), newType.getValues());

        for (
          var _i26 = 0, _valuesDiff$added2 = valuesDiff.added;
          _i26 < _valuesDiff$added2.length;
          _i26++
        ) {
          var newValue = _valuesDiff$added2[_i26];
          schemaChanges.push({
            type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
            description: ""
              .concat(newValue.name, " was added to enum type ")
              .concat(oldType.name, ".")
          });
        }

        for (
          var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed;
          _i28 < _valuesDiff$removed2.length;
          _i28++
        ) {
          var oldValue = _valuesDiff$removed2[_i28];
          schemaChanges.push({
            type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
            description: ""
              .concat(oldValue.name, " was removed from enum type ")
              .concat(oldType.name, ".")
          });
        }

        return schemaChanges;
      }

      function findImplementedInterfacesChanges(oldType, newType) {
        var schemaChanges = [];
        var interfacesDiff = diff(
          oldType.getInterfaces(),
          newType.getInterfaces()
        );

        for (
          var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added;
          _i30 < _interfacesDiff$added2.length;
          _i30++
        ) {
          var newInterface = _interfacesDiff$added2[_i30];
          schemaChanges.push({
            type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
            description: ""
              .concat(newInterface.name, " added to interfaces implemented by ")
              .concat(oldType.name, ".")
          });
        }

        for (
          var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed;
          _i32 < _interfacesDiff$remov2.length;
          _i32++
        ) {
          var oldInterface = _interfacesDiff$remov2[_i32];
          schemaChanges.push({
            type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
            description: ""
              .concat(oldType.name, " no longer implements interface ")
              .concat(oldInterface.name, ".")
          });
        }

        return schemaChanges;
      }

      function findFieldChanges(oldType, newType) {
        var schemaChanges = [];
        var fieldsDiff = diff(
          (0, _objectValues.default)(oldType.getFields()),
          (0, _objectValues.default)(newType.getFields())
        );

        for (
          var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed;
          _i34 < _fieldsDiff$removed4.length;
          _i34++
        ) {
          var oldField = _fieldsDiff$removed4[_i34];
          schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: ""
              .concat(oldType.name, ".")
              .concat(oldField.name, " was removed.")
          });
        }

        for (
          var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted;
          _i36 < _fieldsDiff$persisted4.length;
          _i36++
        ) {
          var _ref8 = _fieldsDiff$persisted4[_i36];
          var _oldField2 = _ref8[0];
          var newField = _ref8[1];
          schemaChanges.push.apply(
            schemaChanges,
            findArgChanges(oldType, _oldField2, newField)
          );
          var isSafe = isChangeSafeForObjectOrInterfaceField(
            _oldField2.type,
            newField.type
          );

          if (!isSafe) {
            schemaChanges.push({
              type: BreakingChangeType.FIELD_CHANGED_KIND,
              description:
                ""
                  .concat(oldType.name, ".")
                  .concat(_oldField2.name, " changed type from ") +
                ""
                  .concat(String(_oldField2.type), " to ")
                  .concat(String(newField.type), ".")
            });
          }
        }

        return schemaChanges;
      }

      function findArgChanges(oldType, oldField, newField) {
        var schemaChanges = [];
        var argsDiff = diff(oldField.args, newField.args);

        for (
          var _i38 = 0, _argsDiff$removed4 = argsDiff.removed;
          _i38 < _argsDiff$removed4.length;
          _i38++
        ) {
          var oldArg = _argsDiff$removed4[_i38];
          schemaChanges.push({
            type: BreakingChangeType.ARG_REMOVED,
            description: ""
              .concat(oldType.name, ".")
              .concat(oldField.name, " arg ")
              .concat(oldArg.name, " was removed.")
          });
        }

        for (
          var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted;
          _i40 < _argsDiff$persisted2.length;
          _i40++
        ) {
          var _ref10 = _argsDiff$persisted2[_i40];
          var _oldArg = _ref10[0];
          var newArg = _ref10[1];
          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(
            _oldArg.type,
            newArg.type
          );

          if (!isSafe) {
            schemaChanges.push({
              type: BreakingChangeType.ARG_CHANGED_KIND,
              description:
                ""
                  .concat(oldType.name, ".")
                  .concat(oldField.name, " arg ")
                  .concat(_oldArg.name, " has changed type from ") +
                ""
                  .concat(String(_oldArg.type), " to ")
                  .concat(String(newArg.type), ".")
            });
          } else if (_oldArg.defaultValue !== undefined) {
            if (newArg.defaultValue === undefined) {
              schemaChanges.push({
                type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                description: ""
                  .concat(oldType.name, ".")
                  .concat(oldField.name, " arg ")
                  .concat(_oldArg.name, " defaultValue was removed.")
              });
            } else {
              // Since we looking only for client's observable changes we should
              // compare default values in the same representation as they are
              // represented inside introspection.
              var oldValueStr = stringifyValue(
                _oldArg.defaultValue,
                _oldArg.type
              );
              var newValueStr = stringifyValue(
                newArg.defaultValue,
                newArg.type
              );

              if (oldValueStr !== newValueStr) {
                schemaChanges.push({
                  type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                  description: ""
                    .concat(oldType.name, ".")
                    .concat(oldField.name, " arg ")
                    .concat(_oldArg.name, " has changed defaultValue from ")
                    .concat(oldValueStr, " to ")
                    .concat(newValueStr, ".")
                });
              }
            }
          }
        }

        for (
          var _i42 = 0, _argsDiff$added4 = argsDiff.added;
          _i42 < _argsDiff$added4.length;
          _i42++
        ) {
          var _newArg = _argsDiff$added4[_i42];

          if ((0, _definition.isRequiredArgument)(_newArg)) {
            schemaChanges.push({
              type: BreakingChangeType.REQUIRED_ARG_ADDED,
              description: "A required arg "
                .concat(_newArg.name, " on ")
                .concat(oldType.name, ".")
                .concat(oldField.name, " was added.")
            });
          } else {
            schemaChanges.push({
              type: DangerousChangeType.OPTIONAL_ARG_ADDED,
              description: "An optional arg "
                .concat(_newArg.name, " on ")
                .concat(oldType.name, ".")
                .concat(oldField.name, " was added.")
            });
          }
        }

        return schemaChanges;
      }

      function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
        if ((0, _definition.isListType)(oldType)) {
          return (
            // if they're both lists, make sure the underlying types are compatible
            ((0, _definition.isListType)(newType) &&
              isChangeSafeForObjectOrInterfaceField(
                oldType.ofType,
                newType.ofType
              )) || // moving from nullable to non-null of the same underlying type is safe
            ((0, _definition.isNonNullType)(newType) &&
              isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))
          );
        }

        if ((0, _definition.isNonNullType)(oldType)) {
          // if they're both non-null, make sure the underlying types are compatible
          return (
            (0, _definition.isNonNullType)(newType) &&
            isChangeSafeForObjectOrInterfaceField(
              oldType.ofType,
              newType.ofType
            )
          );
        }

        return (
          // if they're both named types, see if their names are equivalent
          ((0, _definition.isNamedType)(newType) &&
            oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe
          ((0, _definition.isNonNullType)(newType) &&
            isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))
        );
      }

      function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
        if ((0, _definition.isListType)(oldType)) {
          // if they're both lists, make sure the underlying types are compatible
          return (
            (0, _definition.isListType)(newType) &&
            isChangeSafeForInputObjectFieldOrFieldArg(
              oldType.ofType,
              newType.ofType
            )
          );
        }

        if ((0, _definition.isNonNullType)(oldType)) {
          return (
            // if they're both non-null, make sure the underlying types are
            // compatible
            ((0, _definition.isNonNullType)(newType) &&
              isChangeSafeForInputObjectFieldOrFieldArg(
                oldType.ofType,
                newType.ofType
              )) || // moving from non-null to nullable of the same underlying type is safe
            (!(0, _definition.isNonNullType)(newType) &&
              isChangeSafeForInputObjectFieldOrFieldArg(
                oldType.ofType,
                newType
              ))
          );
        } // if they're both named types, see if their names are equivalent

        return (
          (0, _definition.isNamedType)(newType) && oldType.name === newType.name
        );
      }

      function typeKindName(type) {
        if ((0, _definition.isScalarType)(type)) {
          return "a Scalar type";
        }

        if ((0, _definition.isObjectType)(type)) {
          return "an Object type";
        }

        if ((0, _definition.isInterfaceType)(type)) {
          return "an Interface type";
        }

        if ((0, _definition.isUnionType)(type)) {
          return "a Union type";
        }

        if ((0, _definition.isEnumType)(type)) {
          return "an Enum type";
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isInputObjectType)(type)) {
          return "an Input type";
        } // istanbul ignore next (Not reachable. All possible named types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected type: " + (0, _inspect.default)(type)
          );
      }

      function stringifyValue(value, type) {
        var ast = (0, _astFromValue.astFromValue)(value, type);
        ast != null || (0, _invariant.default)(0);
        var sortedAST = (0, _visitor.visit)(ast, {
          ObjectValue: function ObjectValue(objectNode) {
            // Make a copy since sort mutates array
            var fields = [].concat(objectNode.fields);
            fields.sort(function(fieldA, fieldB) {
              return (0,
              _naturalCompare.default)(fieldA.name.value, fieldB.name.value);
            });
            return _objectSpread(
              _objectSpread({}, objectNode),
              {},
              {
                fields: fields
              }
            );
          }
        });
        return (0, _printer.print)(sortedAST);
      }

      function diff(oldArray, newArray) {
        var added = [];
        var removed = [];
        var persisted = [];
        var oldMap = (0, _keyMap.default)(oldArray, function(_ref11) {
          var name = _ref11.name;
          return name;
        });
        var newMap = (0, _keyMap.default)(newArray, function(_ref12) {
          var name = _ref12.name;
          return name;
        });

        for (var _i44 = 0; _i44 < oldArray.length; _i44++) {
          var oldItem = oldArray[_i44];
          var newItem = newMap[oldItem.name];

          if (newItem === undefined) {
            removed.push(oldItem);
          } else {
            persisted.push([oldItem, newItem]);
          }
        }

        for (var _i46 = 0; _i46 < newArray.length; _i46++) {
          var _newItem = newArray[_i46];

          if (oldMap[_newItem.name] === undefined) {
            added.push(_newItem);
          }
        }

        return {
          added: added,
          persisted: persisted,
          removed: removed
        };
      }

      /***/
    },

    /***/ MBzn: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const pluginHelpers = __webpack_require__("ac+X");
      const changeCaseAll = __webpack_require__("3XYS");
      const path = __webpack_require__("oyvS");
      const parse = _interopDefault(__webpack_require__("JqXL"));
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const flatMap = _interopDefault(__webpack_require__("3aNz"));
      const dependencyGraph = __webpack_require__("XCPT");
      const gqlTag = _interopDefault(__webpack_require__("Dugd"));
      const optimize = __webpack_require__("pIW5");
      const relayOperationOptimizer = __webpack_require__("++EY");

      const DEFAULT_SCALARS = {
        ID: "string",
        String: "string",
        Boolean: "boolean",
        Int: "number",
        Float: "number"
      };

      function isExternalMapperType(m) {
        return !!m.import;
      }
      var MapperKind;
      (function(MapperKind) {
        MapperKind[(MapperKind["Namespace"] = 0)] = "Namespace";
        MapperKind[(MapperKind["Default"] = 1)] = "Default";
        MapperKind[(MapperKind["Regular"] = 2)] = "Regular";
      })(MapperKind || (MapperKind = {}));
      function prepareLegacy(mapper) {
        const items = mapper.split("#");
        const isNamespace = items.length === 3;
        const isDefault =
          items[1].trim() === "default" || items[1].startsWith("default ");
        const hasAlias = items[1].includes(" as ");
        return {
          items,
          isDefault,
          isNamespace,
          hasAlias
        };
      }
      function prepare(mapper) {
        const [source, path] = mapper.split("#");
        const isNamespace = path.includes(".");
        const isDefault =
          path.trim() === "default" || path.startsWith("default ");
        const hasAlias = path.includes(" as ");
        return {
          items: isNamespace ? [source, ...path.split(".")] : [source, path],
          isDefault,
          isNamespace,
          hasAlias
        };
      }
      function isLegacyMode(mapper) {
        return mapper.split("#").length === 3;
      }
      function parseMapper(mapper, gqlTypeName = null, suffix) {
        if (isExternalMapper(mapper)) {
          const { isNamespace, isDefault, hasAlias, items } = isLegacyMode(
            mapper
          )
            ? prepareLegacy(mapper)
            : prepare(mapper);
          const mapperKind = isNamespace
            ? MapperKind.Namespace
            : isDefault
            ? MapperKind.Default
            : MapperKind.Regular;
          function handleAlias(isDefault = false) {
            const [importedType, aliasType] = items[1].split(/\s+as\s+/);
            const type = maybeSuffix(aliasType);
            return {
              importElement: isDefault ? type : `${importedType} as ${type}`,
              type: type
            };
          }
          function maybeSuffix(type) {
            if (suffix) {
              return addSuffix(type, suffix);
            }
            return type;
          }
          function handle() {
            switch (mapperKind) {
              // ./my/module#Namespace#Identifier
              case MapperKind.Namespace: {
                const [, ns, identifier] = items;
                return {
                  type: `${ns}.${identifier}`,
                  importElement: ns
                };
              }
              case MapperKind.Default: {
                // ./my/module#default as alias
                if (hasAlias) {
                  return handleAlias(true);
                }
                const type = maybeSuffix(`${gqlTypeName}`);
                // ./my/module#default
                return {
                  importElement: type,
                  type
                };
              }
              case MapperKind.Regular: {
                // ./my/module#Identifier as alias
                if (hasAlias) {
                  return handleAlias();
                }
                const identifier = items[1];
                const type = maybeSuffix(identifier);
                // ./my/module#Identifier
                return {
                  type,
                  importElement: suffix ? `${identifier} as ${type}` : type
                };
              }
            }
          }
          const { type, importElement } = handle();
          return {
            default: isDefault,
            isExternal: true,
            source: items[0],
            type,
            import: importElement.replace(/<(.*?)>/g, "")
          };
        }
        return {
          isExternal: false,
          type: mapper
        };
      }
      function addSuffix(element, suffix) {
        const generic = element.indexOf("<");
        if (generic === -1) {
          return `${element}${suffix}`;
        }
        return `${element.slice(0, generic)}${suffix}${element.slice(generic)}`;
      }
      function isExternalMapper(value) {
        return value.includes("#");
      }
      function transformMappers(rawMappers, mapperTypeSuffix) {
        const result = {};
        Object.keys(rawMappers).forEach(gqlTypeName => {
          const mapperDef = rawMappers[gqlTypeName];
          const parsedMapper = parseMapper(
            mapperDef,
            gqlTypeName,
            mapperTypeSuffix
          );
          result[gqlTypeName] = parsedMapper;
        });
        return result;
      }
      function buildMapperImport(source, types, useTypeImports) {
        if (!types || types.length === 0) {
          return null;
        }
        const defaultType = types.find(t => t.asDefault === true);
        let namedTypes = types.filter(t => !t.asDefault);
        if (useTypeImports) {
          if (defaultType) {
            // default as Baz
            namedTypes = [
              { identifier: `default as ${defaultType.identifier}` },
              ...namedTypes
            ];
          }
          // { Foo, Bar as BarModel }
          const namedImports = namedTypes.length
            ? `{ ${namedTypes.map(t => t.identifier).join(", ")} }`
            : "";
          // { default as Baz, Foo, Bar as BarModel }
          return `import type ${[namedImports]
            .filter(Boolean)
            .join(", ")} from '${source}';`;
        }
        // { Foo, Bar as BarModel }
        const namedImports = namedTypes.length
          ? `{ ${namedTypes.map(t => t.identifier).join(", ")} }`
          : "";
        // Baz
        const defaultImport = defaultType ? defaultType.identifier : "";
        // Baz, { Foo, Bar as BarModel }
        return `import ${[defaultImport, namedImports]
          .filter(Boolean)
          .join(", ")} from '${source}';`;
      }

      const getConfigValue = (value, defaultValue) => {
        if (value === null || value === undefined) {
          return defaultValue;
        }
        return value;
      };
      function quoteIfNeeded(array, joinWith = " & ") {
        if (array.length === 0) {
          return "";
        } else if (array.length === 1) {
          return array[0];
        } else {
          return `(${array.join(joinWith)})`;
        }
      }
      function block(array) {
        return array && array.length !== 0
          ? "{\n" + array.join("\n") + "\n}"
          : "";
      }
      function wrapWithSingleQuotes(value, skipNumericCheck = false) {
        if (skipNumericCheck) {
          if (typeof value === "number") {
            return `${value}`;
          } else {
            return `'${value}'`;
          }
        }
        if (
          typeof value === "number" ||
          (typeof value === "string" &&
            !isNaN(parseInt(value)) &&
            parseFloat(value).toString() === value)
        ) {
          return `${value}`;
        }
        return `'${value}'`;
      }
      function breakLine(str) {
        return str + "\n";
      }
      function indent(str, count = 1) {
        return new Array(count).fill("  ").join("") + str;
      }
      function indentMultiline(str, count = 1) {
        const indentation = new Array(count).fill("  ").join("");
        const replaceWith = "\n" + indentation;
        return indentation + str.replace(/\n/g, replaceWith);
      }
      function transformComment(comment, indentLevel = 0, disabled = false) {
        if (!comment || comment === "" || disabled) {
          return "";
        }
        if (isStringValueNode(comment)) {
          comment = comment.value;
        }
        comment = comment.split("*/").join("*\\/");
        let lines = comment.split("\n");
        if (lines.length === 1) {
          return indent(`/** ${lines[0]} */\n`, indentLevel);
        }
        lines = ["/**", ...lines.map(line => ` * ${line}`), " */\n"];
        return stripTrailingSpaces(
          lines.map(line => indent(line, indentLevel)).join("\n")
        );
      }
      class DeclarationBlock {
        constructor(_config) {
          this._config = _config;
          this._decorator = null;
          this._export = false;
          this._name = null;
          this._kind = null;
          this._methodName = null;
          this._content = null;
          this._block = null;
          this._nameGenerics = null;
          this._comment = null;
          this._ignoreBlockWrapper = false;
          this._config = {
            blockWrapper: "",
            blockTransformer: block => block,
            enumNameValueSeparator: ":",
            ...this._config
          };
        }
        withDecorator(decorator) {
          this._decorator = decorator;
          return this;
        }
        export(exp = true) {
          if (!this._config.ignoreExport) {
            this._export = exp;
          }
          return this;
        }
        asKind(kind) {
          this._kind = kind;
          return this;
        }
        withComment(comment, disabled = false) {
          const nonEmptyComment = isStringValueNode(comment)
            ? !!comment.value
            : !!comment;
          if (nonEmptyComment && !disabled) {
            this._comment = transformComment(comment, 0);
          }
          return this;
        }
        withMethodCall(methodName, ignoreBlockWrapper = false) {
          this._methodName = methodName;
          this._ignoreBlockWrapper = ignoreBlockWrapper;
          return this;
        }
        withBlock(block) {
          this._block = block;
          return this;
        }
        withContent(content) {
          this._content = content;
          return this;
        }
        withName(name, generics = null) {
          this._name = name;
          this._nameGenerics = generics;
          return this;
        }
        get string() {
          let result = "";
          if (this._decorator) {
            result += this._decorator + "\n";
          }
          if (this._export) {
            result += "export ";
          }
          if (this._kind) {
            let extra = "";
            let name = "";
            if (["type", "const", "var", "let"].includes(this._kind)) {
              extra = "= ";
            }
            if (this._name) {
              name = this._name + (this._nameGenerics || "") + " ";
            }
            result += this._kind + " " + name + extra;
          }
          if (this._block) {
            if (this._content) {
              result += this._content;
            }
            const blockWrapper = this._ignoreBlockWrapper
              ? ""
              : this._config.blockWrapper;
            const before = "{" + blockWrapper;
            const after = blockWrapper + "}";
            const block = [before, this._block, after]
              .filter(val => !!val)
              .join("\n");
            if (this._methodName) {
              result += `${this._methodName}(${this._config.blockTransformer(
                block
              )})`;
            } else {
              result += this._config.blockTransformer(block);
            }
          } else if (this._content) {
            result += this._content;
          } else if (this._kind) {
            result += this._config.blockTransformer("{}");
          }
          return stripTrailingSpaces(
            (this._comment ? this._comment : "") +
              result +
              (this._kind === "interface" ||
              this._kind === "enum" ||
              this._kind === "namespace" ||
              this._kind === "function"
                ? ""
                : ";") +
              "\n"
          );
        }
      }
      function getBaseTypeNode(typeNode) {
        if (
          typeNode.kind === graphql.Kind.LIST_TYPE ||
          typeNode.kind === graphql.Kind.NON_NULL_TYPE
        ) {
          return getBaseTypeNode(typeNode.type);
        }
        return typeNode;
      }
      function convertNameParts(str, func, removeUnderscore = false) {
        if (removeUnderscore) {
          return func(str);
        }
        return str
          .split("_")
          .map(s => func(s))
          .join("_");
      }
      function buildScalarsFromConfig(
        schema,
        config,
        defaultScalarsMapping = DEFAULT_SCALARS,
        defaultScalarType = "any"
      ) {
        return buildScalars(
          schema,
          config.scalars,
          defaultScalarsMapping,
          config.strictScalars
            ? null
            : config.defaultScalarType || defaultScalarType
        );
      }
      function buildScalars(
        schema,
        scalarsMapping,
        defaultScalarsMapping = DEFAULT_SCALARS,
        defaultScalarType = "any"
      ) {
        const result = {};
        Object.keys(defaultScalarsMapping).forEach(name => {
          result[name] = parseMapper(defaultScalarsMapping[name]);
        });
        if (schema) {
          const typeMap = schema.getTypeMap();
          Object.keys(typeMap)
            .map(typeName => typeMap[typeName])
            .filter(type => graphql.isScalarType(type))
            .map(scalarType => {
              const name = scalarType.name;
              if (typeof scalarsMapping === "string") {
                const value = parseMapper(scalarsMapping + "#" + name, name);
                result[name] = value;
              } else if (
                scalarsMapping &&
                typeof scalarsMapping[name] === "string"
              ) {
                const value = parseMapper(scalarsMapping[name], name);
                result[name] = value;
              } else if (scalarsMapping && scalarsMapping[name]) {
                result[name] = {
                  isExternal: false,
                  type: JSON.stringify(scalarsMapping[name])
                };
              } else if (!defaultScalarsMapping[name]) {
                if (defaultScalarType === null) {
                  throw new Error(
                    `Unknown scalar type ${name}. Please override it using the "scalars" configuration field!`
                  );
                }
                result[name] = {
                  isExternal: false,
                  type: defaultScalarType
                };
              }
            });
        } else if (scalarsMapping) {
          if (typeof scalarsMapping === "string") {
            throw new Error(
              "Cannot use string scalars mapping when building without a schema"
            );
          }
          Object.keys(scalarsMapping).forEach(name => {
            if (typeof scalarsMapping[name] === "string") {
              const value = parseMapper(scalarsMapping[name], name);
              result[name] = value;
            } else {
              result[name] = {
                isExternal: false,
                type: JSON.stringify(scalarsMapping[name])
              };
            }
          });
        }
        return result;
      }
      function isStringValueNode(node) {
        return (
          node && typeof node === "object" && node.kind === graphql.Kind.STRING
        );
      }
      function isRootType(type, schema) {
        return (
          graphql.isEqualType(type, schema.getQueryType()) ||
          graphql.isEqualType(type, schema.getMutationType()) ||
          graphql.isEqualType(type, schema.getSubscriptionType())
        );
      }
      function getRootTypeNames(schema) {
        return [
          schema.getQueryType(),
          schema.getMutationType(),
          schema.getSubscriptionType()
        ]
          .filter(t => t)
          .map(t => t.name);
      }
      function stripMapperTypeInterpolation(identifier) {
        return identifier.trim().replace(/<{.*}>/, "");
      }
      const OMIT_TYPE =
        "export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;";
      const REQUIRE_FIELDS_TYPE = `export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };`;
      function mergeSelectionSets(selectionSet1, selectionSet2) {
        const newSelections = [...selectionSet1.selections];
        for (const selection2 of selectionSet2.selections) {
          if (selection2.kind === "FragmentSpread") {
            newSelections.push(selection2);
            continue;
          }
          if (selection2.kind !== "Field") {
            throw new TypeError("Invalid state.");
          }
          const match = newSelections.find(
            selection1 =>
              selection1.kind === "Field" &&
              getFieldNodeNameValue(selection1) ===
                getFieldNodeNameValue(selection2)
          );
          if (match) {
            // recursively merge all selection sets
            if (
              match.kind === "Field" &&
              match.selectionSet &&
              selection2.selectionSet
            ) {
              mergeSelectionSets(match.selectionSet, selection2.selectionSet);
            }
            continue;
          }
          newSelections.push(selection2);
        }
        // replace existing selections
        selectionSet1.selections = newSelections;
      }
      const getFieldNodeNameValue = node => {
        return (node.alias || node.name).value;
      };
      function separateSelectionSet(selections) {
        return {
          fields: selections.filter(s => s.kind === graphql.Kind.FIELD),
          inlines: selections.filter(
            s => s.kind === graphql.Kind.INLINE_FRAGMENT
          ),
          spreads: selections.filter(
            s => s.kind === graphql.Kind.FRAGMENT_SPREAD
          )
        };
      }
      function getPossibleTypes(schema, type) {
        if (graphql.isListType(type) || graphql.isNonNullType(type)) {
          return getPossibleTypes(schema, type.ofType);
        } else if (graphql.isObjectType(type)) {
          return [type];
        } else if (graphql.isAbstractType(type)) {
          return schema.getPossibleTypes(type);
        }
        return [];
      }
      function hasConditionalDirectives(field) {
        var _a;
        const CONDITIONAL_DIRECTIVES = ["skip", "include"];
        return (_a = field.directives) === null || _a === void 0
          ? void 0
          : _a.some(directive =>
              CONDITIONAL_DIRECTIVES.includes(directive.name.value)
            );
      }
      function wrapTypeWithModifiers(baseType, type, options) {
        let currentType = type;
        const modifiers = [];
        while (currentType) {
          if (graphql.isNonNullType(currentType)) {
            currentType = currentType.ofType;
          } else {
            modifiers.push(options.wrapOptional);
          }
          if (graphql.isListType(currentType)) {
            modifiers.push(options.wrapArray);
            currentType = currentType.ofType;
          } else {
            break;
          }
        }
        return modifiers.reduceRight(
          (result, modifier) => modifier(result),
          baseType
        );
      }
      function removeDescription(nodes) {
        return nodes.map(node => ({ ...node, description: undefined }));
      }
      function wrapTypeNodeWithModifiers(baseType, typeNode) {
        switch (typeNode.kind) {
          case graphql.Kind.NAMED_TYPE: {
            return `Maybe<${baseType}>`;
          }
          case graphql.Kind.NON_NULL_TYPE: {
            const innerType = wrapTypeNodeWithModifiers(
              baseType,
              typeNode.type
            );
            return clearOptional(innerType);
          }
          case graphql.Kind.LIST_TYPE: {
            const innerType = wrapTypeNodeWithModifiers(
              baseType,
              typeNode.type
            );
            return `Maybe<Array<${innerType}>>`;
          }
        }
      }
      function clearOptional(str) {
        const rgx = new RegExp(`^Maybe<(.*?)>$`, "i");
        if (str.startsWith(`Maybe`)) {
          return str.replace(rgx, "$1");
        }
        return str;
      }
      function stripTrailingSpaces(str) {
        return str.replace(/ +\n/g, "\n");
      }

      function getKind(node) {
        if (typeof node === "string") {
          return "typeNames";
        }
        if (["EnumValueDefinition", "EnumValue"].includes(node.kind)) {
          return "enumValues";
        }
        return "typeNames";
      }
      function getName(node) {
        if (node == null) {
          return undefined;
        }
        if (typeof node === "string") {
          return node;
        }
        switch (node.kind) {
          case "OperationDefinition":
          case "Variable":
          case "Argument":
          case "FragmentSpread":
          case "FragmentDefinition":
          case "ObjectField":
          case "Directive":
          case "NamedType":
          case "ScalarTypeDefinition":
          case "ObjectTypeDefinition":
          case "FieldDefinition":
          case "InputValueDefinition":
          case "InterfaceTypeDefinition":
          case "UnionTypeDefinition":
          case "EnumTypeDefinition":
          case "EnumValueDefinition":
          case "InputObjectTypeDefinition":
          case "DirectiveDefinition": {
            return getName(node.name);
          }
          case "Name": {
            return node.value;
          }
          case "Field": {
            return getName(node.alias || node.name);
          }
          case "VariableDefinition": {
            return getName(node.variable);
          }
        }
        return undefined;
      }
      function convertFactory(config) {
        function resolveConventionName(type) {
          if (!config.namingConvention) {
            return (str, opts = {}) => {
              return convertNameParts(
                str,
                changeCaseAll.pascalCase,
                getConfigValue((opts || {}).transformUnderscore, false)
              );
            };
          }
          if (typeof config.namingConvention === "string") {
            if (config.namingConvention === "keep") {
              return str => str;
            }
            return (str, opts = {}) => {
              return convertNameParts(
                str,
                pluginHelpers.resolveExternalModuleAndFn(
                  config.namingConvention
                ),
                getConfigValue((opts || {}).transformUnderscore, false)
              );
            };
          }
          if (typeof config.namingConvention === "function") {
            return (str, opts = {}) => {
              return convertNameParts(
                str,
                config.namingConvention,
                getConfigValue((opts || {}).transformUnderscore, false)
              );
            };
          }
          if (
            typeof config.namingConvention === "object" &&
            config.namingConvention[type] === "keep"
          ) {
            return str => str;
          }
          if (typeof config.namingConvention === "object") {
            if (!config.namingConvention[type]) {
              return (str, opts = {}) => {
                const transformUnderscore =
                  config.namingConvention.transformUnderscore ||
                  (opts || {}).transformUnderscore;
                return convertNameParts(
                  str,
                  changeCaseAll.pascalCase,
                  getConfigValue(transformUnderscore, false)
                );
              };
            }
            return (str, opts = {}) => {
              return convertNameParts(
                str,
                pluginHelpers.resolveExternalModuleAndFn(
                  config.namingConvention[type]
                ),
                getConfigValue((opts || {}).transformUnderscore, true)
              );
            };
          }
          return config.namingConvention[type];
        }
        return (node, opts) => {
          const prefix = opts && opts.prefix;
          const suffix = opts && opts.suffix;
          const kind = getKind(node);
          const str = [prefix || "", getName(node), suffix || ""].join("");
          return resolveConventionName(kind)(str, opts);
        };
      }

      function escapeString(str) {
        return str
          .replace(/\\/g, "\\\\")
          .replace(/\n/g, "\\n")
          .replace(/'/g, "\\'");
      }
      function parseEnumValues({
        schema,
        mapOrStr = {},
        ignoreEnumValuesFromSchema
      }) {
        const allTypes = schema.getTypeMap();
        const allEnums = Object.keys(allTypes).filter(t =>
          graphql.isEnumType(allTypes[t])
        );
        if (typeof mapOrStr === "object") {
          if (!ignoreEnumValuesFromSchema) {
            for (const enumTypeName of allEnums) {
              const enumType = schema.getType(enumTypeName);
              for (const { name, value } of enumType.getValues()) {
                if (value && value !== name) {
                  mapOrStr[enumTypeName] = mapOrStr[enumTypeName] || {};
                  if (
                    typeof mapOrStr[enumTypeName] !== "string" &&
                    !mapOrStr[enumTypeName][name]
                  ) {
                    mapOrStr[enumTypeName][name] =
                      typeof value === "string" ? escapeString(value) : value;
                  }
                }
              }
            }
          }
          const invalidMappings = Object.keys(mapOrStr).filter(
            gqlName => !allEnums.includes(gqlName)
          );
          if (invalidMappings.length > 0) {
            throw new pluginHelpers.DetailedError(
              `Invalid 'enumValues' mapping!`,
              `The following types does not exist in your GraphQL schema: ${invalidMappings.join(
                ", "
              )}`
            );
          }
          return Object.keys(mapOrStr).reduce((prev, gqlIdentifier) => {
            const pointer = mapOrStr[gqlIdentifier];
            if (typeof pointer === "string") {
              const mapper = parseMapper(pointer, gqlIdentifier);
              return {
                ...prev,
                [gqlIdentifier]: {
                  isDefault: mapper.isExternal && mapper.default,
                  typeIdentifier: gqlIdentifier,
                  sourceFile: mapper.isExternal ? mapper.source : null,
                  sourceIdentifier: mapper.type,
                  importIdentifier: mapper.isExternal ? mapper.import : null,
                  mappedValues: null
                }
              };
            } else if (typeof pointer === "object") {
              return {
                ...prev,
                [gqlIdentifier]: {
                  isDefault: false,
                  typeIdentifier: gqlIdentifier,
                  sourceFile: null,
                  sourceIdentifier: null,
                  importIdentifier: null,
                  mappedValues: pointer
                }
              };
            } else {
              throw new pluginHelpers.DetailedError(
                `Invalid "enumValues" configuration`,
                `Enum "${gqlIdentifier}": expected string or object (with enum values mapping)`
              );
            }
          }, {});
        } else if (typeof mapOrStr === "string") {
          return allEnums
            .filter(enumName => !enumName.startsWith("__"))
            .reduce((prev, enumName) => {
              return {
                ...prev,
                [enumName]: {
                  isDefault: false,
                  typeIdentifier: enumName,
                  sourceFile: mapOrStr,
                  sourceIdentifier: enumName,
                  importIdentifier: enumName,
                  mappedValues: null
                }
              };
            }, {});
        }
        return {};
      }

      const DEFAULT_DECLARATION_KINDS = {
        scalar: "type",
        input: "type",
        type: "type",
        interface: "type",
        arguments: "type"
      };
      function normalizeDeclarationKind(declarationKind) {
        if (typeof declarationKind === "string") {
          return {
            scalar: declarationKind,
            input: declarationKind,
            type: declarationKind,
            interface: declarationKind,
            arguments: declarationKind
          };
        }
        return {
          ...DEFAULT_DECLARATION_KINDS,
          ...declarationKind
        };
      }

      const DEFAULT_AVOID_OPTIONALS = {
        object: false,
        inputValue: false,
        field: false,
        defaultValue: false
      };
      function normalizeAvoidOptionals(avoidOptionals) {
        if (typeof avoidOptionals === "boolean") {
          return {
            object: avoidOptionals,
            inputValue: avoidOptionals,
            field: avoidOptionals,
            defaultValue: avoidOptionals
          };
        }
        return {
          ...DEFAULT_AVOID_OPTIONALS,
          ...avoidOptionals
        };
      }

      function generateFragmentImportStatement(statement, kind) {
        const { importSource: fragmentImportSource, ...rest } = statement;
        const { identifiers, path, namespace } = fragmentImportSource;
        const importSource = {
          identifiers: identifiers
            .filter(
              fragmentImport => kind === "both" || kind === fragmentImport.kind
            )
            .map(({ name }) => name),
          path,
          namespace
        };
        return generateImportStatement({
          importSource,
          ...rest,
          typesImport: kind === "type" ? statement.typesImport : false
        });
      }
      function generateImportStatement(statement) {
        const { baseDir, importSource, outputPath, typesImport } = statement;
        const importPath = resolveImportPath(
          baseDir,
          outputPath,
          importSource.path
        );
        const importNames =
          importSource.identifiers && importSource.identifiers.length
            ? `{ ${Array.from(new Set(importSource.identifiers)).join(", ")} }`
            : "*";
        const importAlias = importSource.namespace
          ? ` as ${importSource.namespace}`
          : "";
        const importStatement = typesImport ? "import type" : "import";
        return `${importStatement} ${importNames}${importAlias} from '${importPath}';${
          importAlias ? "\n" : ""
        }`;
      }
      function resolveImportPath(baseDir, outputPath, sourcePath) {
        const shouldAbsolute = !sourcePath.startsWith("~");
        if (shouldAbsolute) {
          const absGeneratedFilePath = path.resolve(baseDir, outputPath);
          const absImportFilePath = path.resolve(baseDir, sourcePath);
          return resolveRelativeImport(absGeneratedFilePath, absImportFilePath);
        } else {
          return sourcePath.replace(`~`, "");
        }
      }
      function resolveRelativeImport(from, to) {
        if (!path.isAbsolute(from)) {
          throw new Error(
            `Argument 'from' must be an absolute path, '${from}' given.`
          );
        }
        if (!path.isAbsolute(to)) {
          throw new Error(
            `Argument 'to' must be an absolute path, '${to}' given.`
          );
        }
        return fixLocalFilePath(
          clearExtension(path.relative(path.dirname(from), to))
        );
      }
      function resolveImportSource(source) {
        return typeof source === "string" ? { path: source } : source;
      }
      function clearExtension(path$1) {
        const parsedPath = parse(path$1);
        return path.join(parsedPath.dir, parsedPath.name).replace(/\\/g, "/");
      }
      function fixLocalFilePath(path) {
        return !path.startsWith("..") ? `./${path}` : path;
      }

      class BaseVisitor {
        constructor(rawConfig, additionalConfig) {
          this._declarationBlockConfig = {};
          this._parsedConfig = {
            convert: convertFactory(rawConfig),
            typesPrefix: rawConfig.typesPrefix || "",
            typesSuffix: rawConfig.typesSuffix || "",
            externalFragments: rawConfig.externalFragments || [],
            fragmentImports: rawConfig.fragmentImports || [],
            addTypename: !rawConfig.skipTypename,
            nonOptionalTypename: !!rawConfig.nonOptionalTypename,
            useTypeImports: !!rawConfig.useTypeImports,
            dedupeFragments: !!rawConfig.dedupeFragments,
            ...(additionalConfig || {})
          };
          this.scalars = {};
          Object.keys(this.config.scalars || {}).forEach(key => {
            this.scalars[key] = this.config.scalars[key].type;
          });
          autoBind(this);
        }
        getVisitorKindContextFromAncestors(ancestors) {
          if (!ancestors) {
            return [];
          }
          return ancestors.map(t => t.kind).filter(Boolean);
        }
        get config() {
          return this._parsedConfig;
        }
        convertName(node, options) {
          const useTypesPrefix =
            typeof (options && options.useTypesPrefix) === "boolean"
              ? options.useTypesPrefix
              : true;
          const useTypesSuffix =
            typeof (options && options.useTypesSuffix) === "boolean"
              ? options.useTypesSuffix
              : true;
          let convertedName = "";
          if (useTypesPrefix) {
            convertedName += this.config.typesPrefix;
          }
          convertedName += this.config.convert(node, options);
          if (useTypesSuffix) {
            convertedName += this.config.typesSuffix;
          }
          return convertedName;
        }
        getOperationSuffix(node, operationType) {
          const {
            omitOperationSuffix = false,
            dedupeOperationSuffix = false
          } = this.config;
          const operationName =
            typeof node === "string" ? node : node.name ? node.name.value : "";
          return omitOperationSuffix
            ? ""
            : dedupeOperationSuffix &&
              operationName.toLowerCase().endsWith(operationType.toLowerCase())
            ? ""
            : operationType;
        }
        getFragmentSuffix(node) {
          return this.getOperationSuffix(node, "Fragment");
        }
        getFragmentName(node) {
          return this.convertName(node, {
            suffix: this.getFragmentSuffix(node),
            useTypesPrefix: false
          });
        }
        getFragmentVariableName(node) {
          const {
            omitOperationSuffix = false,
            dedupeOperationSuffix = false,
            fragmentVariableSuffix = "FragmentDoc",
            fragmentVariablePrefix = ""
          } = this.config;
          const fragmentName =
            typeof node === "string" ? node : node.name.value;
          const suffix = omitOperationSuffix
            ? ""
            : dedupeOperationSuffix &&
              fragmentName.toLowerCase().endsWith("fragment") &&
              fragmentVariableSuffix.toLowerCase().startsWith("fragment")
            ? fragmentVariableSuffix.substring("fragment".length)
            : fragmentVariableSuffix;
          return this.convertName(node, {
            prefix: fragmentVariablePrefix,
            suffix,
            useTypesPrefix: false
          });
        }
        getPunctuation(_declarationKind) {
          return "";
        }
      }

      class OperationVariablesToObject {
        constructor(
          _scalars,
          _convertName,
          _namespacedImportName = null,
          _enumNames = [],
          _enumPrefix = true,
          _enumValues = {},
          _applyCoercion = false
        ) {
          this._scalars = _scalars;
          this._convertName = _convertName;
          this._namespacedImportName = _namespacedImportName;
          this._enumNames = _enumNames;
          this._enumPrefix = _enumPrefix;
          this._enumValues = _enumValues;
          this._applyCoercion = _applyCoercion;
          autoBind(this);
        }
        getName(node) {
          if (node.name) {
            if (typeof node.name === "string") {
              return node.name;
            }
            return node.name.value;
          } else if (node.variable) {
            return node.variable.name.value;
          }
          return null;
        }
        transform(variablesNode) {
          if (!variablesNode || variablesNode.length === 0) {
            return null;
          }
          return (
            variablesNode
              .map(variable => indent(this.transformVariable(variable)))
              .join(`${this.getPunctuation()}\n`) + this.getPunctuation()
          );
        }
        getScalar(name) {
          const prefix = this._namespacedImportName
            ? `${this._namespacedImportName}.`
            : "";
          return `${prefix}Scalars['${name}']`;
        }
        transformVariable(variable) {
          let typeValue = null;
          const prefix = this._namespacedImportName
            ? `${this._namespacedImportName}.`
            : "";
          if (typeof variable.type === "string") {
            typeValue = variable.type;
          } else {
            const baseType = getBaseTypeNode(variable.type);
            const typeName = baseType.name.value;
            if (this._scalars[typeName]) {
              typeValue = this.getScalar(typeName);
            } else if (
              this._enumValues[typeName] &&
              this._enumValues[typeName].sourceFile
            ) {
              typeValue =
                this._enumValues[typeName].typeIdentifier ||
                this._enumValues[typeName].sourceIdentifier;
            } else {
              typeValue = `${prefix}${this._convertName(baseType, {
                useTypesPrefix: this._enumNames.includes(typeName)
                  ? this._enumPrefix
                  : true
              })}`;
            }
          }
          const fieldName = this.getName(variable);
          const fieldType = this.wrapAstTypeWithModifiers(
            typeValue,
            variable.type,
            this._applyCoercion
          );
          const hasDefaultValue =
            variable.defaultValue != null &&
            typeof variable.defaultValue !== "undefined";
          const isNonNullType =
            variable.type.kind === graphql.Kind.NON_NULL_TYPE;
          const formattedFieldString = this.formatFieldString(
            fieldName,
            isNonNullType,
            hasDefaultValue
          );
          const formattedTypeString = this.formatTypeString(
            fieldType,
            isNonNullType,
            hasDefaultValue
          );
          return `${formattedFieldString}: ${formattedTypeString}`;
        }
        wrapAstTypeWithModifiers(_baseType, _typeNode, _applyCoercion) {
          throw new Error(
            `You must override "wrapAstTypeWithModifiers" of OperationVariablesToObject!`
          );
        }
        formatFieldString(fieldName, isNonNullType, _hasDefaultValue) {
          return fieldName;
        }
        formatTypeString(fieldType, isNonNullType, hasDefaultValue) {
          const prefix = this._namespacedImportName
            ? `${this._namespacedImportName}.`
            : "";
          if (hasDefaultValue) {
            return `${prefix}Maybe<${fieldType}>`;
          }
          return fieldType;
        }
        getPunctuation() {
          return ",";
        }
      }

      class BaseTypesVisitor extends BaseVisitor {
        constructor(
          _schema,
          rawConfig,
          additionalConfig,
          defaultScalars = DEFAULT_SCALARS
        ) {
          super(rawConfig, {
            enumPrefix: getConfigValue(rawConfig.enumPrefix, true),
            onlyOperationTypes: getConfigValue(
              rawConfig.onlyOperationTypes,
              false
            ),
            addUnderscoreToArgsType: getConfigValue(
              rawConfig.addUnderscoreToArgsType,
              false
            ),
            enumValues: parseEnumValues({
              schema: _schema,
              mapOrStr: rawConfig.enumValues,
              ignoreEnumValuesFromSchema: rawConfig.ignoreEnumValuesFromSchema
            }),
            declarationKind: normalizeDeclarationKind(
              rawConfig.declarationKind
            ),
            scalars: buildScalarsFromConfig(_schema, rawConfig, defaultScalars),
            fieldWrapperValue: getConfigValue(rawConfig.fieldWrapperValue, "T"),
            wrapFieldDefinitions: getConfigValue(
              rawConfig.wrapFieldDefinitions,
              false
            ),
            entireFieldWrapperValue: getConfigValue(
              rawConfig.entireFieldWrapperValue,
              "T"
            ),
            wrapEntireDefinitions: getConfigValue(
              rawConfig.wrapEntireFieldDefinitions,
              false
            ),
            ignoreEnumValuesFromSchema: getConfigValue(
              rawConfig.ignoreEnumValuesFromSchema,
              false
            ),
            ...additionalConfig
          });
          this._schema = _schema;
          this._argumentsTransformer = new OperationVariablesToObject(
            this.scalars,
            this.convertName
          );
        }
        getExportPrefix() {
          return "export ";
        }
        getFieldWrapperValue() {
          if (this.config.fieldWrapperValue) {
            return `${this.getExportPrefix()}type FieldWrapper<T> = ${
              this.config.fieldWrapperValue
            };`;
          }
          return "";
        }
        getEntireFieldWrapperValue() {
          if (this.config.entireFieldWrapperValue) {
            return `${this.getExportPrefix()}type EntireFieldWrapper<T> = ${
              this.config.entireFieldWrapperValue
            };`;
          }
          return "";
        }
        getScalarsImports() {
          return Object.keys(this.config.scalars)
            .map(enumName => {
              const mappedValue = this.config.scalars[enumName];
              if (mappedValue.isExternal) {
                return this._buildTypeImport(
                  mappedValue.import,
                  mappedValue.source,
                  mappedValue.default
                );
              }
              return null;
            })
            .filter(a => a);
        }
        get scalarsDefinition() {
          const allScalars = Object.keys(this.config.scalars).map(
            scalarName => {
              const scalarValue = this.config.scalars[scalarName].type;
              const scalarType = this._schema.getType(scalarName);
              const comment =
                scalarType && scalarType.astNode && scalarType.description
                  ? transformComment(scalarType.description, 1)
                  : "";
              const { scalar } = this._parsedConfig.declarationKind;
              return (
                comment +
                indent(
                  `${scalarName}: ${scalarValue}${this.getPunctuation(scalar)}`
                )
              );
            }
          );
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(this._parsedConfig.declarationKind.scalar)
            .withName("Scalars")
            .withComment(
              "All built-in and custom scalars, mapped to their actual values"
            )
            .withBlock(allScalars.join("\n")).string;
        }
        setDeclarationBlockConfig(config) {
          this._declarationBlockConfig = config;
        }
        setArgumentsTransformer(argumentsTransfomer) {
          this._argumentsTransformer = argumentsTransfomer;
        }
        NonNullType(node) {
          const asString = node.type;
          return asString;
        }
        getInputObjectDeclarationBlock(node) {
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(this._parsedConfig.declarationKind.input)
            .withName(this.convertName(node))
            .withComment(node.description)
            .withBlock(node.fields.join("\n"));
        }
        InputObjectTypeDefinition(node) {
          return this.getInputObjectDeclarationBlock(node).string;
        }
        InputValueDefinition(node) {
          const comment = transformComment(node.description, 1);
          const { input } = this._parsedConfig.declarationKind;
          return (
            comment +
            indent(`${node.name}: ${node.type}${this.getPunctuation(input)}`)
          );
        }
        Name(node) {
          return node.value;
        }
        FieldDefinition(node) {
          const typeString = node.type;
          const { type } = this._parsedConfig.declarationKind;
          const comment = this.getFieldComment(node);
          return (
            comment +
            indent(`${node.name}: ${typeString}${this.getPunctuation(type)}`)
          );
        }
        UnionTypeDefinition(node, key, parent) {
          if (this.config.onlyOperationTypes) return "";
          const originalNode = parent[key];
          const possibleTypes = originalNode.types
            .map(t =>
              this.scalars[t.name.value]
                ? this._getScalar(t.name.value)
                : this.convertName(t)
            )
            .join(" | ");
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind("type")
            .withName(this.convertName(node))
            .withComment(node.description)
            .withContent(possibleTypes).string;
        }
        mergeInterfaces(interfaces, hasOtherFields) {
          return (
            interfaces.join(" & ") +
            (interfaces.length && hasOtherFields ? " & " : "")
          );
        }
        appendInterfacesAndFieldsToBlock(block, interfaces, fields) {
          block.withContent(
            this.mergeInterfaces(interfaces, fields.length > 0)
          );
          block.withBlock(this.mergeAllFields(fields, interfaces.length > 0));
        }
        getObjectTypeDeclarationBlock(node, originalNode) {
          const optionalTypename = this.config.nonOptionalTypename
            ? "__typename"
            : "__typename?";
          const {
            type,
            interface: interfacesType
          } = this._parsedConfig.declarationKind;
          const allFields = [
            ...(this.config.addTypename
              ? [
                  indent(
                    `${
                      this.config.immutableTypes ? "readonly " : ""
                    }${optionalTypename}: '${node.name}'${this.getPunctuation(
                      type
                    )}`
                  )
                ]
              : []),
            ...node.fields
          ];
          const interfacesNames = originalNode.interfaces
            ? originalNode.interfaces.map(i => this.convertName(i))
            : [];
          const declarationBlock = new DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind(type)
            .withName(this.convertName(node))
            .withComment(node.description);
          if (type === "interface" || type === "class") {
            if (interfacesNames.length > 0) {
              const keyword =
                interfacesType === "interface" && type === "class"
                  ? "implements"
                  : "extends";
              declarationBlock.withContent(
                `${keyword} ` +
                  interfacesNames.join(", ") +
                  (allFields.length > 0 ? " " : " {}")
              );
            }
            declarationBlock.withBlock(this.mergeAllFields(allFields, false));
          } else {
            this.appendInterfacesAndFieldsToBlock(
              declarationBlock,
              interfacesNames,
              allFields
            );
          }
          return declarationBlock;
        }
        getFieldComment(node) {
          let commentText = node.description;
          const deprecationDirective = node.directives.find(
            v => v.name === "deprecated"
          );
          if (deprecationDirective) {
            const deprecationReason = this.getDeprecationReason(
              deprecationDirective
            );
            commentText = `${
              commentText ? `${commentText}\n` : ""
            }@deprecated ${deprecationReason}`;
          }
          const comment = transformComment(commentText, 1);
          return comment;
        }
        mergeAllFields(allFields, _hasInterfaces) {
          return allFields.join("\n");
        }
        ObjectTypeDefinition(node, key, parent) {
          if (this.config.onlyOperationTypes) return "";
          const originalNode = parent[key];
          return [
            this.getObjectTypeDeclarationBlock(node, originalNode).string,
            this.buildArgumentsBlock(originalNode)
          ]
            .filter(f => f)
            .join("\n\n");
        }
        getInterfaceTypeDeclarationBlock(node, _originalNode) {
          const declarationBlock = new DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind(this._parsedConfig.declarationKind.interface)
            .withName(this.convertName(node))
            .withComment(node.description);
          return declarationBlock.withBlock(node.fields.join("\n"));
        }
        InterfaceTypeDefinition(node, key, parent) {
          if (this.config.onlyOperationTypes) return "";
          const originalNode = parent[key];
          return [
            this.getInterfaceTypeDeclarationBlock(node, originalNode).string,
            this.buildArgumentsBlock(originalNode)
          ]
            .filter(f => f)
            .join("\n\n");
        }
        ScalarTypeDefinition(_node) {
          // We empty this because we handle scalars in a different way, see constructor.
          return "";
        }
        _buildTypeImport(identifier, source, asDefault = false) {
          const { useTypeImports } = this.config;
          if (asDefault) {
            if (useTypeImports) {
              return `import type { default as ${identifier} } from '${source}';`;
            }
            return `import ${identifier} from '${source}';`;
          }
          return `import${
            useTypeImports ? " type" : ""
          } { ${identifier} } from '${source}';`;
        }
        handleEnumValueMapper(
          typeIdentifier,
          importIdentifier,
          sourceIdentifier,
          sourceFile
        ) {
          const importStatement = this._buildTypeImport(
            importIdentifier || sourceIdentifier,
            sourceFile
          );
          if (
            importIdentifier !== sourceIdentifier ||
            sourceIdentifier !== typeIdentifier
          ) {
            return [
              importStatement,
              `import ${typeIdentifier} = ${sourceIdentifier};`
            ];
          }
          return [importStatement];
        }
        getEnumsImports() {
          return flatMap(Object.keys(this.config.enumValues), enumName => {
            const mappedValue = this.config.enumValues[enumName];
            if (mappedValue.sourceFile) {
              if (mappedValue.isDefault) {
                return [
                  this._buildTypeImport(
                    mappedValue.typeIdentifier,
                    mappedValue.sourceFile,
                    true
                  )
                ];
              }
              return this.handleEnumValueMapper(
                mappedValue.typeIdentifier,
                mappedValue.importIdentifier,
                mappedValue.sourceIdentifier,
                mappedValue.sourceFile
              );
            }
            return [];
          }).filter(a => a);
        }
        EnumTypeDefinition(node) {
          const enumName = node.name;
          // In case of mapped external enum string
          if (
            this.config.enumValues[enumName] &&
            this.config.enumValues[enumName].sourceFile
          ) {
            return null;
          }
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind("enum")
            .withName(
              this.convertName(node, { useTypesPrefix: this.config.enumPrefix })
            )
            .withComment(node.description)
            .withBlock(this.buildEnumValuesBlock(enumName, node.values)).string;
        }
        // We are using it in order to transform "description" field
        StringValue(node) {
          return node.value;
        }
        makeValidEnumIdentifier(identifier) {
          if (/^[0-9]/.exec(identifier)) {
            return wrapWithSingleQuotes(identifier, true);
          }
          return identifier;
        }
        buildEnumValuesBlock(typeName, values) {
          const schemaEnumType = this._schema
            ? this._schema.getType(typeName)
            : undefined;
          return values
            .map(enumOption => {
              const optionName = this.makeValidEnumIdentifier(
                this.convertName(enumOption, {
                  useTypesPrefix: false,
                  transformUnderscore: true
                })
              );
              const comment = transformComment(enumOption.description, 1);
              const schemaEnumValue =
                schemaEnumType && !this.config.ignoreEnumValuesFromSchema
                  ? schemaEnumType.getValue(enumOption.name).value
                  : undefined;
              let enumValue =
                typeof schemaEnumValue !== "undefined"
                  ? schemaEnumValue
                  : enumOption.name;
              if (
                this.config.enumValues[typeName] &&
                this.config.enumValues[typeName].mappedValues &&
                typeof this.config.enumValues[typeName].mappedValues[
                  enumValue
                ] !== "undefined"
              ) {
                enumValue = this.config.enumValues[typeName].mappedValues[
                  enumValue
                ];
              }
              return (
                comment +
                indent(
                  `${optionName}${
                    this._declarationBlockConfig.enumNameValueSeparator
                  } ${wrapWithSingleQuotes(
                    enumValue,
                    typeof schemaEnumValue !== "undefined"
                  )}`
                )
              );
            })
            .join(",\n");
        }
        DirectiveDefinition(_node) {
          return "";
        }
        getArgumentsObjectDeclarationBlock(node, name, field) {
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(this._parsedConfig.declarationKind.arguments)
            .withName(this.convertName(name))
            .withComment(node.description)
            .withBlock(this._argumentsTransformer.transform(field.arguments));
        }
        getArgumentsObjectTypeDefinition(node, name, field) {
          return this.getArgumentsObjectDeclarationBlock(node, name, field)
            .string;
        }
        buildArgumentsBlock(node) {
          const fieldsWithArguments =
            node.fields.filter(
              field => field.arguments && field.arguments.length > 0
            ) || [];
          return fieldsWithArguments
            .map(field => {
              const name =
                node.name.value +
                (this.config.addUnderscoreToArgsType ? "_" : "") +
                this.convertName(field, {
                  useTypesPrefix: false,
                  useTypesSuffix: false
                }) +
                "Args";
              return this.getArgumentsObjectTypeDefinition(node, name, field);
            })
            .join("\n\n");
        }
        _getScalar(name) {
          return `Scalars['${name}']`;
        }
        _getTypeForNode(node) {
          const typeAsString = node.name;
          if (this.scalars[typeAsString]) {
            return this._getScalar(typeAsString);
          } else if (this.config.enumValues[typeAsString]) {
            return this.config.enumValues[typeAsString].typeIdentifier;
          }
          const schemaType = this._schema.getType(node.name);
          if (schemaType && graphql.isEnumType(schemaType)) {
            return this.convertName(node, {
              useTypesPrefix: this.config.enumPrefix
            });
          }
          return this.convertName(node);
        }
        NamedType(node, key, parent, path, ancestors) {
          const currentVisitContext = this.getVisitorKindContextFromAncestors(
            ancestors
          );
          const isVisitingInputType = currentVisitContext.includes(
            graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION
          );
          const typeToUse = this._getTypeForNode(node);
          if (
            !isVisitingInputType &&
            this.config.fieldWrapperValue &&
            this.config.wrapFieldDefinitions
          ) {
            return `FieldWrapper<${typeToUse}>`;
          }
          return typeToUse;
        }
        ListType(node) {
          const asString = node.type;
          return this.wrapWithListType(asString);
        }
        SchemaDefinition() {
          return null;
        }
        getDeprecationReason(directive) {
          if (directive.name === "deprecated") {
            const hasArguments = directive.arguments.length > 0;
            let reason = "Field no longer supported";
            if (hasArguments) {
              reason = directive.arguments[0].value;
            }
            return reason;
          }
        }
        wrapWithListType(str) {
          return `Array<${str}>`;
        }
      }

      function getRootType(operation, schema) {
        switch (operation) {
          case "query":
            return schema.getQueryType();
          case "mutation":
            return schema.getMutationType();
          case "subscription":
            return schema.getSubscriptionType();
        }
      }
      class BaseDocumentsVisitor extends BaseVisitor {
        constructor(
          rawConfig,
          additionalConfig,
          _schema,
          defaultScalars = DEFAULT_SCALARS
        ) {
          super(rawConfig, {
            exportFragmentSpreadSubTypes: getConfigValue(
              rawConfig.exportFragmentSpreadSubTypes,
              false
            ),
            enumPrefix: getConfigValue(rawConfig.enumPrefix, true),
            preResolveTypes: getConfigValue(rawConfig.preResolveTypes, false),
            dedupeOperationSuffix: getConfigValue(
              rawConfig.dedupeOperationSuffix,
              false
            ),
            omitOperationSuffix: getConfigValue(
              rawConfig.omitOperationSuffix,
              false
            ),
            skipTypeNameForRoot: getConfigValue(
              rawConfig.skipTypeNameForRoot,
              false
            ),
            namespacedImportName: getConfigValue(
              rawConfig.namespacedImportName,
              null
            ),
            experimentalFragmentVariables: getConfigValue(
              rawConfig.experimentalFragmentVariables,
              false
            ),
            addTypename: !rawConfig.skipTypename,
            globalNamespace: !!rawConfig.globalNamespace,
            operationResultSuffix: getConfigValue(
              rawConfig.operationResultSuffix,
              ""
            ),
            scalars: buildScalarsFromConfig(_schema, rawConfig, defaultScalars),
            ...(additionalConfig || {})
          });
          this._schema = _schema;
          this._unnamedCounter = 1;
          this._globalDeclarations = new Set();
          autoBind(this);
          this._variablesTransfomer = new OperationVariablesToObject(
            this.scalars,
            this.convertName,
            this.config.namespacedImportName
          );
        }
        getGlobalDeclarations(noExport = false) {
          return Array.from(this._globalDeclarations).map(t =>
            noExport ? t : `export ${t}`
          );
        }
        setSelectionSetHandler(handler) {
          this._selectionSetToObject = handler;
        }
        setDeclarationBlockConfig(config) {
          this._declarationBlockConfig = config;
        }
        setVariablesTransformer(variablesTransfomer) {
          this._variablesTransfomer = variablesTransfomer;
        }
        get schema() {
          return this._schema;
        }
        get addTypename() {
          return this._parsedConfig.addTypename;
        }
        handleAnonymousOperation(node) {
          const name = node.name && node.name.value;
          if (name) {
            return this.convertName(name, {
              useTypesPrefix: false,
              useTypesSuffix: false
            });
          }
          return this.convertName(this._unnamedCounter++ + "", {
            prefix: "Unnamed_",
            suffix: "_",
            useTypesPrefix: false,
            useTypesSuffix: false
          });
        }
        FragmentDefinition(node) {
          const fragmentRootType = this._schema.getType(
            node.typeCondition.name.value
          );
          const selectionSet = this._selectionSetToObject.createNext(
            fragmentRootType,
            node.selectionSet
          );
          const fragmentSuffix = this.getFragmentSuffix(node);
          return [
            selectionSet.transformFragmentSelectionSetToTypes(
              node.name.value,
              fragmentSuffix,
              this._declarationBlockConfig
            ),
            this.config.experimentalFragmentVariables
              ? new DeclarationBlock({
                  ...this._declarationBlockConfig,
                  blockTransformer: t => this.applyVariablesWrapper(t)
                })
                  .export()
                  .asKind("type")
                  .withName(
                    this.convertName(node.name.value, {
                      suffix: fragmentSuffix + "Variables"
                    })
                  )
                  .withBlock(
                    this._variablesTransfomer.transform(
                      node.variableDefinitions
                    )
                  ).string
              : undefined
          ]
            .filter(r => r)
            .join("\n\n");
        }
        applyVariablesWrapper(variablesBlock) {
          return variablesBlock;
        }
        OperationDefinition(node) {
          const name = this.handleAnonymousOperation(node);
          const operationRootType = getRootType(node.operation, this._schema);
          if (!operationRootType) {
            throw new Error(
              `Unable to find root schema type for operation type "${node.operation}"!`
            );
          }
          const selectionSet = this._selectionSetToObject.createNext(
            operationRootType,
            node.selectionSet
          );
          const visitedOperationVariables = this._variablesTransfomer.transform(
            node.variableDefinitions
          );
          const operationType = changeCaseAll.pascalCase(node.operation);
          const operationTypeSuffix = this.getOperationSuffix(
            name,
            operationType
          );
          const operationResult = new DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("type")
            .withName(
              this.convertName(name, {
                suffix:
                  operationTypeSuffix + this._parsedConfig.operationResultSuffix
              })
            )
            .withContent(selectionSet.transformSelectionSet()).string;
          const operationVariables = new DeclarationBlock({
            ...this._declarationBlockConfig,
            blockTransformer: t => this.applyVariablesWrapper(t)
          })
            .export()
            .asKind("type")
            .withName(
              this.convertName(name, {
                suffix: operationTypeSuffix + "Variables"
              })
            )
            .withBlock(visitedOperationVariables).string;
          return [operationVariables, operationResult]
            .filter(r => r)
            .join("\n\n");
        }
      }

      class BaseResolversVisitor extends BaseVisitor {
        constructor(
          rawConfig,
          additionalConfig,
          _schema,
          defaultScalars = DEFAULT_SCALARS
        ) {
          super(rawConfig, {
            immutableTypes: getConfigValue(rawConfig.immutableTypes, false),
            optionalResolveType: getConfigValue(
              rawConfig.optionalResolveType,
              false
            ),
            enumPrefix: getConfigValue(rawConfig.enumPrefix, true),
            federation: getConfigValue(rawConfig.federation, false),
            resolverTypeWrapperSignature: getConfigValue(
              rawConfig.resolverTypeWrapperSignature,
              "Promise<T> | T"
            ),
            enumValues: parseEnumValues({
              schema: _schema,
              mapOrStr: rawConfig.enumValues
            }),
            addUnderscoreToArgsType: getConfigValue(
              rawConfig.addUnderscoreToArgsType,
              false
            ),
            onlyResolveTypeForInterfaces: getConfigValue(
              rawConfig.onlyResolveTypeForInterfaces,
              false
            ),
            contextType: parseMapper(
              rawConfig.contextType || "any",
              "ContextType"
            ),
            fieldContextTypes: getConfigValue(rawConfig.fieldContextTypes, []),
            resolverTypeSuffix: getConfigValue(
              rawConfig.resolverTypeSuffix,
              "Resolvers"
            ),
            allResolversTypeName: getConfigValue(
              rawConfig.allResolversTypeName,
              "Resolvers"
            ),
            rootValueType: parseMapper(
              rawConfig.rootValueType || "{}",
              "RootValueType"
            ),
            namespacedImportName: getConfigValue(
              rawConfig.namespacedImportName,
              ""
            ),
            avoidOptionals: getConfigValue(rawConfig.avoidOptionals, false),
            defaultMapper: rawConfig.defaultMapper
              ? parseMapper(
                  rawConfig.defaultMapper || "any",
                  "DefaultMapperType"
                )
              : null,
            mappers: transformMappers(
              rawConfig.mappers || {},
              rawConfig.mapperTypeSuffix
            ),
            scalars: buildScalarsFromConfig(_schema, rawConfig, defaultScalars),
            internalResolversPrefix: getConfigValue(
              rawConfig.internalResolversPrefix,
              "__"
            ),
            ...(additionalConfig || {})
          });
          this._schema = _schema;
          this._declarationBlockConfig = {};
          this._collectedResolvers = {};
          this._collectedDirectiveResolvers = {};
          this._usedMappers = {};
          this._resolversTypes = {};
          this._resolversParentTypes = {};
          this._rootTypeNames = [];
          this._globalDeclarations = new Set();
          this._hasScalars = false;
          this._hasFederation = false;
          autoBind(this);
          this._federation = new pluginHelpers.ApolloFederation({
            enabled: this.config.federation,
            schema: this.schema
          });
          this._rootTypeNames = getRootTypeNames(_schema);
          this._variablesTransfomer = new OperationVariablesToObject(
            this.scalars,
            this.convertName,
            this.config.namespacedImportName
          );
          this._resolversTypes = this.createResolversFields(
            type => this.applyResolverTypeWrapper(type),
            type => this.clearResolverTypeWrapper(type),
            name => this.getTypeToUse(name)
          );
          this._resolversParentTypes = this.createResolversFields(
            type => type,
            type => type,
            name => this.getParentTypeToUse(name),
            namedType => !graphql.isEnumType(namedType)
          );
          this._fieldContextTypeMap = this.createFieldContextTypeMap();
        }
        getResolverTypeWrapperSignature() {
          return `export type ResolverTypeWrapper<T> = ${this.config.resolverTypeWrapperSignature};`;
        }
        shouldMapType(type, checkedBefore = {}, duringCheck = []) {
          if (checkedBefore[type.name] !== undefined) {
            return checkedBefore[type.name];
          }
          if (type.name.startsWith("__") || this.config.scalars[type.name]) {
            return false;
          }
          if (this.config.mappers[type.name]) {
            return true;
          }
          if (graphql.isObjectType(type) || graphql.isInterfaceType(type)) {
            const fields = type.getFields();
            return Object.keys(fields)
              .filter(fieldName => {
                const field = fields[fieldName];
                const fieldType = pluginHelpers.getBaseType(field.type);
                return !duringCheck.includes(fieldType.name);
              })
              .some(fieldName => {
                const field = fields[fieldName];
                const fieldType = pluginHelpers.getBaseType(field.type);
                if (checkedBefore[fieldType.name] !== undefined) {
                  return checkedBefore[fieldType.name];
                }
                if (this.config.mappers[type.name]) {
                  return true;
                }
                duringCheck.push(type.name);
                const innerResult = this.shouldMapType(
                  fieldType,
                  checkedBefore,
                  duringCheck
                );
                return innerResult;
              });
          }
          return false;
        }
        convertName(node, options, applyNamespacedImport = false) {
          const sourceType = super.convertName(node, options);
          return `${
            applyNamespacedImport && this.config.namespacedImportName
              ? this.config.namespacedImportName + "."
              : ""
          }${sourceType}`;
        }
        // Kamil: this one is heeeeavvyyyy
        createResolversFields(
          applyWrapper,
          clearWrapper,
          getTypeToUse,
          shouldInclude
        ) {
          const allSchemaTypes = this._schema.getTypeMap();
          const nestedMapping = {};
          const typeNames = this._federation.filterTypeNames(
            Object.keys(allSchemaTypes)
          );
          typeNames.forEach(typeName => {
            const schemaType = allSchemaTypes[typeName];
            nestedMapping[typeName] = this.shouldMapType(
              schemaType,
              nestedMapping
            );
          });
          return typeNames.reduce((prev, typeName) => {
            const schemaType = allSchemaTypes[typeName];
            if (
              typeName.startsWith("__") ||
              (shouldInclude && !shouldInclude(schemaType))
            ) {
              return prev;
            }
            let shouldApplyOmit = false;
            const isRootType = this._rootTypeNames.includes(typeName);
            const isMapped = this.config.mappers[typeName];
            const isScalar = this.config.scalars[typeName];
            const hasDefaultMapper = !!(
              this.config.defaultMapper && this.config.defaultMapper.type
            );
            if (isRootType) {
              prev[typeName] = applyWrapper(this.config.rootValueType.type);
              return prev;
            } else if (isMapped && this.config.mappers[typeName].type) {
              this.markMapperAsUsed(typeName);
              prev[typeName] = applyWrapper(this.config.mappers[typeName].type);
            } else if (graphql.isInterfaceType(schemaType)) {
              const allTypesMap = this._schema.getTypeMap();
              const implementingTypes = [];
              for (const graphqlType of Object.values(allTypesMap)) {
                if (graphqlType instanceof graphql.GraphQLObjectType) {
                  const allInterfaces = graphqlType.getInterfaces();
                  if (allInterfaces.some(int => int.name === schemaType.name)) {
                    implementingTypes.push(graphqlType.name);
                  }
                }
              }
              const possibleTypes =
                implementingTypes.map(name => getTypeToUse(name)).join(" | ") ||
                "never";
              prev[typeName] = possibleTypes;
              return prev;
            } else if (
              graphql.isEnumType(schemaType) &&
              this.config.enumValues[typeName]
            ) {
              prev[typeName] =
                this.config.enumValues[typeName].sourceIdentifier ||
                this.convertName(
                  this.config.enumValues[typeName].typeIdentifier
                );
            } else if (
              hasDefaultMapper &&
              !hasPlaceholder(this.config.defaultMapper.type)
            ) {
              prev[typeName] = applyWrapper(this.config.defaultMapper.type);
            } else if (isScalar) {
              prev[typeName] = applyWrapper(this._getScalar(typeName));
            } else if (graphql.isUnionType(schemaType)) {
              prev[typeName] = schemaType
                .getTypes()
                .map(type => getTypeToUse(type.name))
                .join(" | ");
            } else {
              shouldApplyOmit = true;
              prev[typeName] = this.convertName(
                typeName,
                { useTypesPrefix: this.config.enumPrefix },
                true
              );
            }
            if (
              shouldApplyOmit &&
              prev[typeName] !== "any" &&
              graphql.isObjectType(schemaType)
            ) {
              const fields = schemaType.getFields();
              const relevantFields = this._federation
                .filterFieldNames(Object.keys(fields))
                .map(fieldName => {
                  const field = fields[fieldName];
                  const baseType = pluginHelpers.getBaseType(field.type);
                  const isUnion = graphql.isUnionType(baseType);
                  if (
                    !this.config.mappers[baseType.name] &&
                    !isUnion &&
                    !nestedMapping[baseType.name]
                  ) {
                    return null;
                  }
                  const addOptionalSign =
                    !this.config.avoidOptionals &&
                    !graphql.isNonNullType(field.type);
                  return {
                    addOptionalSign,
                    fieldName,
                    replaceWithType: wrapTypeWithModifiers(
                      getTypeToUse(baseType.name),
                      field.type,
                      {
                        wrapOptional: this.applyMaybe,
                        wrapArray: this.wrapWithArray
                      }
                    )
                  };
                })
                .filter(a => a);
              if (relevantFields.length > 0) {
                // Puts ResolverTypeWrapper on top of an entire type
                prev[typeName] = applyWrapper(
                  this.replaceFieldsInType(prev[typeName], relevantFields)
                );
              } else {
                // We still want to use ResolverTypeWrapper, even if we don't touch any fields
                prev[typeName] = applyWrapper(prev[typeName]);
              }
            }
            if (isMapped && hasPlaceholder(prev[typeName])) {
              prev[typeName] = replacePlaceholder(prev[typeName], typeName);
            }
            if (
              !isMapped &&
              hasDefaultMapper &&
              hasPlaceholder(this.config.defaultMapper.type)
            ) {
              // Make sure the inner type has no ResolverTypeWrapper
              const name = clearWrapper(
                isScalar ? this._getScalar(typeName) : prev[typeName]
              );
              const replaced = replacePlaceholder(
                this.config.defaultMapper.type,
                name
              );
              // Don't wrap Union with ResolverTypeWrapper, each inner type already has it
              if (graphql.isUnionType(schemaType)) {
                prev[typeName] = replaced;
              } else {
                prev[typeName] = applyWrapper(
                  replacePlaceholder(this.config.defaultMapper.type, name)
                );
              }
            }
            return prev;
          }, {});
        }
        replaceFieldsInType(typeName, relevantFields) {
          this._globalDeclarations.add(OMIT_TYPE);
          return `Omit<${typeName}, ${relevantFields
            .map(f => `'${f.fieldName}'`)
            .join(" | ")}> & { ${relevantFields
            .map(
              f =>
                `${f.fieldName}${f.addOptionalSign ? "?" : ""}: ${
                  f.replaceWithType
                }`
            )
            .join(", ")} }`;
        }
        applyMaybe(str) {
          const namespacedImportPrefix = this.config.namespacedImportName
            ? this.config.namespacedImportName + "."
            : "";
          return `${namespacedImportPrefix}Maybe<${str}>`;
        }
        applyResolverTypeWrapper(str) {
          return `ResolverTypeWrapper<${this.clearResolverTypeWrapper(str)}>`;
        }
        clearMaybe(str) {
          const namespacedImportPrefix = this.config.namespacedImportName
            ? this.config.namespacedImportName + "."
            : "";
          if (str.startsWith(`${namespacedImportPrefix}Maybe<`)) {
            const maybeRe = new RegExp(
              `${namespacedImportPrefix.replace(".", "\\.")}Maybe<(.*?)>$`
            );
            return str.replace(maybeRe, "$1");
          }
          return str;
        }
        clearResolverTypeWrapper(str) {
          if (str.startsWith("ResolverTypeWrapper<")) {
            return str.replace(/ResolverTypeWrapper<(.*?)>$/, "$1");
          }
          return str;
        }
        wrapWithArray(t) {
          if (this.config.immutableTypes) {
            return `ReadonlyArray<${t}>`;
          }
          return `Array<${t}>`;
        }
        createFieldContextTypeMap() {
          return this.config.fieldContextTypes.reduce(
            (prev, fieldContextType) => {
              const items = fieldContextType.split("#");
              if (items.length === 3) {
                const [path, source, contextTypeName] = items;
                return {
                  ...prev,
                  [path]: parseMapper(`${source}#${contextTypeName}`)
                };
              }
              const [path, contextType] = items;
              return { ...prev, [path]: parseMapper(contextType) };
            },
            {}
          );
        }
        buildResolversTypes() {
          const declarationKind = "type";
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(declarationKind)
            .withName(this.convertName("ResolversTypes"))
            .withComment(
              "Mapping between all available schema types and the resolvers types"
            )
            .withBlock(
              Object.keys(this._resolversTypes)
                .map(typeName =>
                  indent(
                    `${typeName}: ${
                      this._resolversTypes[typeName]
                    }${this.getPunctuation(declarationKind)}`
                  )
                )
                .join("\n")
            ).string;
        }
        buildResolversParentTypes() {
          const declarationKind = "type";
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(declarationKind)
            .withName(this.convertName("ResolversParentTypes"))
            .withComment(
              "Mapping between all available schema types and the resolvers parents"
            )
            .withBlock(
              Object.keys(this._resolversParentTypes)
                .map(typeName =>
                  indent(
                    `${typeName}: ${
                      this._resolversParentTypes[typeName]
                    }${this.getPunctuation(declarationKind)}`
                  )
                )
                .join("\n")
            ).string;
        }
        get schema() {
          return this._schema;
        }
        get defaultMapperType() {
          return this.config.defaultMapper.type;
        }
        get unusedMappers() {
          return Object.keys(this.config.mappers).filter(
            name => !this._usedMappers[name]
          );
        }
        get globalDeclarations() {
          return Array.from(this._globalDeclarations);
        }
        isMapperImported(groupedMappers, identifier, source) {
          const exists = !groupedMappers[source]
            ? false
            : !!groupedMappers[source].find(m => m.identifier === identifier);
          const existsFromEnums = !!Object.keys(this.config.enumValues)
            .map(key => this.config.enumValues[key])
            .find(
              o => o.sourceFile === source && o.typeIdentifier === identifier
            );
          return exists || existsFromEnums;
        }
        get mappersImports() {
          const groupedMappers = {};
          const addMapper = (source, identifier, asDefault) => {
            if (!this.isMapperImported(groupedMappers, identifier, source)) {
              if (!groupedMappers[source]) {
                groupedMappers[source] = [];
              }
              groupedMappers[source].push({ identifier, asDefault });
            }
          };
          Object.keys(this.config.mappers)
            .map(gqlTypeName => ({
              gqlType: gqlTypeName,
              mapper: this.config.mappers[gqlTypeName]
            }))
            .filter(({ mapper }) => mapper.isExternal)
            .forEach(({ mapper }) => {
              const externalMapper = mapper;
              const identifier = stripMapperTypeInterpolation(
                externalMapper.import
              );
              addMapper(
                externalMapper.source,
                identifier,
                externalMapper.default
              );
            });
          if (this.config.contextType.isExternal) {
            addMapper(
              this.config.contextType.source,
              this.config.contextType.import,
              this.config.contextType.default
            );
          }
          if (this.config.rootValueType.isExternal) {
            addMapper(
              this.config.rootValueType.source,
              this.config.rootValueType.import,
              this.config.rootValueType.default
            );
          }
          if (
            this.config.defaultMapper &&
            this.config.defaultMapper.isExternal
          ) {
            const identifier = stripMapperTypeInterpolation(
              this.config.defaultMapper.import
            );
            addMapper(
              this.config.defaultMapper.source,
              identifier,
              this.config.defaultMapper.default
            );
          }
          Object.values(this._fieldContextTypeMap).forEach(parsedMapper => {
            if (parsedMapper.isExternal) {
              addMapper(
                parsedMapper.source,
                parsedMapper.import,
                parsedMapper.default
              );
            }
          });
          return Object.keys(groupedMappers)
            .map(source =>
              buildMapperImport(
                source,
                groupedMappers[source],
                this.config.useTypeImports
              )
            )
            .filter(Boolean);
        }
        setDeclarationBlockConfig(config) {
          this._declarationBlockConfig = config;
        }
        setVariablesTransformer(variablesTransfomer) {
          this._variablesTransfomer = variablesTransfomer;
        }
        hasScalars() {
          return this._hasScalars;
        }
        hasFederation() {
          return this._hasFederation;
        }
        getRootResolver() {
          const name = this.convertName(this.config.allResolversTypeName);
          const declarationKind = "type";
          const contextType = `<ContextType = ${this.config.contextType.type}>`;
          // This is here because we don't want to break IResolvers, so there is a mapping by default,
          // and if the developer is overriding typesPrefix, it won't get generated at all.
          const deprecatedIResolvers = !this.config.typesPrefix
            ? `
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers${contextType} = ${name}<ContextType>;`
            : "";
          return [
            new DeclarationBlock(this._declarationBlockConfig)
              .export()
              .asKind(declarationKind)
              .withName(name, contextType)
              .withBlock(
                Object.keys(this._collectedResolvers)
                  .map(schemaTypeName => {
                    const resolverType = this._collectedResolvers[
                      schemaTypeName
                    ];
                    return indent(
                      this.formatRootResolver(
                        schemaTypeName,
                        resolverType,
                        declarationKind
                      )
                    );
                  })
                  .join("\n")
              ).string,
            deprecatedIResolvers
          ].join("\n");
        }
        formatRootResolver(schemaTypeName, resolverType, declarationKind) {
          return `${schemaTypeName}${
            this.config.avoidOptionals ? "" : "?"
          }: ${resolverType}${this.getPunctuation(declarationKind)}`;
        }
        getAllDirectiveResolvers() {
          if (Object.keys(this._collectedDirectiveResolvers).length) {
            const declarationKind = "type";
            const name = this.convertName("DirectiveResolvers");
            const contextType = `<ContextType = ${this.config.contextType.type}>`;
            // This is here because we don't want to break IResolvers, so there is a mapping by default,
            // and if the developer is overriding typesPrefix, it won't get generated at all.
            const deprecatedIResolvers = !this.config.typesPrefix
              ? `
/**
 * @deprecated
 * Use "DirectiveResolvers" root object instead. If you wish to get "IDirectiveResolvers", add "typesPrefix: I" to your config.
 */
export type IDirectiveResolvers${contextType} = ${name}<ContextType>;`
              : "";
            return [
              new DeclarationBlock(this._declarationBlockConfig)
                .export()
                .asKind(declarationKind)
                .withName(name, contextType)
                .withBlock(
                  Object.keys(this._collectedDirectiveResolvers)
                    .map(schemaTypeName => {
                      const resolverType = this._collectedDirectiveResolvers[
                        schemaTypeName
                      ];
                      return indent(
                        this.formatRootResolver(
                          schemaTypeName,
                          resolverType,
                          declarationKind
                        )
                      );
                    })
                    .join("\n")
                ).string,
              deprecatedIResolvers
            ].join("\n");
          }
          return "";
        }
        Name(node) {
          return node.value;
        }
        ListType(node) {
          const asString = node.type;
          return this.wrapWithArray(asString);
        }
        _getScalar(name) {
          return `${
            this.config.namespacedImportName
              ? this.config.namespacedImportName + "."
              : ""
          }Scalars['${name}']`;
        }
        NamedType(node) {
          const nameStr = node.name;
          if (this.config.scalars[nameStr]) {
            return this._getScalar(nameStr);
          }
          return this.convertName(node, null, true);
        }
        NonNullType(node) {
          const asString = node.type;
          return asString;
        }
        markMapperAsUsed(name) {
          this._usedMappers[name] = true;
        }
        getTypeToUse(name) {
          const resolversType = this.convertName("ResolversTypes");
          return `${resolversType}['${name}']`;
        }
        getParentTypeToUse(name) {
          const resolversType = this.convertName("ResolversParentTypes");
          return `${resolversType}['${name}']`;
        }
        getParentTypeForSignature(_node) {
          return "ParentType";
        }
        transformParentGenericType(parentType) {
          return `ParentType extends ${parentType} = ${parentType}`;
        }
        FieldDefinition(node, key, parent) {
          const hasArguments = node.arguments && node.arguments.length > 0;
          const declarationKind = "type";
          return parentName => {
            const original = parent[key];
            const baseType = getBaseTypeNode(original.type);
            const realType = baseType.name.value;
            const parentType = this.schema.getType(parentName);
            if (
              this._federation.skipField({
                fieldNode: original,
                parentType: parentType
              })
            ) {
              return null;
            }
            const typeToUse = this.getTypeToUse(realType);
            const mappedType = this._variablesTransfomer.wrapAstTypeWithModifiers(
              typeToUse,
              original.type
            );
            const subscriptionType = this._schema.getSubscriptionType();
            const isSubscriptionType =
              subscriptionType && subscriptionType.name === parentName;
            let argsType = hasArguments
              ? this.convertName(
                  parentName +
                    (this.config.addUnderscoreToArgsType ? "_" : "") +
                    this.convertName(node.name, {
                      useTypesPrefix: false,
                      useTypesSuffix: false
                    }) +
                    "Args",
                  {
                    useTypesPrefix: true
                  },
                  true
                )
              : null;
            if (argsType !== null) {
              const argsToForceRequire = original.arguments.filter(
                arg => !!arg.defaultValue || arg.type.kind === "NonNullType"
              );
              if (argsToForceRequire.length > 0) {
                argsType = this.applyRequireFields(
                  argsType,
                  argsToForceRequire
                );
              } else if (original.arguments.length > 0) {
                argsType = this.applyOptionalFields(
                  argsType,
                  original.arguments
                );
              }
            }
            const parentTypeSignature = this._federation.transformParentType({
              fieldNode: original,
              parentType,
              parentTypeSignature: this.getParentTypeForSignature(node)
            });
            const mappedTypeKey = isSubscriptionType
              ? `${mappedType}, "${node.name}"`
              : mappedType;
            const signature = {
              name: node.name,
              modifier: this.config.avoidOptionals ? "" : "?",
              type: isSubscriptionType ? "SubscriptionResolver" : "Resolver",
              genericTypes: [
                mappedTypeKey,
                parentTypeSignature,
                this._fieldContextTypeMap[`${parentName}.${node.name}`]
                  ? this._fieldContextTypeMap[`${parentName}.${node.name}`].type
                  : "ContextType",
                argsType
              ].filter(f => f)
            };
            if (this._federation.isResolveReferenceField(node)) {
              this._hasFederation = true;
              signature.type = "ReferenceResolver";
              if (signature.genericTypes.length >= 3) {
                signature.genericTypes = signature.genericTypes.slice(0, 3);
              }
            }
            return indent(
              `${signature.name}${signature.modifier}: ${
                signature.type
              }<${signature.genericTypes.join(", ")}>${this.getPunctuation(
                declarationKind
              )}`
            );
          };
        }
        applyRequireFields(argsType, fields) {
          this._globalDeclarations.add(REQUIRE_FIELDS_TYPE);
          return `RequireFields<${argsType}, ${fields
            .map(f => `'${f.name.value}'`)
            .join(" | ")}>`;
        }
        applyOptionalFields(argsType, _fields) {
          this._globalDeclarations.add(REQUIRE_FIELDS_TYPE);
          return `RequireFields<${argsType}, never>`;
        }
        ObjectTypeDefinition(node) {
          var _a, _b, _c;
          const declarationKind = "type";
          const name = this.convertName(node, {
            suffix: this.config.resolverTypeSuffix
          });
          const typeName = node.name;
          const parentType = this.getParentTypeToUse(typeName);
          const isRootType = [
            (_a = this.schema.getQueryType()) === null || _a === void 0
              ? void 0
              : _a.name,
            (_b = this.schema.getMutationType()) === null || _b === void 0
              ? void 0
              : _b.name,
            (_c = this.schema.getSubscriptionType()) === null || _c === void 0
              ? void 0
              : _c.name
          ].includes(typeName);
          const fieldsContent = node.fields.map(f => f(node.name));
          if (!isRootType) {
            fieldsContent.push(
              indent(
                `${
                  this.config.internalResolversPrefix
                }isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>${this.getPunctuation(
                  declarationKind
                )}`
              )
            );
          }
          const block = new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(declarationKind)
            .withName(
              name,
              `<ContextType = ${
                this.config.contextType.type
              }, ${this.transformParentGenericType(parentType)}>`
            )
            .withBlock(fieldsContent.join("\n"));
          this._collectedResolvers[node.name] = name + "<ContextType>";
          return block.string;
        }
        UnionTypeDefinition(node, key, parent) {
          const declarationKind = "type";
          const name = this.convertName(node, {
            suffix: this.config.resolverTypeSuffix
          });
          const originalNode = parent[key];
          const possibleTypes = originalNode.types
            .map(node => node.name.value)
            .map(f => `'${f}'`)
            .join(" | ");
          this._collectedResolvers[node.name] = name + "<ContextType>";
          const parentType = this.getParentTypeToUse(node.name);
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(declarationKind)
            .withName(
              name,
              `<ContextType = ${
                this.config.contextType.type
              }, ${this.transformParentGenericType(parentType)}>`
            )
            .withBlock(
              indent(
                `${this.config.internalResolversPrefix}resolveType${
                  this.config.optionalResolveType ? "?" : ""
                }: TypeResolveFn<${possibleTypes}, ParentType, ContextType>${this.getPunctuation(
                  declarationKind
                )}`
              )
            ).string;
        }
        ScalarTypeDefinition(node) {
          const nameAsString = node.name;
          const baseName = this.getTypeToUse(nameAsString);
          if (this._federation.skipScalar(nameAsString)) {
            return null;
          }
          this._hasScalars = true;
          this._collectedResolvers[node.name] = "GraphQLScalarType";
          return new DeclarationBlock({
            ...this._declarationBlockConfig,
            blockTransformer(block) {
              return block;
            }
          })
            .export()
            .asKind("interface")
            .withName(
              this.convertName(node, {
                suffix: "ScalarConfig"
              }),
              ` extends GraphQLScalarTypeConfig<${baseName}, any>`
            )
            .withBlock(
              indent(`name: '${node.name}'${this.getPunctuation("interface")}`)
            ).string;
        }
        DirectiveDefinition(node, key, parent) {
          if (this._federation.skipDirective(node.name)) {
            return null;
          }
          const directiveName = this.convertName(node, {
            suffix: "DirectiveResolver"
          });
          const sourceNode = parent[key];
          const hasArguments =
            sourceNode.arguments && sourceNode.arguments.length > 0;
          this._collectedDirectiveResolvers[node.name] =
            directiveName + "<any, any, ContextType>";
          const directiveArgsTypeName = this.convertName(node, {
            suffix: "DirectiveArgs"
          });
          return [
            new DeclarationBlock({
              ...this._declarationBlockConfig,
              blockTransformer(block) {
                return block;
              }
            })
              .export()
              .asKind("type")
              .withName(directiveArgsTypeName)
              .withContent(
                `{ ${
                  hasArguments
                    ? this._variablesTransfomer.transform(sourceNode.arguments)
                    : ""
                } }`
              ).string,
            new DeclarationBlock({
              ...this._declarationBlockConfig,
              blockTransformer(block) {
                return block;
              }
            })
              .export()
              .asKind("type")
              .withName(
                directiveName,
                `<Result, Parent, ContextType = ${this.config.contextType.type}, Args = ${directiveArgsTypeName}>`
              )
              .withContent(
                `DirectiveResolverFn<Result, Parent, ContextType, Args>`
              ).string
          ].join("\n");
        }
        buildEnumResolverContentBlock(_node, _mappedEnumType) {
          throw new Error(`buildEnumResolverContentBlock is not implemented!`);
        }
        buildEnumResolversExplicitMappedValues(_node, _valuesMapping) {
          throw new Error(
            `buildEnumResolversExplicitMappedValues is not implemented!`
          );
        }
        EnumTypeDefinition(node) {
          const rawTypeName = node.name;
          // If we have enumValues set, and it's point to an external enum - we need to allow internal values resolvers
          // In case we have enumValues set but as explicit values, no need to to do mapping since it's already
          // have type validation (the original enum has been modified by base types plugin).
          // If we have mapper for that type - we can skip
          if (
            !this.config.mappers[rawTypeName] &&
            !this.config.enumValues[rawTypeName]
          ) {
            return null;
          }
          const name = this.convertName(node, {
            suffix: this.config.resolverTypeSuffix
          });
          this._collectedResolvers[rawTypeName] = name;
          const hasExplicitValues =
            this.config.enumValues[rawTypeName] &&
            this.config.enumValues[rawTypeName].mappedValues;
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind("type")
            .withName(name)
            .withContent(
              hasExplicitValues
                ? this.buildEnumResolversExplicitMappedValues(
                    node,
                    this.config.enumValues[rawTypeName].mappedValues
                  )
                : this.buildEnumResolverContentBlock(
                    node,
                    this.getTypeToUse(rawTypeName)
                  )
            ).string;
        }
        InterfaceTypeDefinition(node) {
          const name = this.convertName(node, {
            suffix: this.config.resolverTypeSuffix
          });
          const declarationKind = "type";
          const allTypesMap = this._schema.getTypeMap();
          const implementingTypes = [];
          this._collectedResolvers[node.name] = name + "<ContextType>";
          for (const graphqlType of Object.values(allTypesMap)) {
            if (graphqlType instanceof graphql.GraphQLObjectType) {
              const allInterfaces = graphqlType.getInterfaces();
              if (allInterfaces.find(int => int.name === node.name)) {
                implementingTypes.push(graphqlType.name);
              }
            }
          }
          const parentType = this.getParentTypeToUse(node.name);
          const possibleTypes =
            implementingTypes.map(name => `'${name}'`).join(" | ") || "null";
          const fields = this.config.onlyResolveTypeForInterfaces
            ? []
            : node.fields || [];
          return new DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind(declarationKind)
            .withName(
              name,
              `<ContextType = ${
                this.config.contextType.type
              }, ${this.transformParentGenericType(parentType)}>`
            )
            .withBlock(
              [
                indent(
                  `${this.config.internalResolversPrefix}resolveType${
                    this.config.optionalResolveType ? "?" : ""
                  }: TypeResolveFn<${possibleTypes}, ParentType, ContextType>${this.getPunctuation(
                    declarationKind
                  )}`
                ),
                ...fields.map(f => f(node.name))
              ].join("\n")
            ).string;
        }
        SchemaDefinition() {
          return null;
        }
      }
      function replacePlaceholder(pattern, typename) {
        return pattern.replace("{T}", typename);
      }
      function hasPlaceholder(pattern) {
        return pattern.includes("{T}");
      }

      gqlTag.enableExperimentalFragmentVariables();
      (function(DocumentMode) {
        DocumentMode["graphQLTag"] = "graphQLTag";
        DocumentMode["documentNode"] = "documentNode";
        DocumentMode["documentNodeImportFragments"] =
          "documentNodeImportFragments";
        DocumentMode["external"] = "external";
        DocumentMode["string"] = "string";
      })(exports.DocumentMode || (exports.DocumentMode = {}));
      const EXTENSIONS_TO_REMOVE = [".ts", ".tsx", ".js", ".jsx"];
      class ClientSideBaseVisitor extends BaseVisitor {
        constructor(
          _schema,
          _fragments,
          rawConfig,
          additionalConfig,
          documents
        ) {
          super(rawConfig, {
            scalars: buildScalarsFromConfig(_schema, rawConfig),
            dedupeOperationSuffix: getConfigValue(
              rawConfig.dedupeOperationSuffix,
              false
            ),
            optimizeDocumentNode: getConfigValue(
              rawConfig.optimizeDocumentNode,
              true
            ),
            omitOperationSuffix: getConfigValue(
              rawConfig.omitOperationSuffix,
              false
            ),
            gqlImport: rawConfig.gqlImport || null,
            documentNodeImport: rawConfig.documentNodeImport || null,
            noExport: !!rawConfig.noExport,
            importOperationTypesFrom: getConfigValue(
              rawConfig.importOperationTypesFrom,
              null
            ),
            operationResultSuffix: getConfigValue(
              rawConfig.operationResultSuffix,
              ""
            ),
            documentVariablePrefix: getConfigValue(
              rawConfig.documentVariablePrefix,
              ""
            ),
            documentVariableSuffix: getConfigValue(
              rawConfig.documentVariableSuffix,
              "Document"
            ),
            fragmentVariablePrefix: getConfigValue(
              rawConfig.fragmentVariablePrefix,
              ""
            ),
            fragmentVariableSuffix: getConfigValue(
              rawConfig.fragmentVariableSuffix,
              "FragmentDoc"
            ),
            documentMode: (rawConfig => {
              if (typeof rawConfig.noGraphQLTag === "boolean") {
                return rawConfig.noGraphQLTag
                  ? exports.DocumentMode.documentNode
                  : exports.DocumentMode.graphQLTag;
              }
              return getConfigValue(
                rawConfig.documentMode,
                exports.DocumentMode.graphQLTag
              );
            })(rawConfig),
            importDocumentNodeExternallyFrom: getConfigValue(
              rawConfig.importDocumentNodeExternallyFrom,
              ""
            ),
            pureMagicComment: getConfigValue(rawConfig.pureMagicComment, false),
            experimentalFragmentVariables: getConfigValue(
              rawConfig.experimentalFragmentVariables,
              false
            ),
            ...additionalConfig
          });
          this._schema = _schema;
          this._fragments = _fragments;
          this._collectedOperations = [];
          this._documents = [];
          this._additionalImports = [];
          this._imports = new Set();
          this._documents = documents;
          autoBind(this);
        }
        _extractFragments(document, withNested = false) {
          if (!document) {
            return [];
          }
          const names = new Set();
          graphql.visit(document, {
            enter: {
              FragmentSpread: node => {
                names.add(node.name.value);
                if (withNested) {
                  const foundFragment = this._fragments.find(
                    f => f.name === node.name.value
                  );
                  if (foundFragment) {
                    const childItems = this._extractFragments(
                      foundFragment.node,
                      true
                    );
                    if (childItems && childItems.length > 0) {
                      for (const item of childItems) {
                        names.add(item);
                      }
                    }
                  }
                }
              }
            }
          });
          return Array.from(names);
        }
        _transformFragments(document) {
          const includeNestedFragments =
            this.config.documentMode === exports.DocumentMode.documentNode ||
            (this.config.dedupeFragments &&
              document.kind === "OperationDefinition");
          return this._extractFragments(
            document,
            includeNestedFragments
          ).map(document => this.getFragmentVariableName(document));
        }
        _includeFragments(fragments) {
          if (fragments && fragments.length > 0) {
            if (
              this.config.documentMode === exports.DocumentMode.documentNode
            ) {
              return this._fragments
                .filter(f =>
                  fragments.includes(this.getFragmentVariableName(f.name))
                )
                .map(fragment => graphql.print(fragment.node))
                .join("\n");
            } else if (
              this.config.documentMode ===
              exports.DocumentMode.documentNodeImportFragments
            ) {
              return "";
            } else {
              return `${fragments.map(name => "${" + name + "}").join("\n")}`;
            }
          }
          return "";
        }
        _prepareDocument(documentStr) {
          return documentStr;
        }
        _gql(node) {
          const fragments = this._transformFragments(node);
          const doc = this._prepareDocument(`
    ${
      graphql
        .print(node)
        .split("\\")
        .join("\\\\") /* Re-escape escaped values in GraphQL syntax */
    }
    ${this._includeFragments(fragments)}`);
          if (this.config.documentMode === exports.DocumentMode.documentNode) {
            let gqlObj = gqlTag([doc]);
            if (this.config.optimizeDocumentNode) {
              gqlObj = optimize.optimizeDocumentNode(gqlObj);
            }
            return JSON.stringify(gqlObj);
          } else if (
            this.config.documentMode ===
            exports.DocumentMode.documentNodeImportFragments
          ) {
            let gqlObj = gqlTag([doc]);
            if (this.config.optimizeDocumentNode) {
              gqlObj = optimize.optimizeDocumentNode(gqlObj);
            }
            if (
              fragments.length > 0 &&
              (!this.config.dedupeFragments ||
                node.kind === "OperationDefinition")
            ) {
              const definitions = [
                ...gqlObj.definitions.map(t => JSON.stringify(t)),
                ...fragments.map(name => `...${name}.definitions`)
              ].join();
              return `{"kind":"${graphql.Kind.DOCUMENT}","definitions":[${definitions}]}`;
            }
            return JSON.stringify(gqlObj);
          } else if (this.config.documentMode === exports.DocumentMode.string) {
            return "`" + doc + "`";
          }
          const gqlImport = this._parseImport(
            this.config.gqlImport || "graphql-tag"
          );
          return (gqlImport.propName || "gql") + "`" + doc + "`";
        }
        _generateFragment(fragmentDocument) {
          const name = this.getFragmentVariableName(fragmentDocument);
          const fragmentTypeSuffix = this.getFragmentSuffix(fragmentDocument);
          return `export const ${name} =${
            this.config.pureMagicComment ? " /*#__PURE__*/" : ""
          } ${this._gql(fragmentDocument)}${this.getDocumentNodeSignature(
            this.convertName(fragmentDocument.name.value, {
              useTypesPrefix: true,
              suffix: fragmentTypeSuffix
            }),
            this.config.experimentalFragmentVariables
              ? this.convertName(fragmentDocument.name.value, {
                  suffix: fragmentTypeSuffix + "Variables"
                })
              : "unknown",
            fragmentDocument
          )};`;
        }
        get fragmentsGraph() {
          const graph = new dependencyGraph.DepGraph({ circular: true });
          for (const fragment of this._fragments) {
            if (graph.hasNode(fragment.name)) {
              const cachedAsString = graphql.print(
                graph.getNodeData(fragment.name).node
              );
              const asString = graphql.print(fragment.node);
              if (cachedAsString !== asString) {
                throw new Error(
                  `Duplicated fragment called '${fragment.name}'!`
                );
              }
            }
            graph.addNode(fragment.name, fragment);
          }
          this._fragments.forEach(fragment => {
            const depends = this._extractFragments(fragment.node);
            if (depends && depends.length > 0) {
              depends.forEach(name => {
                graph.addDependency(fragment.name, name);
              });
            }
          });
          return graph;
        }
        get fragments() {
          if (
            this._fragments.length === 0 ||
            this.config.documentMode === exports.DocumentMode.external
          ) {
            return "";
          }
          const graph = this.fragmentsGraph;
          const orderedDeps = graph.overallOrder();
          const localFragments = orderedDeps
            .filter(name => !graph.getNodeData(name).isExternal)
            .map(name => this._generateFragment(graph.getNodeData(name).node));
          return localFragments.join("\n");
        }
        _parseImport(importStr) {
          // This is a special case when we want to ignore importing, and just use `gql` provided from somewhere else
          // Plugins that uses that will need to ensure to add import/declaration for the gql identifier
          if (importStr === "gql") {
            return {
              moduleName: null,
              propName: "gql"
            };
          }
          // This is a special use case, when we don't want this plugin to manage the import statement
          // of the gql tag. In this case, we provide something like `Namespace.gql` and it will be used instead.
          if (importStr.includes(".gql")) {
            return {
              moduleName: null,
              propName: importStr
            };
          }
          const [moduleName, propName] = importStr.split("#");
          return {
            moduleName,
            propName
          };
        }
        _generateImport({ moduleName, propName }, varName, isTypeImport) {
          const typeImport =
            isTypeImport && this.config.useTypeImports
              ? "import type"
              : "import";
          const propAlias = propName === varName ? "" : ` as ${varName}`;
          if (moduleName) {
            return `${typeImport} ${
              propName ? `{ ${propName}${propAlias} }` : varName
            } from '${moduleName}';`;
          }
          return null;
        }
        clearExtension(path$1) {
          const extension = path.extname(path$1);
          if (EXTENSIONS_TO_REMOVE.includes(extension)) {
            return path$1.replace(/\.[^/.]+$/, "");
          }
          return path$1;
        }
        getImports(options = {}) {
          (this._additionalImports || []).forEach(i => this._imports.add(i));
          switch (this.config.documentMode) {
            case exports.DocumentMode.documentNode:
            case exports.DocumentMode.documentNodeImportFragments: {
              const documentNodeImport = this._parseImport(
                this.config.documentNodeImport || "graphql#DocumentNode"
              );
              const tagImport = this._generateImport(
                documentNodeImport,
                "DocumentNode",
                true
              );
              if (tagImport) {
                this._imports.add(tagImport);
              }
              break;
            }
            case exports.DocumentMode.graphQLTag: {
              const gqlImport = this._parseImport(
                this.config.gqlImport || "graphql-tag"
              );
              const tagImport = this._generateImport(gqlImport, "gql", false);
              if (tagImport) {
                this._imports.add(tagImport);
              }
              break;
            }
            case exports.DocumentMode.external: {
              if (this._collectedOperations.length > 0) {
                if (
                  this.config.importDocumentNodeExternallyFrom ===
                    "near-operation-file" &&
                  this._documents.length === 1
                ) {
                  this._imports.add(
                    `import * as Operations from './${this.clearExtension(
                      path.basename(this._documents[0].location)
                    )}';`
                  );
                } else {
                  if (!this.config.importDocumentNodeExternallyFrom) {
                    // eslint-disable-next-line no-console
                    console.warn(
                      "importDocumentNodeExternallyFrom must be provided if documentMode=external"
                    );
                  }
                  this._imports.add(
                    `import * as Operations from '${this.clearExtension(
                      this.config.importDocumentNodeExternallyFrom
                    )}';`
                  );
                }
              }
              break;
            }
          }
          if (!options.excludeFragments && !this.config.globalNamespace) {
            const { documentMode, fragmentImports } = this.config;
            if (
              documentMode === exports.DocumentMode.graphQLTag ||
              documentMode === exports.DocumentMode.string ||
              documentMode === exports.DocumentMode.documentNodeImportFragments
            ) {
              fragmentImports.forEach(fragmentImport => {
                this._imports.add(
                  generateFragmentImportStatement(fragmentImport, "document")
                );
              });
            }
          }
          return Array.from(this._imports);
        }
        buildOperation(
          _node,
          _documentVariableName,
          _operationType,
          _operationResultType,
          _operationVariablesTypes,
          _hasRequiredVariables
        ) {
          return null;
        }
        getDocumentNodeSignature(_resultType, _variablesTypes, _node) {
          if (
            this.config.documentMode === exports.DocumentMode.documentNode ||
            this.config.documentMode ===
              exports.DocumentMode.documentNodeImportFragments
          ) {
            return ` as unknown as DocumentNode`;
          }
          return "";
        }
        /**
         * Checks if the specific operation has variables that are non-null (required), and also doesn't have default.
         * This is useful for deciding of `variables` should be optional or not.
         * @param node
         */
        checkVariablesRequirements(node) {
          const variables = node.variableDefinitions || [];
          if (variables.length === 0) {
            return false;
          }
          return variables.some(
            variableDef =>
              variableDef.type.kind === graphql.Kind.NON_NULL_TYPE &&
              !variableDef.defaultValue
          );
        }
        OperationDefinition(node) {
          this._collectedOperations.push(node);
          const documentVariableName = this.convertName(node, {
            suffix: this.config.documentVariableSuffix,
            prefix: this.config.documentVariablePrefix,
            useTypesPrefix: false
          });
          const operationType = changeCaseAll.pascalCase(node.operation);
          const operationTypeSuffix = this.getOperationSuffix(
            node,
            operationType
          );
          const operationResultType = this.convertName(node, {
            suffix:
              operationTypeSuffix + this._parsedConfig.operationResultSuffix
          });
          const operationVariablesTypes = this.convertName(node, {
            suffix: operationTypeSuffix + "Variables"
          });
          let documentString = "";
          if (this.config.documentMode !== exports.DocumentMode.external) {
            // only generate exports for named queries
            if (documentVariableName !== "") {
              documentString = `${
                this.config.noExport ? "" : "export"
              } const ${documentVariableName} =${
                this.config.pureMagicComment ? " /*#__PURE__*/" : ""
              } ${this._gql(node)}${this.getDocumentNodeSignature(
                operationResultType,
                operationVariablesTypes,
                node
              )};`;
            }
          }
          const hasRequiredVariables = this.checkVariablesRequirements(node);
          const additional = this.buildOperation(
            node,
            documentVariableName,
            operationType,
            operationResultType,
            operationVariablesTypes,
            hasRequiredVariables
          );
          return [documentString, additional].filter(a => a).join("\n");
        }
      }

      function isMetadataFieldName(name) {
        return ["__schema", "__type"].includes(name);
      }
      const metadataFieldMap = {
        __schema: graphql.SchemaMetaFieldDef,
        __type: graphql.TypeMetaFieldDef
      };
      class SelectionSetToObject {
        constructor(
          _processor,
          _scalars,
          _schema,
          _convertName,
          _getFragmentSuffix,
          _loadedFragments,
          _config,
          _parentSchemaType,
          _selectionSet
        ) {
          this._processor = _processor;
          this._scalars = _scalars;
          this._schema = _schema;
          this._convertName = _convertName;
          this._getFragmentSuffix = _getFragmentSuffix;
          this._loadedFragments = _loadedFragments;
          this._config = _config;
          this._parentSchemaType = _parentSchemaType;
          this._selectionSet = _selectionSet;
          this._primitiveFields = [];
          this._primitiveAliasedFields = [];
          this._linksFields = [];
          this._queriedForTypename = false;
          autoBind(this);
        }
        createNext(parentSchemaType, selectionSet) {
          return new SelectionSetToObject(
            this._processor,
            this._scalars,
            this._schema,
            this._convertName.bind(this),
            this._getFragmentSuffix.bind(this),
            this._loadedFragments,
            this._config,
            parentSchemaType,
            selectionSet
          );
        }
        /**
         * traverse the inline fragment nodes recursively for colleting the selectionSets on each type
         */
        _collectInlineFragments(parentType, nodes, types) {
          if (
            graphql.isListType(parentType) ||
            graphql.isNonNullType(parentType)
          ) {
            return this._collectInlineFragments(
              parentType.ofType,
              nodes,
              types
            );
          } else if (graphql.isObjectType(parentType)) {
            for (const node of nodes) {
              const typeOnSchema = node.typeCondition
                ? this._schema.getType(node.typeCondition.name.value)
                : parentType;
              const { fields, inlines, spreads } = separateSelectionSet(
                node.selectionSet.selections
              );
              const spreadsUsage = this.buildFragmentSpreadsUsage(spreads);
              if (graphql.isObjectType(typeOnSchema)) {
                this._appendToTypeMap(types, typeOnSchema.name, fields);
                this._appendToTypeMap(
                  types,
                  typeOnSchema.name,
                  spreadsUsage[typeOnSchema.name]
                );
                this._collectInlineFragments(typeOnSchema, inlines, types);
              } else if (
                graphql.isInterfaceType(typeOnSchema) &&
                parentType.getInterfaces().includes(typeOnSchema)
              ) {
                this._appendToTypeMap(types, parentType.name, fields);
                this._appendToTypeMap(
                  types,
                  parentType.name,
                  spreadsUsage[parentType.name]
                );
                this._collectInlineFragments(typeOnSchema, inlines, types);
              }
            }
          } else if (graphql.isInterfaceType(parentType)) {
            const possibleTypes = getPossibleTypes(this._schema, parentType);
            for (const node of nodes) {
              const schemaType = node.typeCondition
                ? this._schema.getType(node.typeCondition.name.value)
                : parentType;
              const { fields, inlines, spreads } = separateSelectionSet(
                node.selectionSet.selections
              );
              const spreadsUsage = this.buildFragmentSpreadsUsage(spreads);
              if (
                graphql.isObjectType(schemaType) &&
                possibleTypes.find(
                  possibleType => possibleType.name === schemaType.name
                )
              ) {
                this._appendToTypeMap(types, schemaType.name, fields);
                this._appendToTypeMap(
                  types,
                  schemaType.name,
                  spreadsUsage[schemaType.name]
                );
                this._collectInlineFragments(schemaType, inlines, types);
              } else if (
                graphql.isInterfaceType(schemaType) &&
                schemaType.name === parentType.name
              ) {
                for (const possibleType of possibleTypes) {
                  this._appendToTypeMap(types, possibleType.name, fields);
                  this._appendToTypeMap(
                    types,
                    possibleType.name,
                    spreadsUsage[possibleType.name]
                  );
                  this._collectInlineFragments(schemaType, inlines, types);
                }
              } else {
                // it must be an interface type that is spread on an interface field
                for (const possibleType of possibleTypes) {
                  if (!node.typeCondition) {
                    throw new Error(
                      "Invalid state. Expected type condition for interface spread on a interface field."
                    );
                  }
                  const fragmentSpreadType = this._schema.getType(
                    node.typeCondition.name.value
                  );
                  // the field should only be added to the valid selections
                  // in case the possible type actually implements the given interface
                  if (
                    graphql.isTypeSubTypeOf(
                      this._schema,
                      possibleType,
                      fragmentSpreadType
                    )
                  ) {
                    this._appendToTypeMap(types, possibleType.name, fields);
                    this._appendToTypeMap(
                      types,
                      possibleType.name,
                      spreadsUsage[possibleType.name]
                    );
                  }
                }
              }
            }
          } else if (graphql.isUnionType(parentType)) {
            const possibleTypes = parentType.getTypes();
            for (const node of nodes) {
              const schemaType = node.typeCondition
                ? this._schema.getType(node.typeCondition.name.value)
                : parentType;
              const { fields, inlines, spreads } = separateSelectionSet(
                node.selectionSet.selections
              );
              const spreadsUsage = this.buildFragmentSpreadsUsage(spreads);
              if (
                graphql.isObjectType(schemaType) &&
                possibleTypes.find(
                  possibleType => possibleType.name === schemaType.name
                )
              ) {
                this._appendToTypeMap(types, schemaType.name, fields);
                this._appendToTypeMap(
                  types,
                  schemaType.name,
                  spreadsUsage[schemaType.name]
                );
                this._collectInlineFragments(schemaType, inlines, types);
              } else if (graphql.isInterfaceType(schemaType)) {
                const possibleInterfaceTypes = getPossibleTypes(
                  this._schema,
                  schemaType
                );
                for (const possibleType of possibleTypes) {
                  if (
                    possibleInterfaceTypes.find(
                      possibleInterfaceType =>
                        possibleInterfaceType.name === possibleType.name
                    )
                  ) {
                    this._appendToTypeMap(types, possibleType.name, fields);
                    this._appendToTypeMap(
                      types,
                      possibleType.name,
                      spreadsUsage[possibleType.name]
                    );
                    this._collectInlineFragments(schemaType, inlines, types);
                  }
                }
              } else {
                for (const possibleType of possibleTypes) {
                  this._appendToTypeMap(types, possibleType.name, fields);
                  this._appendToTypeMap(
                    types,
                    possibleType.name,
                    spreadsUsage[possibleType.name]
                  );
                }
              }
            }
          }
        }
        _createInlineFragmentForFieldNodes(parentType, fieldNodes) {
          return {
            kind: graphql.Kind.INLINE_FRAGMENT,
            typeCondition: {
              kind: graphql.Kind.NAMED_TYPE,
              name: {
                kind: graphql.Kind.NAME,
                value: parentType.name
              }
            },
            directives: [],
            selectionSet: {
              kind: graphql.Kind.SELECTION_SET,
              selections: fieldNodes
            }
          };
        }
        buildFragmentSpreadsUsage(spreads) {
          const selectionNodesByTypeName = {};
          for (const spread of spreads) {
            const fragmentSpreadObject = this._loadedFragments.find(
              lf => lf.name === spread.name.value
            );
            if (fragmentSpreadObject) {
              const schemaType = this._schema.getType(
                fragmentSpreadObject.onType
              );
              const possibleTypesForFragment = getPossibleTypes(
                this._schema,
                schemaType
              );
              for (const possibleType of possibleTypesForFragment) {
                const fragmentSuffix = this._getFragmentSuffix(
                  spread.name.value
                );
                const usage = this.buildFragmentTypeName(
                  spread.name.value,
                  fragmentSuffix,
                  possibleTypesForFragment.length === 1
                    ? null
                    : possibleType.name
                );
                if (!selectionNodesByTypeName[possibleType.name]) {
                  selectionNodesByTypeName[possibleType.name] = [];
                }
                selectionNodesByTypeName[possibleType.name].push(usage);
              }
            }
          }
          return selectionNodesByTypeName;
        }
        flattenSelectionSet(selections) {
          const selectionNodesByTypeName = new Map();
          const inlineFragmentSelections = [];
          const fieldNodes = [];
          const fragmentSpreads = [];
          for (const selection of selections) {
            switch (selection.kind) {
              case graphql.Kind.FIELD:
                fieldNodes.push(selection);
                break;
              case graphql.Kind.INLINE_FRAGMENT:
                inlineFragmentSelections.push(selection);
                break;
              case graphql.Kind.FRAGMENT_SPREAD:
                fragmentSpreads.push(selection);
                break;
            }
          }
          if (fieldNodes.length) {
            inlineFragmentSelections.push(
              this._createInlineFragmentForFieldNodes(
                this._parentSchemaType,
                fieldNodes
              )
            );
          }
          this._collectInlineFragments(
            this._parentSchemaType,
            inlineFragmentSelections,
            selectionNodesByTypeName
          );
          const fragmentsUsage = this.buildFragmentSpreadsUsage(
            fragmentSpreads
          );
          Object.keys(fragmentsUsage).forEach(typeName => {
            this._appendToTypeMap(
              selectionNodesByTypeName,
              typeName,
              fragmentsUsage[typeName]
            );
          });
          return selectionNodesByTypeName;
        }
        _appendToTypeMap(types, typeName, nodes) {
          if (!types.has(typeName)) {
            types.set(typeName, []);
          }
          if (nodes && nodes.length > 0) {
            types.get(typeName).push(...nodes);
          }
        }
        _buildGroupedSelections() {
          if (
            !this._selectionSet ||
            !this._selectionSet.selections ||
            this._selectionSet.selections.length === 0
          ) {
            return {};
          }
          const selectionNodesByTypeName = this.flattenSelectionSet(
            this._selectionSet.selections
          );
          const grouped = getPossibleTypes(
            this._schema,
            this._parentSchemaType
          ).reduce((prev, type) => {
            const typeName = type.name;
            const schemaType = this._schema.getType(typeName);
            if (!graphql.isObjectType(schemaType)) {
              throw new TypeError(
                `Invalid state! Schema type ${typeName} is not a valid GraphQL object!`
              );
            }
            const selectionNodes = selectionNodesByTypeName.get(typeName) || [];
            if (!prev[typeName]) {
              prev[typeName] = [];
            }
            const transformedSet = this.buildSelectionSetString(
              schemaType,
              selectionNodes
            );
            if (transformedSet) {
              prev[typeName].push(transformedSet);
            }
            return prev;
          }, {});
          return grouped;
        }
        buildSelectionSetString(parentSchemaType, selectionNodes) {
          const primitiveFields = new Map();
          const primitiveAliasFields = new Map();
          const linkFieldSelectionSets = new Map();
          let requireTypename = false;
          const fragmentsSpreadUsages = [];
          for (const selectionNode of selectionNodes) {
            if (typeof selectionNode === "string") {
              fragmentsSpreadUsages.push(selectionNode);
            } else if (selectionNode.kind === "Field") {
              if (!selectionNode.selectionSet) {
                if (selectionNode.alias) {
                  primitiveAliasFields.set(
                    selectionNode.alias.value,
                    selectionNode
                  );
                } else if (selectionNode.name.value === "__typename") {
                  requireTypename = true;
                } else {
                  primitiveFields.set(selectionNode.name.value, selectionNode);
                }
              } else {
                let selectedField = null;
                const fields = parentSchemaType.getFields();
                selectedField = fields[selectionNode.name.value];
                if (isMetadataFieldName(selectionNode.name.value)) {
                  selectedField = metadataFieldMap[selectionNode.name.value];
                }
                if (!selectedField) {
                  continue;
                }
                const fieldName = getFieldNodeNameValue(selectionNode);
                let linkFieldNode = linkFieldSelectionSets.get(fieldName);
                if (!linkFieldNode) {
                  linkFieldNode = {
                    selectedFieldType: selectedField.type,
                    field: selectionNode
                  };
                  linkFieldSelectionSets.set(fieldName, linkFieldNode);
                } else {
                  mergeSelectionSets(
                    linkFieldNode.field.selectionSet,
                    selectionNode.selectionSet
                  );
                }
              }
            }
          }
          const linkFields = [];
          for (const {
            field,
            selectedFieldType
          } of linkFieldSelectionSets.values()) {
            const realSelectedFieldType = pluginHelpers.getBaseType(
              selectedFieldType
            );
            const selectionSet = this.createNext(
              realSelectedFieldType,
              field.selectionSet
            );
            const isConditional = hasConditionalDirectives(field);
            linkFields.push({
              alias: field.alias
                ? this._processor.config.formatNamedField(
                    field.alias.value,
                    selectedFieldType
                  )
                : undefined,
              name: this._processor.config.formatNamedField(
                field.name.value,
                selectedFieldType,
                isConditional
              ),
              type: realSelectedFieldType.name,
              selectionSet: this._processor.config.wrapTypeWithModifiers(
                selectionSet
                  .transformSelectionSet()
                  .split(`\n`)
                  .join(`\n  `),
                isConditional
                  ? pluginHelpers.removeNonNullWrapper(selectedFieldType)
                  : selectedFieldType
              )
            });
          }
          const typeInfoField = this.buildTypeNameField(
            parentSchemaType,
            this._config.nonOptionalTypename,
            this._config.addTypename,
            requireTypename,
            this._config.skipTypeNameForRoot
          );
          const transformed = [
            ...(typeInfoField
              ? this._processor.transformTypenameField(
                  typeInfoField.type,
                  typeInfoField.name
                )
              : []),
            ...this._processor.transformPrimitiveFields(
              parentSchemaType,
              Array.from(primitiveFields.values()).map(field => ({
                isConditional: hasConditionalDirectives(field),
                fieldName: field.name.value
              }))
            ),
            ...this._processor.transformAliasesPrimitiveFields(
              parentSchemaType,
              Array.from(primitiveAliasFields.values()).map(field => ({
                alias: field.alias.value,
                fieldName: field.name.value
              }))
            ),
            ...this._processor.transformLinkFields(linkFields)
          ].filter(Boolean);
          const allStrings = transformed.filter(t => typeof t === "string");
          const allObjectsMerged = transformed
            .filter(t => typeof t !== "string")
            .map(t => `${t.name}: ${t.type}`);
          let mergedObjectsAsString = null;
          if (allObjectsMerged.length > 0) {
            mergedObjectsAsString = this._processor.buildFieldsIntoObject(
              allObjectsMerged
            );
          }
          const fields = [
            ...allStrings,
            mergedObjectsAsString,
            ...fragmentsSpreadUsages
          ].filter(Boolean);
          return this._processor.buildSelectionSetFromStrings(fields);
        }
        isRootType(type) {
          const rootType = [
            this._schema.getQueryType(),
            this._schema.getMutationType(),
            this._schema.getSubscriptionType()
          ]
            .filter(Boolean)
            .map(t => t.name);
          return rootType.includes(type.name);
        }
        buildTypeNameField(
          type,
          nonOptionalTypename = this._config.nonOptionalTypename,
          addTypename = this._config.addTypename,
          queriedForTypename = this._queriedForTypename,
          skipTypeNameForRoot = this._config.skipTypeNameForRoot
        ) {
          if (
            this.isRootType(type) &&
            skipTypeNameForRoot &&
            !queriedForTypename
          ) {
            return null;
          }
          if (nonOptionalTypename || addTypename || queriedForTypename) {
            const optionalTypename =
              !queriedForTypename && !nonOptionalTypename;
            return {
              name: `${this._processor.config.formatNamedField("__typename")}${
                optionalTypename ? "?" : ""
              }`,
              type: `'${type.name}'`
            };
          }
          return null;
        }
        getUnknownType() {
          return "never";
        }
        transformSelectionSet() {
          const grouped = this._buildGroupedSelections();
          // This might happen in case we have an interface, that is being queries, without any GraphQL
          // "type" that implements it. It will lead to a runtime error, but we aim to try to reflect that in
          // build time as well.
          if (Object.keys(grouped).length === 0) {
            return this.getUnknownType();
          }
          return Object.keys(grouped)
            .map(typeName => {
              const relevant = grouped[typeName].filter(Boolean);
              if (relevant.length === 0) {
                return null;
              } else if (relevant.length === 1) {
                return relevant[0];
              } else {
                return `( ${relevant.join(" & ")} )`;
              }
            })
            .filter(Boolean)
            .join(" | ");
        }
        transformFragmentSelectionSetToTypes(
          fragmentName,
          fragmentSuffix,
          declarationBlockConfig
        ) {
          const grouped = this._buildGroupedSelections();
          const subTypes = Object.keys(grouped)
            .map(typeName => {
              const possibleFields = grouped[typeName].filter(Boolean);
              const declarationName = this.buildFragmentTypeName(
                fragmentName,
                fragmentSuffix,
                typeName
              );
              if (possibleFields.length === 0) {
                if (!this._config.addTypename) {
                  return { name: declarationName, content: "{}" };
                }
                return null;
              }
              return {
                name: declarationName,
                content: possibleFields.join(" & ")
              };
            })
            .filter(Boolean);
          if (subTypes.length === 1) {
            return new DeclarationBlock(declarationBlockConfig)
              .export()
              .asKind("type")
              .withName(
                this.buildFragmentTypeName(fragmentName, fragmentSuffix)
              )
              .withContent(subTypes[0].content).string;
          }
          return [
            ...subTypes.map(
              t =>
                new DeclarationBlock(declarationBlockConfig)
                  .export(this._config.exportFragmentSpreadSubTypes)
                  .asKind("type")
                  .withName(t.name)
                  .withContent(t.content).string
            ),
            new DeclarationBlock(declarationBlockConfig)
              .export()
              .asKind("type")
              .withName(
                this.buildFragmentTypeName(fragmentName, fragmentSuffix)
              )
              .withContent(subTypes.map(t => t.name).join(" | ")).string
          ].join("\n");
        }
        buildFragmentTypeName(name, suffix, typeName = "") {
          return this._convertName(name, {
            useTypesPrefix: true,
            suffix: typeName ? `_${typeName}_${suffix}` : suffix
          });
        }
      }

      class BaseSelectionSetProcessor {
        constructor(config) {
          this.config = config;
        }
        buildFieldsIntoObject(allObjectsMerged) {
          return `{ ${allObjectsMerged.join(", ")} }`;
        }
        buildSelectionSetFromStrings(pieces) {
          if (pieces.length === 0) {
            return null;
          } else if (pieces.length === 1) {
            return pieces[0];
          } else {
            return `(\n  ${pieces.join(`\n  & `)}\n)`;
          }
        }
        transformPrimitiveFields(_schemaType, _fields) {
          throw new Error(
            `Please override "transformPrimitiveFields" as part of your BaseSelectionSetProcessor implementation!`
          );
        }
        transformAliasesPrimitiveFields(_schemaType, _fields) {
          throw new Error(
            `Please override "transformAliasesPrimitiveFields" as part of your BaseSelectionSetProcessor implementation!`
          );
        }
        transformLinkFields(_fields) {
          throw new Error(
            `Please override "transformLinkFields" as part of your BaseSelectionSetProcessor implementation!`
          );
        }
        transformTypenameField(_type, _name) {
          throw new Error(
            `Please override "transformTypenameField" as part of your BaseSelectionSetProcessor implementation!`
          );
        }
      }

      class PreResolveTypesProcessor extends BaseSelectionSetProcessor {
        transformTypenameField(type, name) {
          return [
            {
              type,
              name
            }
          ];
        }
        transformPrimitiveFields(schemaType, fields) {
          if (fields.length === 0) {
            return [];
          }
          return fields.map(field => {
            const fieldObj = schemaType.getFields()[field.fieldName];
            const baseType = pluginHelpers.getBaseType(fieldObj.type);
            let typeToUse = baseType.name;
            const useInnerType =
              field.isConditional && graphql.isNonNullType(fieldObj.type);
            if (graphql.isEnumType(baseType)) {
              typeToUse =
                (this.config.namespacedImportName
                  ? `${this.config.namespacedImportName}.`
                  : "") +
                this.config.convertName(baseType.name, {
                  useTypesPrefix: this.config.enumPrefix
                });
            } else if (this.config.scalars[baseType.name]) {
              typeToUse = this.config.scalars[baseType.name];
            }
            const name = this.config.formatNamedField(
              field.fieldName,
              useInnerType ? baseType : fieldObj.type
            );
            const wrappedType = this.config.wrapTypeWithModifiers(
              typeToUse,
              useInnerType ? baseType : fieldObj.type
            );
            return {
              name,
              type: wrappedType
            };
          });
        }
        transformAliasesPrimitiveFields(schemaType, fields) {
          if (fields.length === 0) {
            return [];
          }
          return fields.map(aliasedField => {
            if (aliasedField.fieldName === "__typename") {
              const name = this.config.formatNamedField(
                aliasedField.alias,
                null
              );
              return {
                name,
                type: `'${schemaType.name}'`
              };
            } else {
              const fieldObj = schemaType.getFields()[aliasedField.fieldName];
              const baseType = pluginHelpers.getBaseType(fieldObj.type);
              let typeToUse =
                this.config.scalars[baseType.name] || baseType.name;
              if (graphql.isEnumType(baseType)) {
                typeToUse =
                  (this.config.namespacedImportName
                    ? `${this.config.namespacedImportName}.`
                    : "") +
                  this.config.convertName(baseType.name, {
                    useTypesPrefix: this.config.enumPrefix
                  });
              }
              const name = this.config.formatNamedField(
                aliasedField.alias,
                fieldObj.type
              );
              const wrappedType = this.config.wrapTypeWithModifiers(
                typeToUse,
                fieldObj.type
              );
              return {
                name,
                type: wrappedType
              };
            }
          });
        }
        transformLinkFields(fields) {
          if (fields.length === 0) {
            return [];
          }
          return fields.map(field => ({
            name: field.alias || field.name,
            type: field.selectionSet
          }));
        }
      }

      function optimizeOperations(schema, documents, options) {
        const newDocuments = relayOperationOptimizer.optimizeDocuments(
          schema,
          documents.map(s => s.document),
          options
        );
        return newDocuments.map(document => ({
          location: "optimized by relay",
          document
        }));
      }

      exports.BaseDocumentsVisitor = BaseDocumentsVisitor;
      exports.BaseResolversVisitor = BaseResolversVisitor;
      exports.BaseSelectionSetProcessor = BaseSelectionSetProcessor;
      exports.BaseTypesVisitor = BaseTypesVisitor;
      exports.BaseVisitor = BaseVisitor;
      exports.ClientSideBaseVisitor = ClientSideBaseVisitor;
      exports.DEFAULT_AVOID_OPTIONALS = DEFAULT_AVOID_OPTIONALS;
      exports.DEFAULT_DECLARATION_KINDS = DEFAULT_DECLARATION_KINDS;
      exports.DEFAULT_SCALARS = DEFAULT_SCALARS;
      exports.DeclarationBlock = DeclarationBlock;
      exports.OMIT_TYPE = OMIT_TYPE;
      exports.OperationVariablesToObject = OperationVariablesToObject;
      exports.PreResolveTypesProcessor = PreResolveTypesProcessor;
      exports.REQUIRE_FIELDS_TYPE = REQUIRE_FIELDS_TYPE;
      exports.SelectionSetToObject = SelectionSetToObject;
      exports.block = block;
      exports.breakLine = breakLine;
      exports.buildMapperImport = buildMapperImport;
      exports.buildScalars = buildScalars;
      exports.buildScalarsFromConfig = buildScalarsFromConfig;
      exports.clearExtension = clearExtension;
      exports.convertFactory = convertFactory;
      exports.convertNameParts = convertNameParts;
      exports.fixLocalFilePath = fixLocalFilePath;
      exports.generateFragmentImportStatement = generateFragmentImportStatement;
      exports.generateImportStatement = generateImportStatement;
      exports.getBaseTypeNode = getBaseTypeNode;
      exports.getConfigValue = getConfigValue;
      exports.getFieldNodeNameValue = getFieldNodeNameValue;
      exports.getPossibleTypes = getPossibleTypes;
      exports.getRootTypeNames = getRootTypeNames;
      exports.hasConditionalDirectives = hasConditionalDirectives;
      exports.indent = indent;
      exports.indentMultiline = indentMultiline;
      exports.isExternalMapper = isExternalMapper;
      exports.isExternalMapperType = isExternalMapperType;
      exports.isRootType = isRootType;
      exports.mergeSelectionSets = mergeSelectionSets;
      exports.normalizeAvoidOptionals = normalizeAvoidOptionals;
      exports.normalizeDeclarationKind = normalizeDeclarationKind;
      exports.optimizeOperations = optimizeOperations;
      exports.parseEnumValues = parseEnumValues;
      exports.parseMapper = parseMapper;
      exports.quoteIfNeeded = quoteIfNeeded;
      exports.removeDescription = removeDescription;
      exports.resolveImportSource = resolveImportSource;
      exports.resolveRelativeImport = resolveRelativeImport;
      exports.separateSelectionSet = separateSelectionSet;
      exports.stripMapperTypeInterpolation = stripMapperTypeInterpolation;
      exports.transformComment = transformComment;
      exports.transformMappers = transformMappers;
      exports.wrapTypeNodeWithModifiers = wrapTypeNodeWithModifiers;
      exports.wrapTypeWithModifiers = wrapTypeWithModifiers;
      exports.wrapWithSingleQuotes = wrapWithSingleQuotes;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ MafX: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (
          typeof Symbol === "function" &&
          typeof Symbol.iterator === "symbol"
        ) {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          };
        }
        return _typeof(obj);
      }

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.printError = printError;
      exports.GraphQLError = void 0;

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _symbols = __webpack_require__("6CEn");

      var _location = __webpack_require__("PO9o");

      var _printLocation = __webpack_require__("y4yJ");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: { value: subClass, writable: true, configurable: true }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (
          call &&
          (_typeof(call) === "object" || typeof call === "function")
        ) {
          return call;
        }
        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? new Map() : undefined;
        _wrapNativeSuper = function _wrapNativeSuper(Class) {
          if (Class === null || !_isNativeFunction(Class)) return Class;
          if (typeof Class !== "function") {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
          }
          function Wrapper() {
            return _construct(
              Class,
              arguments,
              _getPrototypeOf(this).constructor
            );
          }
          Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          return _setPrototypeOf(Wrapper, Class);
        };
        return _wrapNativeSuper(Class);
      }

      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
          };
        }
        return _construct.apply(null, arguments);
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Date.prototype.toString.call(
            Reflect.construct(Date, [], function() {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function _isNativeFunction(fn) {
        return Function.toString.call(fn).indexOf("[native code]") !== -1;
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return _setPrototypeOf(o, p);
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return _getPrototypeOf(o);
      }

      /**
       * A GraphQLError describes an Error found during the parse, validate, or
       * execute phases of performing a GraphQL operation. In addition to a message
       * and stack trace, it also includes information about the locations in a
       * GraphQL document and/or execution result that correspond to the Error.
       */
      var GraphQLError = /*#__PURE__*/ (function(_Error) {
        _inherits(GraphQLError, _Error);

        var _super = _createSuper(GraphQLError);

        /**
         * A message describing the Error for debugging purposes.
         *
         * Enumerable, and appears in the result of JSON.stringify().
         *
         * Note: should be treated as readonly, despite invariant usage.
         */

        /**
         * An array of { line, column } locations within the source GraphQL document
         * which correspond to this error.
         *
         * Errors during validation often contain multiple locations, for example to
         * point out two things with the same name. Errors during execution include a
         * single location, the field which produced the error.
         *
         * Enumerable, and appears in the result of JSON.stringify().
         */

        /**
         * An array describing the JSON-path into the execution response which
         * corresponds to this error. Only included for errors during execution.
         *
         * Enumerable, and appears in the result of JSON.stringify().
         */

        /**
         * An array of GraphQL AST Nodes corresponding to this error.
         */

        /**
         * The source GraphQL document for the first location of this error.
         *
         * Note that if this Error represents more than one node, the source may not
         * represent nodes after the first node.
         */

        /**
         * An array of character offsets within the source GraphQL document
         * which correspond to this error.
         */

        /**
         * The original error thrown from a field resolver during execution.
         */

        /**
         * Extension fields to add to the formatted error.
         */
        function GraphQLError(
          message,
          nodes,
          source,
          positions,
          path,
          originalError,
          extensions
        ) {
          var _locations2, _source2, _positions2, _extensions2;

          var _this;

          _classCallCheck(this, GraphQLError);

          _this = _super.call(this, message); // Compute list of blame nodes.

          var _nodes = Array.isArray(nodes)
            ? nodes.length !== 0
              ? nodes
              : undefined
            : nodes
            ? [nodes]
            : undefined; // Compute locations in the source for the given nodes/positions.

          var _source = source;

          if (!_source && _nodes) {
            var _nodes$0$loc;

            _source =
              (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0
                ? void 0
                : _nodes$0$loc.source;
          }

          var _positions = positions;

          if (!_positions && _nodes) {
            _positions = _nodes.reduce(function(list, node) {
              if (node.loc) {
                list.push(node.loc.start);
              }

              return list;
            }, []);
          }

          if (_positions && _positions.length === 0) {
            _positions = undefined;
          }

          var _locations;

          if (positions && source) {
            _locations = positions.map(function(pos) {
              return (0, _location.getLocation)(source, pos);
            });
          } else if (_nodes) {
            _locations = _nodes.reduce(function(list, node) {
              if (node.loc) {
                list.push(
                  (0, _location.getLocation)(node.loc.source, node.loc.start)
                );
              }

              return list;
            }, []);
          }

          var _extensions = extensions;

          if (_extensions == null && originalError != null) {
            var originalExtensions = originalError.extensions;

            if ((0, _isObjectLike.default)(originalExtensions)) {
              _extensions = originalExtensions;
            }
          }

          Object.defineProperties(_assertThisInitialized(_this), {
            name: {
              value: "GraphQLError"
            },
            message: {
              value: message,
              // By being enumerable, JSON.stringify will include `message` in the
              // resulting output. This ensures that the simplest possible GraphQL
              // service adheres to the spec.
              enumerable: true,
              writable: true
            },
            locations: {
              // Coercing falsy values to undefined ensures they will not be included
              // in JSON.stringify() when not provided.
              value:
                (_locations2 = _locations) !== null && _locations2 !== void 0
                  ? _locations2
                  : undefined,
              // By being enumerable, JSON.stringify will include `locations` in the
              // resulting output. This ensures that the simplest possible GraphQL
              // service adheres to the spec.
              enumerable: _locations != null
            },
            path: {
              // Coercing falsy values to undefined ensures they will not be included
              // in JSON.stringify() when not provided.
              value: path !== null && path !== void 0 ? path : undefined,
              // By being enumerable, JSON.stringify will include `path` in the
              // resulting output. This ensures that the simplest possible GraphQL
              // service adheres to the spec.
              enumerable: path != null
            },
            nodes: {
              value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
            },
            source: {
              value:
                (_source2 = _source) !== null && _source2 !== void 0
                  ? _source2
                  : undefined
            },
            positions: {
              value:
                (_positions2 = _positions) !== null && _positions2 !== void 0
                  ? _positions2
                  : undefined
            },
            originalError: {
              value: originalError
            },
            extensions: {
              // Coercing falsy values to undefined ensures they will not be included
              // in JSON.stringify() when not provided.
              value:
                (_extensions2 = _extensions) !== null && _extensions2 !== void 0
                  ? _extensions2
                  : undefined,
              // By being enumerable, JSON.stringify will include `path` in the
              // resulting output. This ensures that the simplest possible GraphQL
              // service adheres to the spec.
              enumerable: _extensions != null
            }
          }); // Include (non-enumerable) stack trace.

          if (
            originalError !== null &&
            originalError !== void 0 &&
            originalError.stack
          ) {
            Object.defineProperty(_assertThisInitialized(_this), "stack", {
              value: originalError.stack,
              writable: true,
              configurable: true
            });
            return _possibleConstructorReturn(_this);
          } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

          if (Error.captureStackTrace) {
            Error.captureStackTrace(
              _assertThisInitialized(_this),
              GraphQLError
            );
          } else {
            Object.defineProperty(_assertThisInitialized(_this), "stack", {
              value: Error().stack,
              writable: true,
              configurable: true
            });
          }

          return _this;
        }

        _createClass(GraphQLError, [
          {
            key: "toString",
            value: function toString() {
              return printError(this);
            } // FIXME: workaround to not break chai comparisons, should be remove in v16
            // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
          },
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "Object";
            }
          }
        ]);

        return GraphQLError;
      })(/*#__PURE__*/ _wrapNativeSuper(Error));
      /**
       * Prints a GraphQLError to a string, representing useful location information
       * about the error's position in the source.
       */

      exports.GraphQLError = GraphQLError;

      function printError(error) {
        var output = error.message;

        if (error.nodes) {
          for (
            var _i2 = 0, _error$nodes2 = error.nodes;
            _i2 < _error$nodes2.length;
            _i2++
          ) {
            var node = _error$nodes2[_i2];

            if (node.loc) {
              output += "\n\n" + (0, _printLocation.printLocation)(node.loc);
            }
          }
        } else if (error.source && error.locations) {
          for (
            var _i4 = 0, _error$locations2 = error.locations;
            _i4 < _error$locations2.length;
            _i4++
          ) {
            var location = _error$locations2[_i4];
            output +=
              "\n\n" +
              (0, _printLocation.printSourceLocation)(error.source, location);
          }
        }

        return output;
      }

      /***/
    },

    /***/ Mj15: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      /* eslint-disable no-redeclare */
      // $FlowFixMe[name-already-bound]
      var find = Array.prototype.find
        ? function(list, predicate) {
            return Array.prototype.find.call(list, predicate);
          }
        : function(list, predicate) {
            for (var _i2 = 0; _i2 < list.length; _i2++) {
              var value = list[_i2];

              if (predicate(value)) {
                return value;
              }
            }
          };
      var _default = find;
      exports.default = _default;

      /***/
    },

    /***/ MlE5: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var ToPrimitive = __webpack_require__("1fn3");

      // http://262.ecma-international.org/5.1/#sec-9.3

      module.exports = function ToNumber(value) {
        var prim = ToPrimitive(value, Number);
        if (typeof prim !== "string") {
          return +prim; // eslint-disable-line no-implicit-coercion
        }

        // eslint-disable-next-line no-control-regex
        var trimmed = prim.replace(
          /^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g,
          ""
        );
        if (/^0[ob]|^[+-]0x/.test(trimmed)) {
          return NaN;
        }

        return +trimmed; // eslint-disable-line no-implicit-coercion
      };

      /***/
    },

    /***/ MrvF: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.valueFromAST = valueFromAST;

      var _objectValues3 = _interopRequireDefault(__webpack_require__("YDZp"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _kinds = __webpack_require__("xaK5");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Produces a JavaScript value given a GraphQL Value AST.
       *
       * A GraphQL type must be provided, which will be used to interpret different
       * GraphQL Value literals.
       *
       * Returns `undefined` when the value could not be validly coerced according to
       * the provided type.
       *
       * | GraphQL Value        | JSON Value    |
       * | -------------------- | ------------- |
       * | Input Object         | Object        |
       * | List                 | Array         |
       * | Boolean              | Boolean       |
       * | String               | String        |
       * | Int / Float          | Number        |
       * | Enum Value           | Mixed         |
       * | NullValue            | null          |
       *
       */
      function valueFromAST(valueNode, type, variables) {
        if (!valueNode) {
          // When there is no node, then there is also no value.
          // Importantly, this is different from returning the value null.
          return;
        }

        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          var variableName = valueNode.name.value;

          if (variables == null || variables[variableName] === undefined) {
            // No valid return value.
            return;
          }

          var variableValue = variables[variableName];

          if (variableValue === null && (0, _definition.isNonNullType)(type)) {
            return; // Invalid: intentionally return no value.
          } // Note: This does no further checking that this variable is correct.
          // This assumes that this query has been validated and the variable
          // usage here is of the correct type.

          return variableValue;
        }

        if ((0, _definition.isNonNullType)(type)) {
          if (valueNode.kind === _kinds.Kind.NULL) {
            return; // Invalid: intentionally return no value.
          }

          return valueFromAST(valueNode, type.ofType, variables);
        }

        if (valueNode.kind === _kinds.Kind.NULL) {
          // This is explicitly returning the value null.
          return null;
        }

        if ((0, _definition.isListType)(type)) {
          var itemType = type.ofType;

          if (valueNode.kind === _kinds.Kind.LIST) {
            var coercedValues = [];

            for (
              var _i2 = 0, _valueNode$values2 = valueNode.values;
              _i2 < _valueNode$values2.length;
              _i2++
            ) {
              var itemNode = _valueNode$values2[_i2];

              if (isMissingVariable(itemNode, variables)) {
                // If an array contains a missing variable, it is either coerced to
                // null or if the item type is non-null, it considered invalid.
                if ((0, _definition.isNonNullType)(itemType)) {
                  return; // Invalid: intentionally return no value.
                }

                coercedValues.push(null);
              } else {
                var itemValue = valueFromAST(itemNode, itemType, variables);

                if (itemValue === undefined) {
                  return; // Invalid: intentionally return no value.
                }

                coercedValues.push(itemValue);
              }
            }

            return coercedValues;
          }

          var coercedValue = valueFromAST(valueNode, itemType, variables);

          if (coercedValue === undefined) {
            return; // Invalid: intentionally return no value.
          }

          return [coercedValue];
        }

        if ((0, _definition.isInputObjectType)(type)) {
          if (valueNode.kind !== _kinds.Kind.OBJECT) {
            return; // Invalid: intentionally return no value.
          }

          var coercedObj = Object.create(null);
          var fieldNodes = (0, _keyMap.default)(valueNode.fields, function(
            field
          ) {
            return field.name.value;
          });

          for (
            var _i4 = 0,
              _objectValues2 = (0, _objectValues3.default)(type.getFields());
            _i4 < _objectValues2.length;
            _i4++
          ) {
            var field = _objectValues2[_i4];
            var fieldNode = fieldNodes[field.name];

            if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
              if (field.defaultValue !== undefined) {
                coercedObj[field.name] = field.defaultValue;
              } else if ((0, _definition.isNonNullType)(field.type)) {
                return; // Invalid: intentionally return no value.
              }

              continue;
            }

            var fieldValue = valueFromAST(
              fieldNode.value,
              field.type,
              variables
            );

            if (fieldValue === undefined) {
              return; // Invalid: intentionally return no value.
            }

            coercedObj[field.name] = fieldValue;
          }

          return coercedObj;
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isLeafType)(type)) {
          // Scalars and Enums fulfill parsing a literal value via parseLiteral().
          // Invalid values represent a failure to parse correctly, in which case
          // no value is returned.
          var result;

          try {
            result = type.parseLiteral(valueNode, variables);
          } catch (_error) {
            return; // Invalid: intentionally return no value.
          }

          if (result === undefined) {
            return; // Invalid: intentionally return no value.
          }

          return result;
        } // istanbul ignore next (Not reachable. All possible input types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected input type: " + (0, _inspect.default)(type)
          );
      } // Returns true if the provided valueNode is a variable which is not defined
      // in the set of variables.

      function isMissingVariable(valueNode, variables) {
        return (
          valueNode.kind === _kinds.Kind.VARIABLE &&
          (variables == null || variables[valueNode.name.value] === undefined)
        );
      }

      /***/
    },

    /***/ NIw6: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /*!
       * path-root-regex <https://github.com/jonschlinkert/path-root-regex>
       *
       * Copyright (c) 2016, Jon Schlinkert.
       * Licensed under the MIT License.
       */

      module.exports = function() {
        // Regex is modified from the split device regex in the node.js path module.
        return /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?/;
      };

      /***/
    },

    /***/ NKuU: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      /* eslint-disable no-redeclare */
      // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
      var objectEntries =
        Object.entries ||
        function(obj) {
          return Object.keys(obj).map(function(key) {
            return [key, obj[key]];
          });
        };

      var _default = objectEntries;
      exports.default = _default;

      /***/
    },

    /***/ Ndee: /***/ function(module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__,
        __WEBPACK_AMD_DEFINE_ARRAY__,
        __WEBPACK_AMD_DEFINE_RESULT__;
      /*!
       * is-windows <https://github.com/jonschlinkert/is-windows>
       *
       * Copyright © 2015-2018, Jon Schlinkert.
       * Released under the MIT License.
       */

      (function(factory) {
        if (
          exports &&
          typeof exports === "object" &&
          typeof module !== "undefined"
        ) {
          module.exports = factory();
        } else if (true) {
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
          (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
          (__WEBPACK_AMD_DEFINE_RESULT__ =
            typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
              ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                  exports,
                  __WEBPACK_AMD_DEFINE_ARRAY__
                )
              : __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }
      })(function() {
        "use strict";
        return function isWindows() {
          return (
            process &&
            (process.platform === "win32" ||
              /^(msys|cygwin)$/.test(process.env.OSTYPE))
          );
        };
      });

      /***/
    },

    /***/ NePw: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $test = GetIntrinsic("RegExp.prototype.test");

      var callBind = __webpack_require__("PrET");

      module.exports = function regexTester(regex) {
        return callBind($test, regex);
      };

      /***/
    },

    /***/ O2Of: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pascalCase = exports.pascalCaseTransformMerge = exports.pascalCaseTransform = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var no_case_1 = __webpack_require__("3yyI");
      function pascalCaseTransform(input, index) {
        var firstChar = input.charAt(0);
        var lowerChars = input.substr(1).toLowerCase();
        if (index > 0 && firstChar >= "0" && firstChar <= "9") {
          return "_" + firstChar + lowerChars;
        }
        return "" + firstChar.toUpperCase() + lowerChars;
      }
      exports.pascalCaseTransform = pascalCaseTransform;
      function pascalCaseTransformMerge(input) {
        return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
      }
      exports.pascalCaseTransformMerge = pascalCaseTransformMerge;
      function pascalCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return no_case_1.noCase(
          input,
          tslib_1.__assign(
            { delimiter: "", transform: pascalCaseTransform },
            options
          )
        );
      }
      exports.pascalCase = pascalCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ OAzr: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "getIntrospectionQuery", {
        enumerable: true,
        get: function get() {
          return _getIntrospectionQuery.getIntrospectionQuery;
        }
      });
      Object.defineProperty(exports, "getOperationAST", {
        enumerable: true,
        get: function get() {
          return _getOperationAST.getOperationAST;
        }
      });
      Object.defineProperty(exports, "getOperationRootType", {
        enumerable: true,
        get: function get() {
          return _getOperationRootType.getOperationRootType;
        }
      });
      Object.defineProperty(exports, "introspectionFromSchema", {
        enumerable: true,
        get: function get() {
          return _introspectionFromSchema.introspectionFromSchema;
        }
      });
      Object.defineProperty(exports, "buildClientSchema", {
        enumerable: true,
        get: function get() {
          return _buildClientSchema.buildClientSchema;
        }
      });
      Object.defineProperty(exports, "buildASTSchema", {
        enumerable: true,
        get: function get() {
          return _buildASTSchema.buildASTSchema;
        }
      });
      Object.defineProperty(exports, "buildSchema", {
        enumerable: true,
        get: function get() {
          return _buildASTSchema.buildSchema;
        }
      });
      Object.defineProperty(exports, "extendSchema", {
        enumerable: true,
        get: function get() {
          return _extendSchema.extendSchema;
        }
      });
      Object.defineProperty(exports, "getDescription", {
        enumerable: true,
        get: function get() {
          return _extendSchema.getDescription;
        }
      });
      Object.defineProperty(exports, "lexicographicSortSchema", {
        enumerable: true,
        get: function get() {
          return _lexicographicSortSchema.lexicographicSortSchema;
        }
      });
      Object.defineProperty(exports, "printSchema", {
        enumerable: true,
        get: function get() {
          return _printSchema.printSchema;
        }
      });
      Object.defineProperty(exports, "printType", {
        enumerable: true,
        get: function get() {
          return _printSchema.printType;
        }
      });
      Object.defineProperty(exports, "printIntrospectionSchema", {
        enumerable: true,
        get: function get() {
          return _printSchema.printIntrospectionSchema;
        }
      });
      Object.defineProperty(exports, "typeFromAST", {
        enumerable: true,
        get: function get() {
          return _typeFromAST.typeFromAST;
        }
      });
      Object.defineProperty(exports, "valueFromAST", {
        enumerable: true,
        get: function get() {
          return _valueFromAST.valueFromAST;
        }
      });
      Object.defineProperty(exports, "valueFromASTUntyped", {
        enumerable: true,
        get: function get() {
          return _valueFromASTUntyped.valueFromASTUntyped;
        }
      });
      Object.defineProperty(exports, "astFromValue", {
        enumerable: true,
        get: function get() {
          return _astFromValue.astFromValue;
        }
      });
      Object.defineProperty(exports, "TypeInfo", {
        enumerable: true,
        get: function get() {
          return _TypeInfo.TypeInfo;
        }
      });
      Object.defineProperty(exports, "visitWithTypeInfo", {
        enumerable: true,
        get: function get() {
          return _TypeInfo.visitWithTypeInfo;
        }
      });
      Object.defineProperty(exports, "coerceInputValue", {
        enumerable: true,
        get: function get() {
          return _coerceInputValue.coerceInputValue;
        }
      });
      Object.defineProperty(exports, "concatAST", {
        enumerable: true,
        get: function get() {
          return _concatAST.concatAST;
        }
      });
      Object.defineProperty(exports, "separateOperations", {
        enumerable: true,
        get: function get() {
          return _separateOperations.separateOperations;
        }
      });
      Object.defineProperty(exports, "stripIgnoredCharacters", {
        enumerable: true,
        get: function get() {
          return _stripIgnoredCharacters.stripIgnoredCharacters;
        }
      });
      Object.defineProperty(exports, "isEqualType", {
        enumerable: true,
        get: function get() {
          return _typeComparators.isEqualType;
        }
      });
      Object.defineProperty(exports, "isTypeSubTypeOf", {
        enumerable: true,
        get: function get() {
          return _typeComparators.isTypeSubTypeOf;
        }
      });
      Object.defineProperty(exports, "doTypesOverlap", {
        enumerable: true,
        get: function get() {
          return _typeComparators.doTypesOverlap;
        }
      });
      Object.defineProperty(exports, "assertValidName", {
        enumerable: true,
        get: function get() {
          return _assertValidName.assertValidName;
        }
      });
      Object.defineProperty(exports, "isValidNameError", {
        enumerable: true,
        get: function get() {
          return _assertValidName.isValidNameError;
        }
      });
      Object.defineProperty(exports, "BreakingChangeType", {
        enumerable: true,
        get: function get() {
          return _findBreakingChanges.BreakingChangeType;
        }
      });
      Object.defineProperty(exports, "DangerousChangeType", {
        enumerable: true,
        get: function get() {
          return _findBreakingChanges.DangerousChangeType;
        }
      });
      Object.defineProperty(exports, "findBreakingChanges", {
        enumerable: true,
        get: function get() {
          return _findBreakingChanges.findBreakingChanges;
        }
      });
      Object.defineProperty(exports, "findDangerousChanges", {
        enumerable: true,
        get: function get() {
          return _findBreakingChanges.findDangerousChanges;
        }
      });
      Object.defineProperty(exports, "findDeprecatedUsages", {
        enumerable: true,
        get: function get() {
          return _findDeprecatedUsages.findDeprecatedUsages;
        }
      });

      var _getIntrospectionQuery = __webpack_require__("7OAR");

      var _getOperationAST = __webpack_require__("8SQu");

      var _getOperationRootType = __webpack_require__("58fJ");

      var _introspectionFromSchema = __webpack_require__("ZSaH");

      var _buildClientSchema = __webpack_require__("ZjIp");

      var _buildASTSchema = __webpack_require__("rn2h");

      var _extendSchema = __webpack_require__("kjGV");

      var _lexicographicSortSchema = __webpack_require__("0hsj");

      var _printSchema = __webpack_require__("cl1e");

      var _typeFromAST = __webpack_require__("3w1o");

      var _valueFromAST = __webpack_require__("MrvF");

      var _valueFromASTUntyped = __webpack_require__("S6i8");

      var _astFromValue = __webpack_require__("bi9y");

      var _TypeInfo = __webpack_require__("Uh8e");

      var _coerceInputValue = __webpack_require__("1GMz");

      var _concatAST = __webpack_require__("P7Yx");

      var _separateOperations = __webpack_require__("h49/");

      var _stripIgnoredCharacters = __webpack_require__("r6jv");

      var _typeComparators = __webpack_require__("aulS");

      var _assertValidName = __webpack_require__("7Ji9");

      var _findBreakingChanges = __webpack_require__("M31k");

      var _findDeprecatedUsages = __webpack_require__("VeMo");

      /***/
    },

    /***/ OHCT: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _interopRequireDefault = __webpack_require__("TqRt");

      var _defineProperty2 = _interopRequireDefault(
        __webpack_require__("lSNA")
      );

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              (0, _defineProperty2["default"])(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      var invariant = __webpack_require__("OUqe");

      var _require = __webpack_require__("VrDQ"),
        eachWithCombinedError = _require.eachWithCombinedError;

      /**
       * @public
       *
       * Helper for writing compiler transforms that apply "map" and/or "filter"-style
       * operations to compiler contexts. The `visitor` argument accepts a map of IR
       * kinds to user-defined functions that can map nodes of that kind to new values
       * (of the same kind).
       *
       * If a visitor function is defined for a kind, the visitor function is
       * responsible for traversing its children (by calling `this.traverse(node)`)
       * and returning either the input (to indicate no changes), a new node (to
       * indicate changes), or null/undefined (to indicate the removal of that node
       * from the output).
       *
       * If a visitor function is *not* defined for a kind, a default traversal is
       * used to evaluate its children.
       *
       * The `stateInitializer` argument accepts an optional function to construct the
       * state for each document (fragment or root) in the context. Any documents for
       * which the initializer returns null/undefined is deleted from the context
       * without being traversed.
       *
       * Example: Alias all scalar fields with the reverse of their name:
       *
       * ```
       * transform(context, {
       *   ScalarField: visitScalarField,
       * });
       *
       * function visitScalarField(field: ScalarField, state: State): ?ScalarField {
       *   // Traverse child nodes - for a scalar field these are the arguments &
       *   // directives.
       *   const nextField = this.traverse(field, state);
       *   // Return a new node with a different alias.
       *   return {
       *     ...nextField,
       *     alias: nextField.name.split('').reverse().join(''),
       *   };
       * }
       * ```
       */
      function transform(context, visitor, stateInitializer) {
        var transformer = new Transformer(context, visitor);
        return context.withMutations(function(ctx) {
          var nextContext = ctx;
          eachWithCombinedError(context.documents(), function(prevNode) {
            var nextNode;

            if (stateInitializer === undefined) {
              nextNode = transformer.visit(prevNode, undefined);
            } else {
              var _state = stateInitializer(prevNode);

              if (_state != null) {
                nextNode = transformer.visit(prevNode, _state);
              }
            }

            if (!nextNode) {
              nextContext = nextContext.remove(prevNode.name);
            } else if (nextNode !== prevNode) {
              nextContext = nextContext.replace(nextNode);
            }
          });
          return nextContext;
        });
      }
      /**
       * @internal
       */

      var Transformer = /*#__PURE__*/ (function() {
        function Transformer(context, visitor) {
          this._context = context;
          this._states = [];
          this._visitor = visitor;
        }
        /**
         * @public
         *
         * Returns the original compiler context that is being transformed. This can
         * be used to look up fragments by name, for example.
         */

        var _proto = Transformer.prototype;

        _proto.getContext = function getContext() {
          return this._context;
        };
        /**
         * @public
         *
         * Transforms the node, calling a user-defined visitor function if defined for
         * the node's kind. Uses the given state for this portion of the traversal.
         *
         * Note: This differs from `traverse` in that it calls a visitor function for
         * the node itself.
         */

        _proto.visit = function visit(node, state) {
          this._states.push(state);

          var nextNode = this._visit(node);

          this._states.pop();

          return nextNode;
        };
        /**
         * @public
         *
         * Transforms the children of the given node, skipping the user-defined
         * visitor function for the node itself. Uses the given state for this portion
         * of the traversal.
         *
         * Note: This differs from `visit` in that it does not call a visitor function
         * for the node itself.
         */

        _proto.traverse = function traverse(node, state) {
          this._states.push(state);

          var nextNode = this._traverse(node);

          this._states.pop();

          return nextNode;
        };

        _proto._visit = function _visit(node) {
          var nodeVisitor = this._visitor[node.kind];

          if (nodeVisitor) {
            // If a handler for the kind is defined, it is responsible for calling
            // `traverse` to transform children as necessary.
            var _state2 = this._getState();

            var nextNode = nodeVisitor.call(this, node, _state2);
            return nextNode;
          } // Otherwise traverse is called automatically.

          return this._traverse(node);
        };

        _proto._traverse = function _traverse(prevNode) {
          var nextNode;

          switch (prevNode.kind) {
            case "Argument":
              nextNode = this._traverseChildren(prevNode, null, ["value"]);
              break;

            case "Literal":
            case "LocalArgumentDefinition":
            case "RootArgumentDefinition":
            case "Variable":
              nextNode = prevNode;
              break;

            case "Defer":
              nextNode = this._traverseChildren(
                prevNode,
                ["selections"],
                ["if"]
              );
              break;

            case "Stream":
              nextNode = this._traverseChildren(
                prevNode,
                ["selections"],
                ["if", "initialCount"]
              );
              break;

            case "ClientExtension":
              nextNode = this._traverseChildren(prevNode, ["selections"]);
              break;

            case "Directive":
              nextNode = this._traverseChildren(prevNode, ["args"]);
              break;

            case "ModuleImport":
              nextNode = this._traverseChildren(prevNode, ["selections"]);

              if (!nextNode.selections.length) {
                nextNode = null;
              }

              break;

            case "FragmentSpread":
            case "ScalarField":
              nextNode = this._traverseChildren(prevNode, [
                "args",
                "directives"
              ]);
              break;

            case "InlineDataFragmentSpread":
              nextNode = this._traverseChildren(prevNode, ["selections"]);
              break;

            case "LinkedField":
              nextNode = this._traverseChildren(prevNode, [
                "args",
                "directives",
                "selections"
              ]);

              if (!nextNode.selections.length) {
                nextNode = null;
              }

              break;

            case "ListValue":
              nextNode = this._traverseChildren(prevNode, ["items"]);
              break;

            case "ObjectFieldValue":
              nextNode = this._traverseChildren(prevNode, null, ["value"]);
              break;

            case "ObjectValue":
              nextNode = this._traverseChildren(prevNode, ["fields"]);
              break;

            case "Condition":
              nextNode = this._traverseChildren(
                prevNode,
                ["directives", "selections"],
                ["condition"]
              );

              if (!nextNode.selections.length) {
                nextNode = null;
              }

              break;

            case "InlineFragment":
              nextNode = this._traverseChildren(prevNode, [
                "directives",
                "selections"
              ]);

              if (!nextNode.selections.length) {
                nextNode = null;
              }

              break;

            case "Fragment":
            case "Root":
              nextNode = this._traverseChildren(prevNode, [
                "argumentDefinitions",
                "directives",
                "selections"
              ]);
              break;

            case "Request":
              nextNode = this._traverseChildren(prevNode, null, [
                "fragment",
                "root"
              ]);
              break;

            case "SplitOperation":
              nextNode = this._traverseChildren(prevNode, ["selections"]);
              break;

            default:
              prevNode;
              true ? (false ? undefined : invariant(false)) : undefined;
          }

          return nextNode;
        };

        _proto._traverseChildren = function _traverseChildren(
          prevNode,
          pluralKeys,
          singularKeys
        ) {
          var _this = this;

          var nextNode;
          pluralKeys &&
            pluralKeys.forEach(function(key) {
              var prevItems = prevNode[key];

              if (!prevItems) {
                return;
              }

              !Array.isArray(prevItems)
                ? false
                  ? undefined
                  : invariant(false)
                : void 0;

              var nextItems = _this._map(prevItems);

              if (nextNode || nextItems !== prevItems) {
                nextNode = nextNode || _objectSpread({}, prevNode);
                nextNode[key] = nextItems;
              }
            });
          singularKeys &&
            singularKeys.forEach(function(key) {
              var prevItem = prevNode[key];

              if (!prevItem) {
                return;
              }

              var nextItem = _this._visit(prevItem);

              if (nextNode || nextItem !== prevItem) {
                nextNode = nextNode || _objectSpread({}, prevNode);
                nextNode[key] = nextItem;
              }
            });
          return nextNode || prevNode;
        };

        _proto._map = function _map(prevItems) {
          var _this2 = this;

          var nextItems;
          prevItems.forEach(function(prevItem, index) {
            var nextItem = _this2._visit(prevItem);

            if (nextItems || nextItem !== prevItem) {
              nextItems = nextItems || prevItems.slice(0, index);

              if (nextItem) {
                nextItems.push(nextItem);
              }
            }
          });
          return nextItems || prevItems;
        };

        _proto._getState = function _getState() {
          !this._states.length
            ? false
              ? undefined
              : invariant(false)
            : void 0;
          return this._states[this._states.length - 1];
        };

        return Transformer;
      })();

      module.exports = {
        transform: transform
      };

      /***/
    },

    /***/ OM4Y: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // var modulo = require('./modulo');
      var $floor = Math.floor;

      // http://262.ecma-international.org/5.1/#sec-5.2

      module.exports = function floor(x) {
        // return x - modulo(x, 1);
        return $floor(x);
      };

      /***/
    },

    /***/ OUqe: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var validateFormat = false ? undefined : function(format) {};
      /**
       * Use invariant() to assert state which your program assumes to be true.
       *
       * Provide sprintf-style format (only %s is supported) and arguments to provide
       * information about what broke and what you were expecting.
       *
       * The invariant message will be stripped in production, but the invariant will
       * remain to ensure logic does not differ in production.
       */

      function invariant(condition, format) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 2 ? _len - 2 : 0),
            _key = 2;
          _key < _len;
          _key++
        ) {
          args[_key - 2] = arguments[_key];
        }

        validateFormat(format);

        if (!condition) {
          var error;

          if (format === undefined) {
            error = new Error(
              "Minified exception occurred; use the non-minified dev environment " +
                "for the full error message and additional helpful warnings."
            );
          } else {
            var argIndex = 0;
            error = new Error(
              format.replace(/%s/g, function() {
                return String(args[argIndex++]);
              })
            );
            error.name = "Invariant Violation";
          }

          error.framesToPop = 1; // Skip invariant's own stack frame.

          throw error;
        }
      }

      module.exports = invariant;

      /***/
    },

    /***/ OgoC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.swapCase = void 0;
      function swapCase(input) {
        var result = "";
        for (var i = 0; i < input.length; i++) {
          var lower = input[i].toLowerCase();
          result += input[i] === lower ? input[i].toUpperCase() : lower;
        }
        return result;
      }
      exports.swapCase = swapCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ P7Yx: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.concatAST = concatAST;

      /**
       * Provided a collection of ASTs, presumably each from different files,
       * concatenate the ASTs together into batched AST, useful for validating many
       * GraphQL source files which together represent one conceptual application.
       */
      function concatAST(documents) {
        var definitions = [];

        for (var _i2 = 0; _i2 < documents.length; _i2++) {
          var doc = documents[_i2];
          definitions = definitions.concat(doc.definitions);
        }

        return {
          kind: "Document",
          definitions: definitions
        };
      }

      /***/
    },

    /***/ PDty: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $Array = GetIntrinsic("%Array%");
      var $species = GetIntrinsic("%Symbol.species%", true);
      var $TypeError = GetIntrinsic("%TypeError%");

      var Get = __webpack_require__("V/hC");
      var IsArray = __webpack_require__("plxK");
      var IsConstructor = __webpack_require__("ugY3");
      var IsInteger = __webpack_require__("Fo5y");
      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate

      module.exports = function ArraySpeciesCreate(originalArray, length) {
        if (!IsInteger(length) || length < 0) {
          throw new $TypeError(
            "Assertion failed: length must be an integer >= 0"
          );
        }
        var len = length === 0 ? 0 : length;
        var C;
        var isArray = IsArray(originalArray);
        if (isArray) {
          C = Get(originalArray, "constructor");
          // TODO: figure out how to make a cross-realm normal Array, a same-realm Array
          // if (IsConstructor(C)) {
          // 	if C is another realm's Array, C = undefined
          // 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
          // }
          if ($species && Type(C) === "Object") {
            C = Get(C, $species);
            if (C === null) {
              C = void 0;
            }
          }
        }
        if (typeof C === "undefined") {
          return $Array(len);
        }
        if (!IsConstructor(C)) {
          throw new $TypeError("C must be a constructor");
        }
        return new C(len); // Construct(C, len);
      };

      /***/
    },

    /***/ PO9o: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getLocation = getLocation;

      /**
       * Represents a location in a Source.
       */

      /**
       * Takes a Source and a UTF-8 character offset, and returns the corresponding
       * line and column as a SourceLocation.
       */
      function getLocation(source, position) {
        var lineRegexp = /\r\n|[\n\r]/g;
        var line = 1;
        var column = position + 1;
        var match;

        while (
          (match = lineRegexp.exec(source.body)) &&
          match.index < position
        ) {
          line += 1;
          column = position + 1 - (match.index + match[0].length);
        }

        return {
          line: line,
          column: column
        };
      }

      /***/
    },

    /***/ PUII: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GraphQLError", {
        enumerable: true,
        get: function get() {
          return _GraphQLError.GraphQLError;
        }
      });
      Object.defineProperty(exports, "printError", {
        enumerable: true,
        get: function get() {
          return _GraphQLError.printError;
        }
      });
      Object.defineProperty(exports, "syntaxError", {
        enumerable: true,
        get: function get() {
          return _syntaxError.syntaxError;
        }
      });
      Object.defineProperty(exports, "locatedError", {
        enumerable: true,
        get: function get() {
          return _locatedError.locatedError;
        }
      });
      Object.defineProperty(exports, "formatError", {
        enumerable: true,
        get: function get() {
          return _formatError.formatError;
        }
      });

      var _GraphQLError = __webpack_require__("MafX");

      var _syntaxError = __webpack_require__("glbf");

      var _locatedError = __webpack_require__("dPEW");

      var _formatError = __webpack_require__("vvR6");

      /***/
    },

    /***/ PZUk: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueVariableNamesRule = UniqueVariableNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique variable names
       *
       * A GraphQL operation is only valid if all its variables are uniquely named.
       */
      function UniqueVariableNamesRule(context) {
        var knownVariableNames = Object.create(null);
        return {
          OperationDefinition: function OperationDefinition() {
            knownVariableNames = Object.create(null);
          },
          VariableDefinition: function VariableDefinition(node) {
            var variableName = node.variable.name.value;

            if (knownVariableNames[variableName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'There can be only one variable named "$'.concat(
                    variableName,
                    '".'
                  ),
                  [knownVariableNames[variableName], node.variable.name]
                )
              );
            } else {
              knownVariableNames[variableName] = node.variable.name;
            }
          }
        };
      }

      /***/
    },

    /***/ PrET: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var bind = __webpack_require__("D3zA");
      var GetIntrinsic = __webpack_require__("AM7I");

      var $apply = GetIntrinsic("%Function.prototype.apply%");
      var $call = GetIntrinsic("%Function.prototype.call%");
      var $reflectApply =
        GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);

      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
      var $max = GetIntrinsic("%Math.max%");

      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          // IE 8 has a broken defineProperty
          $defineProperty = null;
        }
      }

      module.exports = function callBind(originalFunction) {
        var func = $reflectApply(bind, $call, arguments);
        if ($gOPD && $defineProperty) {
          var desc = $gOPD(func, "length");
          if (desc.configurable) {
            // original length, plus the receiver, minus any additional arguments (after the receiver)
            $defineProperty(func, "length", {
              value:
                1 + $max(0, originalFunction.length - (arguments.length - 1))
            });
          }
        }
        return func;
      };

      var applyBind = function applyBind() {
        return $reflectApply(bind, $apply, arguments);
      };

      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }

      /***/
    },

    /***/ QINa: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.validateSchema = validateSchema;
      exports.assertValidSchema = assertValidSchema;

      var _find = _interopRequireDefault(__webpack_require__("Mj15"));

      var _objectValues5 = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _GraphQLError = __webpack_require__("MafX");

      var _locatedError = __webpack_require__("dPEW");

      var _assertValidName = __webpack_require__("7Ji9");

      var _typeComparators = __webpack_require__("aulS");

      var _schema = __webpack_require__("+X2/");

      var _introspection = __webpack_require__("JIc4");

      var _directives = __webpack_require__("L9+1");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Implements the "Type Validation" sub-sections of the specification's
       * "Type System" section.
       *
       * Validation runs synchronously, returning an array of encountered errors, or
       * an empty array if no errors were encountered and the Schema is valid.
       */
      function validateSchema(schema) {
        // First check to ensure the provided value is in fact a GraphQLSchema.
        (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.

        if (schema.__validationErrors) {
          return schema.__validationErrors;
        } // Validate the schema, producing a list of errors.

        var context = new SchemaValidationContext(schema);
        validateRootTypes(context);
        validateDirectives(context);
        validateTypes(context); // Persist the results of validation before returning to ensure validation
        // does not run multiple times for this schema.

        var errors = context.getErrors();
        schema.__validationErrors = errors;
        return errors;
      }
      /**
       * Utility function which asserts a schema is valid by throwing an error if
       * it is invalid.
       */

      function assertValidSchema(schema) {
        var errors = validateSchema(schema);

        if (errors.length !== 0) {
          throw new Error(
            errors
              .map(function(error) {
                return error.message;
              })
              .join("\n\n")
          );
        }
      }

      var SchemaValidationContext = /*#__PURE__*/ (function() {
        function SchemaValidationContext(schema) {
          this._errors = [];
          this.schema = schema;
        }

        var _proto = SchemaValidationContext.prototype;

        _proto.reportError = function reportError(message, nodes) {
          var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;

          this.addError(new _GraphQLError.GraphQLError(message, _nodes));
        };

        _proto.addError = function addError(error) {
          this._errors.push(error);
        };

        _proto.getErrors = function getErrors() {
          return this._errors;
        };

        return SchemaValidationContext;
      })();

      function validateRootTypes(context) {
        var schema = context.schema;
        var queryType = schema.getQueryType();

        if (!queryType) {
          context.reportError(
            "Query root type must be provided.",
            schema.astNode
          );
        } else if (!(0, _definition.isObjectType)(queryType)) {
          var _getOperationTypeNode;

          context.reportError(
            "Query root type must be Object type, it cannot be ".concat(
              (0, _inspect.default)(queryType),
              "."
            ),
            (_getOperationTypeNode = getOperationTypeNode(schema, "query")) !==
              null && _getOperationTypeNode !== void 0
              ? _getOperationTypeNode
              : queryType.astNode
          );
        }

        var mutationType = schema.getMutationType();

        if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
          var _getOperationTypeNode2;

          context.reportError(
            "Mutation root type must be Object type if provided, it cannot be " +
              "".concat((0, _inspect.default)(mutationType), "."),
            (_getOperationTypeNode2 = getOperationTypeNode(
              schema,
              "mutation"
            )) !== null && _getOperationTypeNode2 !== void 0
              ? _getOperationTypeNode2
              : mutationType.astNode
          );
        }

        var subscriptionType = schema.getSubscriptionType();

        if (
          subscriptionType &&
          !(0, _definition.isObjectType)(subscriptionType)
        ) {
          var _getOperationTypeNode3;

          context.reportError(
            "Subscription root type must be Object type if provided, it cannot be " +
              "".concat((0, _inspect.default)(subscriptionType), "."),
            (_getOperationTypeNode3 = getOperationTypeNode(
              schema,
              "subscription"
            )) !== null && _getOperationTypeNode3 !== void 0
              ? _getOperationTypeNode3
              : subscriptionType.astNode
          );
        }
      }

      function getOperationTypeNode(schema, operation) {
        var operationNodes = getAllSubNodes(schema, function(node) {
          return node.operationTypes;
        });

        for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {
          var node = operationNodes[_i2];

          if (node.operation === operation) {
            return node.type;
          }
        }

        return undefined;
      }

      function validateDirectives(context) {
        for (
          var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives();
          _i4 < _context$schema$getDi2.length;
          _i4++
        ) {
          var directive = _context$schema$getDi2[_i4];

          // Ensure all directives are in fact GraphQL directives.
          if (!(0, _directives.isDirective)(directive)) {
            context.reportError(
              "Expected directive but got: ".concat(
                (0, _inspect.default)(directive),
                "."
              ),
              directive === null || directive === void 0
                ? void 0
                : directive.astNode
            );
            continue;
          } // Ensure they are named correctly.

          validateName(context, directive); // TODO: Ensure proper locations.
          // Ensure the arguments are valid.

          for (
            var _i6 = 0, _directive$args2 = directive.args;
            _i6 < _directive$args2.length;
            _i6++
          ) {
            var arg = _directive$args2[_i6];
            // Ensure they are named correctly.
            validateName(context, arg); // Ensure the type is an input type.

            if (!(0, _definition.isInputType)(arg.type)) {
              context.reportError(
                "The type of @"
                  .concat(directive.name, "(")
                  .concat(arg.name, ":) must be Input Type ") +
                  "but got: ".concat((0, _inspect.default)(arg.type), "."),
                arg.astNode
              );
            }

            if (
              (0, _definition.isRequiredArgument)(arg) &&
              arg.deprecationReason != null
            ) {
              var _arg$astNode;

              context.reportError(
                "Required argument @"
                  .concat(directive.name, "(")
                  .concat(arg.name, ":) cannot be deprecated."),
                [
                  getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
                  (_arg$astNode = arg.astNode) === null ||
                  _arg$astNode === void 0
                    ? void 0
                    : _arg$astNode.type
                ]
              );
            }
          }
        }
      }

      function validateName(context, node) {
        // Ensure names are valid, however introspection types opt out.
        var error = (0, _assertValidName.isValidNameError)(node.name);

        if (error) {
          context.addError(
            (0, _locatedError.locatedError)(error, node.astNode)
          );
        }
      }

      function validateTypes(context) {
        var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(
          context
        );
        var typeMap = context.schema.getTypeMap();

        for (
          var _i8 = 0, _objectValues2 = (0, _objectValues5.default)(typeMap);
          _i8 < _objectValues2.length;
          _i8++
        ) {
          var type = _objectValues2[_i8];

          // Ensure all provided types are in fact GraphQL type.
          if (!(0, _definition.isNamedType)(type)) {
            context.reportError(
              "Expected GraphQL named type but got: ".concat(
                (0, _inspect.default)(type),
                "."
              ),
              type.astNode
            );
            continue;
          } // Ensure it is named correctly (excluding introspection types).

          if (!(0, _introspection.isIntrospectionType)(type)) {
            validateName(context, type);
          }

          if ((0, _definition.isObjectType)(type)) {
            // Ensure fields are valid
            validateFields(context, type); // Ensure objects implement the interfaces they claim to.

            validateInterfaces(context, type);
          } else if ((0, _definition.isInterfaceType)(type)) {
            // Ensure fields are valid.
            validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

            validateInterfaces(context, type);
          } else if ((0, _definition.isUnionType)(type)) {
            // Ensure Unions include valid member types.
            validateUnionMembers(context, type);
          } else if ((0, _definition.isEnumType)(type)) {
            // Ensure Enums have valid values.
            validateEnumValues(context, type);
          } else if ((0, _definition.isInputObjectType)(type)) {
            // Ensure Input Object fields are valid.
            validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

            validateInputObjectCircularRefs(type);
          }
        }
      }

      function validateFields(context, type) {
        var fields = (0, _objectValues5.default)(type.getFields()); // Objects and Interfaces both must define one or more fields.

        if (fields.length === 0) {
          context.reportError(
            "Type ".concat(type.name, " must define one or more fields."),
            getAllNodes(type)
          );
        }

        for (var _i10 = 0; _i10 < fields.length; _i10++) {
          var field = fields[_i10];
          // Ensure they are named correctly.
          validateName(context, field); // Ensure the type is an output type

          if (!(0, _definition.isOutputType)(field.type)) {
            var _field$astNode;

            context.reportError(
              "The type of "
                .concat(type.name, ".")
                .concat(field.name, " must be Output Type ") +
                "but got: ".concat((0, _inspect.default)(field.type), "."),
              (_field$astNode = field.astNode) === null ||
                _field$astNode === void 0
                ? void 0
                : _field$astNode.type
            );
          } // Ensure the arguments are valid

          for (
            var _i12 = 0, _field$args2 = field.args;
            _i12 < _field$args2.length;
            _i12++
          ) {
            var arg = _field$args2[_i12];
            var argName = arg.name; // Ensure they are named correctly.

            validateName(context, arg); // Ensure the type is an input type

            if (!(0, _definition.isInputType)(arg.type)) {
              var _arg$astNode2;

              context.reportError(
                "The type of "
                  .concat(type.name, ".")
                  .concat(field.name, "(")
                  .concat(argName, ":) must be Input ") +
                  "Type but got: ".concat((0, _inspect.default)(arg.type), "."),
                (_arg$astNode2 = arg.astNode) === null ||
                  _arg$astNode2 === void 0
                  ? void 0
                  : _arg$astNode2.type
              );
            }

            if (
              (0, _definition.isRequiredArgument)(arg) &&
              arg.deprecationReason != null
            ) {
              var _arg$astNode3;

              context.reportError(
                "Required argument "
                  .concat(type.name, ".")
                  .concat(field.name, "(")
                  .concat(argName, ":) cannot be deprecated."),
                [
                  getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
                  (_arg$astNode3 = arg.astNode) === null ||
                  _arg$astNode3 === void 0
                    ? void 0
                    : _arg$astNode3.type
                ]
              );
            }
          }
        }
      }

      function validateInterfaces(context, type) {
        var ifaceTypeNames = Object.create(null);

        for (
          var _i14 = 0, _type$getInterfaces2 = type.getInterfaces();
          _i14 < _type$getInterfaces2.length;
          _i14++
        ) {
          var iface = _type$getInterfaces2[_i14];

          if (!(0, _definition.isInterfaceType)(iface)) {
            context.reportError(
              "Type ".concat(
                (0, _inspect.default)(type),
                " must only implement Interface types, "
              ) +
                "it cannot implement ".concat(
                  (0, _inspect.default)(iface),
                  "."
                ),
              getAllImplementsInterfaceNodes(type, iface)
            );
            continue;
          }

          if (type === iface) {
            context.reportError(
              "Type ".concat(
                type.name,
                " cannot implement itself because it would create a circular reference."
              ),
              getAllImplementsInterfaceNodes(type, iface)
            );
            continue;
          }

          if (ifaceTypeNames[iface.name]) {
            context.reportError(
              "Type "
                .concat(type.name, " can only implement ")
                .concat(iface.name, " once."),
              getAllImplementsInterfaceNodes(type, iface)
            );
            continue;
          }

          ifaceTypeNames[iface.name] = true;
          validateTypeImplementsAncestors(context, type, iface);
          validateTypeImplementsInterface(context, type, iface);
        }
      }

      function validateTypeImplementsInterface(context, type, iface) {
        var typeFieldMap = type.getFields(); // Assert each interface field is implemented.

        for (
          var _i16 = 0,
            _objectValues4 = (0, _objectValues5.default)(iface.getFields());
          _i16 < _objectValues4.length;
          _i16++
        ) {
          var ifaceField = _objectValues4[_i16];
          var fieldName = ifaceField.name;
          var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

          if (!typeField) {
            context.reportError(
              "Interface field "
                .concat(iface.name, ".")
                .concat(fieldName, " expected but ")
                .concat(type.name, " does not provide it."),
              [ifaceField.astNode].concat(getAllNodes(type))
            );
            continue;
          } // Assert interface field type is satisfied by type field type, by being
          // a valid subtype. (covariant)

          if (
            !(0, _typeComparators.isTypeSubTypeOf)(
              context.schema,
              typeField.type,
              ifaceField.type
            )
          ) {
            var _ifaceField$astNode, _typeField$astNode;

            context.reportError(
              "Interface field "
                .concat(iface.name, ".")
                .concat(fieldName, " expects type ") +
                ""
                  .concat((0, _inspect.default)(ifaceField.type), " but ")
                  .concat(type.name, ".")
                  .concat(fieldName, " ") +
                "is type ".concat((0, _inspect.default)(typeField.type), "."),
              [
                // istanbul ignore next (TODO need to write coverage tests)
                (_ifaceField$astNode = ifaceField.astNode) === null ||
                _ifaceField$astNode === void 0
                  ? void 0
                  : _ifaceField$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
                (_typeField$astNode = typeField.astNode) === null ||
                _typeField$astNode === void 0
                  ? void 0
                  : _typeField$astNode.type
              ]
            );
          } // Assert each interface field arg is implemented.

          var _loop = function _loop(_i18, _ifaceField$args2) {
            var ifaceArg = _ifaceField$args2[_i18];
            var argName = ifaceArg.name;
            var typeArg = (0, _find.default)(typeField.args, function(arg) {
              return arg.name === argName;
            }); // Assert interface field arg exists on object field.

            if (!typeArg) {
              context.reportError(
                "Interface field argument "
                  .concat(iface.name, ".")
                  .concat(fieldName, "(")
                  .concat(argName, ":) expected but ")
                  .concat(type.name, ".")
                  .concat(fieldName, " does not provide it."),
                [ifaceArg.astNode, typeField.astNode]
              );
              return "continue";
            } // Assert interface field arg type matches object field arg type.
            // (invariant)
            // TODO: change to contravariant?

            if (
              !(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)
            ) {
              var _ifaceArg$astNode, _typeArg$astNode;

              context.reportError(
                "Interface field argument "
                  .concat(iface.name, ".")
                  .concat(fieldName, "(")
                  .concat(argName, ":) ") +
                  "expects type ".concat(
                    (0, _inspect.default)(ifaceArg.type),
                    " but "
                  ) +
                  ""
                    .concat(type.name, ".")
                    .concat(fieldName, "(")
                    .concat(argName, ":) is type ") +
                  "".concat((0, _inspect.default)(typeArg.type), "."),
                [
                  // istanbul ignore next (TODO need to write coverage tests)
                  (_ifaceArg$astNode = ifaceArg.astNode) === null ||
                  _ifaceArg$astNode === void 0
                    ? void 0
                    : _ifaceArg$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
                  (_typeArg$astNode = typeArg.astNode) === null ||
                  _typeArg$astNode === void 0
                    ? void 0
                    : _typeArg$astNode.type
                ]
              );
            } // TODO: validate default values?
          };

          for (
            var _i18 = 0, _ifaceField$args2 = ifaceField.args;
            _i18 < _ifaceField$args2.length;
            _i18++
          ) {
            var _ret = _loop(_i18, _ifaceField$args2);

            if (_ret === "continue") continue;
          } // Assert additional arguments must not be required.

          var _loop2 = function _loop2(_i20, _typeField$args2) {
            var typeArg = _typeField$args2[_i20];
            var argName = typeArg.name;
            var ifaceArg = (0, _find.default)(ifaceField.args, function(arg) {
              return arg.name === argName;
            });

            if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
              context.reportError(
                "Object field "
                  .concat(type.name, ".")
                  .concat(fieldName, " includes required argument ")
                  .concat(argName, " that is missing from the Interface field ")
                  .concat(iface.name, ".")
                  .concat(fieldName, "."),
                [typeArg.astNode, ifaceField.astNode]
              );
            }
          };

          for (
            var _i20 = 0, _typeField$args2 = typeField.args;
            _i20 < _typeField$args2.length;
            _i20++
          ) {
            _loop2(_i20, _typeField$args2);
          }
        }
      }

      function validateTypeImplementsAncestors(context, type, iface) {
        var ifaceInterfaces = type.getInterfaces();

        for (
          var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces();
          _i22 < _iface$getInterfaces2.length;
          _i22++
        ) {
          var transitive = _iface$getInterfaces2[_i22];

          if (ifaceInterfaces.indexOf(transitive) === -1) {
            context.reportError(
              transitive === type
                ? "Type "
                    .concat(type.name, " cannot implement ")
                    .concat(
                      iface.name,
                      " because it would create a circular reference."
                    )
                : "Type "
                    .concat(type.name, " must implement ")
                    .concat(transitive.name, " because it is implemented by ")
                    .concat(iface.name, "."),
              [].concat(
                getAllImplementsInterfaceNodes(iface, transitive),
                getAllImplementsInterfaceNodes(type, iface)
              )
            );
          }
        }
      }

      function validateUnionMembers(context, union) {
        var memberTypes = union.getTypes();

        if (memberTypes.length === 0) {
          context.reportError(
            "Union type ".concat(
              union.name,
              " must define one or more member types."
            ),
            getAllNodes(union)
          );
        }

        var includedTypeNames = Object.create(null);

        for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {
          var memberType = memberTypes[_i24];

          if (includedTypeNames[memberType.name]) {
            context.reportError(
              "Union type "
                .concat(union.name, " can only include type ")
                .concat(memberType.name, " once."),
              getUnionMemberTypeNodes(union, memberType.name)
            );
            continue;
          }

          includedTypeNames[memberType.name] = true;

          if (!(0, _definition.isObjectType)(memberType)) {
            context.reportError(
              "Union type ".concat(
                union.name,
                " can only include Object types, "
              ) +
                "it cannot include ".concat(
                  (0, _inspect.default)(memberType),
                  "."
                ),
              getUnionMemberTypeNodes(union, String(memberType))
            );
          }
        }
      }

      function validateEnumValues(context, enumType) {
        var enumValues = enumType.getValues();

        if (enumValues.length === 0) {
          context.reportError(
            "Enum type ".concat(
              enumType.name,
              " must define one or more values."
            ),
            getAllNodes(enumType)
          );
        }

        for (var _i26 = 0; _i26 < enumValues.length; _i26++) {
          var enumValue = enumValues[_i26];
          var valueName = enumValue.name; // Ensure valid name.

          validateName(context, enumValue);

          if (
            valueName === "true" ||
            valueName === "false" ||
            valueName === "null"
          ) {
            context.reportError(
              "Enum type "
                .concat(enumType.name, " cannot include value: ")
                .concat(valueName, "."),
              enumValue.astNode
            );
          }
        }
      }

      function validateInputFields(context, inputObj) {
        var fields = (0, _objectValues5.default)(inputObj.getFields());

        if (fields.length === 0) {
          context.reportError(
            "Input Object type ".concat(
              inputObj.name,
              " must define one or more fields."
            ),
            getAllNodes(inputObj)
          );
        } // Ensure the arguments are valid

        for (var _i28 = 0; _i28 < fields.length; _i28++) {
          var field = fields[_i28];
          // Ensure they are named correctly.
          validateName(context, field); // Ensure the type is an input type

          if (!(0, _definition.isInputType)(field.type)) {
            var _field$astNode2;

            context.reportError(
              "The type of "
                .concat(inputObj.name, ".")
                .concat(field.name, " must be Input Type ") +
                "but got: ".concat((0, _inspect.default)(field.type), "."),
              (_field$astNode2 = field.astNode) === null ||
                _field$astNode2 === void 0
                ? void 0
                : _field$astNode2.type
            );
          }

          if (
            (0, _definition.isRequiredInputField)(field) &&
            field.deprecationReason != null
          ) {
            var _field$astNode3;

            context.reportError(
              "Required input field "
                .concat(inputObj.name, ".")
                .concat(field.name, " cannot be deprecated."),
              [
                getDeprecatedDirectiveNode(field.astNode), // istanbul ignore next (TODO need to write coverage tests)
                (_field$astNode3 = field.astNode) === null ||
                _field$astNode3 === void 0
                  ? void 0
                  : _field$astNode3.type
              ]
            );
          }
        }
      }

      function createInputObjectCircularRefsValidator(context) {
        // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
        // Tracks already visited types to maintain O(N) and to ensure that cycles
        // are not redundantly reported.
        var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

        var fieldPath = []; // Position in the type path

        var fieldPathIndexByTypeName = Object.create(null);
        return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
        // It does not terminate when a cycle was found but continues to explore
        // the graph to find all possible cycles.

        function detectCycleRecursive(inputObj) {
          if (visitedTypes[inputObj.name]) {
            return;
          }

          visitedTypes[inputObj.name] = true;
          fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
          var fields = (0, _objectValues5.default)(inputObj.getFields());

          for (var _i30 = 0; _i30 < fields.length; _i30++) {
            var field = fields[_i30];

            if (
              (0, _definition.isNonNullType)(field.type) &&
              (0, _definition.isInputObjectType)(field.type.ofType)
            ) {
              var fieldType = field.type.ofType;
              var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
              fieldPath.push(field);

              if (cycleIndex === undefined) {
                detectCycleRecursive(fieldType);
              } else {
                var cyclePath = fieldPath.slice(cycleIndex);
                var pathStr = cyclePath
                  .map(function(fieldObj) {
                    return fieldObj.name;
                  })
                  .join(".");
                context.reportError(
                  'Cannot reference Input Object "'
                    .concat(
                      fieldType.name,
                      '" within itself through a series of non-null fields: "'
                    )
                    .concat(pathStr, '".'),
                  cyclePath.map(function(fieldObj) {
                    return fieldObj.astNode;
                  })
                );
              }

              fieldPath.pop();
            }
          }

          fieldPathIndexByTypeName[inputObj.name] = undefined;
        }
      }

      function getAllNodes(object) {
        var astNode = object.astNode,
          extensionASTNodes = object.extensionASTNodes;
        return astNode
          ? extensionASTNodes
            ? [astNode].concat(extensionASTNodes)
            : [astNode]
          : extensionASTNodes !== null && extensionASTNodes !== void 0
          ? extensionASTNodes
          : [];
      }

      function getAllSubNodes(object, getter) {
        var subNodes = [];

        for (
          var _i32 = 0, _getAllNodes2 = getAllNodes(object);
          _i32 < _getAllNodes2.length;
          _i32++
        ) {
          var _getter;

          var node = _getAllNodes2[_i32];
          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
          subNodes = subNodes.concat(
            (_getter = getter(node)) !== null && _getter !== void 0
              ? _getter
              : []
          );
        }

        return subNodes;
      }

      function getAllImplementsInterfaceNodes(type, iface) {
        return getAllSubNodes(type, function(typeNode) {
          return typeNode.interfaces;
        }).filter(function(ifaceNode) {
          return ifaceNode.name.value === iface.name;
        });
      }

      function getUnionMemberTypeNodes(union, typeName) {
        return getAllSubNodes(union, function(unionNode) {
          return unionNode.types;
        }).filter(function(typeNode) {
          return typeNode.name.value === typeName;
        });
      }

      function getDeprecatedDirectiveNode(definitionNode) {
        var _definitionNode$direc;

        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        return definitionNode === null || definitionNode === void 0
          ? void 0
          : (_definitionNode$direc = definitionNode.directives) === null ||
            _definitionNode$direc === void 0
          ? void 0
          : _definitionNode$direc.find(function(node) {
              return (
                node.name.value === _directives.GraphQLDeprecatedDirective.name
              );
            });
      }

      /***/
    },

    /***/ QO3R: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var $isNaN =
        Number.isNaN ||
        function(a) {
          return a !== a;
        };

      module.exports =
        Number.isFinite ||
        function(x) {
          return (
            typeof x === "number" &&
            !$isNaN(x) &&
            x !== Infinity &&
            x !== -Infinity
          );
        };

      /***/
    },

    /***/ Qmaf: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueOperationTypesRule = UniqueOperationTypesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique operation types
       *
       * A GraphQL document is only valid if it has only one type per operation.
       */
      function UniqueOperationTypesRule(context) {
        var schema = context.getSchema();
        var definedOperationTypes = Object.create(null);
        var existingOperationTypes = schema
          ? {
              query: schema.getQueryType(),
              mutation: schema.getMutationType(),
              subscription: schema.getSubscriptionType()
            }
          : {};
        return {
          SchemaDefinition: checkOperationTypes,
          SchemaExtension: checkOperationTypes
        };

        function checkOperationTypes(node) {
          var _node$operationTypes;

          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
          var operationTypesNodes =
            (_node$operationTypes = node.operationTypes) !== null &&
            _node$operationTypes !== void 0
              ? _node$operationTypes
              : [];

          for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {
            var operationType = operationTypesNodes[_i2];
            var operation = operationType.operation;
            var alreadyDefinedOperationType = definedOperationTypes[operation];

            if (existingOperationTypes[operation]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "Type for ".concat(
                    operation,
                    " already defined in the schema. It cannot be redefined."
                  ),
                  operationType
                )
              );
            } else if (alreadyDefinedOperationType) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "There can be only one ".concat(
                    operation,
                    " type in schema."
                  ),
                  [alreadyDefinedOperationType, operationType]
                )
              );
            } else {
              definedOperationTypes[operation] = operationType;
            }
          }

          return false;
        }
      }

      /***/
    },

    /***/ R1Ah: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "responsePathAsArray", {
        enumerable: true,
        get: function get() {
          return _Path.pathToArray;
        }
      });
      Object.defineProperty(exports, "execute", {
        enumerable: true,
        get: function get() {
          return _execute.execute;
        }
      });
      Object.defineProperty(exports, "executeSync", {
        enumerable: true,
        get: function get() {
          return _execute.executeSync;
        }
      });
      Object.defineProperty(exports, "defaultFieldResolver", {
        enumerable: true,
        get: function get() {
          return _execute.defaultFieldResolver;
        }
      });
      Object.defineProperty(exports, "defaultTypeResolver", {
        enumerable: true,
        get: function get() {
          return _execute.defaultTypeResolver;
        }
      });
      Object.defineProperty(exports, "getDirectiveValues", {
        enumerable: true,
        get: function get() {
          return _values.getDirectiveValues;
        }
      });

      var _Path = __webpack_require__("Z7K8");

      var _execute = __webpack_require__("TcFd");

      var _values = __webpack_require__("aQB7");

      /***/
    },

    /***/ R1IW: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DirectiveLocation = void 0;

      /**
       * The set of allowed directive location values.
       */
      var DirectiveLocation = Object.freeze({
        // Request Definitions
        QUERY: "QUERY",
        MUTATION: "MUTATION",
        SUBSCRIPTION: "SUBSCRIPTION",
        FIELD: "FIELD",
        FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
        FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
        INLINE_FRAGMENT: "INLINE_FRAGMENT",
        VARIABLE_DEFINITION: "VARIABLE_DEFINITION",
        // Type System Definitions
        SCHEMA: "SCHEMA",
        SCALAR: "SCALAR",
        OBJECT: "OBJECT",
        FIELD_DEFINITION: "FIELD_DEFINITION",
        ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
        INTERFACE: "INTERFACE",
        UNION: "UNION",
        ENUM: "ENUM",
        ENUM_VALUE: "ENUM_VALUE",
        INPUT_OBJECT: "INPUT_OBJECT",
        INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
      });
      /**
       * The enum type representing the directive location values.
       */

      exports.DirectiveLocation = DirectiveLocation;

      /***/
    },

    /***/ RIqP: /***/ function(module, exports, __webpack_require__) {
      var arrayWithoutHoles = __webpack_require__("Ijbi");

      var iterableToArray = __webpack_require__("EbDI");

      var unsupportedIterableToArray = __webpack_require__("ZhPi");

      var nonIterableSpread = __webpack_require__("Bnag");

      function _toConsumableArray(arr) {
        return (
          arrayWithoutHoles(arr) ||
          iterableToArray(arr) ||
          unsupportedIterableToArray(arr) ||
          nonIterableSpread()
        );
      }

      module.exports = _toConsumableArray;

      /***/
    },

    /***/ RWgL: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var DefineOwnProperty = __webpack_require__("KPrL");

      var FromPropertyDescriptor = __webpack_require__("hYbJ");
      var OrdinaryGetOwnProperty = __webpack_require__("EZ6x");
      var IsDataDescriptor = __webpack_require__("ayMG");
      var IsExtensible = __webpack_require__("URYG");
      var IsPropertyKey = __webpack_require__("ml7t");
      var SameValue = __webpack_require__("tS0h");
      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-createdataproperty

      module.exports = function CreateDataProperty(O, P, V) {
        if (Type(O) !== "Object") {
          throw new $TypeError("Assertion failed: Type(O) is not Object");
        }
        if (!IsPropertyKey(P)) {
          throw new $TypeError(
            "Assertion failed: IsPropertyKey(P) is not true"
          );
        }
        var oldDesc = OrdinaryGetOwnProperty(O, P);
        var extensible = !oldDesc || IsExtensible(O);
        var immutable =
          oldDesc && (!oldDesc["[[Writable]]"] || !oldDesc["[[Configurable]]"]);
        if (immutable || !extensible) {
          return false;
        }
        return DefineOwnProperty(
          IsDataDescriptor,
          SameValue,
          FromPropertyDescriptor,
          O,
          P,
          {
            "[[Configurable]]": true,
            "[[Enumerable]]": true,
            "[[Value]]": V,
            "[[Writable]]": true
          }
        );
      };

      /***/
    },

    /***/ RdJF: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const utils = __webpack_require__("kOHh");
      const graphql = __webpack_require__("uKhV");
      const schema = __webpack_require__("HnjU");

      /**
       * Deep merges multiple resolver definition objects into a single definition.
       * @param resolversDefinitions Resolver definitions to be merged
       * @param options Additional options
       *
       * ```js
       * const { mergeResolvers } = require('@graphql-tools/merge');
       * const clientResolver = require('./clientResolver');
       * const productResolver = require('./productResolver');
       *
       * const resolvers = mergeResolvers([
       *  clientResolver,
       *  productResolver,
       * ]);
       * ```
       *
       * If you don't want to manually create the array of resolver objects, you can
       * also use this function along with loadFiles:
       *
       * ```js
       * const path = require('path');
       * const { mergeResolvers } = require('@graphql-tools/merge');
       * const { loadFilesSync } = require('@graphql-tools/load-files');
       *
       * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));
       *
       * const resolvers = mergeResolvers(resolversArray)
       * ```
       */
      function mergeResolvers(resolversDefinitions, options) {
        if (!resolversDefinitions || resolversDefinitions.length === 0) {
          return {};
        }
        if (resolversDefinitions.length === 1) {
          const singleDefinition = resolversDefinitions[0];
          if (Array.isArray(singleDefinition)) {
            return mergeResolvers(singleDefinition);
          }
          return singleDefinition;
        }
        const resolversFactories = new Array();
        const resolvers = new Array();
        for (let resolversDefinition of resolversDefinitions) {
          if (Array.isArray(resolversDefinition)) {
            resolversDefinition = mergeResolvers(resolversDefinition);
          }
          if (typeof resolversDefinition === "function") {
            resolversFactories.push(resolversDefinition);
          } else if (typeof resolversDefinition === "object") {
            resolvers.push(resolversDefinition);
          }
        }
        let result = {};
        if (resolversFactories.length) {
          result = (...args) => {
            const resultsOfFactories = resolversFactories.map(factory =>
              factory(...args)
            );
            return resolvers
              .concat(resultsOfFactories)
              .reduce(utils.mergeDeep, {});
          };
        } else {
          result = resolvers.reduce(utils.mergeDeep, {});
        }
        if (options && options.exclusions) {
          for (const exclusion of options.exclusions) {
            const [typeName, fieldName] = exclusion.split(".");
            if (!fieldName || fieldName === "*") {
              delete result[typeName];
            } else if (result[typeName]) {
              delete result[typeName][fieldName];
            }
          }
        }
        return result;
      }

      function mergeArguments(args1, args2, config) {
        const result = deduplicateArguments(
          [].concat(args2, args1).filter(a => a)
        );
        if (config && config.sort) {
          result.sort(utils.compareNodes);
        }
        return result;
      }
      function deduplicateArguments(args) {
        return args.reduce((acc, current) => {
          const dup = acc.find(arg => arg.name.value === current.name.value);
          if (!dup) {
            return acc.concat([current]);
          }
          return acc;
        }, []);
      }

      let commentsRegistry = {};
      function resetComments() {
        commentsRegistry = {};
      }
      function collectComment(node) {
        const entityName = node.name.value;
        pushComment(node, entityName);
        switch (node.kind) {
          case "EnumTypeDefinition":
            node.values.forEach(value => {
              pushComment(value, entityName, value.name.value);
            });
            break;
          case "ObjectTypeDefinition":
          case "InputObjectTypeDefinition":
          case "InterfaceTypeDefinition":
            if (node.fields) {
              node.fields.forEach(field => {
                pushComment(field, entityName, field.name.value);
                if (isFieldDefinitionNode(field) && field.arguments) {
                  field.arguments.forEach(arg => {
                    pushComment(
                      arg,
                      entityName,
                      field.name.value,
                      arg.name.value
                    );
                  });
                }
              });
            }
            break;
        }
      }
      function pushComment(node, entity, field, argument) {
        const comment = graphql.getDescription(node, {
          commentDescriptions: true
        });
        if (typeof comment !== "string" || comment.length === 0) {
          return;
        }
        const keys = [entity];
        if (field) {
          keys.push(field);
          if (argument) {
            keys.push(argument);
          }
        }
        const path = keys.join(".");
        if (!commentsRegistry[path]) {
          commentsRegistry[path] = [];
        }
        commentsRegistry[path].push(comment);
      }
      function printComment(comment) {
        return "\n# " + comment.replace(/\n/g, "\n# ");
      }
      /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      /**
       * NOTE: ==> This file has been modified just to add comments to the printed AST
       * This is a temp measure, we will move to using the original non modified printer.js ASAP.
       */
      // import { visit, VisitFn } from 'graphql/language/visitor';
      /**
       * Given maybeArray, print an empty string if it is null or empty, otherwise
       * print all items together separated by separator if provided
       */
      function join(maybeArray, separator) {
        return maybeArray
          ? maybeArray.filter(x => x).join(separator || "")
          : "";
      }
      function addDescription(cb) {
        return (node, _key, _parent, path, ancestors) => {
          const keys = [];
          const parent = path.reduce((prev, key) => {
            if (["fields", "arguments", "values"].includes(key)) {
              keys.push(prev.name.value);
            }
            return prev[key];
          }, ancestors[0]);
          const key = [...keys, parent.name.value].join(".");
          const items = [];
          if (commentsRegistry[key]) {
            items.push(...commentsRegistry[key]);
          }
          return join(
            [...items.map(printComment), node.description, cb(node)],
            "\n"
          );
        };
      }
      function indent(maybeString) {
        return maybeString && `  ${maybeString.replace(/\n/g, "\n  ")}`;
      }
      /**
       * Given array, print each item on its own line, wrapped in an
       * indented "{ }" block.
       */
      function block(array) {
        return array && array.length !== 0
          ? `{\n${indent(join(array, "\n"))}\n}`
          : "";
      }
      /**
       * If maybeString is not null or empty, then wrap with start and end, otherwise
       * print an empty string.
       */
      function wrap(start, maybeString, end) {
        return maybeString ? start + maybeString + (end || "") : "";
      }
      /**
       * Print a block string in the indented block form by adding a leading and
       * trailing blank line. However, if a block string starts with whitespace and is
       * a single-line, adding a leading blank line would strip that whitespace.
       */
      function printBlockString(value, isDescription) {
        const escaped = value.replace(/"""/g, '\\"""');
        return (value[0] === " " || value[0] === "\t") &&
          value.indexOf("\n") === -1
          ? `"""${escaped.replace(/"$/, '"\n')}"""`
          : `"""\n${isDescription ? escaped : indent(escaped)}\n"""`;
      }
      /**
       * Converts an AST into a string, using one set of reasonable
       * formatting rules.
       */
      function printWithComments(ast) {
        return graphql.visit(ast, {
          leave: {
            Name: node => node.value,
            Variable: node => `$${node.name}`,
            // Document
            Document: node =>
              `${node.definitions
                .map(defNode => `${defNode}\n${defNode[0] === "#" ? "" : "\n"}`)
                .join("")
                .trim()}\n`,
            OperationTypeDefinition: node => `${node.operation}: ${node.type}`,
            VariableDefinition: ({ variable, type, defaultValue }) =>
              `${variable}: ${type}${wrap(" = ", defaultValue)}`,
            SelectionSet: ({ selections }) => block(selections),
            Field: ({
              alias,
              name,
              arguments: args,
              directives,
              selectionSet
            }) =>
              join(
                [
                  wrap("", alias, ": ") +
                    name +
                    wrap("(", join(args, ", "), ")"),
                  join(directives, " "),
                  selectionSet
                ],
                "  "
              ),
            Argument: addDescription(({ name, value }) => `${name}: ${value}`),
            // Value
            IntValue: ({ value }) => value,
            FloatValue: ({ value }) => value,
            StringValue: ({ value, block: isBlockString }, key) =>
              isBlockString
                ? printBlockString(value, key === "description")
                : JSON.stringify(value),
            BooleanValue: ({ value }) => (value ? "true" : "false"),
            NullValue: () => "null",
            EnumValue: ({ value }) => value,
            ListValue: ({ values }) => `[${join(values, ", ")}]`,
            ObjectValue: ({ fields }) => `{${join(fields, ", ")}}`,
            ObjectField: ({ name, value }) => `${name}: ${value}`,
            // Directive
            Directive: ({ name, arguments: args }) =>
              `@${name}${wrap("(", join(args, ", "), ")")}`,
            // Type
            NamedType: ({ name }) => name,
            ListType: ({ type }) => `[${type}]`,
            NonNullType: ({ type }) => `${type}!`,
            // Type System Definitions
            SchemaDefinition: ({ directives, operationTypes }) =>
              join(
                ["schema", join(directives, " "), block(operationTypes)],
                " "
              ),
            ScalarTypeDefinition: addDescription(({ name, directives }) =>
              join(["scalar", name, join(directives, " ")], " ")
            ),
            ObjectTypeDefinition: addDescription(
              ({ name, interfaces, directives, fields }) =>
                join(
                  [
                    "type",
                    name,
                    wrap("implements ", join(interfaces, " & ")),
                    join(directives, " "),
                    block(fields)
                  ],
                  " "
                )
            ),
            FieldDefinition: addDescription(
              ({ name, arguments: args, type, directives }) =>
                `${name + wrap("(", join(args, ", "), ")")}: ${type}${wrap(
                  " ",
                  join(directives, " ")
                )}`
            ),
            InputValueDefinition: addDescription(
              ({ name, type, defaultValue, directives }) =>
                join(
                  [
                    `${name}: ${type}`,
                    wrap("= ", defaultValue),
                    join(directives, " ")
                  ],
                  " "
                )
            ),
            InterfaceTypeDefinition: addDescription(
              ({ name, directives, fields }) =>
                join(
                  ["interface", name, join(directives, " "), block(fields)],
                  " "
                )
            ),
            UnionTypeDefinition: addDescription(({ name, directives, types }) =>
              join(
                [
                  "union",
                  name,
                  join(directives, " "),
                  types && types.length !== 0 ? `= ${join(types, " | ")}` : ""
                ],
                " "
              )
            ),
            EnumTypeDefinition: addDescription(({ name, directives, values }) =>
              join(["enum", name, join(directives, " "), block(values)], " ")
            ),
            EnumValueDefinition: addDescription(({ name, directives }) =>
              join([name, join(directives, " ")], " ")
            ),
            InputObjectTypeDefinition: addDescription(
              ({ name, directives, fields }) =>
                join(["input", name, join(directives, " "), block(fields)], " ")
            ),
            ScalarTypeExtension: ({ name, directives }) =>
              join(["extend scalar", name, join(directives, " ")], " "),
            ObjectTypeExtension: ({ name, interfaces, directives, fields }) =>
              join(
                [
                  "extend type",
                  name,
                  wrap("implements ", join(interfaces, " & ")),
                  join(directives, " "),
                  block(fields)
                ],
                " "
              ),
            InterfaceTypeExtension: ({ name, directives, fields }) =>
              join(
                [
                  "extend interface",
                  name,
                  join(directives, " "),
                  block(fields)
                ],
                " "
              ),
            UnionTypeExtension: ({ name, directives, types }) =>
              join(
                [
                  "extend union",
                  name,
                  join(directives, " "),
                  types && types.length !== 0 ? `= ${join(types, " | ")}` : ""
                ],
                " "
              ),
            EnumTypeExtension: ({ name, directives, values }) =>
              join(
                ["extend enum", name, join(directives, " "), block(values)],
                " "
              ),
            InputObjectTypeExtension: ({ name, directives, fields }) =>
              join(
                ["extend input", name, join(directives, " "), block(fields)],
                " "
              ),
            DirectiveDefinition: addDescription(
              ({ name, arguments: args, locations }) =>
                `directive @${name}${wrap(
                  "(",
                  join(args, ", "),
                  ")"
                )} on ${join(locations, " | ")}`
            )
          }
        });
      }
      function isFieldDefinitionNode(node) {
        return node.kind === "FieldDefinition";
      }

      function directiveAlreadyExists(directivesArr, otherDirective) {
        return !!directivesArr.find(
          directive => directive.name.value === otherDirective.name.value
        );
      }
      function nameAlreadyExists(name, namesArr) {
        return namesArr.some(({ value }) => value === name.value);
      }
      function mergeArguments$1(a1, a2) {
        const result = [...a2];
        for (const argument of a1) {
          const existingIndex = result.findIndex(
            a => a.name.value === argument.name.value
          );
          if (existingIndex > -1) {
            const existingArg = result[existingIndex];
            if (existingArg.value.kind === "ListValue") {
              const source = existingArg.value.values;
              const target = argument.value.values;
              // merge values of two lists
              existingArg.value.values = deduplicateLists(
                source,
                target,
                (targetVal, source) => {
                  const value = targetVal.value;
                  return (
                    !value ||
                    !source.some(sourceVal => sourceVal.value === value)
                  );
                }
              );
            } else {
              existingArg.value = argument.value;
            }
          } else {
            result.push(argument);
          }
        }
        return result;
      }
      function deduplicateDirectives(directives) {
        return directives
          .map((directive, i, all) => {
            const firstAt = all.findIndex(
              d => d.name.value === directive.name.value
            );
            if (firstAt !== i) {
              const dup = all[firstAt];
              directive.arguments = mergeArguments$1(
                directive.arguments,
                dup.arguments
              );
              return null;
            }
            return directive;
          })
          .filter(d => d);
      }
      function mergeDirectives(d1 = [], d2 = [], config) {
        const reverseOrder = config && config.reverseDirectives;
        const asNext = reverseOrder ? d1 : d2;
        const asFirst = reverseOrder ? d2 : d1;
        const result = deduplicateDirectives([...asNext]);
        for (const directive of asFirst) {
          if (directiveAlreadyExists(result, directive)) {
            const existingDirectiveIndex = result.findIndex(
              d => d.name.value === directive.name.value
            );
            const existingDirective = result[existingDirectiveIndex];
            result[existingDirectiveIndex].arguments = mergeArguments$1(
              directive.arguments || [],
              existingDirective.arguments || []
            );
          } else {
            result.push(directive);
          }
        }
        return result;
      }
      function validateInputs(node, existingNode) {
        const printedNode = graphql.print(node);
        const printedExistingNode = graphql.print(existingNode);
        // eslint-disable-next-line
        const leaveInputs = new RegExp("(directive @w*d*)|( on .*$)", "g");
        const sameArguments =
          printedNode.replace(leaveInputs, "") ===
          printedExistingNode.replace(leaveInputs, "");
        if (!sameArguments) {
          throw new Error(
            `Unable to merge GraphQL directive "${node.name.value}". \nExisting directive:  \n\t${printedExistingNode} \nReceived directive: \n\t${printedNode}`
          );
        }
      }
      function mergeDirective(node, existingNode) {
        if (existingNode) {
          validateInputs(node, existingNode);
          return {
            ...node,
            locations: [
              ...existingNode.locations,
              ...node.locations.filter(
                name => !nameAlreadyExists(name, existingNode.locations)
              )
            ]
          };
        }
        return node;
      }
      function deduplicateLists(source, target, filterFn) {
        return source.concat(target.filter(val => filterFn(val, source)));
      }

      function mergeEnumValues(first, second, config) {
        if (
          config === null || config === void 0
            ? void 0
            : config.consistentEnumMerge
        ) {
          const reversed = first;
          first = second;
          second = reversed;
        }
        const enumValueMap = new Map();
        for (const firstValue of first) {
          enumValueMap.set(firstValue.name.value, firstValue);
        }
        for (const secondValue of second) {
          const enumValue = secondValue.name.value;
          if (enumValueMap.has(enumValue)) {
            const firstValue = enumValueMap.get(enumValue);
            firstValue.description =
              secondValue.description || firstValue.description;
            firstValue.directives = mergeDirectives(
              secondValue.directives,
              firstValue.directives
            );
          } else {
            enumValueMap.set(enumValue, secondValue);
          }
        }
        const result = [...enumValueMap.values()];
        if (config && config.sort) {
          result.sort(utils.compareNodes);
        }
        return result;
      }

      function mergeEnum(e1, e2, config) {
        if (e2) {
          return {
            name: e1.name,
            description: e1["description"] || e2["description"],
            kind:
              (config && config.convertExtensions) ||
              e1.kind === "EnumTypeDefinition" ||
              e2.kind === "EnumTypeDefinition"
                ? "EnumTypeDefinition"
                : "EnumTypeExtension",
            loc: e1.loc,
            directives: mergeDirectives(e1.directives, e2.directives, config),
            values: mergeEnumValues(e1.values, e2.values, config)
          };
        }
        return config && config.convertExtensions
          ? {
              ...e1,
              kind: "EnumTypeDefinition"
            }
          : e1;
      }

      function isStringTypes(types) {
        return typeof types === "string";
      }
      function isSourceTypes(types) {
        return types instanceof graphql.Source;
      }
      function extractType(type) {
        let visitedType = type;
        while (
          visitedType.kind === graphql.Kind.LIST_TYPE ||
          visitedType.kind === "NonNullType"
        ) {
          visitedType = visitedType.type;
        }
        return visitedType;
      }
      function isWrappingTypeNode(type) {
        return type.kind !== graphql.Kind.NAMED_TYPE;
      }
      function isListTypeNode(type) {
        return type.kind === graphql.Kind.LIST_TYPE;
      }
      function isNonNullTypeNode(type) {
        return type.kind === graphql.Kind.NON_NULL_TYPE;
      }
      function printTypeNode(type) {
        if (isListTypeNode(type)) {
          return `[${printTypeNode(type.type)}]`;
        }
        if (isNonNullTypeNode(type)) {
          return `${printTypeNode(type.type)}!`;
        }
        return type.name.value;
      }
      (function(CompareVal) {
        CompareVal[(CompareVal["A_SMALLER_THAN_B"] = -1)] = "A_SMALLER_THAN_B";
        CompareVal[(CompareVal["A_EQUALS_B"] = 0)] = "A_EQUALS_B";
        CompareVal[(CompareVal["A_GREATER_THAN_B"] = 1)] = "A_GREATER_THAN_B";
      })(exports.CompareVal || (exports.CompareVal = {}));
      function defaultStringComparator(a, b) {
        if (a < b) return exports.CompareVal.A_SMALLER_THAN_B;
        if (a > b) return exports.CompareVal.A_GREATER_THAN_B;
        return exports.CompareVal.A_EQUALS_B;
      }

      function fieldAlreadyExists(fieldsArr, otherField, config) {
        const result = fieldsArr.find(
          field => field.name.value === otherField.name.value
        );
        if (
          result &&
          !(config === null || config === void 0
            ? void 0
            : config.ignoreFieldConflicts)
        ) {
          const t1 = extractType(result.type);
          const t2 = extractType(otherField.type);
          if (t1.name.value !== t2.name.value) {
            throw new Error(
              `Field "${otherField.name.value}" already defined with a different type. Declared as "${t1.name.value}", but you tried to override with "${t2.name.value}"`
            );
          }
        }
        return !!result;
      }
      function mergeFields(type, f1, f2, config) {
        const result = [...f2];
        for (const field of f1) {
          if (fieldAlreadyExists(result, field, config)) {
            const existing = result.find(
              f => f.name.value === field.name.value
            );
            if (
              !(config === null || config === void 0
                ? void 0
                : config.ignoreFieldConflicts)
            ) {
              if (
                config === null || config === void 0
                  ? void 0
                  : config.throwOnConflict
              ) {
                preventConflicts(type, existing, field, false);
              } else {
                preventConflicts(type, existing, field, true);
              }
              if (
                isNonNullTypeNode(field.type) &&
                !isNonNullTypeNode(existing.type)
              ) {
                existing.type = field.type;
              }
            }
            existing.arguments = mergeArguments(
              field["arguments"] || [],
              existing.arguments || [],
              config
            );
            existing.directives = mergeDirectives(
              field.directives,
              existing.directives,
              config
            );
            existing.description = field.description || existing.description;
          } else {
            result.push(field);
          }
        }
        if (config && config.sort) {
          result.sort(utils.compareNodes);
        }
        if (config && config.exclusions) {
          return result.filter(
            field =>
              !config.exclusions.includes(
                `${type.name.value}.${field.name.value}`
              )
          );
        }
        return result;
      }
      function preventConflicts(type, a, b, ignoreNullability = false) {
        const aType = printTypeNode(a.type);
        const bType = printTypeNode(b.type);
        if (utils.isNotEqual(aType, bType)) {
          if (
            safeChangeForFieldType(a.type, b.type, ignoreNullability) === false
          ) {
            throw new Error(
              `Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`
            );
          }
        }
      }
      function safeChangeForFieldType(
        oldType,
        newType,
        ignoreNullability = false
      ) {
        // both are named
        if (!isWrappingTypeNode(oldType) && !isWrappingTypeNode(newType)) {
          return oldType.toString() === newType.toString();
        }
        // new is non-null
        if (isNonNullTypeNode(newType)) {
          const ofType = isNonNullTypeNode(oldType) ? oldType.type : oldType;
          return safeChangeForFieldType(ofType, newType.type);
        }
        // old is non-null
        if (isNonNullTypeNode(oldType)) {
          return safeChangeForFieldType(newType, oldType, ignoreNullability);
        }
        // old is list
        if (isListTypeNode(oldType)) {
          return (
            (isListTypeNode(newType) &&
              safeChangeForFieldType(oldType.type, newType.type)) ||
            (isNonNullTypeNode(newType) &&
              safeChangeForFieldType(oldType, newType["type"]))
          );
        }
        return false;
      }

      function mergeInputType(node, existingNode, config) {
        if (existingNode) {
          try {
            return {
              name: node.name,
              description: node["description"] || existingNode["description"],
              kind:
                (config && config.convertExtensions) ||
                node.kind === "InputObjectTypeDefinition" ||
                existingNode.kind === "InputObjectTypeDefinition"
                  ? "InputObjectTypeDefinition"
                  : "InputObjectTypeExtension",
              loc: node.loc,
              fields: mergeFields(
                node,
                node.fields,
                existingNode.fields,
                config
              ),
              directives: mergeDirectives(
                node.directives,
                existingNode.directives,
                config
              )
            };
          } catch (e) {
            throw new Error(
              `Unable to merge GraphQL input type "${node.name.value}": ${e.message}`
            );
          }
        }
        return config && config.convertExtensions
          ? {
              ...node,
              kind: "InputObjectTypeDefinition"
            }
          : node;
      }

      function mergeInterface(node, existingNode, config) {
        if (existingNode) {
          try {
            return {
              name: node.name,
              description: node["description"] || existingNode["description"],
              kind:
                (config && config.convertExtensions) ||
                node.kind === "InterfaceTypeDefinition" ||
                existingNode.kind === "InterfaceTypeDefinition"
                  ? "InterfaceTypeDefinition"
                  : "InterfaceTypeExtension",
              loc: node.loc,
              fields: mergeFields(
                node,
                node.fields,
                existingNode.fields,
                config
              ),
              directives: mergeDirectives(
                node.directives,
                existingNode.directives,
                config
              )
            };
          } catch (e) {
            throw new Error(
              `Unable to merge GraphQL interface "${node.name.value}": ${e.message}`
            );
          }
        }
        return config && config.convertExtensions
          ? {
              ...node,
              kind: "InterfaceTypeDefinition"
            }
          : node;
      }

      function alreadyExists(arr, other) {
        return !!arr.find(i => i.name.value === other.name.value);
      }
      function mergeNamedTypeArray(first = [], second = [], config = {}) {
        const result = [
          ...second,
          ...first.filter(d => !alreadyExists(second, d))
        ];
        if (config && config.sort) {
          result.sort(utils.compareNodes);
        }
        return result;
      }

      function mergeType(node, existingNode, config) {
        if (existingNode) {
          try {
            return {
              name: node.name,
              description: node["description"] || existingNode["description"],
              kind:
                (config && config.convertExtensions) ||
                node.kind === "ObjectTypeDefinition" ||
                existingNode.kind === "ObjectTypeDefinition"
                  ? "ObjectTypeDefinition"
                  : "ObjectTypeExtension",
              loc: node.loc,
              fields: mergeFields(
                node,
                node.fields,
                existingNode.fields,
                config
              ),
              directives: mergeDirectives(
                node.directives,
                existingNode.directives,
                config
              ),
              interfaces: mergeNamedTypeArray(
                node.interfaces,
                existingNode.interfaces,
                config
              )
            };
          } catch (e) {
            throw new Error(
              `Unable to merge GraphQL type "${node.name.value}": ${e.message}`
            );
          }
        }
        return config && config.convertExtensions
          ? {
              ...node,
              kind: "ObjectTypeDefinition"
            }
          : node;
      }

      function mergeScalar(node, existingNode, config) {
        if (existingNode) {
          return {
            name: node.name,
            description: node["description"] || existingNode["description"],
            kind:
              (config && config.convertExtensions) ||
              node.kind === "ScalarTypeDefinition" ||
              existingNode.kind === "ScalarTypeDefinition"
                ? "ScalarTypeDefinition"
                : "ScalarTypeExtension",
            loc: node.loc,
            directives: mergeDirectives(
              node.directives,
              existingNode.directives,
              config
            )
          };
        }
        return config && config.convertExtensions
          ? {
              ...node,
              kind: "ScalarTypeDefinition"
            }
          : node;
      }

      function mergeUnion(first, second, config) {
        if (second) {
          return {
            name: first.name,
            description: first["description"] || second["description"],
            directives: mergeDirectives(
              first.directives,
              second.directives,
              config
            ),
            kind:
              (config && config.convertExtensions) ||
              first.kind === "UnionTypeDefinition" ||
              second.kind === "UnionTypeDefinition"
                ? "UnionTypeDefinition"
                : "UnionTypeExtension",
            loc: first.loc,
            types: mergeNamedTypeArray(first.types, second.types, config)
          };
        }
        return config && config.convertExtensions
          ? {
              ...first,
              kind: "UnionTypeDefinition"
            }
          : first;
      }

      const operationTypeDefinitionNodeTypeRootTypeMap = {
        query: "Query",
        mutation: "Mutation",
        subscription: "Subscription"
      };
      function mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {
        const finalOpNodeList = [];
        for (const opNodeType in operationTypeDefinitionNodeTypeRootTypeMap) {
          const opNode =
            opNodeList.find(n => n.operation === opNodeType) ||
            existingOpNodeList.find(n => n.operation === opNodeType);
          if (opNode) {
            finalOpNodeList.push(opNode);
          }
        }
        return finalOpNodeList;
      }
      function mergeSchemaDefs(node, existingNode, config) {
        if (existingNode) {
          return {
            kind:
              node.kind === graphql.Kind.SCHEMA_DEFINITION ||
              existingNode.kind === graphql.Kind.SCHEMA_DEFINITION
                ? graphql.Kind.SCHEMA_DEFINITION
                : graphql.Kind.SCHEMA_EXTENSION,
            description: node["description"] || existingNode["description"],
            directives: mergeDirectives(
              node.directives,
              existingNode.directives,
              config
            ),
            operationTypes: mergeOperationTypes(
              node.operationTypes,
              existingNode.operationTypes
            )
          };
        }
        return (config === null || config === void 0
        ? void 0
        : config.convertExtensions)
          ? {
              ...node,
              kind: graphql.Kind.SCHEMA_EXTENSION
            }
          : node;
      }

      function isNamedDefinitionNode(definitionNode) {
        return "name" in definitionNode;
      }
      const schemaDefSymbol = Symbol("schemaDefSymbol");
      function mergeGraphQLNodes(nodes, config) {
        var _a, _b;
        const mergedResultMap = {};
        for (const nodeDefinition of nodes) {
          if (isNamedDefinitionNode(nodeDefinition)) {
            const name = nodeDefinition.name.value;
            if (
              config === null || config === void 0
                ? void 0
                : config.commentDescriptions
            ) {
              collectComment(nodeDefinition);
            }
            if (
              ((_a =
                config === null || config === void 0
                  ? void 0
                  : config.exclusions) === null || _a === void 0
                ? void 0
                : _a.includes(name + ".*")) ||
              ((_b =
                config === null || config === void 0
                  ? void 0
                  : config.exclusions) === null || _b === void 0
                ? void 0
                : _b.includes(name))
            ) {
              delete mergedResultMap[name];
            } else {
              switch (nodeDefinition.kind) {
                case graphql.Kind.OBJECT_TYPE_DEFINITION:
                case graphql.Kind.OBJECT_TYPE_EXTENSION:
                  mergedResultMap[name] = mergeType(
                    nodeDefinition,
                    mergedResultMap[name],
                    config
                  );
                  break;
                case graphql.Kind.ENUM_TYPE_DEFINITION:
                case graphql.Kind.ENUM_TYPE_EXTENSION:
                  mergedResultMap[name] = mergeEnum(
                    nodeDefinition,
                    mergedResultMap[name],
                    config
                  );
                  break;
                case graphql.Kind.UNION_TYPE_DEFINITION:
                case graphql.Kind.UNION_TYPE_EXTENSION:
                  mergedResultMap[name] = mergeUnion(
                    nodeDefinition,
                    mergedResultMap[name],
                    config
                  );
                  break;
                case graphql.Kind.SCALAR_TYPE_DEFINITION:
                case graphql.Kind.SCALAR_TYPE_EXTENSION:
                  mergedResultMap[name] = mergeScalar(
                    nodeDefinition,
                    mergedResultMap[name],
                    config
                  );
                  break;
                case graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION:
                case graphql.Kind.INPUT_OBJECT_TYPE_EXTENSION:
                  mergedResultMap[name] = mergeInputType(
                    nodeDefinition,
                    mergedResultMap[name],
                    config
                  );
                  break;
                case graphql.Kind.INTERFACE_TYPE_DEFINITION:
                case graphql.Kind.INTERFACE_TYPE_EXTENSION:
                  mergedResultMap[name] = mergeInterface(
                    nodeDefinition,
                    mergedResultMap[name],
                    config
                  );
                  break;
                case graphql.Kind.DIRECTIVE_DEFINITION:
                  mergedResultMap[name] = mergeDirective(
                    nodeDefinition,
                    mergedResultMap[name]
                  );
                  break;
              }
            }
          } else if (
            nodeDefinition.kind === graphql.Kind.SCHEMA_DEFINITION ||
            nodeDefinition.kind === graphql.Kind.SCHEMA_EXTENSION
          ) {
            mergedResultMap[schemaDefSymbol] = mergeSchemaDefs(
              nodeDefinition,
              mergedResultMap[schemaDefSymbol],
              config
            );
          }
        }
        return mergedResultMap;
      }

      function mergeTypeDefs(types, config) {
        resetComments();
        const doc = {
          kind: graphql.Kind.DOCUMENT,
          definitions: mergeGraphQLTypes(types, {
            useSchemaDefinition: true,
            forceSchemaDefinition: false,
            throwOnConflict: false,
            commentDescriptions: false,
            ...config
          })
        };
        let result;
        if (config && config.commentDescriptions) {
          result = printWithComments(doc);
        } else {
          result = doc;
        }
        resetComments();
        return result;
      }
      function visitTypeSources(types, allNodes) {
        for (const type of types) {
          if (type) {
            if (Array.isArray(type)) {
              visitTypeSources(type, allNodes);
            } else if (graphql.isSchema(type)) {
              const documentNode = utils.getDocumentNodeFromSchema(type);
              visitTypeSources(documentNode.definitions, allNodes);
            } else if (isStringTypes(type) || isSourceTypes(type)) {
              const documentNode = graphql.parse(type);
              visitTypeSources(documentNode.definitions, allNodes);
            } else if (graphql.isDefinitionNode(type)) {
              allNodes.push(type);
            } else {
              visitTypeSources(type.definitions, allNodes);
            }
          }
        }
      }
      function mergeGraphQLTypes(types, config) {
        var _a, _b;
        resetComments();
        const allNodes = [];
        visitTypeSources(types, allNodes);
        const mergedNodes = mergeGraphQLNodes(allNodes, config);
        // XXX: right now we don't handle multiple schema definitions
        let schemaDef = mergedNodes[schemaDefSymbol] || {
          kind: graphql.Kind.SCHEMA_DEFINITION,
          operationTypes: []
        };
        if (
          config === null || config === void 0
            ? void 0
            : config.useSchemaDefinition
        ) {
          const operationTypes = schemaDef.operationTypes;
          for (const opTypeDefNodeType in operationTypeDefinitionNodeTypeRootTypeMap) {
            const opTypeDefNode = operationTypes.find(
              operationType => operationType.operation === opTypeDefNodeType
            );
            if (!opTypeDefNode) {
              const existingPossibleRootType =
                mergedNodes[
                  operationTypeDefinitionNodeTypeRootTypeMap[opTypeDefNodeType]
                ];
              if (existingPossibleRootType) {
                operationTypes.push({
                  kind: graphql.Kind.OPERATION_TYPE_DEFINITION,
                  type: {
                    kind: graphql.Kind.NAMED_TYPE,
                    name: existingPossibleRootType.name
                  },
                  operation: opTypeDefNodeType
                });
              }
            }
          }
        }
        if (
          (config === null || config === void 0
            ? void 0
            : config.forceSchemaDefinition) &&
          !((_a =
            schemaDef === null || schemaDef === void 0
              ? void 0
              : schemaDef.operationTypes) === null || _a === void 0
            ? void 0
            : _a.length)
        ) {
          schemaDef = {
            kind: graphql.Kind.SCHEMA_DEFINITION,
            operationTypes: [
              {
                kind: graphql.Kind.OPERATION_TYPE_DEFINITION,
                operation: "query",
                type: {
                  kind: graphql.Kind.NAMED_TYPE,
                  name: {
                    kind: graphql.Kind.NAME,
                    value: "Query"
                  }
                }
              }
            ]
          };
        }
        const mergedNodeDefinitions = Object.values(mergedNodes);
        if (
          (_b = schemaDef.operationTypes) === null || _b === void 0
            ? void 0
            : _b.length
        ) {
          mergedNodeDefinitions.push(schemaDef);
        }
        if (config === null || config === void 0 ? void 0 : config.sort) {
          const sortFn =
            typeof config.sort === "function"
              ? config.sort
              : defaultStringComparator;
          mergedNodeDefinitions.sort((a, b) => {
            var _a, _b;
            return sortFn(
              (_a = a.name) === null || _a === void 0 ? void 0 : _a.value,
              (_b = b.name) === null || _b === void 0 ? void 0 : _b.value
            );
          });
        }
        return mergedNodeDefinitions;
      }

      function travelSchemaPossibleExtensions(schema, hooks) {
        hooks.onSchema(schema);
        const typesMap = schema.getTypeMap();
        for (const [, type] of Object.entries(typesMap)) {
          const isPredefinedScalar =
            graphql.isScalarType(type) && graphql.isSpecifiedScalarType(type);
          const isIntrospection = graphql.isIntrospectionType(type);
          if (isPredefinedScalar || isIntrospection) {
            continue;
          }
          if (graphql.isObjectType(type)) {
            hooks.onObjectType(type);
            const fields = type.getFields();
            for (const [, field] of Object.entries(fields)) {
              hooks.onObjectField(type, field);
              const args = field.args || [];
              for (const arg of args) {
                hooks.onObjectFieldArg(type, field, arg);
              }
            }
          } else if (graphql.isInterfaceType(type)) {
            hooks.onInterface(type);
            const fields = type.getFields();
            for (const [, field] of Object.entries(fields)) {
              hooks.onInterfaceField(type, field);
              const args = field.args || [];
              for (const arg of args) {
                hooks.onInterfaceFieldArg(type, field, arg);
              }
            }
          } else if (graphql.isInputObjectType(type)) {
            hooks.onInputType(type);
            const fields = type.getFields();
            for (const [, field] of Object.entries(fields)) {
              hooks.onInputFieldType(type, field);
            }
          } else if (graphql.isUnionType(type)) {
            hooks.onUnion(type);
          } else if (graphql.isScalarType(type)) {
            hooks.onScalar(type);
          } else if (graphql.isEnumType(type)) {
            hooks.onEnum(type);
            for (const value of type.getValues()) {
              hooks.onEnumValue(type, value);
            }
          }
        }
      }
      function mergeExtensions(extensions) {
        return extensions.reduce(
          (result, extensionObj) =>
            [result, extensionObj].reduce(utils.mergeDeep, {}),
          {}
        );
      }
      function applyExtensionObject(obj, extensions) {
        if (!obj) {
          return;
        }
        obj.extensions = [obj.extensions || {}, extensions || {}].reduce(
          utils.mergeDeep,
          {}
        );
      }
      function applyExtensions(schema, extensions) {
        applyExtensionObject(schema, extensions.schemaExtensions);
        for (const [typeName, data] of Object.entries(extensions.types || {})) {
          const type = schema.getType(typeName);
          if (type) {
            applyExtensionObject(type, data.extensions);
            if (data.type === "object" || data.type === "interface") {
              for (const [fieldName, fieldData] of Object.entries(
                data.fields
              )) {
                const field = type.getFields()[fieldName];
                if (field) {
                  applyExtensionObject(field, fieldData.extensions);
                  for (const [arg, argData] of Object.entries(
                    fieldData.arguments
                  )) {
                    applyExtensionObject(
                      field.args.find(a => a.name === arg),
                      argData
                    );
                  }
                }
              }
            } else if (data.type === "input") {
              for (const [fieldName, fieldData] of Object.entries(
                data.fields
              )) {
                const field = type.getFields()[fieldName];
                applyExtensionObject(field, fieldData.extensions);
              }
            } else if (data.type === "enum") {
              for (const [valueName, valueData] of Object.entries(
                data.values
              )) {
                const value = type.getValue(valueName);
                applyExtensionObject(value, valueData);
              }
            }
          }
        }
        return schema;
      }
      function extractExtensionsFromSchema(schema) {
        const result = {
          schemaExtensions: {},
          types: {}
        };
        travelSchemaPossibleExtensions(schema, {
          onSchema: schema =>
            (result.schemaExtensions = schema.extensions || {}),
          onObjectType: type =>
            (result.types[type.name] = {
              fields: {},
              type: "object",
              extensions: type.extensions || {}
            }),
          onObjectField: (type, field) =>
            (result.types[type.name].fields[field.name] = {
              arguments: {},
              extensions: field.extensions || {}
            }),
          onObjectFieldArg: (type, field, arg) =>
            (result.types[type.name].fields[field.name].arguments[arg.name] =
              arg.extensions || {}),
          onInterface: type =>
            (result.types[type.name] = {
              fields: {},
              type: "interface",
              extensions: type.extensions || {}
            }),
          onInterfaceField: (type, field) =>
            (result.types[type.name].fields[field.name] = {
              arguments: {},
              extensions: field.extensions || {}
            }),
          onInterfaceFieldArg: (type, field, arg) =>
            (result.types[type.name].fields[field.name].arguments[arg.name] =
              arg.extensions || {}),
          onEnum: type =>
            (result.types[type.name] = {
              values: {},
              type: "enum",
              extensions: type.extensions || {}
            }),
          onEnumValue: (type, value) =>
            (result.types[type.name].values[value.name] =
              value.extensions || {}),
          onScalar: type =>
            (result.types[type.name] = {
              type: "scalar",
              extensions: type.extensions || {}
            }),
          onUnion: type =>
            (result.types[type.name] = {
              type: "union",
              extensions: type.extensions || {}
            }),
          onInputType: type =>
            (result.types[type.name] = {
              fields: {},
              type: "input",
              extensions: type.extensions || {}
            }),
          onInputFieldType: (type, field) =>
            (result.types[type.name].fields[field.name] = {
              extensions: field.extensions || {}
            })
        });
        return result;
      }

      const defaultResolverValidationOptions = {
        requireResolversForArgs: "ignore",
        requireResolversForNonScalar: "ignore",
        requireResolversForAllFields: "ignore",
        requireResolversForResolveType: "ignore",
        requireResolversToMatchSchema: "ignore"
      };
      /**
       * Synchronously merges multiple schemas, typeDefinitions and/or resolvers into a single schema.
       * @param config Configuration object
       */
      function mergeSchemas(config) {
        const typeDefs = mergeTypes(config);
        const extractedResolvers = [];
        const extractedExtensions = [];
        for (const schema of config.schemas) {
          extractedResolvers.push(utils.getResolversFromSchema(schema));
          extractedExtensions.push(extractExtensionsFromSchema(schema));
        }
        extractedResolvers.push(...ensureResolvers(config));
        const resolvers = mergeResolvers(extractedResolvers, config);
        const extensions = mergeExtensions(extractedExtensions);
        return makeSchema({ resolvers, typeDefs, extensions }, config);
      }
      /**
       * Synchronously merges multiple schemas, typeDefinitions and/or resolvers into a single schema.
       * @param config Configuration object
       */
      async function mergeSchemasAsync(config) {
        const [typeDefs, resolvers, extensions] = await Promise.all([
          mergeTypes(config),
          Promise.all(
            config.schemas.map(async schema =>
              utils.getResolversFromSchema(schema)
            )
          ).then(extractedResolvers =>
            mergeResolvers(
              [...extractedResolvers, ...ensureResolvers(config)],
              config
            )
          ),
          Promise.all(
            config.schemas.map(async schema =>
              extractExtensionsFromSchema(schema)
            )
          ).then(extractedExtensions => mergeExtensions(extractedExtensions))
        ]);
        return makeSchema({ resolvers, typeDefs, extensions }, config);
      }
      function mergeTypes({ schemas, typeDefs, ...config }) {
        return mergeTypeDefs(
          [...schemas, ...(typeDefs ? utils.asArray(typeDefs) : [])],
          config
        );
      }
      function ensureResolvers(config) {
        return config.resolvers ? utils.asArray(config.resolvers) : [];
      }
      function makeSchema({ resolvers, typeDefs, extensions }, config) {
        let schema$1 =
          typeof typeDefs === "string"
            ? graphql.buildSchema(typeDefs, config)
            : graphql.buildASTSchema(typeDefs, config);
        // add resolvers
        if (resolvers) {
          schema$1 = schema.addResolversToSchema({
            schema: schema$1,
            resolvers,
            resolverValidationOptions: {
              ...defaultResolverValidationOptions,
              ...(config.resolverValidationOptions || {})
            }
          });
        }
        // use logger
        if (config.logger) {
          schema$1 = schema.addErrorLoggingToSchema(schema$1, config.logger);
        }
        // use schema directives
        if (config.schemaDirectives) {
          utils.SchemaDirectiveVisitor.visitSchemaDirectives(
            schema$1,
            config.schemaDirectives
          );
        }
        // extensions
        applyExtensions(schema$1, extensions);
        return schema$1;
      }

      exports.applyExtensions = applyExtensions;
      exports.collectComment = collectComment;
      exports.defaultStringComparator = defaultStringComparator;
      exports.extractExtensionsFromSchema = extractExtensionsFromSchema;
      exports.extractType = extractType;
      exports.isListTypeNode = isListTypeNode;
      exports.isNamedDefinitionNode = isNamedDefinitionNode;
      exports.isNonNullTypeNode = isNonNullTypeNode;
      exports.isSourceTypes = isSourceTypes;
      exports.isStringTypes = isStringTypes;
      exports.isWrappingTypeNode = isWrappingTypeNode;
      exports.mergeArguments = mergeArguments;
      exports.mergeDirective = mergeDirective;
      exports.mergeDirectives = mergeDirectives;
      exports.mergeEnum = mergeEnum;
      exports.mergeEnumValues = mergeEnumValues;
      exports.mergeExtensions = mergeExtensions;
      exports.mergeFields = mergeFields;
      exports.mergeGraphQLNodes = mergeGraphQLNodes;
      exports.mergeGraphQLTypes = mergeGraphQLTypes;
      exports.mergeInputType = mergeInputType;
      exports.mergeInterface = mergeInterface;
      exports.mergeNamedTypeArray = mergeNamedTypeArray;
      exports.mergeResolvers = mergeResolvers;
      exports.mergeScalar = mergeScalar;
      exports.mergeSchemas = mergeSchemas;
      exports.mergeSchemasAsync = mergeSchemasAsync;
      exports.mergeType = mergeType;
      exports.mergeTypeDefs = mergeTypeDefs;
      exports.mergeUnion = mergeUnion;
      exports.printComment = printComment;
      exports.printTypeNode = printTypeNode;
      exports.printWithComments = printWithComments;
      exports.pushComment = pushComment;
      exports.resetComments = resetComments;
      exports.schemaDefSymbol = schemaDefSymbol;
      exports.travelSchemaPossibleExtensions = travelSchemaPossibleExtensions;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ RnBS: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.headerCase = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var capital_case_1 = __webpack_require__("6i1E");
      function headerCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return capital_case_1.capitalCase(
          input,
          tslib_1.__assign({ delimiter: "-" }, options)
        );
      }
      exports.headerCase = headerCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ RqXf: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;

      var _kinds = __webpack_require__("xaK5");

      var _visitor = __webpack_require__("tqCx");

      var _TypeInfo = __webpack_require__("Uh8e");

      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }

      /**
       * An instance of this class is passed as the "this" context to all validators,
       * allowing access to commonly useful contextual information from within a
       * validation rule.
       */
      var ASTValidationContext = /*#__PURE__*/ (function() {
        function ASTValidationContext(ast, onError) {
          this._ast = ast;
          this._fragments = undefined;
          this._fragmentSpreads = new Map();
          this._recursivelyReferencedFragments = new Map();
          this._onError = onError;
        }

        var _proto = ASTValidationContext.prototype;

        _proto.reportError = function reportError(error) {
          this._onError(error);
        };

        _proto.getDocument = function getDocument() {
          return this._ast;
        };

        _proto.getFragment = function getFragment(name) {
          var fragments = this._fragments;

          if (!fragments) {
            this._fragments = fragments = this.getDocument().definitions.reduce(
              function(frags, statement) {
                if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
                  frags[statement.name.value] = statement;
                }

                return frags;
              },
              Object.create(null)
            );
          }

          return fragments[name];
        };

        _proto.getFragmentSpreads = function getFragmentSpreads(node) {
          var spreads = this._fragmentSpreads.get(node);

          if (!spreads) {
            spreads = [];
            var setsToVisit = [node];

            while (setsToVisit.length !== 0) {
              var set = setsToVisit.pop();

              for (
                var _i2 = 0, _set$selections2 = set.selections;
                _i2 < _set$selections2.length;
                _i2++
              ) {
                var selection = _set$selections2[_i2];

                if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                  spreads.push(selection);
                } else if (selection.selectionSet) {
                  setsToVisit.push(selection.selectionSet);
                }
              }
            }

            this._fragmentSpreads.set(node, spreads);
          }

          return spreads;
        };

        _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(
          operation
        ) {
          var fragments = this._recursivelyReferencedFragments.get(operation);

          if (!fragments) {
            fragments = [];
            var collectedNames = Object.create(null);
            var nodesToVisit = [operation.selectionSet];

            while (nodesToVisit.length !== 0) {
              var node = nodesToVisit.pop();

              for (
                var _i4 = 0,
                  _this$getFragmentSpre2 = this.getFragmentSpreads(node);
                _i4 < _this$getFragmentSpre2.length;
                _i4++
              ) {
                var spread = _this$getFragmentSpre2[_i4];
                var fragName = spread.name.value;

                if (collectedNames[fragName] !== true) {
                  collectedNames[fragName] = true;
                  var fragment = this.getFragment(fragName);

                  if (fragment) {
                    fragments.push(fragment);
                    nodesToVisit.push(fragment.selectionSet);
                  }
                }
              }
            }

            this._recursivelyReferencedFragments.set(operation, fragments);
          }

          return fragments;
        };

        return ASTValidationContext;
      })();

      exports.ASTValidationContext = ASTValidationContext;

      var SDLValidationContext = /*#__PURE__*/ (function(
        _ASTValidationContext
      ) {
        _inheritsLoose(SDLValidationContext, _ASTValidationContext);

        function SDLValidationContext(ast, schema, onError) {
          var _this;

          _this = _ASTValidationContext.call(this, ast, onError) || this;
          _this._schema = schema;
          return _this;
        }

        var _proto2 = SDLValidationContext.prototype;

        _proto2.getSchema = function getSchema() {
          return this._schema;
        };

        return SDLValidationContext;
      })(ASTValidationContext);

      exports.SDLValidationContext = SDLValidationContext;

      var ValidationContext = /*#__PURE__*/ (function(_ASTValidationContext2) {
        _inheritsLoose(ValidationContext, _ASTValidationContext2);

        function ValidationContext(schema, ast, typeInfo, onError) {
          var _this2;

          _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
          _this2._schema = schema;
          _this2._typeInfo = typeInfo;
          _this2._variableUsages = new Map();
          _this2._recursiveVariableUsages = new Map();
          return _this2;
        }

        var _proto3 = ValidationContext.prototype;

        _proto3.getSchema = function getSchema() {
          return this._schema;
        };

        _proto3.getVariableUsages = function getVariableUsages(node) {
          var usages = this._variableUsages.get(node);

          if (!usages) {
            var newUsages = [];
            var typeInfo = new _TypeInfo.TypeInfo(this._schema);
            (0, _visitor.visit)(
              node,
              (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
                VariableDefinition: function VariableDefinition() {
                  return false;
                },
                Variable: function Variable(variable) {
                  newUsages.push({
                    node: variable,
                    type: typeInfo.getInputType(),
                    defaultValue: typeInfo.getDefaultValue()
                  });
                }
              })
            );
            usages = newUsages;

            this._variableUsages.set(node, usages);
          }

          return usages;
        };

        _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(
          operation
        ) {
          var usages = this._recursiveVariableUsages.get(operation);

          if (!usages) {
            usages = this.getVariableUsages(operation);

            for (
              var _i6 = 0,
                _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(
                  operation
                );
              _i6 < _this$getRecursivelyR2.length;
              _i6++
            ) {
              var frag = _this$getRecursivelyR2[_i6];
              usages = usages.concat(this.getVariableUsages(frag));
            }

            this._recursiveVariableUsages.set(operation, usages);
          }

          return usages;
        };

        _proto3.getType = function getType() {
          return this._typeInfo.getType();
        };

        _proto3.getParentType = function getParentType() {
          return this._typeInfo.getParentType();
        };

        _proto3.getInputType = function getInputType() {
          return this._typeInfo.getInputType();
        };

        _proto3.getParentInputType = function getParentInputType() {
          return this._typeInfo.getParentInputType();
        };

        _proto3.getFieldDef = function getFieldDef() {
          return this._typeInfo.getFieldDef();
        };

        _proto3.getDirective = function getDirective() {
          return this._typeInfo.getDirective();
        };

        _proto3.getArgument = function getArgument() {
          return this._typeInfo.getArgument();
        };

        _proto3.getEnumValue = function getEnumValue() {
          return this._typeInfo.getEnumValue();
        };

        return ValidationContext;
      })(ASTValidationContext);

      exports.ValidationContext = ValidationContext;

      /***/
    },

    /***/ Rska: /***/ function(module, exports, __webpack_require__) {
      var hasMap = typeof Map === "function" && Map.prototype;
      var mapSizeDescriptor =
        Object.getOwnPropertyDescriptor && hasMap
          ? Object.getOwnPropertyDescriptor(Map.prototype, "size")
          : null;
      var mapSize =
        hasMap &&
        mapSizeDescriptor &&
        typeof mapSizeDescriptor.get === "function"
          ? mapSizeDescriptor.get
          : null;
      var mapForEach = hasMap && Map.prototype.forEach;
      var hasSet = typeof Set === "function" && Set.prototype;
      var setSizeDescriptor =
        Object.getOwnPropertyDescriptor && hasSet
          ? Object.getOwnPropertyDescriptor(Set.prototype, "size")
          : null;
      var setSize =
        hasSet &&
        setSizeDescriptor &&
        typeof setSizeDescriptor.get === "function"
          ? setSizeDescriptor.get
          : null;
      var setForEach = hasSet && Set.prototype.forEach;
      var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
      var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
      var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
      var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
      var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
      var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
      var booleanValueOf = Boolean.prototype.valueOf;
      var objectToString = Object.prototype.toString;
      var functionToString = Function.prototype.toString;
      var match = String.prototype.match;
      var bigIntValueOf =
        typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
      var gOPS = Object.getOwnPropertySymbols;
      var symToString =
        typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
          ? Symbol.prototype.toString
          : null;
      var hasShammedSymbols =
        typeof Symbol === "function" && typeof Symbol.iterator === "object";
      var isEnumerable = Object.prototype.propertyIsEnumerable;

      var gPO =
        (typeof Reflect === "function"
          ? Reflect.getPrototypeOf
          : Object.getPrototypeOf) ||
        ([].__proto__ === Array.prototype // eslint-disable-line no-proto
          ? function(O) {
              return O.__proto__; // eslint-disable-line no-proto
            }
          : null);

      var inspectCustom = __webpack_require__("otCQ").custom;
      var inspectSymbol =
        inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
      var toStringTag =
        typeof Symbol === "function" &&
        typeof Symbol.toStringTag !== "undefined"
          ? Symbol.toStringTag
          : null;

      module.exports = function inspect_(obj, options, depth, seen) {
        var opts = options || {};

        if (
          has(opts, "quoteStyle") &&
          opts.quoteStyle !== "single" && opts.quoteStyle !== "double"
        ) {
          throw new TypeError(
            'option "quoteStyle" must be "single" or "double"'
          );
        }
        if (
          has(opts, "maxStringLength") &&
          (typeof opts.maxStringLength === "number"
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null)
        ) {
          throw new TypeError(
            'option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`'
          );
        }
        var customInspect = has(opts, "customInspect")
          ? opts.customInspect
          : true;
        if (typeof customInspect !== "boolean") {
          throw new TypeError(
            'option "customInspect", if provided, must be `true` or `false`'
          );
        }

        if (
          has(opts, "indent") &&
          opts.indent !== null &&
          opts.indent !== "\t" &&
          !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
        ) {
          throw new TypeError(
            'options "indent" must be "\\t", an integer > 0, or `null`'
          );
        }

        if (typeof obj === "undefined") {
          return "undefined";
        }
        if (obj === null) {
          return "null";
        }
        if (typeof obj === "boolean") {
          return obj ? "true" : "false";
        }

        if (typeof obj === "string") {
          return inspectString(obj, opts);
        }
        if (typeof obj === "number") {
          if (obj === 0) {
            return Infinity / obj > 0 ? "0" : "-0";
          }
          return String(obj);
        }
        if (typeof obj === "bigint") {
          return String(obj) + "n";
        }

        var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
        if (typeof depth === "undefined") {
          depth = 0;
        }
        if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
          return isArray(obj) ? "[Array]" : "[Object]";
        }

        var indent = getIndent(opts, depth);

        if (typeof seen === "undefined") {
          seen = [];
        } else if (indexOf(seen, obj) >= 0) {
          return "[Circular]";
        }

        function inspect(value, from, noIndent) {
          if (from) {
            seen = seen.slice();
            seen.push(from);
          }
          if (noIndent) {
            var newOpts = {
              depth: opts.depth
            };
            if (has(opts, "quoteStyle")) {
              newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
          }
          return inspect_(value, opts, depth + 1, seen);
        }

        if (typeof obj === "function") {
          var name = nameOf(obj);
          var keys = arrObjKeys(obj, inspect);
          return (
            "[Function" +
            (name ? ": " + name : " (anonymous)") +
            "]" +
            (keys.length > 0 ? " { " + keys.join(", ") + " }" : "")
          );
        }
        if (isSymbol(obj)) {
          var symString = hasShammedSymbols
            ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, "$1")
            : symToString.call(obj);
          return typeof obj === "object" && !hasShammedSymbols
            ? markBoxed(symString)
            : symString;
        }
        if (isElement(obj)) {
          var s = "<" + String(obj.nodeName).toLowerCase();
          var attrs = obj.attributes || [];
          for (var i = 0; i < attrs.length; i++) {
            s +=
              " " +
              attrs[i].name +
              "=" +
              wrapQuotes(quote(attrs[i].value), "double", opts);
          }
          s += ">";
          if (obj.childNodes && obj.childNodes.length) {
            s += "...";
          }
          s += "</" + String(obj.nodeName).toLowerCase() + ">";
          return s;
        }
        if (isArray(obj)) {
          if (obj.length === 0) {
            return "[]";
          }
          var xs = arrObjKeys(obj, inspect);
          if (indent && !singleLineValues(xs)) {
            return "[" + indentedJoin(xs, indent) + "]";
          }
          return "[ " + xs.join(", ") + " ]";
        }
        if (isError(obj)) {
          var parts = arrObjKeys(obj, inspect);
          if (parts.length === 0) {
            return "[" + String(obj) + "]";
          }
          return "{ [" + String(obj) + "] " + parts.join(", ") + " }";
        }
        if (typeof obj === "object" && customInspect) {
          if (inspectSymbol && typeof obj[inspectSymbol] === "function") {
            return obj[inspectSymbol]();
          } else if (typeof obj.inspect === "function") {
            return obj.inspect();
          }
        }
        if (isMap(obj)) {
          var mapParts = [];
          mapForEach.call(obj, function(value, key) {
            mapParts.push(
              inspect(key, obj, true) + " => " + inspect(value, obj)
            );
          });
          return collectionOf("Map", mapSize.call(obj), mapParts, indent);
        }
        if (isSet(obj)) {
          var setParts = [];
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
          return collectionOf("Set", setSize.call(obj), setParts, indent);
        }
        if (isWeakMap(obj)) {
          return weakCollectionOf("WeakMap");
        }
        if (isWeakSet(obj)) {
          return weakCollectionOf("WeakSet");
        }
        if (isWeakRef(obj)) {
          return weakCollectionOf("WeakRef");
        }
        if (isNumber(obj)) {
          return markBoxed(inspect(Number(obj)));
        }
        if (isBigInt(obj)) {
          return markBoxed(inspect(bigIntValueOf.call(obj)));
        }
        if (isBoolean(obj)) {
          return markBoxed(booleanValueOf.call(obj));
        }
        if (isString(obj)) {
          return markBoxed(inspect(String(obj)));
        }
        if (!isDate(obj) && !isRegExp(obj)) {
          var ys = arrObjKeys(obj, inspect);
          var isPlainObject = gPO
            ? gPO(obj) === Object.prototype
            : obj instanceof Object || obj.constructor === Object;
          var protoTag = obj instanceof Object ? "" : "null prototype";
          var stringTag =
            !isPlainObject &&
            toStringTag &&
            Object(obj) === obj &&
            toStringTag in obj
              ? toStr(obj).slice(8, -1)
              : protoTag
              ? "Object"
              : "";
          var constructorTag =
            isPlainObject || typeof obj.constructor !== "function"
              ? ""
              : obj.constructor.name
              ? obj.constructor.name + " "
              : "";
          var tag =
            constructorTag +
            (stringTag || protoTag
              ? "[" +
                [].concat(stringTag || [], protoTag || []).join(": ") +
                "] "
              : "");
          if (ys.length === 0) {
            return tag + "{}";
          }
          if (indent) {
            return tag + "{" + indentedJoin(ys, indent) + "}";
          }
          return tag + "{ " + ys.join(", ") + " }";
        }
        return String(obj);
      };

      function wrapQuotes(s, defaultStyle, opts) {
        var quoteChar =
          (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
        return quoteChar + s + quoteChar;
      }

      function quote(s) {
        return String(s).replace(/"/g, "&quot;");
      }

      function isArray(obj) {
        return (
          toStr(obj) === "[object Array]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }
      function isDate(obj) {
        return (
          toStr(obj) === "[object Date]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }
      function isRegExp(obj) {
        return (
          toStr(obj) === "[object RegExp]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }
      function isError(obj) {
        return (
          toStr(obj) === "[object Error]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }
      function isString(obj) {
        return (
          toStr(obj) === "[object String]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }
      function isNumber(obj) {
        return (
          toStr(obj) === "[object Number]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }
      function isBoolean(obj) {
        return (
          toStr(obj) === "[object Boolean]" &&
          (!toStringTag || !(typeof obj === "object" && toStringTag in obj))
        );
      }

      // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
      function isSymbol(obj) {
        if (hasShammedSymbols) {
          return obj && typeof obj === "object" && obj instanceof Symbol;
        }
        if (typeof obj === "symbol") {
          return true;
        }
        if (!obj || typeof obj !== "object" || !symToString) {
          return false;
        }
        try {
          symToString.call(obj);
          return true;
        } catch (e) {}
        return false;
      }

      function isBigInt(obj) {
        if (!obj || typeof obj !== "object" || !bigIntValueOf) {
          return false;
        }
        try {
          bigIntValueOf.call(obj);
          return true;
        } catch (e) {}
        return false;
      }

      var hasOwn =
        Object.prototype.hasOwnProperty ||
        function(key) {
          return key in this;
        };
      function has(obj, key) {
        return hasOwn.call(obj, key);
      }

      function toStr(obj) {
        return objectToString.call(obj);
      }

      function nameOf(f) {
        if (f.name) {
          return f.name;
        }
        var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);
        if (m) {
          return m[1];
        }
        return null;
      }

      function indexOf(xs, x) {
        if (xs.indexOf) {
          return xs.indexOf(x);
        }
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) {
            return i;
          }
        }
        return -1;
      }

      function isMap(x) {
        if (!mapSize || !x || typeof x !== "object") {
          return false;
        }
        try {
          mapSize.call(x);
          try {
            setSize.call(x);
          } catch (s) {
            return true;
          }
          return x instanceof Map; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
      }

      function isWeakMap(x) {
        if (!weakMapHas || !x || typeof x !== "object") {
          return false;
        }
        try {
          weakMapHas.call(x, weakMapHas);
          try {
            weakSetHas.call(x, weakSetHas);
          } catch (s) {
            return true;
          }
          return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
      }

      function isWeakRef(x) {
        if (!weakRefDeref || !x || typeof x !== "object") {
          return false;
        }
        try {
          weakRefDeref.call(x);
          return true;
        } catch (e) {}
        return false;
      }

      function isSet(x) {
        if (!setSize || !x || typeof x !== "object") {
          return false;
        }
        try {
          setSize.call(x);
          try {
            mapSize.call(x);
          } catch (m) {
            return true;
          }
          return x instanceof Set; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
      }

      function isWeakSet(x) {
        if (!weakSetHas || !x || typeof x !== "object") {
          return false;
        }
        try {
          weakSetHas.call(x, weakSetHas);
          try {
            weakMapHas.call(x, weakMapHas);
          } catch (s) {
            return true;
          }
          return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
      }

      function isElement(x) {
        if (!x || typeof x !== "object") {
          return false;
        }
        if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
          return true;
        }
        return (
          typeof x.nodeName === "string" && typeof x.getAttribute === "function"
        );
      }

      function inspectString(str, opts) {
        if (str.length > opts.maxStringLength) {
          var remaining = str.length - opts.maxStringLength;
          var trailer =
            "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
          return (
            inspectString(str.slice(0, opts.maxStringLength), opts) + trailer
          );
        }
        // eslint-disable-next-line no-control-regex
        var s = str
          .replace(/(['\\])/g, "\\$1")
          .replace(/[\x00-\x1f]/g, lowbyte);
        return wrapQuotes(s, "single", opts);
      }

      function lowbyte(c) {
        var n = c.charCodeAt(0);
        var x = {
          8: "b",
          9: "t",
          10: "n",
          12: "f",
          13: "r"
        }[n];
        if (x) {
          return "\\" + x;
        }
        return "\\x" + (n < 0x10 ? "0" : "") + n.toString(16).toUpperCase();
      }

      function markBoxed(str) {
        return "Object(" + str + ")";
      }

      function weakCollectionOf(type) {
        return type + " { ? }";
      }

      function collectionOf(type, size, entries, indent) {
        var joinedEntries = indent
          ? indentedJoin(entries, indent)
          : entries.join(", ");
        return type + " (" + size + ") {" + joinedEntries + "}";
      }

      function singleLineValues(xs) {
        for (var i = 0; i < xs.length; i++) {
          if (indexOf(xs[i], "\n") >= 0) {
            return false;
          }
        }
        return true;
      }

      function getIndent(opts, depth) {
        var baseIndent;
        if (opts.indent === "\t") {
          baseIndent = "\t";
        } else if (typeof opts.indent === "number" && opts.indent > 0) {
          baseIndent = Array(opts.indent + 1).join(" ");
        } else {
          return null;
        }
        return {
          base: baseIndent,
          prev: Array(depth + 1).join(baseIndent)
        };
      }

      function indentedJoin(xs, indent) {
        if (xs.length === 0) {
          return "";
        }
        var lineJoiner = "\n" + indent.prev + indent.base;
        return lineJoiner + xs.join("," + lineJoiner) + "\n" + indent.prev;
      }

      function arrObjKeys(obj, inspect) {
        var isArr = isArray(obj);
        var xs = [];
        if (isArr) {
          xs.length = obj.length;
          for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
          }
        }
        var syms = typeof gOPS === "function" ? gOPS(obj) : [];
        var symMap;
        if (hasShammedSymbols) {
          symMap = {};
          for (var k = 0; k < syms.length; k++) {
            symMap["$" + syms[k]] = syms[k];
          }
        }

        for (var key in obj) {
          // eslint-disable-line no-restricted-syntax
          if (!has(obj, key)) {
            continue;
          } // eslint-disable-line no-restricted-syntax, no-continue
          if (isArr && String(Number(key)) === key && key < obj.length) {
            continue;
          } // eslint-disable-line no-restricted-syntax, no-continue
          if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
          } else if (/[^\w$]/.test(key)) {
            xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
          } else {
            xs.push(key + ": " + inspect(obj[key], obj));
          }
        }
        if (typeof gOPS === "function") {
          for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
              xs.push(
                "[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj)
              );
            }
          }
        }
        return xs;
      }

      /***/
    },

    /***/ S6i8: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.valueFromASTUntyped = valueFromASTUntyped;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _keyValMap = _interopRequireDefault(__webpack_require__("IatC"));

      var _kinds = __webpack_require__("xaK5");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Produces a JavaScript value given a GraphQL Value AST.
       *
       * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
       * will reflect the provided GraphQL value AST.
       *
       * | GraphQL Value        | JavaScript Value |
       * | -------------------- | ---------------- |
       * | Input Object         | Object           |
       * | List                 | Array            |
       * | Boolean              | Boolean          |
       * | String / Enum        | String           |
       * | Int / Float          | Number           |
       * | Null                 | null             |
       *
       */
      function valueFromASTUntyped(valueNode, variables) {
        switch (valueNode.kind) {
          case _kinds.Kind.NULL:
            return null;

          case _kinds.Kind.INT:
            return parseInt(valueNode.value, 10);

          case _kinds.Kind.FLOAT:
            return parseFloat(valueNode.value);

          case _kinds.Kind.STRING:
          case _kinds.Kind.ENUM:
          case _kinds.Kind.BOOLEAN:
            return valueNode.value;

          case _kinds.Kind.LIST:
            return valueNode.values.map(function(node) {
              return valueFromASTUntyped(node, variables);
            });

          case _kinds.Kind.OBJECT:
            return (0, _keyValMap.default)(
              valueNode.fields,
              function(field) {
                return field.name.value;
              },
              function(field) {
                return valueFromASTUntyped(field.value, variables);
              }
            );

          case _kinds.Kind.VARIABLE:
            return variables === null || variables === void 0
              ? void 0
              : variables[valueNode.name.value];
        } // istanbul ignore next (Not reachable. All possible value nodes have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected value node: " + (0, _inspect.default)(valueNode)
          );
      }

      /***/
    },

    /***/ SFnX: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const visitorPluginCommon = __webpack_require__("MBzn");
      const graphql = __webpack_require__("uKhV");
      const minIndent = _interopDefault(__webpack_require__("sQdO"));

      function buildPackageNameFromPath(path) {
        const unixify = __webpack_require__("mZcR");
        return unixify(path || "")
          .replace(/src\/main\/.*?\//, "")
          .replace(/\//g, ".");
      }
      function wrapTypeWithModifiers(
        baseType,
        typeNode,
        listType = "Iterable"
      ) {
        if (typeNode.kind === graphql.Kind.NON_NULL_TYPE) {
          return wrapTypeWithModifiers(baseType, typeNode.type, listType);
        } else if (typeNode.kind === graphql.Kind.LIST_TYPE) {
          const innerType = wrapTypeWithModifiers(
            baseType,
            typeNode.type,
            listType
          );
          return `${listType}<${innerType}>`;
        } else {
          return baseType;
        }
      }
      function stripIndent(string) {
        const indent = minIndent(string);
        if (indent === 0) {
          return string;
        }
        const regex = new RegExp(`^[ \\t]{${indent}}`, "gm");
        return string.replace(regex, "");
      }

      class JavaDeclarationBlock {
        constructor() {
          this._name = null;
          this._extendStr = [];
          this._implementsStr = [];
          this._kind = null;
          this._access = "public";
          this._final = false;
          this._static = false;
          this._block = null;
          this._comment = null;
          this._annotations = [];
          this._members = [];
          this._methods = [];
          this._nestedClasses = [];
        }
        nestedClass(nstCls) {
          this._nestedClasses.push(nstCls);
          return this;
        }
        access(access) {
          this._access = access;
          return this;
        }
        asKind(kind) {
          this._kind = kind;
          return this;
        }
        final() {
          this._final = true;
          return this;
        }
        static() {
          this._static = true;
          return this;
        }
        annotate(annotations) {
          this._annotations = annotations;
          return this;
        }
        withComment(comment) {
          if (comment) {
            this._comment = visitorPluginCommon.transformComment(comment, 0);
          }
          return this;
        }
        withBlock(block) {
          this._block = block;
          return this;
        }
        extends(extendStr) {
          this._extendStr = extendStr;
          return this;
        }
        implements(implementsStr) {
          this._implementsStr = implementsStr;
          return this;
        }
        withName(name) {
          this._name = typeof name === "object" ? name.value : name;
          return this;
        }
        printMember(member) {
          const flags = member.flags || {};
          const pieces = [
            member.access,
            flags.static ? "static" : null,
            flags.final ? "final" : null,
            flags.transient ? "transient" : null,
            flags.volatile ? "volatile" : null,
            ...(member.annotations || []).map(annotation => `@${annotation}`),
            member.type,
            member.name
          ].filter(f => f);
          return pieces.join(" ") + (member.value ? ` = ${member.value}` : "");
        }
        printMethod(method) {
          const pieces = [
            ...method.methodAnnotations.map(a => `@${a}\n`),
            method.access,
            method.flags.static ? "static" : null,
            method.flags.final ? "final" : null,
            method.flags.transient ? "transient" : null,
            method.flags.volatile ? "volatile" : null,
            ...(method.returnTypeAnnotations || []).map(
              annotation => `@${annotation}`
            ),
            method.returnType,
            method.name
          ].filter(f => f);
          const args = method.args.map(arg => this.printMember(arg)).join(", ");
          return `${pieces.join(" ")}(${args}) {
${visitorPluginCommon.indentMultiline(method.implementation)}
}`;
        }
        addClassMember(
          name,
          type,
          value,
          typeAnnotations = [],
          access = null,
          flags = {}
        ) {
          this._members.push({
            name,
            type,
            value,
            annotations: typeAnnotations,
            access,
            flags: {
              final: false,
              transient: false,
              volatile: false,
              static: false,
              ...flags
            }
          });
          return this;
        }
        addClassMethod(
          name,
          returnType,
          impl,
          args = [],
          returnTypeAnnotations = [],
          access = null,
          flags = {},
          methodAnnotations = []
        ) {
          this._methods.push({
            name,
            returnType,
            implementation: impl,
            args,
            returnTypeAnnotations,
            access,
            flags: {
              final: false,
              transient: false,
              volatile: false,
              static: false,
              ...flags
            },
            methodAnnotations: methodAnnotations || []
          });
          return this;
        }
        get string() {
          let result = "";
          if (this._kind) {
            let name = "";
            if (this._name) {
              name = this._name;
            }
            let extendStr = "";
            let implementsStr = "";
            let annotatesStr = "";
            const final = this._final ? " final" : "";
            const isStatic = this._static ? " static" : "";
            if (this._extendStr.length > 0) {
              extendStr = ` extends ${this._extendStr.join(", ")}`;
            }
            if (this._implementsStr.length > 0) {
              implementsStr = ` implements ${this._implementsStr.join(", ")}`;
            }
            if (this._annotations.length > 0) {
              annotatesStr =
                this._annotations.map(a => `@${a}`).join("\n") + "\n";
            }
            result += `${annotatesStr}${this._access}${isStatic}${final} ${this._kind} ${name}${extendStr}${implementsStr} `;
          }
          const members = this._members.length
            ? visitorPluginCommon.indentMultiline(
                stripIndent(
                  this._members
                    .map(member => this.printMember(member) + ";")
                    .join("\n")
                )
              )
            : null;
          const methods = this._methods.length
            ? visitorPluginCommon.indentMultiline(
                stripIndent(
                  this._methods
                    .map(method => this.printMethod(method))
                    .join("\n\n")
                )
              )
            : null;
          const nestedClasses = this._nestedClasses.length
            ? this._nestedClasses
                .map(c => visitorPluginCommon.indentMultiline(c.string))
                .join("\n\n")
            : null;
          const before = "{";
          const after = "}";
          const block = [
            before,
            members,
            methods,
            nestedClasses,
            this._block,
            after
          ]
            .filter(f => f)
            .join("\n");
          result += block;
          return (this._comment ? this._comment : "") + result + "\n";
        }
      }

      const JAVA_SCALARS = {
        ID: "Object",
        String: "String",
        Boolean: "Boolean",
        Int: "Integer",
        Float: "Double"
      };

      exports.JAVA_SCALARS = JAVA_SCALARS;
      exports.JavaDeclarationBlock = JavaDeclarationBlock;
      exports.buildPackageNameFromPath = buildPackageNameFromPath;
      exports.stripIndent = stripIndent;
      exports.wrapTypeWithModifiers = wrapTypeWithModifiers;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ SYRf: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $String = GetIntrinsic("%String%");
      var $TypeError = GetIntrinsic("%TypeError%");

      // https://ecma-international.org/ecma-262/6.0/#sec-tostring

      module.exports = function ToString(argument) {
        if (typeof argument === "symbol") {
          throw new $TypeError("Cannot convert a Symbol value to a string");
        }
        return $String(argument);
      };

      /***/
    },

    /***/ Sghh: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");
      const pluginHelpers = __webpack_require__("ac+X");
      const path = __webpack_require__("oyvS");
      const utils = __webpack_require__("kOHh");

      const plugin = async (
        schema,
        _documents,
        {
          commentDescriptions = false,
          includeDirectives = false,
          sort = false,
          federation
        }
      ) => {
        let outputSchema = federation
          ? pluginHelpers.removeFederation(schema)
          : schema;
        outputSchema = sort
          ? graphql.lexicographicSortSchema(outputSchema)
          : outputSchema;
        if (includeDirectives) {
          return utils.printSchemaWithDirectives(outputSchema);
        }
        return graphql.printSchema(outputSchema, {
          commentDescriptions: commentDescriptions
        });
      };
      const validate = async (
        _schema,
        _documents,
        _config,
        outputFile,
        allPlugins
      ) => {
        const singlePlugin = allPlugins.length === 1;
        if (singlePlugin && path.extname(outputFile) !== ".graphql") {
          throw new Error(
            `Plugin "schema-ast" requires extension to be ".graphql"!`
          );
        }
      };
      function transformSchemaAST(schema, config) {
        const printedSchema = graphql.printSchema(schema);
        const astNode = graphql.parse(printedSchema);
        const transformedAST = config.disableDescriptions
          ? graphql.visit(astNode, {
              leave: node => ({
                ...node,
                description: undefined
              })
            })
          : astNode;
        const transformedSchema = config.disableDescriptions
          ? graphql.buildASTSchema(transformedAST)
          : schema;
        return {
          schema: transformedSchema,
          ast: transformedAST
        };
      }

      exports.plugin = plugin;
      exports.transformSchemaAST = transformSchemaAST;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ T8T6: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.paramCase = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var dot_case_1 = __webpack_require__("sgrp");
      function paramCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return dot_case_1.dotCase(
          input,
          tslib_1.__assign({ delimiter: "-" }, options)
        );
      }
      exports.paramCase = paramCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ TYx5: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (
            Array.isArray(o) ||
            (it = _unsupportedIterableToArray(o)) ||
            (allowArrayLike && o && typeof o.length === "number")
          ) {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
              s: F,
              n: function n() {
                if (i >= o.length) return { done: true };
                return { done: false, value: o[i++] };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        var normalCompletion = true,
          didErr = false,
          err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it["return"] != null) it["return"]();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }

      var _require = __webpack_require__("VrDQ"),
        createCompilerError = _require.createCompilerError;

      var _require2 = __webpack_require__("uKhV"),
        SchemaMetaFieldDef = _require2.SchemaMetaFieldDef,
        TypeMetaFieldDef = _require2.TypeMetaFieldDef;

      /**
       * Find the definition of a field of the specified type using strict
       * resolution rules per the GraphQL spec.
       */
      function getFieldDefinitionStrict(schema, parentType, fieldName) {
        var type = schema.getRawType(parentType);
        var queryType = schema.getQueryType();
        var isQueryType =
          queryType != null && schema.areEqualTypes(type, queryType);
        var hasTypeName = schema.isAbstractType(type) || schema.isObject(type);
        var schemaFieldDef;

        if (isQueryType && fieldName === SchemaMetaFieldDef.name) {
          schemaFieldDef =
            queryType != null
              ? schema.getFieldByName(queryType, "__schema")
              : null;
        } else if (isQueryType && fieldName === TypeMetaFieldDef.name) {
          schemaFieldDef =
            queryType != null
              ? schema.getFieldByName(queryType, "__type")
              : null;
        } else if (hasTypeName && fieldName === "__typename") {
          schemaFieldDef = schema.getFieldByName(
            schema.assertCompositeType(type),
            "__typename"
          );
        } else if (hasTypeName && fieldName === "__id") {
          schemaFieldDef = schema.getFieldByName(
            schema.assertCompositeType(type),
            "__id"
          );
        } else if (schema.isInterface(type) || schema.isObject(type)) {
          var compositeType = schema.assertCompositeType(type);

          if (schema.hasField(compositeType, fieldName)) {
            schemaFieldDef = schema.getFieldByName(compositeType, fieldName);
          } else {
            return null;
          }
        }

        return schemaFieldDef;
      }
      /**
       * Find the definition of a field of the specified type, first trying
       * the standard spec-compliant resolution process and falling back
       * to legacy mode that supports fat interfaces.
       */

      function getFieldDefinitionLegacy(
        schema,
        parentType,
        fieldName,
        fieldAST
      ) {
        var _schemaFieldDef;

        var schemaFieldDef = getFieldDefinitionStrict(
          schema,
          parentType,
          fieldName
        );

        if (!schemaFieldDef) {
          schemaFieldDef = getFieldDefinitionLegacyImpl(
            schema,
            parentType,
            fieldName,
            fieldAST
          );
        }

        return (_schemaFieldDef = schemaFieldDef) !== null &&
          _schemaFieldDef !== void 0
          ? _schemaFieldDef
          : null;
      }
      /**
       * @private
       */

      function getFieldDefinitionLegacyImpl(schema, type, fieldName, fieldAST) {
        var rawType = schema.getRawType(type);

        if (
          schema.isAbstractType(rawType) &&
          fieldAST &&
          fieldAST.directives &&
          fieldAST.directives.some(function(directive) {
            return getName(directive) === "fixme_fat_interface";
          })
        ) {
          var possibleTypes = schema.getPossibleTypes(
            schema.assertAbstractType(rawType)
          );
          var schemaFieldDef;

          var _iterator = _createForOfIteratorHelper(possibleTypes),
            _step;

          try {
            var _loop = function _loop() {
              var possibleType = _step.value;
              var possibleField = schema.getFieldByName(
                possibleType,
                fieldName
              );

              if (possibleField) {
                // Fat interface fields can have differing arguments. Try to return
                // a field with matching arguments, but still return a field if the
                // arguments do not match.
                schemaFieldDef = possibleField;

                if (fieldAST && fieldAST.arguments) {
                  var argumentsAllExist = fieldAST.arguments.every(function(
                    argument
                  ) {
                    return (
                      schema.getFieldArgByName(
                        possibleField,
                        getName(argument)
                      ) != null
                    );
                  });

                  if (argumentsAllExist) {
                    return "break";
                  }
                }
              }
            };

            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _ret = _loop();

              if (_ret === "break") break;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return schemaFieldDef;
        }
      }
      /**
       * @private
       */

      function getName(ast) {
        var name = ast.name ? ast.name.value : null;

        if (typeof name !== "string") {
          throw createCompilerError(
            "Expected ast node to have a 'name'.",
            null,
            [ast]
          );
        }

        return name;
      }

      module.exports = {
        getFieldDefinitionLegacy: getFieldDefinitionLegacy,
        getFieldDefinitionStrict: getFieldDefinitionStrict
      };

      /***/
    },

    /***/ TcFd: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.execute = execute;
      exports.executeSync = executeSync;
      exports.assertValidExecutionArguments = assertValidExecutionArguments;
      exports.buildExecutionContext = buildExecutionContext;
      exports.collectFields = collectFields;
      exports.buildResolveInfo = buildResolveInfo;
      exports.getFieldDef = getFieldDef;
      exports.defaultFieldResolver = exports.defaultTypeResolver = void 0;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _memoize = _interopRequireDefault(__webpack_require__("6OWx"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _isPromise = _interopRequireDefault(__webpack_require__("Z4gy"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _safeArrayFrom = _interopRequireDefault(__webpack_require__("4M+f"));

      var _promiseReduce = _interopRequireDefault(__webpack_require__("aYRf"));

      var _promiseForObject = _interopRequireDefault(
        __webpack_require__("LHBN")
      );

      var _Path = __webpack_require__("Z7K8");

      var _GraphQLError = __webpack_require__("MafX");

      var _locatedError = __webpack_require__("dPEW");

      var _kinds = __webpack_require__("xaK5");

      var _validate = __webpack_require__("QINa");

      var _introspection = __webpack_require__("JIc4");

      var _directives = __webpack_require__("L9+1");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      var _getOperationRootType = __webpack_require__("58fJ");

      var _values = __webpack_require__("aQB7");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function execute(
        argsOrSchema,
        document,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      ) {
        /* eslint-enable no-redeclare */
        // Extract arguments from object args if provided.
        return arguments.length === 1
          ? executeImpl(argsOrSchema)
          : executeImpl({
              schema: argsOrSchema,
              document: document,
              rootValue: rootValue,
              contextValue: contextValue,
              variableValues: variableValues,
              operationName: operationName,
              fieldResolver: fieldResolver,
              typeResolver: typeResolver
            });
      }
      /**
       * Also implements the "Evaluating requests" section of the GraphQL specification.
       * However, it guarantees to complete synchronously (or throw an error) assuming
       * that all field resolvers are also synchronous.
       */

      function executeSync(args) {
        var result = executeImpl(args); // Assert that the execution was synchronous.

        if ((0, _isPromise.default)(result)) {
          throw new Error(
            "GraphQL execution failed to complete synchronously."
          );
        }

        return result;
      }

      function executeImpl(args) {
        var schema = args.schema,
          document = args.document,
          rootValue = args.rootValue,
          contextValue = args.contextValue,
          variableValues = args.variableValues,
          operationName = args.operationName,
          fieldResolver = args.fieldResolver,
          typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.

        assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
        // a "Response" with only errors is returned.

        var exeContext = buildExecutionContext(
          schema,
          document,
          rootValue,
          contextValue,
          variableValues,
          operationName,
          fieldResolver,
          typeResolver
        ); // Return early errors if execution context failed.

        if (Array.isArray(exeContext)) {
          return {
            errors: exeContext
          };
        } // Return a Promise that will eventually resolve to the data described by
        // The "Response" section of the GraphQL specification.
        //
        // If errors are encountered while executing a GraphQL field, only that
        // field and its descendants will be omitted, and sibling fields will still
        // be executed. An execution which encounters errors will still result in a
        // resolved Promise.

        var data = executeOperation(
          exeContext,
          exeContext.operation,
          rootValue
        );
        return buildResponse(exeContext, data);
      }
      /**
       * Given a completed execution context and data, build the { errors, data }
       * response defined by the "Response" section of the GraphQL specification.
       */

      function buildResponse(exeContext, data) {
        if ((0, _isPromise.default)(data)) {
          return data.then(function(resolved) {
            return buildResponse(exeContext, resolved);
          });
        }

        return exeContext.errors.length === 0
          ? {
              data: data
            }
          : {
              errors: exeContext.errors,
              data: data
            };
      }
      /**
       * Essential assertions before executing to provide developer feedback for
       * improper use of the GraphQL library.
       *
       * @internal
       */

      function assertValidExecutionArguments(
        schema,
        document,
        rawVariableValues
      ) {
        document || (0, _devAssert.default)(0, "Must provide document."); // If the schema used for execution is invalid, throw an error.

        (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.

        rawVariableValues == null ||
          (0, _isObjectLike.default)(rawVariableValues) ||
          (0, _devAssert.default)(
            0,
            "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided."
          );
      }
      /**
       * Constructs a ExecutionContext object from the arguments passed to
       * execute, which we will pass throughout the other execution methods.
       *
       * Throws a GraphQLError if a valid execution context cannot be created.
       *
       * @internal
       */

      function buildExecutionContext(
        schema,
        document,
        rootValue,
        contextValue,
        rawVariableValues,
        operationName,
        fieldResolver,
        typeResolver
      ) {
        var _definition$name, _operation$variableDe;

        var operation;
        var fragments = Object.create(null);

        for (
          var _i2 = 0, _document$definitions2 = document.definitions;
          _i2 < _document$definitions2.length;
          _i2++
        ) {
          var definition = _document$definitions2[_i2];

          switch (definition.kind) {
            case _kinds.Kind.OPERATION_DEFINITION:
              if (operationName == null) {
                if (operation !== undefined) {
                  return [
                    new _GraphQLError.GraphQLError(
                      "Must provide operation name if query contains multiple operations."
                    )
                  ];
                }

                operation = definition;
              } else if (
                ((_definition$name = definition.name) === null ||
                _definition$name === void 0
                  ? void 0
                  : _definition$name.value) === operationName
              ) {
                operation = definition;
              }

              break;

            case _kinds.Kind.FRAGMENT_DEFINITION:
              fragments[definition.name.value] = definition;
              break;
          }
        }

        if (!operation) {
          if (operationName != null) {
            return [
              new _GraphQLError.GraphQLError(
                'Unknown operation named "'.concat(operationName, '".')
              )
            ];
          }

          return [new _GraphQLError.GraphQLError("Must provide an operation.")];
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

        var variableDefinitions =
          (_operation$variableDe = operation.variableDefinitions) !== null &&
          _operation$variableDe !== void 0
            ? _operation$variableDe
            : [];
        var coercedVariableValues = (0, _values.getVariableValues)(
          schema,
          variableDefinitions,
          rawVariableValues !== null && rawVariableValues !== void 0
            ? rawVariableValues
            : {},
          {
            maxErrors: 50
          }
        );

        if (coercedVariableValues.errors) {
          return coercedVariableValues.errors;
        }

        return {
          schema: schema,
          fragments: fragments,
          rootValue: rootValue,
          contextValue: contextValue,
          operation: operation,
          variableValues: coercedVariableValues.coerced,
          fieldResolver:
            fieldResolver !== null && fieldResolver !== void 0
              ? fieldResolver
              : defaultFieldResolver,
          typeResolver:
            typeResolver !== null && typeResolver !== void 0
              ? typeResolver
              : defaultTypeResolver,
          errors: []
        };
      }
      /**
       * Implements the "Evaluating operations" section of the spec.
       */

      function executeOperation(exeContext, operation, rootValue) {
        var type = (0, _getOperationRootType.getOperationRootType)(
          exeContext.schema,
          operation
        );
        var fields = collectFields(
          exeContext,
          type,
          operation.selectionSet,
          Object.create(null),
          Object.create(null)
        );
        var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,
        // at which point we still log the error and null the parent field, which
        // in this case is the entire response.

        try {
          var result =
            operation.operation === "mutation"
              ? executeFieldsSerially(exeContext, type, rootValue, path, fields)
              : executeFields(exeContext, type, rootValue, path, fields);

          if ((0, _isPromise.default)(result)) {
            return result.then(undefined, function(error) {
              exeContext.errors.push(error);
              return Promise.resolve(null);
            });
          }

          return result;
        } catch (error) {
          exeContext.errors.push(error);
          return null;
        }
      }
      /**
       * Implements the "Evaluating selection sets" section of the spec
       * for "write" mode.
       */

      function executeFieldsSerially(
        exeContext,
        parentType,
        sourceValue,
        path,
        fields
      ) {
        return (0, _promiseReduce.default)(
          Object.keys(fields),
          function(results, responseName) {
            var fieldNodes = fields[responseName];
            var fieldPath = (0, _Path.addPath)(
              path,
              responseName,
              parentType.name
            );
            var result = resolveField(
              exeContext,
              parentType,
              sourceValue,
              fieldNodes,
              fieldPath
            );

            if (result === undefined) {
              return results;
            }

            if ((0, _isPromise.default)(result)) {
              return result.then(function(resolvedResult) {
                results[responseName] = resolvedResult;
                return results;
              });
            }

            results[responseName] = result;
            return results;
          },
          Object.create(null)
        );
      }
      /**
       * Implements the "Evaluating selection sets" section of the spec
       * for "read" mode.
       */

      function executeFields(
        exeContext,
        parentType,
        sourceValue,
        path,
        fields
      ) {
        var results = Object.create(null);
        var containsPromise = false;

        for (
          var _i4 = 0, _Object$keys2 = Object.keys(fields);
          _i4 < _Object$keys2.length;
          _i4++
        ) {
          var responseName = _Object$keys2[_i4];
          var fieldNodes = fields[responseName];
          var fieldPath = (0, _Path.addPath)(
            path,
            responseName,
            parentType.name
          );
          var result = resolveField(
            exeContext,
            parentType,
            sourceValue,
            fieldNodes,
            fieldPath
          );

          if (result !== undefined) {
            results[responseName] = result;

            if ((0, _isPromise.default)(result)) {
              containsPromise = true;
            }
          }
        } // If there are no promises, we can just return the object

        if (!containsPromise) {
          return results;
        } // Otherwise, results is a map from field name to the result of resolving that
        // field, which is possibly a promise. Return a promise that will return this
        // same map, but with any promises replaced with the values they resolved to.

        return (0, _promiseForObject.default)(results);
      }
      /**
       * Given a selectionSet, adds all of the fields in that selection to
       * the passed in map of fields, and returns it at the end.
       *
       * CollectFields requires the "runtime type" of an object. For a field which
       * returns an Interface or Union type, the "runtime type" will be the actual
       * Object type returned by that field.
       *
       * @internal
       */

      function collectFields(
        exeContext,
        runtimeType,
        selectionSet,
        fields,
        visitedFragmentNames
      ) {
        for (
          var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections;
          _i6 < _selectionSet$selecti2.length;
          _i6++
        ) {
          var selection = _selectionSet$selecti2[_i6];

          switch (selection.kind) {
            case _kinds.Kind.FIELD: {
              if (!shouldIncludeNode(exeContext, selection)) {
                continue;
              }

              var name = getFieldEntryKey(selection);

              if (!fields[name]) {
                fields[name] = [];
              }

              fields[name].push(selection);
              break;
            }

            case _kinds.Kind.INLINE_FRAGMENT: {
              if (
                !shouldIncludeNode(exeContext, selection) ||
                !doesFragmentConditionMatch(exeContext, selection, runtimeType)
              ) {
                continue;
              }

              collectFields(
                exeContext,
                runtimeType,
                selection.selectionSet,
                fields,
                visitedFragmentNames
              );
              break;
            }

            case _kinds.Kind.FRAGMENT_SPREAD: {
              var fragName = selection.name.value;

              if (
                visitedFragmentNames[fragName] ||
                !shouldIncludeNode(exeContext, selection)
              ) {
                continue;
              }

              visitedFragmentNames[fragName] = true;
              var fragment = exeContext.fragments[fragName];

              if (
                !fragment ||
                !doesFragmentConditionMatch(exeContext, fragment, runtimeType)
              ) {
                continue;
              }

              collectFields(
                exeContext,
                runtimeType,
                fragment.selectionSet,
                fields,
                visitedFragmentNames
              );
              break;
            }
          }
        }

        return fields;
      }
      /**
       * Determines if a field should be included based on the @include and @skip
       * directives, where @skip has higher precedence than @include.
       */

      function shouldIncludeNode(exeContext, node) {
        var skip = (0, _values.getDirectiveValues)(
          _directives.GraphQLSkipDirective,
          node,
          exeContext.variableValues
        );

        if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
          return false;
        }

        var include = (0, _values.getDirectiveValues)(
          _directives.GraphQLIncludeDirective,
          node,
          exeContext.variableValues
        );

        if (
          (include === null || include === void 0 ? void 0 : include.if) ===
          false
        ) {
          return false;
        }

        return true;
      }
      /**
       * Determines if a fragment is applicable to the given type.
       */

      function doesFragmentConditionMatch(exeContext, fragment, type) {
        var typeConditionNode = fragment.typeCondition;

        if (!typeConditionNode) {
          return true;
        }

        var conditionalType = (0, _typeFromAST.typeFromAST)(
          exeContext.schema,
          typeConditionNode
        );

        if (conditionalType === type) {
          return true;
        }

        if ((0, _definition.isAbstractType)(conditionalType)) {
          return exeContext.schema.isSubType(conditionalType, type);
        }

        return false;
      }
      /**
       * Implements the logic to compute the key of a given field's entry
       */

      function getFieldEntryKey(node) {
        return node.alias ? node.alias.value : node.name.value;
      }
      /**
       * Resolves the field on the given source object. In particular, this
       * figures out the value that the field returns by calling its resolve function,
       * then calls completeValue to complete promises, serialize scalars, or execute
       * the sub-selection-set for objects.
       */

      function resolveField(exeContext, parentType, source, fieldNodes, path) {
        var _fieldDef$resolve;

        var fieldNode = fieldNodes[0];
        var fieldName = fieldNode.name.value;
        var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);

        if (!fieldDef) {
          return;
        }

        var returnType = fieldDef.type;
        var resolveFn =
          (_fieldDef$resolve = fieldDef.resolve) !== null &&
          _fieldDef$resolve !== void 0
            ? _fieldDef$resolve
            : exeContext.fieldResolver;
        var info = buildResolveInfo(
          exeContext,
          fieldDef,
          fieldNodes,
          parentType,
          path
        ); // Get the resolve function, regardless of if its result is normal or abrupt (error).

        try {
          // Build a JS object of arguments from the field.arguments AST, using the
          // variables scope to fulfill any variable references.
          // TODO: find a way to memoize, in case this field is within a List type.
          var args = (0, _values.getArgumentValues)(
            fieldDef,
            fieldNodes[0],
            exeContext.variableValues
          ); // The resolve function's optional third argument is a context value that
          // is provided to every resolve function within an execution. It is commonly
          // used to represent an authenticated user, or request-specific caches.

          var _contextValue = exeContext.contextValue;
          var result = resolveFn(source, args, _contextValue, info);
          var completed;

          if ((0, _isPromise.default)(result)) {
            completed = result.then(function(resolved) {
              return completeValue(
                exeContext,
                returnType,
                fieldNodes,
                info,
                path,
                resolved
              );
            });
          } else {
            completed = completeValue(
              exeContext,
              returnType,
              fieldNodes,
              info,
              path,
              result
            );
          }

          if ((0, _isPromise.default)(completed)) {
            // Note: we don't rely on a `catch` method, but we do expect "thenable"
            // to take a second callback for the error case.
            return completed.then(undefined, function(rawError) {
              var error = (0, _locatedError.locatedError)(
                rawError,
                fieldNodes,
                (0, _Path.pathToArray)(path)
              );
              return handleFieldError(error, returnType, exeContext);
            });
          }

          return completed;
        } catch (rawError) {
          var error = (0, _locatedError.locatedError)(
            rawError,
            fieldNodes,
            (0, _Path.pathToArray)(path)
          );
          return handleFieldError(error, returnType, exeContext);
        }
      }
      /**
       * @internal
       */

      function buildResolveInfo(
        exeContext,
        fieldDef,
        fieldNodes,
        parentType,
        path
      ) {
        // The resolve function's optional fourth argument is a collection of
        // information about the current execution state.
        return {
          fieldName: fieldDef.name,
          fieldNodes: fieldNodes,
          returnType: fieldDef.type,
          parentType: parentType,
          path: path,
          schema: exeContext.schema,
          fragments: exeContext.fragments,
          rootValue: exeContext.rootValue,
          operation: exeContext.operation,
          variableValues: exeContext.variableValues
        };
      }

      function handleFieldError(error, returnType, exeContext) {
        // If the field type is non-nullable, then it is resolved without any
        // protection from errors, however it still properly locates the error.
        if ((0, _definition.isNonNullType)(returnType)) {
          throw error;
        } // Otherwise, error protection is applied, logging the error and resolving
        // a null value for this field if one is encountered.

        exeContext.errors.push(error);
        return null;
      }
      /**
       * Implements the instructions for completeValue as defined in the
       * "Field entries" section of the spec.
       *
       * If the field type is Non-Null, then this recursively completes the value
       * for the inner type. It throws a field error if that completion returns null,
       * as per the "Nullability" section of the spec.
       *
       * If the field type is a List, then this recursively completes the value
       * for the inner type on each item in the list.
       *
       * If the field type is a Scalar or Enum, ensures the completed value is a legal
       * value of the type by calling the `serialize` method of GraphQL type
       * definition.
       *
       * If the field is an abstract type, determine the runtime type of the value
       * and then complete based on that type
       *
       * Otherwise, the field type expects a sub-selection set, and will complete the
       * value by evaluating all sub-selections.
       */

      function completeValue(
        exeContext,
        returnType,
        fieldNodes,
        info,
        path,
        result
      ) {
        // If result is an Error, throw a located error.
        if (result instanceof Error) {
          throw result;
        } // If field type is NonNull, complete for inner type, and throw field error
        // if result is null.

        if ((0, _definition.isNonNullType)(returnType)) {
          var completed = completeValue(
            exeContext,
            returnType.ofType,
            fieldNodes,
            info,
            path,
            result
          );

          if (completed === null) {
            throw new Error(
              "Cannot return null for non-nullable field "
                .concat(info.parentType.name, ".")
                .concat(info.fieldName, ".")
            );
          }

          return completed;
        } // If result value is null or undefined then return null.

        if (result == null) {
          return null;
        } // If field type is List, complete each item in the list with the inner type

        if ((0, _definition.isListType)(returnType)) {
          return completeListValue(
            exeContext,
            returnType,
            fieldNodes,
            info,
            path,
            result
          );
        } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
        // returning null if serialization is not possible.

        if ((0, _definition.isLeafType)(returnType)) {
          return completeLeafValue(returnType, result);
        } // If field type is an abstract type, Interface or Union, determine the
        // runtime Object type and complete for that type.

        if ((0, _definition.isAbstractType)(returnType)) {
          return completeAbstractValue(
            exeContext,
            returnType,
            fieldNodes,
            info,
            path,
            result
          );
        } // If field type is Object, execute and complete all sub-selections.
        // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isObjectType)(returnType)) {
          return completeObjectValue(
            exeContext,
            returnType,
            fieldNodes,
            info,
            path,
            result
          );
        } // istanbul ignore next (Not reachable. All possible output types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Cannot complete value of unexpected output type: " +
              (0, _inspect.default)(returnType)
          );
      }
      /**
       * Complete a list value by completing each item in the list with the
       * inner type
       */

      function completeListValue(
        exeContext,
        returnType,
        fieldNodes,
        info,
        path,
        result
      ) {
        // This is specified as a simple map, however we're optimizing the path
        // where the list contains no Promises by avoiding creating another Promise.
        var itemType = returnType.ofType;
        var containsPromise = false;
        var completedResults = (0, _safeArrayFrom.default)(result, function(
          item,
          index
        ) {
          // No need to modify the info object containing the path,
          // since from here on it is not ever accessed by resolver functions.
          var itemPath = (0, _Path.addPath)(path, index, undefined);

          try {
            var completedItem;

            if ((0, _isPromise.default)(item)) {
              completedItem = item.then(function(resolved) {
                return completeValue(
                  exeContext,
                  itemType,
                  fieldNodes,
                  info,
                  itemPath,
                  resolved
                );
              });
            } else {
              completedItem = completeValue(
                exeContext,
                itemType,
                fieldNodes,
                info,
                itemPath,
                item
              );
            }

            if ((0, _isPromise.default)(completedItem)) {
              containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
              // to take a second callback for the error case.

              return completedItem.then(undefined, function(rawError) {
                var error = (0, _locatedError.locatedError)(
                  rawError,
                  fieldNodes,
                  (0, _Path.pathToArray)(itemPath)
                );
                return handleFieldError(error, itemType, exeContext);
              });
            }

            return completedItem;
          } catch (rawError) {
            var error = (0, _locatedError.locatedError)(
              rawError,
              fieldNodes,
              (0, _Path.pathToArray)(itemPath)
            );
            return handleFieldError(error, itemType, exeContext);
          }
        });

        if (completedResults == null) {
          throw new _GraphQLError.GraphQLError(
            'Expected Iterable, but did not find one for field "'
              .concat(info.parentType.name, ".")
              .concat(info.fieldName, '".')
          );
        }

        return containsPromise
          ? Promise.all(completedResults)
          : completedResults;
      }
      /**
       * Complete a Scalar or Enum by serializing to a valid value, returning
       * null if serialization is not possible.
       */

      function completeLeafValue(returnType, result) {
        var serializedResult = returnType.serialize(result);

        if (serializedResult === undefined) {
          throw new Error(
            'Expected a value of type "'.concat(
              (0, _inspect.default)(returnType),
              '" but '
            ) + "received: ".concat((0, _inspect.default)(result))
          );
        }

        return serializedResult;
      }
      /**
       * Complete a value of an abstract type by determining the runtime object type
       * of that value, then complete the value for that type.
       */

      function completeAbstractValue(
        exeContext,
        returnType,
        fieldNodes,
        info,
        path,
        result
      ) {
        var _returnType$resolveTy;

        var resolveTypeFn =
          (_returnType$resolveTy = returnType.resolveType) !== null &&
          _returnType$resolveTy !== void 0
            ? _returnType$resolveTy
            : exeContext.typeResolver;
        var contextValue = exeContext.contextValue;
        var runtimeType = resolveTypeFn(result, contextValue, info, returnType);

        if ((0, _isPromise.default)(runtimeType)) {
          return runtimeType.then(function(resolvedRuntimeType) {
            return completeObjectValue(
              exeContext,
              ensureValidRuntimeType(
                resolvedRuntimeType,
                exeContext,
                returnType,
                fieldNodes,
                info,
                result
              ),
              fieldNodes,
              info,
              path,
              result
            );
          });
        }

        return completeObjectValue(
          exeContext,
          ensureValidRuntimeType(
            runtimeType,
            exeContext,
            returnType,
            fieldNodes,
            info,
            result
          ),
          fieldNodes,
          info,
          path,
          result
        );
      }

      function ensureValidRuntimeType(
        runtimeTypeOrName,
        exeContext,
        returnType,
        fieldNodes,
        info,
        result
      ) {
        if (runtimeTypeOrName == null) {
          throw new _GraphQLError.GraphQLError(
            'Abstract type "'
              .concat(
                returnType.name,
                '" must resolve to an Object type at runtime for field "'
              )
              .concat(info.parentType.name, ".")
              .concat(info.fieldName, '". Either the "')
              .concat(
                returnType.name,
                '" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.'
              ),
            fieldNodes
          );
        } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0

        var runtimeTypeName = (0, _definition.isNamedType)(runtimeTypeOrName)
          ? runtimeTypeOrName.name
          : runtimeTypeOrName;

        if (typeof runtimeTypeName !== "string") {
          throw new _GraphQLError.GraphQLError(
            'Abstract type "'
              .concat(
                returnType.name,
                '" must resolve to an Object type at runtime for field "'
              )
              .concat(info.parentType.name, ".")
              .concat(info.fieldName, '" with ') +
              "value "
                .concat((0, _inspect.default)(result), ', received "')
                .concat((0, _inspect.default)(runtimeTypeOrName), '".')
          );
        }

        var runtimeType = exeContext.schema.getType(runtimeTypeName);

        if (runtimeType == null) {
          throw new _GraphQLError.GraphQLError(
            'Abstract type "'
              .concat(returnType.name, '" was resolve to a type "')
              .concat(runtimeTypeName, '" that does not exist inside schema.'),
            fieldNodes
          );
        }

        if (!(0, _definition.isObjectType)(runtimeType)) {
          throw new _GraphQLError.GraphQLError(
            'Abstract type "'
              .concat(returnType.name, '" was resolve to a non-object type "')
              .concat(runtimeTypeName, '".'),
            fieldNodes
          );
        }

        if (!exeContext.schema.isSubType(returnType, runtimeType)) {
          throw new _GraphQLError.GraphQLError(
            'Runtime Object type "'
              .concat(runtimeType.name, '" is not a possible type for "')
              .concat(returnType.name, '".'),
            fieldNodes
          );
        }

        return runtimeType;
      }
      /**
       * Complete an Object value by executing all sub-selections.
       */

      function completeObjectValue(
        exeContext,
        returnType,
        fieldNodes,
        info,
        path,
        result
      ) {
        // If there is an isTypeOf predicate function, call it with the
        // current result. If isTypeOf returns false, then raise an error rather
        // than continuing execution.
        if (returnType.isTypeOf) {
          var isTypeOf = returnType.isTypeOf(
            result,
            exeContext.contextValue,
            info
          );

          if ((0, _isPromise.default)(isTypeOf)) {
            return isTypeOf.then(function(resolvedIsTypeOf) {
              if (!resolvedIsTypeOf) {
                throw invalidReturnTypeError(returnType, result, fieldNodes);
              }

              return collectAndExecuteSubfields(
                exeContext,
                returnType,
                fieldNodes,
                path,
                result
              );
            });
          }

          if (!isTypeOf) {
            throw invalidReturnTypeError(returnType, result, fieldNodes);
          }
        }

        return collectAndExecuteSubfields(
          exeContext,
          returnType,
          fieldNodes,
          path,
          result
        );
      }

      function invalidReturnTypeError(returnType, result, fieldNodes) {
        return new _GraphQLError.GraphQLError(
          'Expected value of type "'
            .concat(returnType.name, '" but got: ')
            .concat((0, _inspect.default)(result), "."),
          fieldNodes
        );
      }

      function collectAndExecuteSubfields(
        exeContext,
        returnType,
        fieldNodes,
        path,
        result
      ) {
        // Collect sub-fields to execute to complete this value.
        var subFieldNodes = collectSubfields(
          exeContext,
          returnType,
          fieldNodes
        );
        return executeFields(
          exeContext,
          returnType,
          result,
          path,
          subFieldNodes
        );
      }
      /**
       * A memoized collection of relevant subfields with regard to the return
       * type. Memoizing ensures the subfields are not repeatedly calculated, which
       * saves overhead when resolving lists of values.
       */

      var collectSubfields = (0, _memoize.default)(_collectSubfields);

      function _collectSubfields(exeContext, returnType, fieldNodes) {
        var subFieldNodes = Object.create(null);
        var visitedFragmentNames = Object.create(null);

        for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {
          var node = fieldNodes[_i8];

          if (node.selectionSet) {
            subFieldNodes = collectFields(
              exeContext,
              returnType,
              node.selectionSet,
              subFieldNodes,
              visitedFragmentNames
            );
          }
        }

        return subFieldNodes;
      }
      /**
       * If a resolveType function is not given, then a default resolve behavior is
       * used which attempts two strategies:
       *
       * First, See if the provided value has a `__typename` field defined, if so, use
       * that value as name of the resolved type.
       *
       * Otherwise, test each possible type for the abstract type by calling
       * isTypeOf for the object being coerced, returning the first type that matches.
       */

      var defaultTypeResolver = function defaultTypeResolver(
        value,
        contextValue,
        info,
        abstractType
      ) {
        // First, look for `__typename`.
        if (
          (0, _isObjectLike.default)(value) &&
          typeof value.__typename === "string"
        ) {
          return value.__typename;
        } // Otherwise, test each possible type.

        var possibleTypes = info.schema.getPossibleTypes(abstractType);
        var promisedIsTypeOfResults = [];

        for (var i = 0; i < possibleTypes.length; i++) {
          var type = possibleTypes[i];

          if (type.isTypeOf) {
            var isTypeOfResult = type.isTypeOf(value, contextValue, info);

            if ((0, _isPromise.default)(isTypeOfResult)) {
              promisedIsTypeOfResults[i] = isTypeOfResult;
            } else if (isTypeOfResult) {
              return type.name;
            }
          }
        }

        if (promisedIsTypeOfResults.length) {
          return Promise.all(promisedIsTypeOfResults).then(function(
            isTypeOfResults
          ) {
            for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {
              if (isTypeOfResults[_i9]) {
                return possibleTypes[_i9].name;
              }
            }
          });
        }
      };
      /**
       * If a resolve function is not given, then a default resolve behavior is used
       * which takes the property of the source object of the same name as the field
       * and returns it as the result, or if it's a function, returns the result
       * of calling that function while passing along args and context value.
       */

      exports.defaultTypeResolver = defaultTypeResolver;

      var defaultFieldResolver = function defaultFieldResolver(
        source,
        args,
        contextValue,
        info
      ) {
        // ensure source is a value for which property access is acceptable.
        if (
          (0, _isObjectLike.default)(source) ||
          typeof source === "function"
        ) {
          var property = source[info.fieldName];

          if (typeof property === "function") {
            return source[info.fieldName](args, contextValue, info);
          }

          return property;
        }
      };
      /**
       * This method looks up the field on the given type definition.
       * It has special casing for the three introspection fields,
       * __schema, __type and __typename. __typename is special because
       * it can always be queried as a field, even in situations where no
       * other fields are allowed, like on a Union. __schema and __type
       * could get automatically added to the query type, but that would
       * require mutating type definitions, which would cause issues.
       *
       * @internal
       */

      exports.defaultFieldResolver = defaultFieldResolver;

      function getFieldDef(schema, parentType, fieldName) {
        if (
          fieldName === _introspection.SchemaMetaFieldDef.name &&
          schema.getQueryType() === parentType
        ) {
          return _introspection.SchemaMetaFieldDef;
        } else if (
          fieldName === _introspection.TypeMetaFieldDef.name &&
          schema.getQueryType() === parentType
        ) {
          return _introspection.TypeMetaFieldDef;
        } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
          return _introspection.TypeNameMetaFieldDef;
        }

        return parentType.getFields()[fieldName];
      }

      /***/
    },

    /***/ TdCP: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Subscriptions must only include one field.
       *
       * A GraphQL subscription is valid only if it contains a single root field.
       */
      function SingleFieldSubscriptionsRule(context) {
        return {
          OperationDefinition: function OperationDefinition(node) {
            if (node.operation === "subscription") {
              if (node.selectionSet.selections.length !== 1) {
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    node.name
                      ? 'Subscription "'.concat(
                          node.name.value,
                          '" must select only one top level field.'
                        )
                      : "Anonymous Subscription must select only one top level field.",
                    node.selectionSet.selections.slice(1)
                  )
                );
              }
            }
          }
        };
      }

      /***/
    },

    /***/ Teho: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports = function isPrimitive(value) {
        return (
          value === null ||
          (typeof value !== "function" && typeof value !== "object")
        );
      };

      /***/
    },

    /***/ TkMy: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique directive names
       *
       * A GraphQL document is only valid if all defined directives have unique names.
       */
      function UniqueDirectiveNamesRule(context) {
        var knownDirectiveNames = Object.create(null);
        var schema = context.getSchema();
        return {
          DirectiveDefinition: function DirectiveDefinition(node) {
            var directiveName = node.name.value;

            if (
              schema !== null &&
              schema !== void 0 &&
              schema.getDirective(directiveName)
            ) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Directive "@'.concat(
                    directiveName,
                    '" already exists in the schema. It cannot be redefined.'
                  ),
                  node.name
                )
              );
              return;
            }

            if (knownDirectiveNames[directiveName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'There can be only one directive named "@'.concat(
                    directiveName,
                    '".'
                  ),
                  [knownDirectiveNames[directiveName], node.name]
                )
              );
            } else {
              knownDirectiveNames[directiveName] = node.name;
            }

            return false;
          }
        };
      }

      /***/
    },

    /***/ TqRt: /***/ function(module, exports) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule
          ? obj
          : {
              default: obj
            };
      }

      module.exports = _interopRequireDefault;

      /***/
    },

    /***/ UGla: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _require = __webpack_require__("VrDQ"),
        createUserError = _require.createUserError,
        eachWithCombinedError = _require.eachWithCombinedError;

      /**
       * Creates a scope for a `Root`, with each argument mapped to a variable of the
       * same name. Example:
       *
       * Query:
       * query Foo($id: ID, $size: Int = 42) { ... }
       *
       * Scope:
       * {
       *   id: $id,
       *   size: $size,
       * }
       *
       * Note that even though a default value is defined for $size, the scope must
       * assume that this could be overridden at runtime. The value cannot be decided
       * statically and therefore is set to a variable.
       */
      function getRootScope(definitions) {
        var scope = {};
        definitions.forEach(function(definition) {
          scope[definition.name] = {
            kind: "Variable",
            loc: definition.loc,
            variableName: definition.name,
            type: definition.type
          };
        });
        return scope;
      }
      /**
       * Creates a scope for a `Fragment` by translating fragment spread arguments in
       * the context of a parent scope into a new scope and validating them against
       * the argument definitions.
       *
       *
       * Parent Scope:
       * {
       *   active: $parentActive
       * }
       *
       * Fragment Spread:
       * ...Bar(size: 42, enabled: $active)
       *
       * Fragment:
       * fragment Bar on Foo @argumentDefinitions(
       *   id: {type: "ID"}
       *   size: {type: "Int"}
       *   enabled: {type: "Boolean}
       *   scale: {type: "Int", imports: "pixelRatio"}
       * )
       *
       * Scope:
       * {
       *   // No argument is provided for $id, it gets the default value which in this
       *   // case is `null`:
       *   id: null,
       *
       *   // The parent passes 42 as a literal value for $size:
       *   size: 42,
       *
       *   // The parent passes a variable as the value of $enabled. This variable is
       *   // resolved in the parent scope to the value $parentActive, which becomes
       *   // the value of $enabled:
       *   $enabled: $parentActive,
       *
       *   // $scale imports pixelRatio from the root scope. Since any argument in a
       *   // root scope maps to a variable of the same name, that means the value of
       *   // pixelRatio in the root is $pixelRatio:
       *   $scale: $pixelRatio,
       * }
       */

      function getFragmentScope(
        schema,
        definitions,
        args,
        parentScope,
        spread
      ) {
        var argMap = new Map();
        args.forEach(function(arg) {
          if (arg.value.kind === "Literal") {
            argMap.set(arg.name, arg.value);
          } else if (arg.value.kind === "Variable") {
            argMap.set(arg.name, parentScope[arg.value.variableName]);
          }
        });
        var fragmentScope = {};
        eachWithCombinedError(definitions, function(definition) {
          if (definition.kind === "RootArgumentDefinition") {
            if (argMap.has(definition.name)) {
              var _argNode$loc;

              var argNode = args.find(function(a) {
                return a.name === definition.name;
              });
              throw createUserError(
                "Unexpected argument '"
                  .concat(definition.name, "' supplied to fragment '")
                  .concat(
                    spread.name,
                    "'. @arguments may only be provided for variables defined in the fragment's @argumentDefinitions."
                  ),
                [
                  (_argNode$loc =
                    argNode === null || argNode === void 0
                      ? void 0
                      : argNode.loc) !== null && _argNode$loc !== void 0
                    ? _argNode$loc
                    : spread.loc
                ]
              );
            }

            fragmentScope[definition.name] = {
              kind: "Variable",
              loc: definition.loc,
              variableName: definition.name,
              type: definition.type
            };
          } else {
            var arg = argMap.get(definition.name);

            if (arg == null || (arg.kind === "Literal" && arg.value == null)) {
              // No variable or literal null was passed, fall back to default
              // value.
              if (
                definition.defaultValue == null &&
                schema.isNonNull(definition.type)
              ) {
                var _argNode$loc2;

                var _argNode = args.find(function(a) {
                  return a.name === definition.name;
                });

                throw createUserError(
                  "No value found for required argument '"
                    .concat(definition.name, ": ")
                    .concat(
                      schema.getTypeString(definition.type),
                      "' on fragment '"
                    )
                    .concat(spread.name, "'."),
                  [
                    (_argNode$loc2 =
                      _argNode === null || _argNode === void 0
                        ? void 0
                        : _argNode.loc) !== null && _argNode$loc2 !== void 0
                      ? _argNode$loc2
                      : spread.loc
                  ]
                );
              }

              fragmentScope[definition.name] = {
                kind: "Literal",
                value: definition.defaultValue
              };
            } else {
              // Variable or non-null literal.
              fragmentScope[definition.name] = arg;
            }
          }
        });
        return fragmentScope;
      }

      module.exports = {
        getFragmentScope: getFragmentScope,
        getRootScope: getRootScope
      };

      /***/
    },

    /***/ URYG: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $Object = GetIntrinsic("%Object%");

      var isPrimitive = __webpack_require__("9dO7");

      var $preventExtensions = $Object.preventExtensions;
      var $isExtensible = $Object.isExtensible;

      // https://ecma-international.org/ecma-262/6.0/#sec-isextensible-o

      module.exports = $preventExtensions
        ? function IsExtensible(obj) {
            return !isPrimitive(obj) && $isExtensible(obj);
          }
        : function IsExtensible(obj) {
            return !isPrimitive(obj);
          };

      /***/
    },

    /***/ UVaH: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var origSymbol = global.Symbol;
      var hasSymbolSham = __webpack_require__("FpZJ");

      module.exports = function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }

        return hasSymbolSham();
      };

      /***/
    },

    /***/ Ug9W: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _predicates = __webpack_require__("hzsB");

      var _definition = __webpack_require__("mAVk");

      var _defKindToExtKind;

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Possible type extension
       *
       * A type extension is only valid if the type is defined and has the same kind.
       */
      function PossibleTypeExtensionsRule(context) {
        var schema = context.getSchema();
        var definedTypes = Object.create(null);

        for (
          var _i2 = 0,
            _context$getDocument$2 = context.getDocument().definitions;
          _i2 < _context$getDocument$2.length;
          _i2++
        ) {
          var def = _context$getDocument$2[_i2];

          if ((0, _predicates.isTypeDefinitionNode)(def)) {
            definedTypes[def.name.value] = def;
          }
        }

        return {
          ScalarTypeExtension: checkExtension,
          ObjectTypeExtension: checkExtension,
          InterfaceTypeExtension: checkExtension,
          UnionTypeExtension: checkExtension,
          EnumTypeExtension: checkExtension,
          InputObjectTypeExtension: checkExtension
        };

        function checkExtension(node) {
          var typeName = node.name.value;
          var defNode = definedTypes[typeName];
          var existingType =
            schema === null || schema === void 0
              ? void 0
              : schema.getType(typeName);
          var expectedKind;

          if (defNode) {
            expectedKind = defKindToExtKind[defNode.kind];
          } else if (existingType) {
            expectedKind = typeToExtKind(existingType);
          }

          if (expectedKind) {
            if (expectedKind !== node.kind) {
              var kindStr = extensionKindToTypeName(node.kind);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "Cannot extend non-"
                    .concat(kindStr, ' type "')
                    .concat(typeName, '".'),
                  defNode ? [defNode, node] : node
                )
              );
            }
          } else {
            var allTypeNames = Object.keys(definedTypes);

            if (schema) {
              allTypeNames = allTypeNames.concat(
                Object.keys(schema.getTypeMap())
              );
            }

            var suggestedTypes = (0, _suggestionList.default)(
              typeName,
              allTypeNames
            );
            context.reportError(
              new _GraphQLError.GraphQLError(
                'Cannot extend type "'.concat(
                  typeName,
                  '" because it is not defined.'
                ) + (0, _didYouMean.default)(suggestedTypes),
                node.name
              )
            );
          }
        }
      }

      var defKindToExtKind =
        ((_defKindToExtKind = {}),
        _defineProperty(
          _defKindToExtKind,
          _kinds.Kind.SCALAR_TYPE_DEFINITION,
          _kinds.Kind.SCALAR_TYPE_EXTENSION
        ),
        _defineProperty(
          _defKindToExtKind,
          _kinds.Kind.OBJECT_TYPE_DEFINITION,
          _kinds.Kind.OBJECT_TYPE_EXTENSION
        ),
        _defineProperty(
          _defKindToExtKind,
          _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          _kinds.Kind.INTERFACE_TYPE_EXTENSION
        ),
        _defineProperty(
          _defKindToExtKind,
          _kinds.Kind.UNION_TYPE_DEFINITION,
          _kinds.Kind.UNION_TYPE_EXTENSION
        ),
        _defineProperty(
          _defKindToExtKind,
          _kinds.Kind.ENUM_TYPE_DEFINITION,
          _kinds.Kind.ENUM_TYPE_EXTENSION
        ),
        _defineProperty(
          _defKindToExtKind,
          _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION
        ),
        _defKindToExtKind);

      function typeToExtKind(type) {
        if ((0, _definition.isScalarType)(type)) {
          return _kinds.Kind.SCALAR_TYPE_EXTENSION;
        }

        if ((0, _definition.isObjectType)(type)) {
          return _kinds.Kind.OBJECT_TYPE_EXTENSION;
        }

        if ((0, _definition.isInterfaceType)(type)) {
          return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
        }

        if ((0, _definition.isUnionType)(type)) {
          return _kinds.Kind.UNION_TYPE_EXTENSION;
        }

        if ((0, _definition.isEnumType)(type)) {
          return _kinds.Kind.ENUM_TYPE_EXTENSION;
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isInputObjectType)(type)) {
          return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
        } // istanbul ignore next (Not reachable. All possible types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected type: " + (0, _inspect.default)(type)
          );
      }

      function extensionKindToTypeName(kind) {
        switch (kind) {
          case _kinds.Kind.SCALAR_TYPE_EXTENSION:
            return "scalar";

          case _kinds.Kind.OBJECT_TYPE_EXTENSION:
            return "object";

          case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
            return "interface";

          case _kinds.Kind.UNION_TYPE_EXTENSION:
            return "union";

          case _kinds.Kind.ENUM_TYPE_EXTENSION:
            return "enum";

          case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
            return "input object";
        } // istanbul ignore next (Not reachable. All possible types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected kind: " + (0, _inspect.default)(kind)
          );
      }

      /***/
    },

    /***/ Uh8e: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.visitWithTypeInfo = visitWithTypeInfo;
      exports.TypeInfo = void 0;

      var _find = _interopRequireDefault(__webpack_require__("Mj15"));

      var _kinds = __webpack_require__("xaK5");

      var _ast = __webpack_require__("fZhc");

      var _visitor = __webpack_require__("tqCx");

      var _definition = __webpack_require__("mAVk");

      var _introspection = __webpack_require__("JIc4");

      var _typeFromAST = __webpack_require__("3w1o");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * TypeInfo is a utility class which, given a GraphQL schema, can keep track
       * of the current field and type definitions at any point in a GraphQL document
       * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
       */
      var TypeInfo = /*#__PURE__*/ (function() {
        function TypeInfo(
          schema, // NOTE: this experimental optional second parameter is only needed in order
          // to support non-spec-compliant code bases. You should never need to use it.
          // It may disappear in the future.
          getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals
          // beginning somewhere other than documents.
          initialType
        ) {
          this._schema = schema;
          this._typeStack = [];
          this._parentTypeStack = [];
          this._inputTypeStack = [];
          this._fieldDefStack = [];
          this._defaultValueStack = [];
          this._directive = null;
          this._argument = null;
          this._enumValue = null;
          this._getFieldDef =
            getFieldDefFn !== null && getFieldDefFn !== void 0
              ? getFieldDefFn
              : getFieldDef;

          if (initialType) {
            if ((0, _definition.isInputType)(initialType)) {
              this._inputTypeStack.push(initialType);
            }

            if ((0, _definition.isCompositeType)(initialType)) {
              this._parentTypeStack.push(initialType);
            }

            if ((0, _definition.isOutputType)(initialType)) {
              this._typeStack.push(initialType);
            }
          }
        }

        var _proto = TypeInfo.prototype;

        _proto.getType = function getType() {
          if (this._typeStack.length > 0) {
            return this._typeStack[this._typeStack.length - 1];
          }
        };

        _proto.getParentType = function getParentType() {
          if (this._parentTypeStack.length > 0) {
            return this._parentTypeStack[this._parentTypeStack.length - 1];
          }
        };

        _proto.getInputType = function getInputType() {
          if (this._inputTypeStack.length > 0) {
            return this._inputTypeStack[this._inputTypeStack.length - 1];
          }
        };

        _proto.getParentInputType = function getParentInputType() {
          if (this._inputTypeStack.length > 1) {
            return this._inputTypeStack[this._inputTypeStack.length - 2];
          }
        };

        _proto.getFieldDef = function getFieldDef() {
          if (this._fieldDefStack.length > 0) {
            return this._fieldDefStack[this._fieldDefStack.length - 1];
          }
        };

        _proto.getDefaultValue = function getDefaultValue() {
          if (this._defaultValueStack.length > 0) {
            return this._defaultValueStack[this._defaultValueStack.length - 1];
          }
        };

        _proto.getDirective = function getDirective() {
          return this._directive;
        };

        _proto.getArgument = function getArgument() {
          return this._argument;
        };

        _proto.getEnumValue = function getEnumValue() {
          return this._enumValue;
        };

        _proto.enter = function enter(node) {
          var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
          // any assumptions of a valid schema to ensure runtime types are properly
          // checked before continuing since TypeInfo is used as part of validation
          // which occurs before guarantees of schema and document validity.

          switch (node.kind) {
            case _kinds.Kind.SELECTION_SET: {
              var namedType = (0, _definition.getNamedType)(this.getType());

              this._parentTypeStack.push(
                (0, _definition.isCompositeType)(namedType)
                  ? namedType
                  : undefined
              );

              break;
            }

            case _kinds.Kind.FIELD: {
              var parentType = this.getParentType();
              var fieldDef;
              var fieldType;

              if (parentType) {
                fieldDef = this._getFieldDef(schema, parentType, node);

                if (fieldDef) {
                  fieldType = fieldDef.type;
                }
              }

              this._fieldDefStack.push(fieldDef);

              this._typeStack.push(
                (0, _definition.isOutputType)(fieldType) ? fieldType : undefined
              );

              break;
            }

            case _kinds.Kind.DIRECTIVE:
              this._directive = schema.getDirective(node.name.value);
              break;

            case _kinds.Kind.OPERATION_DEFINITION: {
              var type;

              switch (node.operation) {
                case "query":
                  type = schema.getQueryType();
                  break;

                case "mutation":
                  type = schema.getMutationType();
                  break;

                case "subscription":
                  type = schema.getSubscriptionType();
                  break;
              }

              this._typeStack.push(
                (0, _definition.isObjectType)(type) ? type : undefined
              );

              break;
            }

            case _kinds.Kind.INLINE_FRAGMENT:
            case _kinds.Kind.FRAGMENT_DEFINITION: {
              var typeConditionAST = node.typeCondition;
              var outputType = typeConditionAST
                ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST)
                : (0, _definition.getNamedType)(this.getType());

              this._typeStack.push(
                (0, _definition.isOutputType)(outputType)
                  ? outputType
                  : undefined
              );

              break;
            }

            case _kinds.Kind.VARIABLE_DEFINITION: {
              var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);

              this._inputTypeStack.push(
                (0, _definition.isInputType)(inputType) ? inputType : undefined
              );

              break;
            }

            case _kinds.Kind.ARGUMENT: {
              var _this$getDirective;

              var argDef;
              var argType;
              var fieldOrDirective =
                (_this$getDirective = this.getDirective()) !== null &&
                _this$getDirective !== void 0
                  ? _this$getDirective
                  : this.getFieldDef();

              if (fieldOrDirective) {
                argDef = (0, _find.default)(fieldOrDirective.args, function(
                  arg
                ) {
                  return arg.name === node.name.value;
                });

                if (argDef) {
                  argType = argDef.type;
                }
              }

              this._argument = argDef;

              this._defaultValueStack.push(
                argDef ? argDef.defaultValue : undefined
              );

              this._inputTypeStack.push(
                (0, _definition.isInputType)(argType) ? argType : undefined
              );

              break;
            }

            case _kinds.Kind.LIST: {
              var listType = (0, _definition.getNullableType)(
                this.getInputType()
              );
              var itemType = (0, _definition.isListType)(listType)
                ? listType.ofType
                : listType; // List positions never have a default value.

              this._defaultValueStack.push(undefined);

              this._inputTypeStack.push(
                (0, _definition.isInputType)(itemType) ? itemType : undefined
              );

              break;
            }

            case _kinds.Kind.OBJECT_FIELD: {
              var objectType = (0, _definition.getNamedType)(
                this.getInputType()
              );
              var inputFieldType;
              var inputField;

              if ((0, _definition.isInputObjectType)(objectType)) {
                inputField = objectType.getFields()[node.name.value];

                if (inputField) {
                  inputFieldType = inputField.type;
                }
              }

              this._defaultValueStack.push(
                inputField ? inputField.defaultValue : undefined
              );

              this._inputTypeStack.push(
                (0, _definition.isInputType)(inputFieldType)
                  ? inputFieldType
                  : undefined
              );

              break;
            }

            case _kinds.Kind.ENUM: {
              var enumType = (0, _definition.getNamedType)(this.getInputType());
              var enumValue;

              if ((0, _definition.isEnumType)(enumType)) {
                enumValue = enumType.getValue(node.value);
              }

              this._enumValue = enumValue;
              break;
            }
          }
        };

        _proto.leave = function leave(node) {
          switch (node.kind) {
            case _kinds.Kind.SELECTION_SET:
              this._parentTypeStack.pop();

              break;

            case _kinds.Kind.FIELD:
              this._fieldDefStack.pop();

              this._typeStack.pop();

              break;

            case _kinds.Kind.DIRECTIVE:
              this._directive = null;
              break;

            case _kinds.Kind.OPERATION_DEFINITION:
            case _kinds.Kind.INLINE_FRAGMENT:
            case _kinds.Kind.FRAGMENT_DEFINITION:
              this._typeStack.pop();

              break;

            case _kinds.Kind.VARIABLE_DEFINITION:
              this._inputTypeStack.pop();

              break;

            case _kinds.Kind.ARGUMENT:
              this._argument = null;

              this._defaultValueStack.pop();

              this._inputTypeStack.pop();

              break;

            case _kinds.Kind.LIST:
            case _kinds.Kind.OBJECT_FIELD:
              this._defaultValueStack.pop();

              this._inputTypeStack.pop();

              break;

            case _kinds.Kind.ENUM:
              this._enumValue = null;
              break;
          }
        };

        return TypeInfo;
      })();
      /**
       * Not exactly the same as the executor's definition of getFieldDef, in this
       * statically evaluated environment we do not always have an Object type,
       * and need to handle Interface and Union types.
       */

      exports.TypeInfo = TypeInfo;

      function getFieldDef(schema, parentType, fieldNode) {
        var name = fieldNode.name.value;

        if (
          name === _introspection.SchemaMetaFieldDef.name &&
          schema.getQueryType() === parentType
        ) {
          return _introspection.SchemaMetaFieldDef;
        }

        if (
          name === _introspection.TypeMetaFieldDef.name &&
          schema.getQueryType() === parentType
        ) {
          return _introspection.TypeMetaFieldDef;
        }

        if (
          name === _introspection.TypeNameMetaFieldDef.name &&
          (0, _definition.isCompositeType)(parentType)
        ) {
          return _introspection.TypeNameMetaFieldDef;
        }

        if (
          (0, _definition.isObjectType)(parentType) ||
          (0, _definition.isInterfaceType)(parentType)
        ) {
          return parentType.getFields()[name];
        }
      }
      /**
       * Creates a new visitor instance which maintains a provided TypeInfo instance
       * along with visiting visitor.
       */

      function visitWithTypeInfo(typeInfo, visitor) {
        return {
          enter: function enter(node) {
            typeInfo.enter(node);
            var fn = (0, _visitor.getVisitFn)(
              visitor,
              node.kind,
              /* isLeaving */
              false
            );

            if (fn) {
              var result = fn.apply(visitor, arguments);

              if (result !== undefined) {
                typeInfo.leave(node);

                if ((0, _ast.isNode)(result)) {
                  typeInfo.enter(result);
                }
              }

              return result;
            }
          },
          leave: function leave(node) {
            var fn = (0, _visitor.getVisitFn)(
              visitor,
              node.kind,
              /* isLeaving */
              true
            );
            var result;

            if (fn) {
              result = fn.apply(visitor, arguments);
            }

            typeInfo.leave(node);
            return result;
          }
        };
      }

      /***/
    },

    /***/ Ui9M: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const utils = __webpack_require__("kOHh");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const pluginHelpers = __webpack_require__("ac+X");
      const graphql = __webpack_require__("uKhV");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const typescript = __webpack_require__("fRMO");

      const ENUM_RESOLVERS_SIGNATURE =
        "export type EnumResolverSignature<T, AllowedValues = any> = { [key in keyof T]?: AllowedValues };";
      class TypeScriptResolversVisitor extends visitorPluginCommon.BaseResolversVisitor {
        constructor(pluginConfig, schema) {
          super(
            pluginConfig,
            {
              avoidOptionals: visitorPluginCommon.getConfigValue(
                pluginConfig.avoidOptionals,
                false
              ),
              useIndexSignature: visitorPluginCommon.getConfigValue(
                pluginConfig.useIndexSignature,
                false
              ),
              wrapFieldDefinitions: visitorPluginCommon.getConfigValue(
                pluginConfig.wrapFieldDefinitions,
                false
              ),
              allowParentTypeOverride: visitorPluginCommon.getConfigValue(
                pluginConfig.allowParentTypeOverride,
                false
              ),
              optionalInfoArgument: visitorPluginCommon.getConfigValue(
                pluginConfig.optionalInfoArgument,
                false
              )
            },
            schema
          );
          autoBind(this);
          this.setVariablesTransformer(
            new typescript.TypeScriptOperationVariablesToObject(
              this.scalars,
              this.convertName,
              this.config.avoidOptionals,
              this.config.immutableTypes,
              this.config.namespacedImportName,
              [],
              this.config.enumPrefix,
              this.config.enumValues
            )
          );
          if (this.config.useIndexSignature) {
            this._declarationBlockConfig = {
              blockTransformer(block) {
                return `ResolversObject<${block}>`;
              }
            };
          }
        }
        transformParentGenericType(parentType) {
          if (this.config.allowParentTypeOverride) {
            return `ParentType = ${parentType}`;
          }
          return `ParentType extends ${parentType} = ${parentType}`;
        }
        formatRootResolver(schemaTypeName, resolverType, declarationKind) {
          return `${schemaTypeName}${
            this.config.avoidOptionals ? "" : "?"
          }: ${resolverType}${this.getPunctuation(declarationKind)}`;
        }
        clearOptional(str) {
          if (str.startsWith("Maybe")) {
            return str.replace(/Maybe<(.*?)>$/, "$1");
          }
          return str;
        }
        ListType(node) {
          return `Maybe<${super.ListType(node)}>`;
        }
        wrapWithListType(str) {
          return `${
            this.config.immutableTypes ? "ReadonlyArray" : "Array"
          }<${str}>`;
        }
        getParentTypeForSignature(node) {
          if (
            this._federation.isResolveReferenceField(node) &&
            this.config.wrapFieldDefinitions
          ) {
            return "UnwrappedObject<ParentType>";
          }
          return "ParentType";
        }
        NamedType(node) {
          return `Maybe<${super.NamedType(node)}>`;
        }
        NonNullType(node) {
          const baseValue = super.NonNullType(node);
          return this.clearOptional(baseValue);
        }
        getPunctuation(_declarationKind) {
          return ";";
        }
        buildEnumResolverContentBlock(node, mappedEnumType) {
          const valuesMap = `{ ${(node.values || [])
            .map(v => `${v.name}${this.config.avoidOptionals ? "" : "?"}: any`)
            .join(", ")} }`;
          this._globalDeclarations.add(ENUM_RESOLVERS_SIGNATURE);
          return `EnumResolverSignature<${valuesMap}, ${mappedEnumType}>`;
        }
        buildEnumResolversExplicitMappedValues(node, valuesMapping) {
          return `{ ${(node.values || [])
            .map(v => {
              const valueName = v.name;
              const mappedValue = valuesMapping[valueName];
              return `${valueName}: ${
                typeof mappedValue === "number"
                  ? mappedValue
                  : `'${mappedValue}'`
              }`;
            })
            .join(", ")} }`;
        }
      }

      const plugin = (schema, documents, config) => {
        const imports = [];
        if (!config.customResolveInfo) {
          imports.push("GraphQLResolveInfo");
        }
        const showUnusedMappers =
          typeof config.showUnusedMappers === "boolean"
            ? config.showUnusedMappers
            : true;
        const noSchemaStitching =
          typeof config.noSchemaStitching === "boolean"
            ? config.noSchemaStitching
            : false;
        if (config.noSchemaStitching === false) {
          // eslint-disable-next-line no-console
          console.warn(
            `The default behavior of 'noSchemaStitching' will be reversed in the next major release. Support for Schema Stitching will be disabled by default.`
          );
        }
        const indexSignature = config.useIndexSignature
          ? [
              "export type WithIndex<TObject> = TObject & Record<string, any>;",
              "export type ResolversObject<TObject> = WithIndex<TObject>;"
            ].join("\n")
          : "";
        const transformedSchema = config.federation
          ? pluginHelpers.addFederationReferencesToSchema(schema)
          : schema;
        const visitor = new TypeScriptResolversVisitor(
          config,
          transformedSchema
        );
        const namespacedImportPrefix = visitor.config.namespacedImportName
          ? `${visitor.config.namespacedImportName}.`
          : "";
        const printedSchema = config.federation
          ? utils.printSchemaWithDirectives(transformedSchema)
          : graphql.printSchema(transformedSchema);
        const astNode = graphql.parse(printedSchema);
        // runs visitor
        const visitorResult = graphql.visit(astNode, { leave: visitor });
        const optionalSignForInfoArg = visitor.config.optionalInfoArgument
          ? "?"
          : "";
        const prepend = [];
        const defsToInclude = [];
        const legacyStitchingResolverType = `
export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};`;
        const newStitchingResolverType = `
export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};`;
        const stitchingResolverType = `export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;`;
        const resolverType = `export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =`;
        const resolverFnUsage = `ResolverFn<TResult, TParent, TContext, TArgs>`;
        const stitchingResolverUsage = `StitchingResolver<TResult, TParent, TContext, TArgs>`;
        if (visitor.hasFederation()) {
          if (visitor.config.wrapFieldDefinitions) {
            defsToInclude.push(`export type UnwrappedObject<T> = {
        [P in keyof T]: T[P] extends infer R | Promise<infer R> | (() => infer R2 | Promise<infer R2>)
          ? R & R2 : T[P]
      };`);
          }
          defsToInclude.push(`export type ReferenceResolver<TResult, TReference, TContext> = (
      reference: TReference,
      context: TContext,
      info${optionalSignForInfoArg}: GraphQLResolveInfo
    ) => Promise<TResult> | TResult;`);
          defsToInclude.push(`
      type ScalarCheck<T, S> = S extends true ? T : NullableCheck<T, S>;
      type NullableCheck<T, S> = ${namespacedImportPrefix}Maybe<T> extends T ? ${namespacedImportPrefix}Maybe<ListCheck<NonNullable<T>, S>> : ListCheck<T, S>;
      type ListCheck<T, S> = T extends (infer U)[] ? NullableCheck<U, S>[] : GraphQLRecursivePick<T, S>;
      export type GraphQLRecursivePick<T, S> = { [K in keyof T & keyof S]: ScalarCheck<T[K], S[K]> };
    `);
        }
        if (noSchemaStitching) {
          // Resolver = ResolverFn;
          defsToInclude.push(`${resolverType} ${resolverFnUsage};`);
        } else {
          // StitchingResolver
          // Resolver =
          // | ResolverFn
          // | StitchingResolver;
          defsToInclude.push(
            [
              legacyStitchingResolverType,
              newStitchingResolverType,
              stitchingResolverType,
              resolverType,
              `  | ${resolverFnUsage}`,
              `  | ${stitchingResolverUsage};`
            ].join("\n")
          );
        }
        const importType = config.useTypeImports ? "import type" : "import";
        if (config.customResolverFn) {
          const parsedMapper = visitorPluginCommon.parseMapper(
            config.customResolverFn
          );
          if (parsedMapper.isExternal) {
            if (parsedMapper.default) {
              prepend.push(
                `${importType} ResolverFn from '${parsedMapper.source}';`
              );
            } else {
              prepend.push(
                `${importType} { ${parsedMapper.import} ${
                  parsedMapper.import !== "ResolverFn" ? "as ResolverFn " : ""
                }} from '${parsedMapper.source}';`
              );
            }
            prepend.push(
              `export${config.useTypeImports ? " type" : ""} { ResolverFn };`
            );
          } else {
            prepend.push(
              `export type ResolverFn<TResult, TParent, TContext, TArgs> = ${parsedMapper.type}`
            );
          }
        } else {
          const defaultResolverFn = `
export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info${optionalSignForInfoArg}: GraphQLResolveInfo
) => Promise<TResult> | TResult;`;
          defsToInclude.push(defaultResolverFn);
        }
        const header = `${indexSignature}

${visitor.getResolverTypeWrapperSignature()}

${defsToInclude.join("\n")}

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info${optionalSignForInfoArg}: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info${optionalSignForInfoArg}: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info${optionalSignForInfoArg}: GraphQLResolveInfo
) => ${namespacedImportPrefix}Maybe<TTypes> | Promise<${namespacedImportPrefix}Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info${optionalSignForInfoArg}: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info${optionalSignForInfoArg}: GraphQLResolveInfo
) => TResult | Promise<TResult>;
`;
        const resolversTypeMapping = visitor.buildResolversTypes();
        const resolversParentTypeMapping = visitor.buildResolversParentTypes();
        const {
          getRootResolver,
          getAllDirectiveResolvers,
          mappersImports,
          unusedMappers,
          hasScalars
        } = visitor;
        if (hasScalars()) {
          imports.push("GraphQLScalarType", "GraphQLScalarTypeConfig");
        }
        if (showUnusedMappers && unusedMappers.length) {
          // eslint-disable-next-line no-console
          console.warn(`Unused mappers: ${unusedMappers.join(",")}`);
        }
        if (imports.length) {
          prepend.push(
            `${importType} { ${imports.join(", ")} } from 'graphql';`
          );
        }
        if (config.customResolveInfo) {
          const parsedMapper = visitorPluginCommon.parseMapper(
            config.customResolveInfo
          );
          if (parsedMapper.isExternal) {
            if (parsedMapper.default) {
              prepend.push(
                `import GraphQLResolveInfo from '${parsedMapper.source}'`
              );
            }
            prepend.push(
              `import { ${parsedMapper.import} ${
                parsedMapper.import !== "GraphQLResolveInfo"
                  ? "as GraphQLResolveInfo"
                  : ""
              } } from '${parsedMapper.source}';`
            );
          } else {
            prepend.push(`type GraphQLResolveInfo = ${parsedMapper.type}`);
          }
        }
        prepend.push(...mappersImports, ...visitor.globalDeclarations);
        return {
          prepend,
          content: [
            header,
            resolversTypeMapping,
            resolversParentTypeMapping,
            ...visitorResult.definitions.filter(d => typeof d === "string"),
            getRootResolver(),
            getAllDirectiveResolvers()
          ].join("\n")
        };
      };

      exports.TypeScriptResolversVisitor = TypeScriptResolversVisitor;
      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ UjIq: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toObjMap;

      var _objectEntries3 = _interopRequireDefault(__webpack_require__("NKuU"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function toObjMap(obj) {
        /* eslint-enable no-redeclare */
        if (Object.getPrototypeOf(obj) === null) {
          return obj;
        }

        var map = Object.create(null);

        for (
          var _i2 = 0, _objectEntries2 = (0, _objectEntries3.default)(obj);
          _i2 < _objectEntries2.length;
          _i2++
        ) {
          var _ref2 = _objectEntries2[_i2];
          var key = _ref2[0];
          var value = _ref2[1];
          map[key] = value;
        }

        return map;
      }

      /***/
    },

    /***/ UtIy: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _interopRequireDefault = __webpack_require__("TqRt");

      var _defineProperty2 = _interopRequireDefault(
        __webpack_require__("lSNA")
      );

      var _toConsumableArray2 = _interopRequireDefault(
        __webpack_require__("RIqP")
      );

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              (0, _defineProperty2["default"])(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (
            Array.isArray(o) ||
            (it = _unsupportedIterableToArray(o)) ||
            (allowArrayLike && o && typeof o.length === "number")
          ) {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
              s: F,
              n: function n() {
                if (i >= o.length) return { done: true };
                return { done: false, value: o[i++] };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        var normalCompletion = true,
          didErr = false,
          err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it["return"] != null) it["return"]();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }

      var IRTransformer = __webpack_require__("OHCT");

      var RelayCompilerScope = __webpack_require__("UGla");

      var getIdentifierForArgumentValue = __webpack_require__("arJZ");

      var murmurHash = __webpack_require__("VqSG");

      var _require = __webpack_require__("VrDQ"),
        createCompilerError = _require.createCompilerError,
        createNonRecoverableUserError = _require.createNonRecoverableUserError;

      var getFragmentScope = RelayCompilerScope.getFragmentScope,
        getRootScope = RelayCompilerScope.getRootScope;

      /**
       * A transform that converts a set of documents containing fragments/fragment
       * spreads *with* arguments to one where all arguments have been inlined. This
       * is effectively static currying of functions. Nodes are changed as follows:
       * - Fragment spreads with arguments are replaced with references to an inlined
       *   version of the referenced fragment.
       * - Fragments with argument definitions are cloned once per unique set of
       *   arguments, with the name changed to original name + hash and all nested
       *   variable references changed to the value of that variable given its
       *   arguments.
       * - Field & directive argument variables are replaced with the value of those
       *   variables in context.
       * - All nodes are cloned with updated children.
       *
       * The transform also handles statically passing/failing Condition nodes:
       * - Literal Conditions with a passing value are elided and their selections
       *   inlined in their parent.
       * - Literal Conditions with a failing value are removed.
       * - Nodes that would become empty as a result of the above are removed.
       *
       * Note that unreferenced fragments are not added to the output.
       */
      function applyFragmentArgumentTransform(context) {
        var fragments = new Map();
        var nextContext = IRTransformer.transform(context, {
          Root: function Root(node) {
            var scope = getRootScope(node.argumentDefinitions);
            return transformNode(context, fragments, scope, node, [node]);
          },
          SplitOperation: function SplitOperation(node) {
            return transformNode(context, fragments, {}, node, [node]);
          },
          // Fragments are included below where referenced.
          // Unreferenced fragments are not included.
          Fragment: function Fragment() {
            return null;
          }
        });

        var _iterator = _createForOfIteratorHelper(fragments.values()),
          _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var pendingFragment = _step.value;

            if (pendingFragment.kind === "resolved" && pendingFragment.value) {
              nextContext = nextContext.add(pendingFragment.value);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return nextContext;
      }

      function transformNode(context, fragments, scope, node, errorContext) {
        var selections = transformSelections(
          context,
          fragments,
          scope,
          node.selections,
          errorContext
        );

        if (!selections) {
          return null;
        }

        if (node.hasOwnProperty("directives")) {
          var directives = transformDirectives(
            scope,
            node.directives,
            errorContext
          );
          return _objectSpread(
            _objectSpread({}, node),
            {},
            {
              directives: directives,
              selections: selections
            }
          );
        }

        return _objectSpread(
          _objectSpread({}, node),
          {},
          {
            selections: selections
          }
        );
      }

      function transformDeferStreamNode(
        context,
        fragments,
        scope,
        node,
        errorContext
      ) {
        var nextNode = transformNode(
          context,
          fragments,
          scope,
          node,
          errorContext
        );

        if (!nextNode) {
          return null;
        }

        nextNode;

        if (nextNode["if"]) {
          var ifVal = transformValue(scope, nextNode["if"], errorContext);

          if (
            ifVal.kind === "Literal" &&
            ifVal.value === false &&
            node.selections &&
            node.selections.length === 1
          ) {
            // Skip Defer/Stream wrapper with literal if: false
            return node.selections[0];
          } // $FlowFixMe[cannot-write] nextNode is uniquely owned

          nextNode["if"] = ifVal;
        }

        if (nextNode.useCustomizedBatch) {
          // $FlowFixMe[cannot-write] nextNode is uniquely owned
          nextNode.useCustomizedBatch = transformValue(
            scope,
            nextNode.useCustomizedBatch,
            errorContext
          );
        }

        if (nextNode.initialCount) {
          // $FlowFixMe[cannot-write] nextNode is uniquely owned
          nextNode.initialCount = transformValue(
            scope,
            nextNode.initialCount,
            errorContext
          );
        }

        return nextNode;
      }

      function transformFragmentSpread(
        context,
        fragments,
        scope,
        spread,
        errorContext
      ) {
        var directives = transformDirectives(
          scope,
          spread.directives,
          errorContext
        );
        var appliedFragment = transformFragment(
          context,
          fragments,
          scope,
          spread,
          spread.args,
          [].concat((0, _toConsumableArray2["default"])(errorContext), [spread])
        );

        if (!appliedFragment) {
          return null;
        }

        var transformed = _objectSpread(
          _objectSpread({}, spread),
          {},
          {
            kind: "FragmentSpread",
            args: [],
            directives: directives,
            name: appliedFragment.name
          }
        );

        return transformed;
      }

      function transformField(context, fragments, scope, field, errorContext) {
        var args = transformArguments(scope, field.args, errorContext);
        var directives = transformDirectives(
          scope,
          field.directives,
          errorContext
        );

        if (field.kind === "LinkedField") {
          var selections = transformSelections(
            context,
            fragments,
            scope,
            field.selections,
            errorContext
          );

          if (!selections) {
            return null;
          }

          return _objectSpread(
            _objectSpread({}, field),
            {},
            {
              args: args,
              directives: directives,
              selections: selections
            }
          );
        } else {
          return _objectSpread(
            _objectSpread({}, field),
            {},
            {
              args: args,
              directives: directives
            }
          );
        }
      }

      function transformCondition(
        context,
        fragments,
        scope,
        node,
        errorContext
      ) {
        var condition = transformValue(scope, node.condition, errorContext);

        if (!(condition.kind === "Literal" || condition.kind === "Variable")) {
          // This transform does whole-program optimization, errors in
          // a single document could break invariants and/or cause
          // additional spurious errors.
          throw createNonRecoverableUserError(
            "A non-scalar value was applied to an @include or @skip directive, " +
              "the `if` argument value must be a " +
              "variable or a literal Boolean.",
            [condition.loc]
          );
        }

        if (
          condition.kind === "Literal" &&
          condition.value !== node.passingValue
        ) {
          // Dead code, no need to traverse further.
          return null;
        }

        var selections = transformSelections(
          context,
          fragments,
          scope,
          node.selections,
          errorContext
        );

        if (!selections) {
          return null;
        }

        if (
          condition.kind === "Literal" &&
          condition.value === node.passingValue
        ) {
          // Always passes, return inlined selections
          return selections;
        }

        return [
          _objectSpread(
            _objectSpread({}, node),
            {},
            {
              condition: condition,
              selections: selections
            }
          )
        ];
      }

      function transformSelections(
        context,
        fragments,
        scope,
        selections,
        errorContext
      ) {
        var nextSelections = null;
        selections.forEach(function(selection) {
          var nextSelection;

          if (
            selection.kind === "ClientExtension" ||
            selection.kind === "InlineDataFragmentSpread" ||
            selection.kind === "InlineFragment" ||
            selection.kind === "ModuleImport"
          ) {
            nextSelection = transformNode(
              context,
              fragments,
              scope,
              selection,
              errorContext
            );
          } else if (
            selection.kind === "Defer" ||
            selection.kind === "Stream"
          ) {
            nextSelection = transformDeferStreamNode(
              context,
              fragments,
              scope,
              selection,
              errorContext
            );
          } else if (selection.kind === "FragmentSpread") {
            nextSelection = transformFragmentSpread(
              context,
              fragments,
              scope,
              selection,
              errorContext
            );
          } else if (selection.kind === "Condition") {
            var conditionSelections = transformCondition(
              context,
              fragments,
              scope,
              selection,
              errorContext
            );

            if (conditionSelections) {
              var _nextSelections;

              nextSelections = nextSelections || [];

              (_nextSelections = nextSelections).push.apply(
                _nextSelections,
                (0, _toConsumableArray2["default"])(conditionSelections)
              );
            }
          } else if (
            selection.kind === "LinkedField" ||
            selection.kind === "ScalarField"
          ) {
            nextSelection = transformField(
              context,
              fragments,
              scope,
              selection,
              errorContext
            );
          } else {
            selection;
            throw createCompilerError(
              "ApplyFragmentArgumentTransform: Unsupported kind '".concat(
                selection.kind,
                "'."
              ),
              [selection.loc]
            );
          }

          if (nextSelection) {
            nextSelections = nextSelections || [];
            nextSelections.push(nextSelection);
          }
        });
        return nextSelections;
      }

      function transformDirectives(scope, directives, errorContext) {
        return directives.map(function(directive) {
          var args = transformArguments(scope, directive.args, errorContext);
          return _objectSpread(
            _objectSpread({}, directive),
            {},
            {
              args: args
            }
          );
        });
      }

      function transformArguments(scope, args, errorContext) {
        return args.map(function(arg) {
          var value = transformValue(scope, arg.value, errorContext);
          return value === arg.value
            ? arg
            : _objectSpread(
                _objectSpread({}, arg),
                {},
                {
                  value: value
                }
              );
        });
      }

      function transformValue(scope, value, errorContext) {
        if (value.kind === "Variable") {
          var scopeValue = scope[value.variableName];

          if (scopeValue == null) {
            var _errorContext$;

            // This transform does whole-program optimization, errors in
            // a single document could break invariants and/or cause
            // additional spurious errors.
            throw createNonRecoverableUserError(
              "Variable '$".concat(value.variableName, "' is not in scope."),
              [
                (_errorContext$ = errorContext[0]) === null ||
                _errorContext$ === void 0
                  ? void 0
                  : _errorContext$.loc,
                value.loc
              ].filter(Boolean)
            );
          }

          return scopeValue;
        } else if (value.kind === "ObjectValue") {
          return _objectSpread(
            _objectSpread({}, value),
            {},
            {
              fields: value.fields.map(function(field) {
                return _objectSpread(
                  _objectSpread({}, field),
                  {},
                  {
                    value: transformValue(scope, field.value, errorContext)
                  }
                );
              })
            }
          );
        } else if (value.kind === "ListValue") {
          return _objectSpread(
            _objectSpread({}, value),
            {},
            {
              items: value.items.map(function(item) {
                return transformValue(scope, item, errorContext);
              })
            }
          );
        }

        return value;
      }
      /**
       * Apply arguments to a fragment, creating a new fragment (with the given name)
       * with all values recursively applied.
       */

      function transformFragment(
        context,
        fragments,
        parentScope,
        spread,
        args,
        errorContext
      ) {
        var schema = context.getSchema();
        var fragment = context.getFragment(spread.name, spread.loc);
        var argumentsHash = hashArguments(args, parentScope, errorContext);
        var fragmentName = argumentsHash
          ? "".concat(fragment.name, "_").concat(argumentsHash)
          : fragment.name;
        var appliedFragment = fragments.get(fragmentName);

        if (appliedFragment) {
          if (appliedFragment.kind === "resolved") {
            return appliedFragment.value;
          } else {
            // This transform does whole-program optimization, errors in
            // a single document could break invariants and/or cause
            // additional spurious errors.
            throw createNonRecoverableUserError(
              "Found a circular reference from fragment '".concat(
                fragment.name,
                "'."
              ),
              errorContext.map(function(node) {
                return node.loc;
              })
            );
          }
        }

        var fragmentScope = getFragmentScope(
          schema,
          fragment.argumentDefinitions,
          args,
          parentScope,
          spread
        ); // record that this fragment is pending to detect circular references

        fragments.set(fragmentName, {
          kind: "pending"
        });
        var transformedFragment = null;
        var selections = transformSelections(
          context,
          fragments,
          fragmentScope,
          fragment.selections,
          errorContext
        );

        if (selections) {
          transformedFragment = _objectSpread(
            _objectSpread({}, fragment),
            {},
            {
              selections: selections,
              name: fragmentName,
              argumentDefinitions: []
            }
          );
        }

        fragments.set(fragmentName, {
          kind: "resolved",
          value: transformedFragment
        });
        return transformedFragment;
      }

      function hashArguments(args, scope, errorContext) {
        if (!args.length) {
          return null;
        }

        var sortedArgs = (0, _toConsumableArray2["default"])(args).sort(
          function(a, b) {
            return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;
          }
        );
        var printedArgs = JSON.stringify(
          sortedArgs.map(function(arg) {
            var value;

            if (arg.value.kind === "Variable") {
              value = scope[arg.value.variableName];

              if (value == null) {
                var _errorContext$2;

                // This transform does whole-program optimization, errors in
                // a single document could break invariants and/or cause
                // additional spurious errors.
                throw createNonRecoverableUserError(
                  "Variable '$".concat(
                    arg.value.variableName,
                    "' is not in scope."
                  ),
                  [
                    (_errorContext$2 = errorContext[0]) === null ||
                    _errorContext$2 === void 0
                      ? void 0
                      : _errorContext$2.loc,
                    arg.value.loc
                  ].filter(Boolean)
                );
              }
            } else {
              value = arg.value;
            }

            return {
              name: arg.name,
              value: getIdentifierForArgumentValue(value)
            };
          })
        );
        return murmurHash(printedArgs);
      }

      module.exports = {
        transform: applyFragmentArgumentTransform
      };

      /***/
    },

    /***/ "V/gh": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.camelCase = exports.camelCaseTransformMerge = exports.camelCaseTransform = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var pascal_case_1 = __webpack_require__("O2Of");
      function camelCaseTransform(input, index) {
        if (index === 0) return input.toLowerCase();
        return pascal_case_1.pascalCaseTransform(input, index);
      }
      exports.camelCaseTransform = camelCaseTransform;
      function camelCaseTransformMerge(input, index) {
        if (index === 0) return input.toLowerCase();
        return pascal_case_1.pascalCaseTransformMerge(input);
      }
      exports.camelCaseTransformMerge = camelCaseTransformMerge;
      function camelCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return pascal_case_1.pascalCase(
          input,
          tslib_1.__assign({ transform: camelCaseTransform }, options)
        );
      }
      exports.camelCase = camelCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ "V/hC": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var inspect = __webpack_require__("Rska");

      var IsPropertyKey = __webpack_require__("ml7t");
      var Type = __webpack_require__("zOLO");

      /**
       * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p
       * 1. Assert: Type(O) is Object.
       * 2. Assert: IsPropertyKey(P) is true.
       * 3. Return O.[[Get]](P, O).
       */

      module.exports = function Get(O, P) {
        // 7.3.1.1
        if (Type(O) !== "Object") {
          throw new $TypeError("Assertion failed: Type(O) is not Object");
        }
        // 7.3.1.2
        if (!IsPropertyKey(P)) {
          throw new $TypeError(
            "Assertion failed: IsPropertyKey(P) is not true, got " + inspect(P)
          );
        }
        // 7.3.1.3
        return O[P];
      };

      /***/
    },

    /***/ VF6F: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var callBind = __webpack_require__("PrET");

      var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));

      module.exports = function callBoundIntrinsic(name, allowMissing) {
        var intrinsic = GetIntrinsic(name, !!allowMissing);
        if (
          typeof intrinsic === "function" &&
          $indexOf(name, ".prototype.") > -1
        ) {
          return callBind(intrinsic);
        }
        return intrinsic;
      };

      /***/
    },

    /***/ "VPs/": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Source", {
        enumerable: true,
        get: function get() {
          return _source.Source;
        }
      });
      Object.defineProperty(exports, "getLocation", {
        enumerable: true,
        get: function get() {
          return _location.getLocation;
        }
      });
      Object.defineProperty(exports, "printLocation", {
        enumerable: true,
        get: function get() {
          return _printLocation.printLocation;
        }
      });
      Object.defineProperty(exports, "printSourceLocation", {
        enumerable: true,
        get: function get() {
          return _printLocation.printSourceLocation;
        }
      });
      Object.defineProperty(exports, "Kind", {
        enumerable: true,
        get: function get() {
          return _kinds.Kind;
        }
      });
      Object.defineProperty(exports, "TokenKind", {
        enumerable: true,
        get: function get() {
          return _tokenKind.TokenKind;
        }
      });
      Object.defineProperty(exports, "Lexer", {
        enumerable: true,
        get: function get() {
          return _lexer.Lexer;
        }
      });
      Object.defineProperty(exports, "parse", {
        enumerable: true,
        get: function get() {
          return _parser.parse;
        }
      });
      Object.defineProperty(exports, "parseValue", {
        enumerable: true,
        get: function get() {
          return _parser.parseValue;
        }
      });
      Object.defineProperty(exports, "parseType", {
        enumerable: true,
        get: function get() {
          return _parser.parseType;
        }
      });
      Object.defineProperty(exports, "print", {
        enumerable: true,
        get: function get() {
          return _printer.print;
        }
      });
      Object.defineProperty(exports, "visit", {
        enumerable: true,
        get: function get() {
          return _visitor.visit;
        }
      });
      Object.defineProperty(exports, "visitInParallel", {
        enumerable: true,
        get: function get() {
          return _visitor.visitInParallel;
        }
      });
      Object.defineProperty(exports, "getVisitFn", {
        enumerable: true,
        get: function get() {
          return _visitor.getVisitFn;
        }
      });
      Object.defineProperty(exports, "BREAK", {
        enumerable: true,
        get: function get() {
          return _visitor.BREAK;
        }
      });
      Object.defineProperty(exports, "Location", {
        enumerable: true,
        get: function get() {
          return _ast.Location;
        }
      });
      Object.defineProperty(exports, "Token", {
        enumerable: true,
        get: function get() {
          return _ast.Token;
        }
      });
      Object.defineProperty(exports, "isDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isExecutableDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isExecutableDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isSelectionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isSelectionNode;
        }
      });
      Object.defineProperty(exports, "isValueNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isValueNode;
        }
      });
      Object.defineProperty(exports, "isTypeNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isTypeNode;
        }
      });
      Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isTypeSystemDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isTypeDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isTypeDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isTypeSystemExtensionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isTypeSystemExtensionNode;
        }
      });
      Object.defineProperty(exports, "isTypeExtensionNode", {
        enumerable: true,
        get: function get() {
          return _predicates.isTypeExtensionNode;
        }
      });
      Object.defineProperty(exports, "DirectiveLocation", {
        enumerable: true,
        get: function get() {
          return _directiveLocation.DirectiveLocation;
        }
      });

      var _source = __webpack_require__("k84H");

      var _location = __webpack_require__("PO9o");

      var _printLocation = __webpack_require__("y4yJ");

      var _kinds = __webpack_require__("xaK5");

      var _tokenKind = __webpack_require__("XfSa");

      var _lexer = __webpack_require__("wimG");

      var _parser = __webpack_require__("DEM2");

      var _printer = __webpack_require__("gCJq");

      var _visitor = __webpack_require__("tqCx");

      var _ast = __webpack_require__("fZhc");

      var _predicates = __webpack_require__("hzsB");

      var _directiveLocation = __webpack_require__("R1IW");

      /***/
    },

    /***/ VbXa: /***/ function(module, exports) {
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }

      module.exports = _inheritsLoose;

      /***/
    },

    /***/ VeMo: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.findDeprecatedUsages = findDeprecatedUsages;

      var _validate = __webpack_require__("sk25");

      var _NoDeprecatedCustomRule = __webpack_require__("6r8j");

      /**
       * A validation rule which reports deprecated usages.
       *
       * Returns a list of GraphQLError instances describing each deprecated use.
       *
       * @deprecated Please use `validate` with `NoDeprecatedCustomRule` instead:
       *
       * ```
       * import { validate, NoDeprecatedCustomRule } from 'graphql'
       *
       * const errors = validate(schema, document, [NoDeprecatedCustomRule])
       * ```
       */
      function findDeprecatedUsages(schema, ast) {
        return (0, _validate.validate)(schema, ast, [
          _NoDeprecatedCustomRule.NoDeprecatedCustomRule
        ]);
      }

      /***/
    },

    /***/ VqSG: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      /**
       * Based on implementations by Gary Court and Austin Appleby, 2011, MIT.
       * @preserve-header
       */

      var BASE62 =
        "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      /**
       * @param {string} key A UTF-16 or ASCII string
       * @return {string} a base62 murmur hash
       */

      function murmurHash(str) {
        /* eslint-disable no-bitwise */
        var length = str.length;
        var rem = length & 3;
        var len = length ^ rem;
        var h = 0;
        var i = 0;
        var k;

        while (i !== len) {
          var ch4 = str.charCodeAt(i + 3);
          k =
            str.charCodeAt(i) ^
            (str.charCodeAt(i + 1) << 8) ^
            (str.charCodeAt(i + 2) << 16) ^
            ((ch4 & 0xff) << 24) ^
            ((ch4 & 0xff00) >> 8);
          i += 4;
          k = (k * 0x2d51 + (k & 0xffff) * 0xcc9e0000) >>> 0;
          k = (k << 15) | (k >>> 17);
          k = (k * 0x3593 + (k & 0xffff) * 0x1b870000) >>> 0;
          h ^= k;
          h = (h << 13) | (h >>> 19);
          h = (h * 5 + 0xe6546b64) >>> 0;
        }

        k = 0;

        switch (rem) {
          /* eslint-disable no-fallthrough */
          case 3:
            k ^= str.charCodeAt(len + 2) << 16;

          case 2:
            k ^= str.charCodeAt(len + 1) << 8;

          case 1:
            k ^= str.charCodeAt(len);
            k = (k * 0x2d51 + (k & 0xffff) * 0xcc9e0000) >>> 0;
            k = (k << 15) | (k >>> 17);
            k = (k * 0x3593 + (k & 0xffff) * 0x1b870000) >>> 0;
            h ^= k;
        }

        h ^= length;
        h ^= h >>> 16;
        h = (h * 0xca6b + (h & 0xffff) * 0x85eb0000) >>> 0;
        h ^= h >>> 13;
        h = (h * 0xae35 + (h & 0xffff) * 0xc2b20000) >>> 0;
        h ^= h >>> 16;
        h >>>= 0;

        if (!h) {
          return "0";
        }

        var s = "";

        while (h) {
          var d = h % 62;
          s = BASE62[d] + s;
          h = (h - d) / 62;
        }

        return s;
      }

      module.exports = murmurHash;

      /***/
    },

    /***/ VrDQ: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (
            Array.isArray(o) ||
            (it = _unsupportedIterableToArray(o)) ||
            (allowArrayLike && o && typeof o.length === "number")
          ) {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
              s: F,
              n: function n() {
                if (i >= o.length) return { done: true };
                return { done: false, value: o[i++] };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        var normalCompletion = true,
          didErr = false,
          err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it["return"] != null) it["return"]();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }

      var _require = __webpack_require__("uKhV"),
        GraphQLError = _require.GraphQLError;

      /**
       * Creates an error describing invalid application code (GraphQL/Schema)
       * that must be fixed by the end developer. This should only be used
       * for local errors that don't affect processing of other user code.
       */
      function createUserError(message, locations, nodes) {
        var messageWithLocations = message;

        if (locations != null) {
          var printedLocations = printLocations(locations);
          messageWithLocations =
            printedLocations.length === 0
              ? message
              : [message].concat(printedLocations).join("\n\n") + "\n";
        }

        return new GraphQLError(
          messageWithLocations,
          nodes !== null && nodes !== void 0 ? nodes : []
        );
      }
      /**
       * Similar to createUserError but for errors that are *not* recoverable:
       * the compiler should not continue to process other inputs because their
       * validity can't be determined.
       */

      function createNonRecoverableUserError(message, locations, nodes) {
        var messageWithLocations = message;

        if (locations != null) {
          var printedLocations = printLocations(locations);
          messageWithLocations =
            printedLocations.length === 0
              ? message
              : [message].concat(printedLocations).join("\n\n") + "\n";
        }

        var error = new GraphQLError(
          messageWithLocations,
          nodes !== null && nodes !== void 0 ? nodes : []
        );
        return new Error(error.message);
      }
      /**
       * Creates an error describing a problem with the compiler itself - such
       * as a broken invariant - that must be fixed within the compiler.
       */

      function createCompilerError(message, locations, nodes) {
        var messageWithLocations = message;

        if (locations != null) {
          var printedLocations = printLocations(locations);
          messageWithLocations =
            printedLocations.length === 0
              ? message
              : [message].concat(printedLocations).join("\n\n") + "\n";
        }

        var error = new GraphQLError(
          "Internal Error: ".concat(messageWithLocations),
          nodes !== null && nodes !== void 0 ? nodes : []
        );
        return new Error(error.message);
      }
      /**
       * Iterates over the elements of some iterable value, calling the
       * supplied callback for each item with a guard for user errors.
       *
       * Non-user errors abort the iteration and are instantly rethrown.
       * User errors are collected and rethrown at the end, if multiple user errors
       * occur, a combined error is thrown.
       */

      function eachWithCombinedError(iterable, fn) {
        var errors = [];

        var _iterator = _createForOfIteratorHelper(iterable),
          _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;

            try {
              fn(item);
            } catch (error) {
              if (error instanceof GraphQLError) {
                errors.push(error);
              } else {
                throw error;
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (errors.length > 0) {
          if (errors.length === 1) {
            throw errors[0];
          }

          throw createUserError(
            "Encountered ".concat(errors.length, " errors:\n") +
              errors
                .map(function(error) {
                  return String(error)
                    .split("\n")
                    .map(function(line, index) {
                      return index === 0
                        ? "- ".concat(line)
                        : "  ".concat(line);
                    })
                    .join("\n");
                })
                .join("\n")
          );
        }
      }

      function printLocations(locations) {
        var printedLocations = [];

        var _iterator2 = _createForOfIteratorHelper(locations),
          _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var location = _step2.value;
            var sourceLocation = location;

            while (sourceLocation.kind === "Derived") {
              sourceLocation = sourceLocation.source;
            }

            switch (sourceLocation.kind) {
              case "Source": {
                // source location
                var prefix =
                  sourceLocation === location
                    ? "Source: "
                    : "Source (derived): ";
                printedLocations.push(
                  prefix +
                    highlightSourceAtLocation(
                      sourceLocation.source,
                      getLocation(sourceLocation.source, sourceLocation.start)
                    )
                );
                break;
              }

              case "Generated": {
                printedLocations.push("Source: (generated)");
                break;
              }

              case "Unknown": {
                printedLocations.push("Source: (unknown)");
                break;
              }

              default: {
                sourceLocation;
                throw createCompilerError(
                  "CompilerError: cannot print location '".concat(
                    String(sourceLocation),
                    "'."
                  )
                );
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return printedLocations;
      }
      /**
       * Render a helpful description of the location of the error in the GraphQL
       * Source document.
       */

      function highlightSourceAtLocation(source, location) {
        var firstLineColumnOffset = source.locationOffset.column - 1;
        var body = whitespace(firstLineColumnOffset) + source.body;
        var lineIndex = location.line - 1;
        var lineOffset = source.locationOffset.line - 1;
        var lineNum = location.line + lineOffset;
        var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;
        var columnNum = location.column + columnOffset;
        var lines = body.split(/\r\n|[\n\r]/g);
        return (
          ""
            .concat(source.name, " (")
            .concat(lineNum, ":")
            .concat(columnNum, ")\n") +
          printPrefixedLines([
            // Lines specified like this: ["prefix", "string"],
            ["".concat(lineNum - 1, ": "), lines[lineIndex - 1]],
            ["".concat(lineNum, ": "), lines[lineIndex]],
            ["", whitespace(columnNum - 1) + "^"],
            ["".concat(lineNum + 1, ": "), lines[lineIndex + 1]]
          ])
        );
      }

      function printPrefixedLines(lines) {
        var existingLines = lines.filter(function(_ref) {
          var _ = _ref[0],
            line = _ref[1];
          return line !== undefined;
        });
        var padLen = 0;

        var _iterator3 = _createForOfIteratorHelper(existingLines),
          _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _step3$value = _step3.value,
              prefix = _step3$value[0];
            padLen = Math.max(padLen, prefix.length);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return existingLines
          .map(function(_ref2) {
            var prefix = _ref2[0],
              line = _ref2[1];
            return lpad(padLen, prefix) + line;
          })
          .join("\n");
      }

      function whitespace(len) {
        return Array(len + 1).join(" ");
      }

      function lpad(len, str) {
        return whitespace(len - str.length) + str;
      }

      function getLocation(source, position) {
        var lineRegexp = /\r\n|[\n\r]/g;
        var line = 1;
        var column = position + 1;
        var match;

        while (
          (match = lineRegexp.exec(source.body)) &&
          match.index < position
        ) {
          line += 1;
          column = position + 1 - (match.index + match[0].length);
        }

        return {
          line: line,
          column: column
        };
      }

      module.exports = {
        createCompilerError: createCompilerError,
        createNonRecoverableUserError: createNonRecoverableUserError,
        createUserError: createUserError,
        eachWithCombinedError: eachWithCombinedError
      };

      /***/
    },

    /***/ VwI2: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (
          typeof Symbol === "function" &&
          typeof Symbol.iterator === "symbol"
        ) {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          };
        }
        return _typeof(obj);
      }

      // See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
      // See: https://webpack.js.org/guides/production/
      var _default = true // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
        ? // eslint-disable-next-line no-shadow
          function instanceOf(value, constructor) {
            return value instanceof constructor;
          } // eslint-disable-next-line no-shadow
        : undefined;

      exports.default = _default;

      /***/
    },

    /***/ WAOt: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var isUncPath = __webpack_require__("q34w");

      module.exports = function isRelative(filepath) {
        if (typeof filepath !== "string") {
          throw new TypeError("expected filepath to be a string");
        }

        // Windows UNC paths are always considered to be absolute.
        return !isUncPath(filepath) && !/^([a-z]:)?[\\\/]/i.test(filepath);
      };

      /***/
    },

    /***/ WHKI: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");
      const pluginHelpers = __webpack_require__("ac+X");
      const path = __webpack_require__("oyvS");

      var MapperKind;
      (function(MapperKind) {
        MapperKind[(MapperKind["Namespace"] = 0)] = "Namespace";
        MapperKind[(MapperKind["Default"] = 1)] = "Default";
        MapperKind[(MapperKind["Regular"] = 2)] = "Regular";
      })(MapperKind || (MapperKind = {}));

      const getConfigValue = (value, defaultValue) => {
        if (value === null || value === undefined) {
          return defaultValue;
        }
        return value;
      };

      const plugin = async (schema, _documents, pluginConfig) => {
        const cleanSchema = pluginConfig.federation
          ? pluginHelpers.removeFederation(schema)
          : schema;
        const descriptions = getConfigValue(pluginConfig.descriptions, true);
        const directiveIsRepeatable = getConfigValue(
          pluginConfig.directiveIsRepeatable,
          true
        );
        const schemaDescription = getConfigValue(
          pluginConfig.schemaDescription,
          undefined
        );
        const specifiedByUrl = getConfigValue(
          pluginConfig.specifiedByUrl,
          undefined
        );
        const introspection = graphql.introspectionFromSchema(cleanSchema, {
          descriptions,
          directiveIsRepeatable,
          schemaDescription,
          specifiedByUrl
        });
        return pluginConfig.minify
          ? JSON.stringify(introspection)
          : JSON.stringify(introspection, null, 2);
      };
      const validate = async (schema, documents, config, outputFile) => {
        if (path.extname(outputFile) !== ".json") {
          throw new Error(
            `Plugin "introspection" requires extension to be ".json"!`
          );
        }
      };

      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ WNUp: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      /**
       * Lone anonymous operation
       *
       * A GraphQL document is only valid if when it contains an anonymous operation
       * (the query short-hand) that it contains only that one operation definition.
       */
      function LoneAnonymousOperationRule(context) {
        var operationCount = 0;
        return {
          Document: function Document(node) {
            operationCount = node.definitions.filter(function(definition) {
              return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
            }).length;
          },
          OperationDefinition: function OperationDefinition(node) {
            if (!node.name && operationCount > 1) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "This anonymous operation must be the only defined operation.",
                  node
                )
              );
            }
          }
        };
      }

      /***/
    },

    /***/ WZeS: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var hasSymbols =
        typeof Symbol === "function" && typeof Symbol.iterator === "symbol";

      var isPrimitive = __webpack_require__("Teho");
      var isCallable = __webpack_require__("IdCN");
      var isDate = __webpack_require__("DmXP");
      var isSymbol = __webpack_require__("/sVA");

      var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
        if (typeof O === "undefined" || O === null) {
          throw new TypeError("Cannot call method on " + O);
        }
        if (
          typeof hint !== "string" ||
          (hint !== "number" && hint !== "string")
        ) {
          throw new TypeError('hint must be "string" or "number"');
        }
        var methodNames =
          hint === "string" ? ["toString", "valueOf"] : ["valueOf", "toString"];
        var method, result, i;
        for (i = 0; i < methodNames.length; ++i) {
          method = O[methodNames[i]];
          if (isCallable(method)) {
            result = method.call(O);
            if (isPrimitive(result)) {
              return result;
            }
          }
        }
        throw new TypeError("No default value");
      };

      var GetMethod = function GetMethod(O, P) {
        var func = O[P];
        if (func !== null && typeof func !== "undefined") {
          if (!isCallable(func)) {
            throw new TypeError(
              func +
                " returned for property " +
                P +
                " of object " +
                O +
                " is not a function"
            );
          }
          return func;
        }
        return void 0;
      };

      // http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
      module.exports = function ToPrimitive(input) {
        if (isPrimitive(input)) {
          return input;
        }
        var hint = "default";
        if (arguments.length > 1) {
          if (arguments[1] === String) {
            hint = "string";
          } else if (arguments[1] === Number) {
            hint = "number";
          }
        }

        var exoticToPrim;
        if (hasSymbols) {
          if (Symbol.toPrimitive) {
            exoticToPrim = GetMethod(input, Symbol.toPrimitive);
          } else if (isSymbol(input)) {
            exoticToPrim = Symbol.prototype.valueOf;
          }
        }
        if (typeof exoticToPrim !== "undefined") {
          var result = exoticToPrim.call(input, hint);
          if (isPrimitive(result)) {
            return result;
          }
          throw new TypeError("unable to convert exotic object to primitive");
        }
        if (hint === "default" && (isDate(input) || isSymbol(input))) {
          hint = "string";
        }
        return ordinaryToPrimitive(input, hint === "default" ? "number" : hint);
      };

      /***/
    },

    /***/ WkPL: /***/ function(module, exports) {
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      module.exports = _arrayLikeToArray;

      /***/
    },

    /***/ WvnP: /***/ function(module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_ARRAY__,
        __WEBPACK_AMD_DEFINE_RESULT__; /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
      /* global global, define, System, Reflect, Promise */
      var __extends;
      var __assign;
      var __rest;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __createBinding;
      (function(factory) {
        var root =
          typeof global === "object"
            ? global
            : typeof self === "object"
            ? self
            : typeof this === "object"
            ? this
            : {};
        if (true) {
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = [exports]),
          (__WEBPACK_AMD_DEFINE_RESULT__ = function(exports) {
            factory(createExporter(root, createExporter(exports)));
          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }
        function createExporter(exports, previous) {
          if (exports !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports, "__esModule", { value: true });
            } else {
              exports.__esModule = true;
            }
          }
          return function(id, v) {
            return (exports[id] = previous ? previous(id, v) : v);
          };
        }
      })(function(exporter) {
        var extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function(d, b) {
              d.__proto__ = b;
            }) ||
          function(d, b) {
            for (var p in b)
              if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

        __extends = function(d, b) {
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype =
            b === null
              ? Object.create(b)
              : ((__.prototype = b.prototype), new __());
        };

        __assign =
          Object.assign ||
          function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
          };

        __rest = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (
              var i = 0, p = Object.getOwnPropertySymbols(s);
              i < p.length;
              i++
            ) {
              if (
                e.indexOf(p[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(s, p[i])
              )
                t[p[i]] = s[p[i]];
            }
          return t;
        };

        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length,
            r =
              c < 3
                ? target
                : desc === null
                ? (desc = Object.getOwnPropertyDescriptor(target, key))
                : desc,
            d;
          if (
            typeof Reflect === "object" &&
            typeof Reflect.decorate === "function"
          )
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if ((d = decorators[i]))
                r =
                  (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                  r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };

        __metadata = function(metadataKey, metadataValue) {
          if (
            typeof Reflect === "object" &&
            typeof Reflect.metadata === "function"
          )
            return Reflect.metadata(metadataKey, metadataValue);
        };

        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function(resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next()
            );
          });
        };

        __generator = function(thisArg, body) {
          var _ = {
              label: 0,
              sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === "function" &&
              (g[Symbol.iterator] = function() {
                return this;
              }),
            g
          );
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y["return"]
                        : op[0]
                        ? y["throw"] || ((t = y["return"]) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };

        __exportStar = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        };

        __createBinding = Object.create
          ? function(o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                  return m[k];
                }
              });
            }
          : function(o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
            };

        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator,
            m = s && o[s],
            i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(
            s ? "Object is not iterable." : "Symbol.iterator is not defined."
          );
        };

        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error: error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };

        __spread = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        };

        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };

        __await = function(v) {
          return this instanceof __await
            ? ((this.v = v), this)
            : new __await(v);
        };

        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []),
            i,
            q = [];
          return (
            (i = {}),
            verb("next"),
            verb("throw"),
            verb("return"),
            (i[Symbol.asyncIterator] = function() {
              return this;
            }),
            i
          );
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await
              ? Promise.resolve(r.value.v).then(fulfill, reject)
              : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
          }
        };

        __asyncDelegator = function(o) {
          var i, p;
          return (
            (i = {}),
            verb("next"),
            verb("throw", function(e) {
              throw e;
            }),
            verb("return"),
            (i[Symbol.iterator] = function() {
              return this;
            }),
            i
          );
          function verb(n, f) {
            i[n] = o[n]
              ? function(v) {
                  return (p = !p)
                    ? { value: __await(o[n](v)), done: n === "return" }
                    : f
                    ? f(v)
                    : v;
                }
              : f;
          }
        };

        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator],
            i;
          return m
            ? m.call(o)
            : ((o =
                typeof __values === "function"
                  ? __values(o)
                  : o[Symbol.iterator]()),
              (i = {}),
              verb("next"),
              verb("throw"),
              verb("return"),
              (i[Symbol.asyncIterator] = function() {
                return this;
              }),
              i);
          function verb(n) {
            i[n] =
              o[n] &&
              function(v) {
                return new Promise(function(resolve, reject) {
                  (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                });
              };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v) {
              resolve({ value: v, done: d });
            }, reject);
          }
        };

        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };

        var __setModuleDefault = Object.create
          ? function(o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v
              });
            }
          : function(o, v) {
              o["default"] = v;
            };

        __importStar = function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null)
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          __setModuleDefault(result, mod);
          return result;
        };

        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };

        __classPrivateFieldGet = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError(
              "attempted to get private field on non-instance"
            );
          }
          return privateMap.get(receiver);
        };

        __classPrivateFieldSet = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError(
              "attempted to set private field on non-instance"
            );
          }
          privateMap.set(receiver, value);
          return value;
        };

        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      });

      /***/
    },

    /***/ XCPT: /***/ function(module, exports) {
      /**
       * A simple dependency graph
       */

      /**
       * Helper for creating a Topological Sort using Depth-First-Search on a set of edges.
       *
       * Detects cycles and throws an Error if one is detected (unless the "circular"
       * parameter is "true" in which case it ignores them).
       *
       * @param edges The set of edges to DFS through
       * @param leavesOnly Whether to only return "leaf" nodes (ones who have no edges)
       * @param result An array in which the results will be populated
       * @param circular A boolean to allow circular dependencies
       */
      function createDFS(edges, leavesOnly, result, circular) {
        var visited = {};
        return function(start) {
          if (visited[start]) {
            return;
          }
          var inCurrentPath = {};
          var currentPath = [];
          var todo = []; // used as a stack
          todo.push({ node: start, processed: false });
          while (todo.length > 0) {
            var current = todo[todo.length - 1]; // peek at the todo stack
            var processed = current.processed;
            var node = current.node;
            if (!processed) {
              // Haven't visited edges yet (visiting phase)
              if (visited[node]) {
                todo.pop();
                continue;
              } else if (inCurrentPath[node]) {
                // It's not a DAG
                if (circular) {
                  todo.pop();
                  // If we're tolerating cycles, don't revisit the node
                  continue;
                }
                currentPath.push(node);
                throw new DepGraphCycleError(currentPath);
              }

              inCurrentPath[node] = true;
              currentPath.push(node);
              var nodeEdges = edges[node];
              // (push edges onto the todo stack in reverse order to be order-compatible with the old DFS implementation)
              for (var i = nodeEdges.length - 1; i >= 0; i--) {
                todo.push({ node: nodeEdges[i], processed: false });
              }
              current.processed = true;
            } else {
              // Have visited edges (stack unrolling phase)
              todo.pop();
              currentPath.pop();
              inCurrentPath[node] = false;
              visited[node] = true;
              if (!leavesOnly || edges[node].length === 0) {
                result.push(node);
              }
            }
          }
        };
      }

      /**
       * Simple Dependency Graph
       */
      var DepGraph = (exports.DepGraph = function DepGraph(opts) {
        this.nodes = {}; // Node -> Node/Data (treated like a Set)
        this.outgoingEdges = {}; // Node -> [Dependency Node]
        this.incomingEdges = {}; // Node -> [Dependant Node]
        this.circular = opts && !!opts.circular; // Allows circular deps
      });
      DepGraph.prototype = {
        /**
         * The number of nodes in the graph.
         */
        size: function() {
          return Object.keys(this.nodes).length;
        },
        /**
         * Add a node to the dependency graph. If a node already exists, this method will do nothing.
         */
        addNode: function(node, data) {
          if (!this.hasNode(node)) {
            // Checking the arguments length allows the user to add a node with undefined data
            if (arguments.length === 2) {
              this.nodes[node] = data;
            } else {
              this.nodes[node] = node;
            }
            this.outgoingEdges[node] = [];
            this.incomingEdges[node] = [];
          }
        },
        /**
         * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.
         */
        removeNode: function(node) {
          if (this.hasNode(node)) {
            delete this.nodes[node];
            delete this.outgoingEdges[node];
            delete this.incomingEdges[node];
            [this.incomingEdges, this.outgoingEdges].forEach(function(
              edgeList
            ) {
              Object.keys(edgeList).forEach(function(key) {
                var idx = edgeList[key].indexOf(node);
                if (idx >= 0) {
                  edgeList[key].splice(idx, 1);
                }
              }, this);
            });
          }
        },
        /**
         * Check if a node exists in the graph
         */
        hasNode: function(node) {
          return this.nodes.hasOwnProperty(node);
        },
        /**
         * Get the data associated with a node name
         */
        getNodeData: function(node) {
          if (this.hasNode(node)) {
            return this.nodes[node];
          } else {
            throw new Error("Node does not exist: " + node);
          }
        },
        /**
         * Set the associated data for a given node name. If the node does not exist, this method will throw an error
         */
        setNodeData: function(node, data) {
          if (this.hasNode(node)) {
            this.nodes[node] = data;
          } else {
            throw new Error("Node does not exist: " + node);
          }
        },
        /**
         * Add a dependency between two nodes. If either of the nodes does not exist,
         * an Error will be thrown.
         */
        addDependency: function(from, to) {
          if (!this.hasNode(from)) {
            throw new Error("Node does not exist: " + from);
          }
          if (!this.hasNode(to)) {
            throw new Error("Node does not exist: " + to);
          }
          if (this.outgoingEdges[from].indexOf(to) === -1) {
            this.outgoingEdges[from].push(to);
          }
          if (this.incomingEdges[to].indexOf(from) === -1) {
            this.incomingEdges[to].push(from);
          }
          return true;
        },
        /**
         * Remove a dependency between two nodes.
         */
        removeDependency: function(from, to) {
          var idx;
          if (this.hasNode(from)) {
            idx = this.outgoingEdges[from].indexOf(to);
            if (idx >= 0) {
              this.outgoingEdges[from].splice(idx, 1);
            }
          }

          if (this.hasNode(to)) {
            idx = this.incomingEdges[to].indexOf(from);
            if (idx >= 0) {
              this.incomingEdges[to].splice(idx, 1);
            }
          }
        },
        /**
         * Return a clone of the dependency graph. If any custom data is attached
         * to the nodes, it will only be shallow copied.
         */
        clone: function() {
          var source = this;
          var result = new DepGraph();
          var keys = Object.keys(source.nodes);
          keys.forEach(function(n) {
            result.nodes[n] = source.nodes[n];
            result.outgoingEdges[n] = source.outgoingEdges[n].slice(0);
            result.incomingEdges[n] = source.incomingEdges[n].slice(0);
          });
          return result;
        },
        /**
         * Get an array containing the direct dependencies of the specified node.
         *
         * Throws an Error if the specified node does not exist.
         */
        directDependenciesOf: function(node) {
          if (this.hasNode(node)) {
            return this.outgoingEdges[node].slice(0);
          } else {
            throw new Error("Node does not exist: " + node);
          }
        },
        /**
         * Get an array containing the nodes that directly depend on the specified node.
         *
         * Throws an Error if the specified node does not exist.
         */
        directDependantsOf: function(node) {
          if (this.hasNode(node)) {
            return this.incomingEdges[node].slice(0);
          } else {
            throw new Error("Node does not exist: " + node);
          }
        },
        /**
         * Get an array containing the nodes that the specified node depends on (transitively).
         *
         * Throws an Error if the graph has a cycle, or the specified node does not exist.
         *
         * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned
         * in the array.
         */
        dependenciesOf: function(node, leavesOnly) {
          if (this.hasNode(node)) {
            var result = [];
            var DFS = createDFS(
              this.outgoingEdges,
              leavesOnly,
              result,
              this.circular
            );
            DFS(node);
            var idx = result.indexOf(node);
            if (idx >= 0) {
              result.splice(idx, 1);
            }
            return result;
          } else {
            throw new Error("Node does not exist: " + node);
          }
        },
        /**
         * get an array containing the nodes that depend on the specified node (transitively).
         *
         * Throws an Error if the graph has a cycle, or the specified node does not exist.
         *
         * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.
         */
        dependantsOf: function(node, leavesOnly) {
          if (this.hasNode(node)) {
            var result = [];
            var DFS = createDFS(
              this.incomingEdges,
              leavesOnly,
              result,
              this.circular
            );
            DFS(node);
            var idx = result.indexOf(node);
            if (idx >= 0) {
              result.splice(idx, 1);
            }
            return result;
          } else {
            throw new Error("Node does not exist: " + node);
          }
        },
        /**
         * Construct the overall processing order for the dependency graph.
         *
         * Throws an Error if the graph has a cycle.
         *
         * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.
         */
        overallOrder: function(leavesOnly) {
          var self = this;
          var result = [];
          var keys = Object.keys(this.nodes);
          if (keys.length === 0) {
            return result; // Empty graph
          } else {
            if (!this.circular) {
              // Look for cycles - we run the DFS starting at all the nodes in case there
              // are several disconnected subgraphs inside this dependency graph.
              var CycleDFS = createDFS(
                this.outgoingEdges,
                false,
                [],
                this.circular
              );
              keys.forEach(function(n) {
                CycleDFS(n);
              });
            }

            var DFS = createDFS(
              this.outgoingEdges,
              leavesOnly,
              result,
              this.circular
            );
            // Find all potential starting points (nodes with nothing depending on them) an
            // run a DFS starting at these points to get the order
            keys
              .filter(function(node) {
                return self.incomingEdges[node].length === 0;
              })
              .forEach(function(n) {
                DFS(n);
              });

            // If we're allowing cycles - we need to run the DFS against any remaining
            // nodes that did not end up in the initial result (as they are part of a
            // subgraph that does not have a clear starting point)
            if (this.circular) {
              keys
                .filter(function(node) {
                  return result.indexOf(node) === -1;
                })
                .forEach(function(n) {
                  DFS(n);
                });
            }

            return result;
          }
        },
        /**
         * Get an array of nodes that have no dependants (i.e. nothing depends on them).
         */
        entryNodes: function() {
          var self = this;
          return Object.keys(this.nodes).filter(function(node) {
            return self.incomingEdges[node].length === 0;
          });
        }
      };

      // Create some aliases
      DepGraph.prototype.directDependentsOf =
        DepGraph.prototype.directDependantsOf;
      DepGraph.prototype.dependentsOf = DepGraph.prototype.dependantsOf;

      /**
       * Cycle error, including the path of the cycle.
       */
      var DepGraphCycleError = (exports.DepGraphCycleError = function(
        cyclePath
      ) {
        var message = "Dependency Cycle Found: " + cyclePath.join(" -> ");
        var instance = new Error(message);
        instance.cyclePath = cyclePath;
        Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
        if (Error.captureStackTrace) {
          Error.captureStackTrace(instance, DepGraphCycleError);
        }
        return instance;
      });
      DepGraphCycleError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: Error,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      Object.setPrototypeOf(DepGraphCycleError, Error);

      /***/
    },

    /***/ XfSa: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TokenKind = void 0;

      /**
       * An exported enum describing the different kinds of tokens that the
       * lexer emits.
       */
      var TokenKind = Object.freeze({
        SOF: "<SOF>",
        EOF: "<EOF>",
        BANG: "!",
        DOLLAR: "$",
        AMP: "&",
        PAREN_L: "(",
        PAREN_R: ")",
        SPREAD: "...",
        COLON: ":",
        EQUALS: "=",
        AT: "@",
        BRACKET_L: "[",
        BRACKET_R: "]",
        BRACE_L: "{",
        PIPE: "|",
        BRACE_R: "}",
        NAME: "Name",
        INT: "Int",
        FLOAT: "Float",
        STRING: "String",
        BLOCK_STRING: "BlockString",
        COMMENT: "Comment"
      });
      /**
       * The enum type representing the token kinds values.
       */

      exports.TokenKind = TokenKind;

      /***/
    },

    /***/ "Y/4B": /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var aStackPool = [];
      var bStackPool = [];
      /**
       * Checks if two values are equal. Values may be primitives, arrays, or objects.
       * Returns true if both arguments have the same keys and values.
       *
       * @see http://underscorejs.org
       * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
       * @license MIT
       */

      function areEqual(a, b) {
        var aStack = aStackPool.length ? aStackPool.pop() : [];
        var bStack = bStackPool.length ? bStackPool.pop() : [];
        var result = eq(a, b, aStack, bStack);
        aStack.length = 0;
        bStack.length = 0;
        aStackPool.push(aStack);
        bStackPool.push(bStack);
        return result;
      }

      function eq(a, b, aStack, bStack) {
        if (a === b) {
          // Identical objects are equal. `0 === -0`, but they aren't identical.
          return a !== 0 || 1 / a === 1 / b;
        }

        if (a == null || b == null) {
          // a or b can be `null` or `undefined`
          return false;
        }

        if (typeof a !== "object" || typeof b !== "object") {
          return false;
        }

        var objToStr = Object.prototype.toString;
        var className = objToStr.call(a);

        if (className !== objToStr.call(b)) {
          return false;
        }

        switch (className) {
          case "[object String]":
            return a === String(b);

          case "[object Number]":
            return isNaN(a) || isNaN(b) ? false : a === Number(b);

          case "[object Date]":
          case "[object Boolean]":
            return +a === +b;

          case "[object RegExp]":
            return (
              a.source === b.source &&
              a.global === b.global &&
              a.multiline === b.multiline &&
              a.ignoreCase === b.ignoreCase
            );
        } // Assume equality for cyclic structures.

        var length = aStack.length;

        while (length--) {
          if (aStack[length] === a) {
            return bStack[length] === b;
          }
        }

        aStack.push(a);
        bStack.push(b);
        var size = 0; // Recursively compare objects and arrays.

        if (className === "[object Array]") {
          size = a.length;

          if (size !== b.length) {
            return false;
          } // Deep compare the contents, ignoring non-numeric properties.

          while (size--) {
            if (!eq(a[size], b[size], aStack, bStack)) {
              return false;
            }
          }
        } else {
          if (a.constructor !== b.constructor) {
            return false;
          }

          if (a.hasOwnProperty("valueOf") && b.hasOwnProperty("valueOf")) {
            return a.valueOf() === b.valueOf();
          }

          var keys = Object.keys(a);

          if (keys.length !== Object.keys(b).length) {
            return false;
          }

          for (var i = 0; i < keys.length; i++) {
            if (keys[i] === "_owner") {
              // HACK: Comparing deeply nested React trees is slow since you end up
              // comparing the entire tree (all ancestors and all children) and
              // likely not what you want if you're comparing two elements with
              // areEqual. We bail out here for now.
              continue;
            }

            if (
              !b.hasOwnProperty(keys[i]) ||
              !eq(a[keys[i]], b[keys[i]], aStack, bStack)
            ) {
              return false;
            }
          }
        }

        aStack.pop();
        bStack.pop();
        return true;
      }

      module.exports = areEqual;

      /***/
    },

    /***/ YDZp: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      /* eslint-disable no-redeclare */
      // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
      var objectValues =
        Object.values ||
        function(obj) {
          return Object.keys(obj).map(function(key) {
            return obj[key];
          });
        };

      var _default = objectValues;
      exports.default = _default;

      /***/
    },

    /***/ Z4WY: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /*!
       * path-root <https://github.com/jonschlinkert/path-root>
       *
       * Copyright (c) 2016, Jon Schlinkert.
       * Licensed under the MIT License.
       */

      var pathRootRegex = __webpack_require__("NIw6");

      module.exports = function(filepath) {
        if (typeof filepath !== "string") {
          throw new TypeError("expected a string");
        }

        var match = pathRootRegex().exec(filepath);
        if (match) {
          return match[0];
        }
      };

      /***/
    },

    /***/ Z4gy: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isPromise;

      /**
       * Returns true if the value acts like a Promise, i.e. has a "then" function,
       * otherwise returns false.
       */
      // eslint-disable-next-line no-redeclare
      function isPromise(value) {
        return (
          typeof (value === null || value === void 0 ? void 0 : value.then) ===
          "function"
        );
      }

      /***/
    },

    /***/ Z7K8: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.addPath = addPath;
      exports.pathToArray = pathToArray;

      /**
       * Given a Path and a key, return a new Path containing the new key.
       */
      function addPath(prev, key, typename) {
        return {
          prev: prev,
          key: key,
          typename: typename
        };
      }
      /**
       * Given a Path, return an Array of the path keys.
       */

      function pathToArray(path) {
        var flattened = [];
        var curr = path;

        while (curr) {
          flattened.push(curr.key);
          curr = curr.prev;
        }

        return flattened.reverse();
      }

      /***/
    },

    /***/ ZF9o: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _interopRequireDefault = __webpack_require__("TqRt");

      var _defineProperty2 = _interopRequireDefault(
        __webpack_require__("lSNA")
      );

      var _toConsumableArray2 = _interopRequireDefault(
        __webpack_require__("RIqP")
      );

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              (0, _defineProperty2["default"])(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      var IRTransformer = __webpack_require__("OHCT");

      var IMap = __webpack_require__("r4ky").Map;

      var partitionArray = __webpack_require__("E690");

      var getIdentifierForSelection = __webpack_require__("EQxW");

      var invariant = __webpack_require__("OUqe");

      /**
       * A transform that removes redundant fields and fragment spreads. Redundancy is
       * defined in this context as any selection that is guaranteed to already be
       * fetched by an ancestor selection. This can occur in two cases:
       *
       * 1. Simple duplicates at the same level of the document can always be skipped:
       *
       * ```
       * fragment Foo on FooType {
       *   id
       *   id
       *   ...Bar
       *   ...Bar
       * }
       * ```
       *
       * Becomes
       *
       * ```
       * fragment Foo on FooType {
       *   id
       *   ...Bar
       * }
       * ```
       *
       * 2. Inline fragments and conditions introduce the possibility for duplication
       * at different levels of the tree. Whenever a selection is fetched in a parent,
       * it is redundant to also fetch it in a child:
       *
       * ```
       * fragment Foo on FooType {
       *   id
       *   ... on OtherType {
       *     id # 1
       *   }
       *   ... on FooType @include(if: $cond) {
       *     id # 2
       *   }
       * }
       * ```
       *
       * Becomes:
       *
       * ```
       * fragment Foo on FooType {
       *   id
       * }
       * ```
       *
       * In this example:
       * - 1 can be skipped because `id` is already fetched by the parent. Even
       *   though the type is different (FooType/OtherType), the inline fragment
       *   cannot match without the outer fragment matching so the outer `id` is
       *   guaranteed to already be fetched.
       * - 2 can be skipped for similar reasons: it doesn't matter if the condition
       *   holds, `id` is already fetched by the parent regardless.
       *
       * This transform also handles more complicated cases in which selections are
       * nested:
       *
       * ```
       * fragment Foo on FooType {
       *   a {
       *     bb
       *   }
       *   ... on OtherType {
       *     a {
       *       bb # 1
       *       cc
       *     }
       *   }
       *  }
       * ```
       *
       * Becomes
       *
       * ```
       * fragment Foo on FooType {
       *   a {
       *     bb
       *   }
       *   ... on OtherType {
       *     a {
       *       cc
       *     }
       *   }
       *  }
       * ```
       *
       * 1 can be skipped because it is already fetched at the outer level.
       */
      function skipRedundantNodesTransform(context) {
        return IRTransformer.transform(context, {
          Root: visitNode,
          SplitOperation: visitNode,
          Fragment: visitNode
        });
      }

      var cache = new Map();

      function visitNode(node) {
        cache = new Map();
        var context = this.getContext();
        return transformNode(context.getSchema(), node, new IMap()).node;
      }
      /**
       * The most straightforward approach would be two passes: one to record the
       * structure of the document, one to prune duplicates. This implementation uses
       * a single pass. Selections are sorted with fields first, "conditionals"
       * (inline fragments & conditions) last. This means that all fields that are
       * guaranteed to be fetched are encountered prior to any duplicates that may be
       * fetched within a conditional.
       *
       * Because selections fetched within a conditional are not guaranteed to be
       * fetched in the parent, a fork of the selection map is created when entering a
       * conditional. The sort ensures that guaranteed fields have already been seen
       * prior to the clone.
       */

      function transformNode(schema, node, selectionMap) {
        // This will optimize a traversal of the same subselections.
        // If it's the same node, and selectionMap is empty
        // result of transformNode has to be the same.
        var isEmptySelectionMap = selectionMap.size === 0;
        var result;

        if (isEmptySelectionMap) {
          // $FlowFixMe[escaped-generic]
          result = cache.get(node);

          if (result != null) {
            return result;
          }
        }

        var selections = [];
        sortSelections(node.selections).forEach(function(selection) {
          var identifier = getIdentifierForSelection(schema, selection);

          switch (selection.kind) {
            case "ScalarField":
            case "FragmentSpread": {
              if (!selectionMap.has(identifier)) {
                selections.push(selection);
                selectionMap = selectionMap.set(identifier, null);
              }

              break;
            }

            case "Defer":
            case "Stream":
            case "ModuleImport":
            case "ClientExtension":
            case "InlineDataFragmentSpread":
            case "LinkedField": {
              var transformed = transformNode(
                schema,
                selection,
                selectionMap.get(identifier) || new IMap()
              );

              if (transformed.node) {
                selections.push(transformed.node);
                selectionMap = selectionMap.set(
                  identifier,
                  transformed.selectionMap
                );
              }

              break;
            }

            case "InlineFragment":
            case "Condition": {
              // Fork the selection map to prevent conditional selections from
              // affecting the outer "guaranteed" selections.
              var _transformed = transformNode(
                schema,
                selection,
                selectionMap.get(identifier) || selectionMap
              );

              if (_transformed.node) {
                selections.push(_transformed.node);
                selectionMap = selectionMap.set(
                  identifier,
                  _transformed.selectionMap
                );
              }

              break;
            }

            default:
              selection;
              true ? (false ? undefined : invariant(false)) : undefined;
          }
        });
        var nextNode = selections.length
          ? _objectSpread(
              _objectSpread({}, node),
              {},
              {
                selections: selections
              }
            )
          : null;
        result = {
          selectionMap: selectionMap,
          node: nextNode
        };

        if (isEmptySelectionMap) {
          // $FlowFixMe[escaped-generic]
          cache.set(node, result);
        }

        return result;
      }
      /**
       * Sort inline fragments and conditions after other selections.
       */

      function sortSelections(selections) {
        var isScalarOrLinkedField = function isScalarOrLinkedField(selection) {
          return (
            selection.kind === "ScalarField" || selection.kind === "LinkedField"
          );
        };

        var _partitionArray = partitionArray(selections, isScalarOrLinkedField),
          scalarsAndLinkedFields = _partitionArray[0],
          rest = _partitionArray[1];

        return [].concat(
          (0, _toConsumableArray2["default"])(scalarsAndLinkedFields),
          (0, _toConsumableArray2["default"])(rest)
        );
      }

      module.exports = {
        transform: skipRedundantNodesTransform
      };

      /***/
    },

    /***/ ZSaH: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.introspectionFromSchema = introspectionFromSchema;

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _parser = __webpack_require__("DEM2");

      var _execute = __webpack_require__("TcFd");

      var _getIntrospectionQuery = __webpack_require__("7OAR");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Build an IntrospectionQuery from a GraphQLSchema
       *
       * IntrospectionQuery is useful for utilities that care about type and field
       * relationships, but do not need to traverse through those relationships.
       *
       * This is the inverse of buildClientSchema. The primary use case is outside
       * of the server context, for instance when doing schema comparisons.
       */
      function introspectionFromSchema(schema, options) {
        var optionsWithDefaults = _objectSpread(
          {
            specifiedByUrl: true,
            directiveIsRepeatable: true,
            schemaDescription: true,
            inputValueDeprecation: true
          },
          options
        );

        var document = (0, _parser.parse)(
          (0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults)
        );
        var result = (0, _execute.executeSync)({
          schema: schema,
          document: document
        });
        (!result.errors && result.data) || (0, _invariant.default)(0);
        return result.data;
      }

      /***/
    },

    /***/ ZXHR: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var Get = __webpack_require__("V/hC");
      var ToLength = __webpack_require__("JyDY");
      var Type = __webpack_require__("zOLO");

      // https://262.ecma-international.org/11.0/#sec-lengthofarraylike

      module.exports = function LengthOfArrayLike(obj) {
        if (Type(obj) !== "Object") {
          throw new $TypeError("Assertion failed: `obj` must be an Object");
        }
        return ToLength(Get(obj, "length"));
      };

      // TODO: use this all over

      /***/
    },

    /***/ ZhPi: /***/ function(module, exports, __webpack_require__) {
      var arrayLikeToArray = __webpack_require__("WkPL");

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return arrayLikeToArray(o, minLen);
      }

      module.exports = _unsupportedIterableToArray;

      /***/
    },

    /***/ ZjIp: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.buildClientSchema = buildClientSchema;

      var _objectValues = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _keyValMap = _interopRequireDefault(__webpack_require__("IatC"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _parser = __webpack_require__("DEM2");

      var _schema = __webpack_require__("+X2/");

      var _directives = __webpack_require__("L9+1");

      var _scalars = __webpack_require__("0N00");

      var _introspection = __webpack_require__("JIc4");

      var _definition = __webpack_require__("mAVk");

      var _valueFromAST = __webpack_require__("MrvF");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Build a GraphQLSchema for use by client tools.
       *
       * Given the result of a client running the introspection query, creates and
       * returns a GraphQLSchema instance which can be then used with all graphql-js
       * tools, but cannot be used to execute a query, as introspection does not
       * represent the "resolver", "parse" or "serialize" functions or any other
       * server-internal mechanisms.
       *
       * This function expects a complete introspection result. Don't forget to check
       * the "errors" field of a server response before calling this function.
       */
      function buildClientSchema(introspection, options) {
        ((0, _isObjectLike.default)(introspection) &&
          (0, _isObjectLike.default)(introspection.__schema)) ||
          (0, _devAssert.default)(
            0,
            'Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: '.concat(
              (0, _inspect.default)(introspection),
              "."
            )
          ); // Get the schema from the introspection result.

        var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

        var typeMap = (0, _keyValMap.default)(
          schemaIntrospection.types,
          function(typeIntrospection) {
            return typeIntrospection.name;
          },
          function(typeIntrospection) {
            return buildType(typeIntrospection);
          }
        ); // Include standard types only if they are used.

        for (
          var _i2 = 0,
            _ref2 = [].concat(
              _scalars.specifiedScalarTypes,
              _introspection.introspectionTypes
            );
          _i2 < _ref2.length;
          _i2++
        ) {
          var stdType = _ref2[_i2];

          if (typeMap[stdType.name]) {
            typeMap[stdType.name] = stdType;
          }
        } // Get the root Query, Mutation, and Subscription types.

        var queryType = schemaIntrospection.queryType
          ? getObjectType(schemaIntrospection.queryType)
          : null;
        var mutationType = schemaIntrospection.mutationType
          ? getObjectType(schemaIntrospection.mutationType)
          : null;
        var subscriptionType = schemaIntrospection.subscriptionType
          ? getObjectType(schemaIntrospection.subscriptionType)
          : null; // Get the directives supported by Introspection, assuming empty-set if
        // directives were not queried for.

        var directives = schemaIntrospection.directives
          ? schemaIntrospection.directives.map(buildDirective)
          : []; // Then produce and return a Schema with these types.

        return new _schema.GraphQLSchema({
          description: schemaIntrospection.description,
          query: queryType,
          mutation: mutationType,
          subscription: subscriptionType,
          types: (0, _objectValues.default)(typeMap),
          directives: directives,
          assumeValid:
            options === null || options === void 0
              ? void 0
              : options.assumeValid
        }); // Given a type reference in introspection, return the GraphQLType instance.
        // preferring cached instances before building new instances.

        function getType(typeRef) {
          if (typeRef.kind === _introspection.TypeKind.LIST) {
            var itemRef = typeRef.ofType;

            if (!itemRef) {
              throw new Error(
                "Decorated type deeper than introspection query."
              );
            }

            return new _definition.GraphQLList(getType(itemRef));
          }

          if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
            var nullableRef = typeRef.ofType;

            if (!nullableRef) {
              throw new Error(
                "Decorated type deeper than introspection query."
              );
            }

            var nullableType = getType(nullableRef);
            return new _definition.GraphQLNonNull(
              (0, _definition.assertNullableType)(nullableType)
            );
          }

          return getNamedType(typeRef);
        }

        function getNamedType(typeRef) {
          var typeName = typeRef.name;

          if (!typeName) {
            throw new Error(
              "Unknown type reference: ".concat(
                (0, _inspect.default)(typeRef),
                "."
              )
            );
          }

          var type = typeMap[typeName];

          if (!type) {
            throw new Error(
              "Invalid or incomplete schema, unknown type: ".concat(
                typeName,
                ". Ensure that a full introspection query is used in order to build a client schema."
              )
            );
          }

          return type;
        }

        function getObjectType(typeRef) {
          return (0, _definition.assertObjectType)(getNamedType(typeRef));
        }

        function getInterfaceType(typeRef) {
          return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
        } // Given a type's introspection result, construct the correct
        // GraphQLType instance.

        function buildType(type) {
          if (type != null && type.name != null && type.kind != null) {
            switch (type.kind) {
              case _introspection.TypeKind.SCALAR:
                return buildScalarDef(type);

              case _introspection.TypeKind.OBJECT:
                return buildObjectDef(type);

              case _introspection.TypeKind.INTERFACE:
                return buildInterfaceDef(type);

              case _introspection.TypeKind.UNION:
                return buildUnionDef(type);

              case _introspection.TypeKind.ENUM:
                return buildEnumDef(type);

              case _introspection.TypeKind.INPUT_OBJECT:
                return buildInputObjectDef(type);
            }
          }

          var typeStr = (0, _inspect.default)(type);
          throw new Error(
            "Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(
              typeStr,
              "."
            )
          );
        }

        function buildScalarDef(scalarIntrospection) {
          return new _definition.GraphQLScalarType({
            name: scalarIntrospection.name,
            description: scalarIntrospection.description,
            specifiedByUrl: scalarIntrospection.specifiedByUrl
          });
        }

        function buildImplementationsList(implementingIntrospection) {
          // TODO: Temporary workaround until GraphQL ecosystem will fully support
          // 'interfaces' on interface types.
          if (
            implementingIntrospection.interfaces === null &&
            implementingIntrospection.kind === _introspection.TypeKind.INTERFACE
          ) {
            return [];
          }

          if (!implementingIntrospection.interfaces) {
            var implementingIntrospectionStr = (0, _inspect.default)(
              implementingIntrospection
            );
            throw new Error(
              "Introspection result missing interfaces: ".concat(
                implementingIntrospectionStr,
                "."
              )
            );
          }

          return implementingIntrospection.interfaces.map(getInterfaceType);
        }

        function buildObjectDef(objectIntrospection) {
          return new _definition.GraphQLObjectType({
            name: objectIntrospection.name,
            description: objectIntrospection.description,
            interfaces: function interfaces() {
              return buildImplementationsList(objectIntrospection);
            },
            fields: function fields() {
              return buildFieldDefMap(objectIntrospection);
            }
          });
        }

        function buildInterfaceDef(interfaceIntrospection) {
          return new _definition.GraphQLInterfaceType({
            name: interfaceIntrospection.name,
            description: interfaceIntrospection.description,
            interfaces: function interfaces() {
              return buildImplementationsList(interfaceIntrospection);
            },
            fields: function fields() {
              return buildFieldDefMap(interfaceIntrospection);
            }
          });
        }

        function buildUnionDef(unionIntrospection) {
          if (!unionIntrospection.possibleTypes) {
            var unionIntrospectionStr = (0, _inspect.default)(
              unionIntrospection
            );
            throw new Error(
              "Introspection result missing possibleTypes: ".concat(
                unionIntrospectionStr,
                "."
              )
            );
          }

          return new _definition.GraphQLUnionType({
            name: unionIntrospection.name,
            description: unionIntrospection.description,
            types: function types() {
              return unionIntrospection.possibleTypes.map(getObjectType);
            }
          });
        }

        function buildEnumDef(enumIntrospection) {
          if (!enumIntrospection.enumValues) {
            var enumIntrospectionStr = (0, _inspect.default)(enumIntrospection);
            throw new Error(
              "Introspection result missing enumValues: ".concat(
                enumIntrospectionStr,
                "."
              )
            );
          }

          return new _definition.GraphQLEnumType({
            name: enumIntrospection.name,
            description: enumIntrospection.description,
            values: (0, _keyValMap.default)(
              enumIntrospection.enumValues,
              function(valueIntrospection) {
                return valueIntrospection.name;
              },
              function(valueIntrospection) {
                return {
                  description: valueIntrospection.description,
                  deprecationReason: valueIntrospection.deprecationReason
                };
              }
            )
          });
        }

        function buildInputObjectDef(inputObjectIntrospection) {
          if (!inputObjectIntrospection.inputFields) {
            var inputObjectIntrospectionStr = (0, _inspect.default)(
              inputObjectIntrospection
            );
            throw new Error(
              "Introspection result missing inputFields: ".concat(
                inputObjectIntrospectionStr,
                "."
              )
            );
          }

          return new _definition.GraphQLInputObjectType({
            name: inputObjectIntrospection.name,
            description: inputObjectIntrospection.description,
            fields: function fields() {
              return buildInputValueDefMap(
                inputObjectIntrospection.inputFields
              );
            }
          });
        }

        function buildFieldDefMap(typeIntrospection) {
          if (!typeIntrospection.fields) {
            throw new Error(
              "Introspection result missing fields: ".concat(
                (0, _inspect.default)(typeIntrospection),
                "."
              )
            );
          }

          return (0, _keyValMap.default)(
            typeIntrospection.fields,
            function(fieldIntrospection) {
              return fieldIntrospection.name;
            },
            buildField
          );
        }

        function buildField(fieldIntrospection) {
          var type = getType(fieldIntrospection.type);

          if (!(0, _definition.isOutputType)(type)) {
            var typeStr = (0, _inspect.default)(type);
            throw new Error(
              "Introspection must provide output type for fields, but received: ".concat(
                typeStr,
                "."
              )
            );
          }

          if (!fieldIntrospection.args) {
            var fieldIntrospectionStr = (0, _inspect.default)(
              fieldIntrospection
            );
            throw new Error(
              "Introspection result missing field args: ".concat(
                fieldIntrospectionStr,
                "."
              )
            );
          }

          return {
            description: fieldIntrospection.description,
            deprecationReason: fieldIntrospection.deprecationReason,
            type: type,
            args: buildInputValueDefMap(fieldIntrospection.args)
          };
        }

        function buildInputValueDefMap(inputValueIntrospections) {
          return (0, _keyValMap.default)(
            inputValueIntrospections,
            function(inputValue) {
              return inputValue.name;
            },
            buildInputValue
          );
        }

        function buildInputValue(inputValueIntrospection) {
          var type = getType(inputValueIntrospection.type);

          if (!(0, _definition.isInputType)(type)) {
            var typeStr = (0, _inspect.default)(type);
            throw new Error(
              "Introspection must provide input type for arguments, but received: ".concat(
                typeStr,
                "."
              )
            );
          }

          var defaultValue =
            inputValueIntrospection.defaultValue != null
              ? (0, _valueFromAST.valueFromAST)(
                  (0, _parser.parseValue)(inputValueIntrospection.defaultValue),
                  type
                )
              : undefined;
          return {
            description: inputValueIntrospection.description,
            type: type,
            defaultValue: defaultValue,
            deprecationReason: inputValueIntrospection.deprecationReason
          };
        }

        function buildDirective(directiveIntrospection) {
          if (!directiveIntrospection.args) {
            var directiveIntrospectionStr = (0, _inspect.default)(
              directiveIntrospection
            );
            throw new Error(
              "Introspection result missing directive args: ".concat(
                directiveIntrospectionStr,
                "."
              )
            );
          }

          if (!directiveIntrospection.locations) {
            var _directiveIntrospectionStr = (0, _inspect.default)(
              directiveIntrospection
            );

            throw new Error(
              "Introspection result missing directive locations: ".concat(
                _directiveIntrospectionStr,
                "."
              )
            );
          }

          return new _directives.GraphQLDirective({
            name: directiveIntrospection.name,
            description: directiveIntrospection.description,
            isRepeatable: directiveIntrospection.isRepeatable,
            locations: directiveIntrospection.locations.slice(),
            args: buildInputValueDefMap(directiveIntrospection.args)
          });
        }
      }

      /***/
    },

    /***/ ZrYX: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const changeCaseAll = __webpack_require__("3XYS");
      const path = __webpack_require__("oyvS");
      const gql = _interopDefault(__webpack_require__("Dugd"));

      const R_MOD = /module:\s*"([^"]+)"/; // matches: module: "..."
      const R_NAME = /name:\s*"([^"]+)"/; // matches: name: "..."
      function R_DEF(directive) {
        return new RegExp(`\\s+\\@${directive}\\([^)]+\\)`, "gm");
      }
      class ApolloAngularVisitor extends visitorPluginCommon.ClientSideBaseVisitor {
        constructor(schema, fragments, _allOperations, rawConfig, documents) {
          super(
            schema,
            fragments,
            rawConfig,
            {
              sdkClass: rawConfig.sdkClass,
              ngModule: rawConfig.ngModule,
              namedClient: rawConfig.namedClient,
              serviceName: rawConfig.serviceName,
              serviceProvidedIn: rawConfig.serviceProvidedIn,
              serviceProvidedInRoot: rawConfig.serviceProvidedInRoot,
              querySuffix: rawConfig.querySuffix,
              mutationSuffix: rawConfig.mutationSuffix,
              subscriptionSuffix: rawConfig.subscriptionSuffix,
              additionalDI: visitorPluginCommon.getConfigValue(
                rawConfig.additionalDI,
                []
              ),
              apolloAngularPackage: visitorPluginCommon.getConfigValue(
                rawConfig.apolloAngularPackage,
                "apollo-angular"
              ),
              apolloAngularVersion: visitorPluginCommon.getConfigValue(
                rawConfig.apolloAngularVersion,
                2
              ),
              gqlImport: visitorPluginCommon.getConfigValue(
                rawConfig.gqlImport,
                !rawConfig.apolloAngularVersion ||
                  rawConfig.apolloAngularVersion === 2
                  ? `apollo-angular#gql`
                  : null
              )
            },
            documents
          );
          this._allOperations = _allOperations;
          this._externalImportPrefix = "";
          this._operationsToInclude = [];
          this.dependencyInjections = "";
          this.dependencyInjectionArgs = "";
          if (this.config.importOperationTypesFrom) {
            this._externalImportPrefix = `${this.config.importOperationTypesFrom}.`;
            if (
              this.config.documentMode !==
                visitorPluginCommon.DocumentMode.external ||
              !this.config.importDocumentNodeExternallyFrom
            ) {
              // eslint-disable-next-line no-console
              console.warn(
                '"importOperationTypesFrom" should be used with "documentMode=external" and "importDocumentNodeExternallyFrom"'
              );
            }
            if (this.config.importOperationTypesFrom !== "Operations") {
              // eslint-disable-next-line no-console
              console.warn(
                'importOperationTypesFrom only works correctly when left empty or set to "Operations"'
              );
            }
          }
          const dependencyInjections = ["apollo: Apollo.Apollo"].concat(
            this.config.additionalDI
          );
          const dependencyInjectionArgs = dependencyInjections.map(content => {
            return content.split(":")[0];
          });
          this.dependencyInjections = dependencyInjections.join(", ");
          this.dependencyInjectionArgs = dependencyInjectionArgs.join(", ");
          autoBind(this);
        }
        getImports() {
          const baseImports = super.getImports();
          const hasOperations = this._collectedOperations.length > 0;
          if (!hasOperations) {
            return baseImports;
          }
          const imports = [
            `import { Injectable } from '@angular/core';`,
            `import * as Apollo from '${this.config.apolloAngularPackage}';`
          ];
          if (this.config.sdkClass) {
            const corePackage =
              this.config.apolloAngularVersion > 1
                ? "@apollo/client/core"
                : "apollo-client";
            imports.push(`import * as ApolloCore from '${corePackage}';`);
          }
          const defs = {};
          this._allOperations
            .filter(
              op =>
                this._operationHasDirective(op, "NgModule") ||
                !!this.config.ngModule
            )
            .forEach(op => {
              const def = this._operationHasDirective(op, "NgModule")
                ? this._extractNgModule(op)
                : this._parseNgModule(this.config.ngModule);
              // by setting key as link we easily get rid of duplicated imports
              // every path should be relative to the output file
              defs[def.link] = {
                path: def.path,
                module: def.module
              };
            });
          if (this.config.serviceProvidedIn) {
            const ngModule = this._parseNgModule(this.config.serviceProvidedIn);
            defs[ngModule.link] = {
              path: ngModule.path,
              module: ngModule.module
            };
          }
          Object.keys(defs).forEach(key => {
            const def = defs[key];
            // Every Angular Module that I've seen in my entire life use named exports
            imports.push(`import { ${def.module} } from '${def.path}';`);
          });
          return [...baseImports, ...imports];
        }
        _extractNgModule(operation) {
          const [, link] = graphql.print(operation).match(R_MOD);
          return this._parseNgModule(link);
        }
        _parseNgModule(link) {
          const [path, module] = link.split("#");
          return {
            path,
            module,
            link
          };
        }
        _operationHasDirective(operation, directive) {
          if (typeof operation === "string") {
            return operation.includes(`@${directive}`);
          }
          let found = false;
          graphql.visit(operation, {
            Directive(node) {
              if (node.name.value === directive) {
                found = true;
              }
            }
          });
          return found;
        }
        _removeDirective(document, directive) {
          if (this._operationHasDirective(document, directive)) {
            return document.replace(R_DEF(directive), "");
          }
          return document;
        }
        _removeDirectives(document, directives) {
          return directives.reduce(
            (doc, directive) => this._removeDirective(doc, directive),
            document
          );
        }
        _extractDirective(operation, directive) {
          const directives = graphql.print(operation).match(R_DEF(directive));
          if (directives.length > 1) {
            throw new Error(
              `The ${directive} directive used multiple times in '${operation.name}' operation`
            );
          }
          return directives[0];
        }
        _prepareDocument(documentStr) {
          return this._removeDirectives(documentStr, [
            "NgModule",
            "namedClient"
          ]);
        }
        _namedClient(operation) {
          let name;
          if (this._operationHasDirective(operation, "namedClient")) {
            name = this._extractNamedClient(operation);
          } else if (this.config.namedClient) {
            name = this.config.namedClient;
          }
          return name ? `client = '${name}';` : "";
        }
        // tries to find namedClient directive and extract {name}
        _extractNamedClient(operation) {
          const [, name] = this._extractDirective(
            operation,
            "namedClient"
          ).match(R_NAME);
          return name;
        }
        _providedIn(operation) {
          if (this._operationHasDirective(operation, "NgModule")) {
            return this._extractNgModule(operation).module;
          } else if (this.config.ngModule) {
            return this._parseNgModule(this.config.ngModule).module;
          }
          return `'root'`;
        }
        _getDocumentNodeVariable(node, documentVariableName) {
          return this.config.importOperationTypesFrom
            ? `${this.config.importOperationTypesFrom}.${documentVariableName}`
            : documentVariableName;
        }
        _operationSuffix(operationType) {
          const defaultSuffix = "GQL";
          switch (operationType) {
            case "Query":
              return this.config.querySuffix || defaultSuffix;
            case "Mutation":
              return this.config.mutationSuffix || defaultSuffix;
            case "Subscription":
              return this.config.subscriptionSuffix || defaultSuffix;
            default:
              return defaultSuffix;
          }
        }
        buildOperation(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          const serviceName = `${this.convertName(node)}${this._operationSuffix(
            operationType
          )}`;
          this._operationsToInclude.push({
            node,
            documentVariableName,
            operationType,
            operationResultType,
            operationVariablesTypes,
            serviceName
          });
          operationResultType =
            this._externalImportPrefix + operationResultType;
          operationVariablesTypes =
            this._externalImportPrefix + operationVariablesTypes;
          const content = `
  @Injectable({
    providedIn: ${this._providedIn(node)}
  })
  export class ${serviceName} extends Apollo.${operationType}<${operationResultType}, ${operationVariablesTypes}> {
    document = ${this._getDocumentNodeVariable(node, documentVariableName)};
    ${this._namedClient(node)}
    constructor(${this.dependencyInjections}) {
      super(${this.dependencyInjectionArgs});
    }
  }`;
          return content;
        }
        get sdkClass() {
          const actionType = operation => {
            switch (operation) {
              case "Mutation":
                return "mutate";
              case "Subscription":
                return "subscribe";
              default:
                return "fetch";
            }
          };
          const allPossibleActions = this._operationsToInclude
            .map(o => {
              const operationResultType =
                this._externalImportPrefix + o.operationResultType;
              const operationVariablesTypes =
                this._externalImportPrefix + o.operationVariablesTypes;
              const optionalVariables =
                !o.node.variableDefinitions ||
                o.node.variableDefinitions.length === 0 ||
                o.node.variableDefinitions.every(
                  v =>
                    v.type.kind !== graphql.Kind.NON_NULL_TYPE ||
                    !!v.defaultValue
                );
              const options =
                o.operationType === "Mutation"
                  ? `${o.operationType}OptionsAlone<${operationResultType}, ${operationVariablesTypes}>`
                  : `${o.operationType}OptionsAlone<${operationVariablesTypes}>`;
              const method = `
${changeCaseAll.camelCase(o.node.name.value)}(variables${
                optionalVariables ? "?" : ""
              }: ${operationVariablesTypes}, options?: ${options}) {
  return this.${changeCaseAll.camelCase(o.serviceName)}.${actionType(
                o.operationType
              )}(variables, options)
}`;
              let watchMethod;
              if (o.operationType === "Query") {
                watchMethod = `

${changeCaseAll.camelCase(o.node.name.value)}Watch(variables${
                  optionalVariables ? "?" : ""
                }: ${operationVariablesTypes}, options?: WatchQueryOptionsAlone<${operationVariablesTypes}>) {
  return this.${changeCaseAll.camelCase(
    o.serviceName
  )}.watch(variables, options)
}`;
              }
              return [method, watchMethod].join("");
            })
            .map(s => visitorPluginCommon.indentMultiline(s, 2));
          // Inject the generated services in the constructor
          const injectString = service =>
            `private ${changeCaseAll.camelCase(service)}: ${service}`;
          const injections = this._operationsToInclude
            .map(op => injectString(op.serviceName))
            .map(s => visitorPluginCommon.indentMultiline(s, 3))
            .join(",\n");
          const serviceName = this.config.serviceName || "ApolloAngularSDK";
          const providedIn = this.config.serviceProvidedIn
            ? `{ providedIn: ${
                this._parseNgModule(this.config.serviceProvidedIn).module
              } }`
            : this.config.serviceProvidedInRoot === false
            ? ""
            : `{ providedIn: 'root' }`;
          return `
  type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

  interface WatchQueryOptionsAlone<V>
    extends Omit<ApolloCore.WatchQueryOptions<V>, 'query' | 'variables'> {}
    
  interface QueryOptionsAlone<V>
    extends Omit<ApolloCore.QueryOptions<V>, 'query' | 'variables'> {}
    
  interface MutationOptionsAlone<T, V>
    extends Omit<ApolloCore.MutationOptions<T, V>, 'mutation' | 'variables'> {}
    
  interface SubscriptionOptionsAlone<V>
    extends Omit<ApolloCore.SubscriptionOptions<V>, 'query' | 'variables'> {}

  @Injectable(${providedIn})
  export class ${serviceName} {
    constructor(
${injections}
    ) {}
  ${allPossibleActions.join("\n")}
  }`;
        }
      }

      const plugin = (schema, documents, config) => {
        const allAst = graphql.concatAST(documents.map(v => v.document));
        const operations = allAst.definitions.filter(
          d => d.kind === graphql.Kind.OPERATION_DEFINITION
        );
        const allFragments = [
          ...allAst.definitions
            .filter(d => d.kind === graphql.Kind.FRAGMENT_DEFINITION)
            .map(fragmentDef => ({
              node: fragmentDef,
              name: fragmentDef.name.value,
              onType: fragmentDef.typeCondition.name.value,
              isExternal: false
            })),
          ...(config.externalFragments || [])
        ];
        const visitor = new ApolloAngularVisitor(
          schema,
          allFragments,
          operations,
          config,
          documents
        );
        const visitorResult = graphql.visit(allAst, { leave: visitor });
        return {
          prepend: visitor.getImports(),
          content: [
            visitor.fragments,
            ...visitorResult.definitions.filter(t => typeof t === "string"),
            config.sdkClass ? visitor.sdkClass : null
          ]
            .filter(a => a)
            .join("\n")
        };
      };
      const addToSchema = gql`
        directive @NgModule(module: String!) on OBJECT | FIELD
        directive @namedClient(name: String!) on OBJECT | FIELD
      `;
      const validate = async (schema, documents, config, outputFile) => {
        if (path.extname(outputFile) !== ".ts") {
          throw new Error(
            `Plugin "apollo-angular" requires extension to be ".ts"!`
          );
        }
      };

      exports.ApolloAngularVisitor = ApolloAngularVisitor;
      exports.addToSchema = addToSchema;
      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ aB4s: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _printer = __webpack_require__("gCJq");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      /**
       * Fragments on composite type
       *
       * Fragments use a type condition to determine if they apply, since fragments
       * can only be spread into a composite type (object, interface, or union), the
       * type condition must also be a composite type.
       */
      function FragmentsOnCompositeTypesRule(context) {
        return {
          InlineFragment: function InlineFragment(node) {
            var typeCondition = node.typeCondition;

            if (typeCondition) {
              var type = (0, _typeFromAST.typeFromAST)(
                context.getSchema(),
                typeCondition
              );

              if (type && !(0, _definition.isCompositeType)(type)) {
                var typeStr = (0, _printer.print)(typeCondition);
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Fragment cannot condition on non composite type "'.concat(
                      typeStr,
                      '".'
                    ),
                    typeCondition
                  )
                );
              }
            }
          },
          FragmentDefinition: function FragmentDefinition(node) {
            var type = (0, _typeFromAST.typeFromAST)(
              context.getSchema(),
              node.typeCondition
            );

            if (type && !(0, _definition.isCompositeType)(type)) {
              var typeStr = (0, _printer.print)(node.typeCondition);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Fragment "'
                    .concat(
                      node.name.value,
                      '" cannot condition on non composite type "'
                    )
                    .concat(typeStr, '".'),
                  node.typeCondition
                )
              );
            }
          }
        };
      }

      /***/
    },

    /***/ aE2W: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const utils = __webpack_require__("kOHh");
      const path = __webpack_require__("oyvS");
      const gql = _interopDefault(__webpack_require__("Dugd"));
      const visitorPluginCommon = __webpack_require__("MBzn");
      const lodash = __webpack_require__("LvDl");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));

      class FieldsTree {
        constructor() {
          this._fields = {};
        }
        addField(path, type) {
          if (type === undefined) {
            throw new Error("Did not expect type to be undefined");
          }
          lodash.set(this._fields, path, type);
        }
        _getInnerField(root, level = 1) {
          if (typeof root === "string") {
            return root;
          }
          const fields = Object.keys(root).map(fieldName => {
            const fieldValue = root[fieldName];
            return visitorPluginCommon.indent(
              `${fieldName}: ${this._getInnerField(fieldValue, level + 1)},`,
              level
            );
          });
          return level === 1
            ? fields.join("\n")
            : `{
${fields.join("\n")}
${visitorPluginCommon.indent("}", level - 1)}`;
        }
        get string() {
          return this._getInnerField(this._fields);
        }
      }

      var Directives;
      (function(Directives) {
        Directives["ID"] = "id";
        Directives["ENTITY"] = "entity";
        Directives["ABSTRACT_ENTITY"] = "abstractEntity";
        Directives["UNION"] = "union";
        Directives["LINK"] = "link";
        Directives["COLUMN"] = "column";
        Directives["EMBEDDED"] = "embedded";
        Directives["MAP"] = "map";
      })(Directives || (Directives = {}));

      function resolveObjectId(pointer) {
        if (!pointer) {
          return { identifier: "ObjectID", module: "mongodb" };
        }
        if (pointer.includes("#")) {
          const [path, module] = pointer.split("#");
          return { identifier: path, module };
        }
        return {
          identifier: pointer,
          module: null
        };
      }
      class TsMongoVisitor extends visitorPluginCommon.BaseVisitor {
        constructor(_schema, pluginConfig) {
          super(pluginConfig, {
            dbTypeSuffix: pluginConfig.dbTypeSuffix || "DbObject",
            dbInterfaceSuffix: pluginConfig.dbInterfaceSuffix || "DbInterface",
            objectIdType: resolveObjectId(pluginConfig.objectIdType).identifier,
            objectIdImport: resolveObjectId(pluginConfig.objectIdType).module,
            idFieldName: pluginConfig.idFieldName || "_id",
            enumsAsString: visitorPluginCommon.getConfigValue(
              pluginConfig.enumsAsString,
              true
            ),
            avoidOptionals: visitorPluginCommon.getConfigValue(
              pluginConfig.avoidOptionals,
              false
            ),
            scalars: visitorPluginCommon.buildScalarsFromConfig(
              _schema,
              pluginConfig
            )
          });
          this._schema = _schema;
          autoBind(this);
        }
        get objectIdImport() {
          if (this.config.objectIdImport === null) {
            return null;
          }
          return `import { ${this.config.objectIdType} } from '${this.config.objectIdImport}';`;
        }
        _resolveDirectiveValue(valueNode) {
          switch (valueNode.kind) {
            case graphql.Kind.INT:
            case graphql.Kind.STRING:
            case graphql.Kind.FLOAT:
            case graphql.Kind.BOOLEAN:
            case graphql.Kind.ENUM:
              return valueNode.value;
            case graphql.Kind.LIST:
              return valueNode.values.map(v => this._resolveDirectiveValue(v));
            case graphql.Kind.NULL:
              return null;
            case graphql.Kind.OBJECT:
              return valueNode.fields.reduce((prev, f) => {
                return {
                  ...prev,
                  [f.name.value]: this._resolveDirectiveValue(f.value)
                };
              }, {});
            default:
              return undefined;
          }
        }
        _getDirectiveArgValue(node, argName) {
          if (!node || !node.arguments || node.arguments.length === 0) {
            return undefined;
          }
          const foundArgument = node.arguments.find(
            a => a.name.value === argName
          );
          if (!foundArgument) {
            return undefined;
          }
          return this._resolveDirectiveValue(foundArgument.value);
        }
        _getDirectiveFromAstNode(node, directiveName) {
          if (!node || !node.directives || node.directives.length === 0) {
            return null;
          }
          const foundDirective = node.directives.find(
            d =>
              d.name === directiveName ||
              (d.name.value && d.name.value === directiveName)
          );
          if (!foundDirective) {
            return null;
          }
          return foundDirective;
        }
        _buildInterfaces(interfaces) {
          return (interfaces || [])
            .map(namedType => {
              const schemaType = this._schema.getType(namedType.name.value);
              const abstractEntityDirective = this._getDirectiveFromAstNode(
                schemaType.astNode,
                Directives.ABSTRACT_ENTITY
              );
              if (!abstractEntityDirective) {
                return null;
              }
              return this.convertName(namedType.name.value, {
                suffix: this.config.dbInterfaceSuffix
              });
            })
            .filter(a => a);
        }
        _handleIdField(fieldNode, tree, addOptionalSign) {
          tree.addField(
            `${this.config.idFieldName}${addOptionalSign ? "?" : ""}`,
            visitorPluginCommon.wrapTypeNodeWithModifiers(
              this.config.objectIdType,
              fieldNode.type
            )
          );
        }
        _handleLinkField(
          fieldNode,
          tree,
          linkDirective,
          mapPath,
          addOptionalSign
        ) {
          const overrideType = this._getDirectiveArgValue(
            linkDirective,
            "overrideType"
          );
          const coreType =
            overrideType || visitorPluginCommon.getBaseTypeNode(fieldNode.type);
          const type = this.convertName(coreType, {
            suffix: this.config.dbTypeSuffix
          });
          tree.addField(
            `${mapPath || fieldNode.name.value}${addOptionalSign ? "?" : ""}`,
            visitorPluginCommon.wrapTypeNodeWithModifiers(
              `${type}['${this.config.idFieldName}']`,
              fieldNode.type
            )
          );
        }
        _handleColumnField(
          fieldNode,
          tree,
          columnDirective,
          mapPath,
          addOptionalSign
        ) {
          const overrideType = this._getDirectiveArgValue(
            columnDirective,
            "overrideType"
          );
          const coreType = visitorPluginCommon.getBaseTypeNode(fieldNode.type);
          let type = null;
          if (this.scalars[coreType.name.value]) {
            type = this.scalars[coreType.name.value];
          } else {
            const schemaType = this._schema.getType(coreType.name.value);
            if (graphql.isEnumType(schemaType) && this.config.enumsAsString) {
              type = this.scalars.String;
            } else {
              type = coreType.name.value;
            }
          }
          tree.addField(
            `${mapPath || fieldNode.name.value}${addOptionalSign ? "?" : ""}`,
            overrideType ||
              visitorPluginCommon.wrapTypeNodeWithModifiers(
                type,
                fieldNode.type
              )
          );
        }
        _handleEmbeddedField(fieldNode, tree, mapPath, addOptionalSign) {
          const coreType = visitorPluginCommon.getBaseTypeNode(fieldNode.type);
          const type = this.convertName(coreType, {
            suffix: this.config.dbTypeSuffix
          });
          tree.addField(
            `${mapPath || fieldNode.name.value}${addOptionalSign ? "?" : ""}`,
            visitorPluginCommon.wrapTypeNodeWithModifiers(type, fieldNode.type)
          );
        }
        _buildFieldsTree(fields) {
          const tree = new FieldsTree();
          fields.forEach(field => {
            const idDirective = this._getDirectiveFromAstNode(
              field,
              Directives.ID
            );
            const linkDirective = this._getDirectiveFromAstNode(
              field,
              Directives.LINK
            );
            const columnDirective = this._getDirectiveFromAstNode(
              field,
              Directives.COLUMN
            );
            const embeddedDirective = this._getDirectiveFromAstNode(
              field,
              Directives.EMBEDDED
            );
            const mapDirective = this._getDirectiveFromAstNode(
              field,
              Directives.MAP
            );
            const mapPath = this._getDirectiveArgValue(mapDirective, "path");
            const addOptionalSign =
              !this.config.avoidOptionals &&
              field.type.kind !== graphql.Kind.NON_NULL_TYPE;
            if (idDirective) {
              this._handleIdField(field, tree, addOptionalSign);
            } else if (linkDirective) {
              this._handleLinkField(
                field,
                tree,
                linkDirective,
                mapPath,
                addOptionalSign
              );
            } else if (columnDirective) {
              this._handleColumnField(
                field,
                tree,
                columnDirective,
                mapPath,
                addOptionalSign
              );
            } else if (embeddedDirective) {
              this._handleEmbeddedField(field, tree, mapPath, addOptionalSign);
            }
          });
          return tree;
        }
        _addAdditionalFields(tree, additioalFields) {
          const avoidOptionals = this.config.avoidOptionals;
          if (!additioalFields || additioalFields.length === 0) {
            return;
          }
          for (const field of additioalFields) {
            const isOptional = field.path.includes("?");
            tree.addField(
              `${
                isOptional && avoidOptionals
                  ? field.path.replace(/\?/g, "")
                  : field.path
              }`,
              field.type
            );
          }
        }
        InterfaceTypeDefinition(node) {
          const abstractEntityDirective = this._getDirectiveFromAstNode(
            node,
            Directives.ABSTRACT_ENTITY
          );
          if (abstractEntityDirective === null) {
            return null;
          }
          const discriminatorField = this._getDirectiveArgValue(
            abstractEntityDirective,
            "discriminatorField"
          );
          const additionalFields = this._getDirectiveArgValue(
            abstractEntityDirective,
            "additionalFields"
          );
          const fields = this._buildFieldsTree(node.fields);
          fields.addField(discriminatorField, this.scalars.String);
          this._addAdditionalFields(fields, additionalFields);
          return new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("type")
            .withName(
              this.convertName(node, { suffix: this.config.dbInterfaceSuffix })
            )
            .withBlock(fields.string).string;
        }
        UnionTypeDefinition(node) {
          const unionDirective = this._getDirectiveFromAstNode(
            node,
            Directives.UNION
          );
          if (unionDirective === null) {
            return null;
          }
          const discriminatorField = this._getDirectiveArgValue(
            unionDirective,
            "discriminatorField"
          );
          const possibleTypes = node.types
            .map(namedType => {
              const schemaType = this._schema.getType(namedType.name.value);
              const entityDirective = this._getDirectiveFromAstNode(
                schemaType.astNode,
                Directives.ENTITY
              );
              const abstractEntityDirective = this._getDirectiveFromAstNode(
                schemaType.astNode,
                Directives.ABSTRACT_ENTITY
              );
              if (entityDirective) {
                return this.convertName(namedType, {
                  suffix: this.config.dbTypeSuffix
                });
              } else if (abstractEntityDirective) {
                return this.convertName(namedType, {
                  suffix: this.config.dbInterfaceSuffix
                });
              }
              return null;
            })
            .filter(a => a);
          if (possibleTypes.length === 0) {
            return null;
          }
          const additionalFields = this._getDirectiveArgValue(
            unionDirective,
            "additionalFields"
          );
          const fields = new FieldsTree();
          fields.addField(discriminatorField, this.scalars.String);
          this._addAdditionalFields(fields, additionalFields);
          return new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("type")
            .withName(
              this.convertName(node, { suffix: this.config.dbTypeSuffix })
            )
            .withContent(`(${possibleTypes.join(" | ")}) & `)
            .withBlock(fields.string).string;
        }
        ObjectTypeDefinition(node) {
          const entityDirective = this._getDirectiveFromAstNode(
            node,
            Directives.ENTITY
          );
          if (entityDirective === null) {
            return null;
          }
          const implementingInterfaces = this._buildInterfaces(node.interfaces);
          const fields = this._buildFieldsTree(node.fields);
          const additionalFields = this._getDirectiveArgValue(
            entityDirective,
            "additionalFields"
          );
          this._addAdditionalFields(fields, additionalFields);
          return new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("type")
            .withName(
              this.convertName(node, { suffix: this.config.dbTypeSuffix })
            )
            .withContent(
              implementingInterfaces.length
                ? implementingInterfaces.join(" & ") + " & "
                : ""
            )
            .withBlock(fields.string).string;
        }
      }

      const plugin = (schema, documents, config) => {
        const visitor = new TsMongoVisitor(schema, config);
        const printedSchema = utils.printSchemaWithDirectives(schema);
        const astNode = graphql.parse(printedSchema);
        const visitorResult = graphql.visit(astNode, { leave: visitor });
        const header = visitor.objectIdImport;
        return [
          header,
          ...visitorResult.definitions.filter(d => typeof d === "string")
        ].join("\n");
      };
      const DIRECTIVES = gql`
  directive @${Directives.UNION}(discriminatorField: String, additionalFields: [AdditionalEntityFields]) on UNION
  directive @${Directives.ABSTRACT_ENTITY}(discriminatorField: String!, additionalFields: [AdditionalEntityFields]) on INTERFACE
  directive @${Directives.ENTITY}(embedded: Boolean, additionalFields: [AdditionalEntityFields]) on OBJECT
  directive @${Directives.COLUMN}(overrideType: String) on FIELD_DEFINITION
  directive @${Directives.ID} on FIELD_DEFINITION
  directive @${Directives.LINK}(overrideType: String) on FIELD_DEFINITION
  directive @${Directives.EMBEDDED} on FIELD_DEFINITION
  directive @${Directives.MAP}(path: String!) on FIELD_DEFINITION
  # Inputs
  input AdditionalEntityFields {
    path: String
    type: String
  }
`;
      const addToSchema = DIRECTIVES;
      const validate = async (schema, documents, config, outputFile) => {
        if (
          path.extname(outputFile) !== ".ts" &&
          path.extname(outputFile) !== ".tsx"
        ) {
          throw new Error(
            `Plugin "typescript-mongodb" requires extension to be ".ts" or ".tsx"!`
          );
        }
      };

      exports.DIRECTIVES = DIRECTIVES;
      exports.addToSchema = addToSchema;
      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ aI7X: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      /* eslint no-invalid-this: 1 */

      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var slice = Array.prototype.slice;
      var toStr = Object.prototype.toString;
      var funcType = "[object Function]";

      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);

        var bound;
        var binder = function() {
          if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) {
              return result;
            }
            return this;
          } else {
            return target.apply(that, args.concat(slice.call(arguments)));
          }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs.push("$" + i);
        }

        bound = Function(
          "binder",
          "return function (" +
            boundArgs.join(",") +
            "){ return binder.apply(this,arguments); }"
        )(binder);

        if (target.prototype) {
          var Empty = function Empty() {};
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }

        return bound;
      };

      /***/
    },

    /***/ aQB7: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getVariableValues = getVariableValues;
      exports.getArgumentValues = getArgumentValues;
      exports.getDirectiveValues = getDirectiveValues;

      var _find = _interopRequireDefault(__webpack_require__("Mj15"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _printPathArray = _interopRequireDefault(__webpack_require__("rdJp"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _printer = __webpack_require__("gCJq");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      var _valueFromAST = __webpack_require__("MrvF");

      var _coerceInputValue = __webpack_require__("1GMz");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Prepares an object map of variableValues of the correct type based on the
       * provided variable definitions and arbitrary input. If the input cannot be
       * parsed to match the variable definitions, a GraphQLError will be thrown.
       *
       * Note: The returned value is a plain Object with a prototype, since it is
       * exposed to user code. Care should be taken to not pull values from the
       * Object prototype.
       *
       * @internal
       */
      function getVariableValues(schema, varDefNodes, inputs, options) {
        var errors = [];
        var maxErrors =
          options === null || options === void 0 ? void 0 : options.maxErrors;

        try {
          var coerced = coerceVariableValues(
            schema,
            varDefNodes,
            inputs,
            function(error) {
              if (maxErrors != null && errors.length >= maxErrors) {
                throw new _GraphQLError.GraphQLError(
                  "Too many errors processing variables, error limit reached. Execution aborted."
                );
              }

              errors.push(error);
            }
          );

          if (errors.length === 0) {
            return {
              coerced: coerced
            };
          }
        } catch (error) {
          errors.push(error);
        }

        return {
          errors: errors
        };
      }

      function coerceVariableValues(schema, varDefNodes, inputs, onError) {
        var coercedValues = {};

        var _loop = function _loop(_i2) {
          var varDefNode = varDefNodes[_i2];
          var varName = varDefNode.variable.name.value;
          var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);

          if (!(0, _definition.isInputType)(varType)) {
            // Must use input types for variables. This should be caught during
            // validation, however is checked again here for safety.
            var varTypeStr = (0, _printer.print)(varDefNode.type);
            onError(
              new _GraphQLError.GraphQLError(
                'Variable "$'
                  .concat(varName, '" expected value of type "')
                  .concat(
                    varTypeStr,
                    '" which cannot be used as an input type.'
                  ),
                varDefNode.type
              )
            );
            return "continue";
          }

          if (!hasOwnProperty(inputs, varName)) {
            if (varDefNode.defaultValue) {
              coercedValues[varName] = (0, _valueFromAST.valueFromAST)(
                varDefNode.defaultValue,
                varType
              );
            } else if ((0, _definition.isNonNullType)(varType)) {
              var _varTypeStr = (0, _inspect.default)(varType);

              onError(
                new _GraphQLError.GraphQLError(
                  'Variable "$'
                    .concat(varName, '" of required type "')
                    .concat(_varTypeStr, '" was not provided.'),
                  varDefNode
                )
              );
            }

            return "continue";
          }

          var value = inputs[varName];

          if (value === null && (0, _definition.isNonNullType)(varType)) {
            var _varTypeStr2 = (0, _inspect.default)(varType);

            onError(
              new _GraphQLError.GraphQLError(
                'Variable "$'
                  .concat(varName, '" of non-null type "')
                  .concat(_varTypeStr2, '" must not be null.'),
                varDefNode
              )
            );
            return "continue";
          }

          coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(
            value,
            varType,
            function(path, invalidValue, error) {
              var prefix =
                'Variable "$'.concat(varName, '" got invalid value ') +
                (0, _inspect.default)(invalidValue);

              if (path.length > 0) {
                prefix += ' at "'
                  .concat(varName)
                  .concat((0, _printPathArray.default)(path), '"');
              }

              onError(
                new _GraphQLError.GraphQLError(
                  prefix + "; " + error.message,
                  varDefNode,
                  undefined,
                  undefined,
                  undefined,
                  error.originalError
                )
              );
            }
          );
        };

        for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {
          var _ret = _loop(_i2);

          if (_ret === "continue") continue;
        }

        return coercedValues;
      }
      /**
       * Prepares an object map of argument values given a list of argument
       * definitions and list of argument AST nodes.
       *
       * Note: The returned value is a plain Object with a prototype, since it is
       * exposed to user code. Care should be taken to not pull values from the
       * Object prototype.
       *
       * @internal
       */

      function getArgumentValues(def, node, variableValues) {
        var _node$arguments;

        var coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

        var argumentNodes =
          (_node$arguments = node.arguments) !== null &&
          _node$arguments !== void 0
            ? _node$arguments
            : [];
        var argNodeMap = (0, _keyMap.default)(argumentNodes, function(arg) {
          return arg.name.value;
        });

        for (
          var _i4 = 0, _def$args2 = def.args;
          _i4 < _def$args2.length;
          _i4++
        ) {
          var argDef = _def$args2[_i4];
          var name = argDef.name;
          var argType = argDef.type;
          var argumentNode = argNodeMap[name];

          if (!argumentNode) {
            if (argDef.defaultValue !== undefined) {
              coercedValues[name] = argDef.defaultValue;
            } else if ((0, _definition.isNonNullType)(argType)) {
              throw new _GraphQLError.GraphQLError(
                'Argument "'
                  .concat(name, '" of required type "')
                  .concat((0, _inspect.default)(argType), '" ') +
                  "was not provided.",
                node
              );
            }

            continue;
          }

          var valueNode = argumentNode.value;
          var isNull = valueNode.kind === _kinds.Kind.NULL;

          if (valueNode.kind === _kinds.Kind.VARIABLE) {
            var variableName = valueNode.name.value;

            if (
              variableValues == null ||
              !hasOwnProperty(variableValues, variableName)
            ) {
              if (argDef.defaultValue !== undefined) {
                coercedValues[name] = argDef.defaultValue;
              } else if ((0, _definition.isNonNullType)(argType)) {
                throw new _GraphQLError.GraphQLError(
                  'Argument "'
                    .concat(name, '" of required type "')
                    .concat((0, _inspect.default)(argType), '" ') +
                    'was provided the variable "$'.concat(
                      variableName,
                      '" which was not provided a runtime value.'
                    ),
                  valueNode
                );
              }

              continue;
            }

            isNull = variableValues[variableName] == null;
          }

          if (isNull && (0, _definition.isNonNullType)(argType)) {
            throw new _GraphQLError.GraphQLError(
              'Argument "'
                .concat(name, '" of non-null type "')
                .concat((0, _inspect.default)(argType), '" ') +
                "must not be null.",
              valueNode
            );
          }

          var coercedValue = (0, _valueFromAST.valueFromAST)(
            valueNode,
            argType,
            variableValues
          );

          if (coercedValue === undefined) {
            // Note: ValuesOfCorrectTypeRule validation should catch this before
            // execution. This is a runtime check to ensure execution does not
            // continue with an invalid argument value.
            throw new _GraphQLError.GraphQLError(
              'Argument "'
                .concat(name, '" has invalid value ')
                .concat((0, _printer.print)(valueNode), "."),
              valueNode
            );
          }

          coercedValues[name] = coercedValue;
        }

        return coercedValues;
      }
      /**
       * Prepares an object map of argument values given a directive definition
       * and a AST node which may contain directives. Optionally also accepts a map
       * of variable values.
       *
       * If the directive does not exist on the node, returns undefined.
       *
       * Note: The returned value is a plain Object with a prototype, since it is
       * exposed to user code. Care should be taken to not pull values from the
       * Object prototype.
       */

      function getDirectiveValues(directiveDef, node, variableValues) {
        var directiveNode =
          node.directives &&
          (0, _find.default)(node.directives, function(directive) {
            return directive.name.value === directiveDef.name;
          });

        if (directiveNode) {
          return getArgumentValues(directiveDef, directiveNode, variableValues);
        }
      }

      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }

      /***/
    },

    /***/ aYRf: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = promiseReduce;

      var _isPromise = _interopRequireDefault(__webpack_require__("Z4gy"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Similar to Array.prototype.reduce(), however the reducing callback may return
       * a Promise, in which case reduction will continue after each promise resolves.
       *
       * If the callback does not return a Promise, then this function will also not
       * return a Promise.
       */
      function promiseReduce(values, callback, initialValue) {
        return values.reduce(function(previous, value) {
          return (0, _isPromise.default)(previous)
            ? previous.then(function(resolved) {
                return callback(resolved, value);
              })
            : callback(previous, value);
        }, initialValue);
      }

      /***/
    },

    /***/ "ac+X": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");
      const lodash = __webpack_require__("LvDl");

      function resolveExternalModuleAndFn(pointer) {
        if (typeof pointer === "function") {
          return pointer;
        }
        // eslint-disable-next-line no-eval
        const importExternally = moduleName => eval(`require('${moduleName}')`);
        // eslint-disable-next-line prefer-const
        let [moduleName, functionName] = pointer.split("#");
        // Temp workaround until v2
        if (moduleName === "change-case") {
          moduleName = "change-case-all";
        }
        const { resolve } = importExternally("path");
        const localFilePath = resolve(process.cwd(), moduleName);
        const { existsSync } = importExternally("fs");
        const localFileExists = existsSync(localFilePath);
        const importFrom = importExternally("import-from");
        const loadedModule = localFileExists
          ? importExternally(localFilePath)
          : importFrom(process.cwd(), moduleName);
        if (
          !(functionName in loadedModule) &&
          typeof loadedModule !== "function"
        ) {
          throw new Error(
            `${functionName} couldn't be found in module ${moduleName}!`
          );
        }
        return loadedModule[functionName] || loadedModule;
      }

      function isComplexPluginOutput(obj) {
        return typeof obj === "object" && obj.hasOwnProperty("content");
      }

      function mergeOutputs(content) {
        const result = { content: "", prepend: [], append: [] };
        if (Array.isArray(content)) {
          content.forEach(item => {
            if (typeof item === "string") {
              result.content += item;
            } else {
              result.content += item.content;
              result.prepend.push(...(item.prepend || []));
              result.append.push(...(item.append || []));
            }
          });
        }
        return [...result.prepend, result.content, ...result.append].join("\n");
      }
      function isWrapperType(t) {
        return graphql.isListType(t) || graphql.isNonNullType(t);
      }
      function getBaseType(type) {
        if (isWrapperType(type)) {
          return getBaseType(type.ofType);
        } else {
          return type;
        }
      }
      function removeNonNullWrapper(type) {
        return graphql.isNonNullType(type) ? type.ofType : type;
      }

      function isOutputConfigArray(type) {
        return Array.isArray(type);
      }
      function isConfiguredOutput(type) {
        return typeof type === "object" && type.plugins;
      }
      function normalizeOutputParam(config) {
        // In case of direct array with a list of plugins
        if (isOutputConfigArray(config)) {
          return {
            documents: [],
            schema: [],
            plugins: isConfiguredOutput(config) ? config.plugins : config
          };
        } else if (isConfiguredOutput(config)) {
          return config;
        } else {
          throw new Error(`Invalid "generates" config!`);
        }
      }
      function normalizeInstanceOrArray(type) {
        if (Array.isArray(type)) {
          return type;
        } else if (!type) {
          return [];
        }
        return [type];
      }
      function normalizeConfig(config) {
        if (typeof config === "string") {
          return [{ [config]: {} }];
        } else if (Array.isArray(config)) {
          return config.map(plugin =>
            typeof plugin === "string" ? { [plugin]: {} } : plugin
          );
        } else if (typeof config === "object") {
          return Object.keys(config).reduce(
            (prev, pluginName) => [
              ...prev,
              { [pluginName]: config[pluginName] }
            ],
            []
          );
        } else {
          return [];
        }
      }
      function hasNullableTypeRecursively(type) {
        if (!graphql.isNonNullType(type)) {
          return true;
        }
        if (graphql.isListType(type) || graphql.isNonNullType(type)) {
          return hasNullableTypeRecursively(type.ofType);
        }
        return false;
      }
      function isUsingTypes(document, externalFragments, schema) {
        let foundFields = 0;
        const typesStack = [];
        graphql.visit(document, {
          SelectionSet: {
            enter(node, key, parent, anscestors) {
              const insideIgnoredFragment = anscestors.find(
                f =>
                  f.kind &&
                  f.kind === "FragmentDefinition" &&
                  externalFragments.includes(f.name.value)
              );
              if (insideIgnoredFragment) {
                return;
              }
              const selections = node.selections || [];
              if (schema && selections.length > 0) {
                const nextTypeName = (() => {
                  if (parent.kind === graphql.Kind.FRAGMENT_DEFINITION) {
                    return parent.typeCondition.name.value;
                  } else if (parent.kind === graphql.Kind.FIELD) {
                    const lastType = typesStack[typesStack.length - 1];
                    if (!lastType) {
                      throw new Error(
                        `Unable to find parent type! Please make sure you operation passes validation`
                      );
                    }
                    const field = lastType.getFields()[parent.name.value];
                    if (!field) {
                      throw new Error(
                        `Unable to find field "${parent.name.value}" on type "${lastType}"!`
                      );
                    }
                    return getBaseType(field.type).name;
                  } else if (
                    parent.kind === graphql.Kind.OPERATION_DEFINITION
                  ) {
                    if (parent.operation === "query") {
                      return schema.getQueryType().name;
                    } else if (parent.operation === "mutation") {
                      return schema.getMutationType().name;
                    } else if (parent.operation === "subscription") {
                      return schema.getSubscriptionType().name;
                    }
                  } else if (parent.kind === graphql.Kind.INLINE_FRAGMENT) {
                    if (parent.typeCondition) {
                      return parent.typeCondition.name.value;
                    } else {
                      return typesStack[typesStack.length - 1].name;
                    }
                  }
                  return null;
                })();
                typesStack.push(schema.getType(nextTypeName));
              }
            },
            leave(node) {
              const selections = node.selections || [];
              if (schema && selections.length > 0) {
                typesStack.pop();
              }
            }
          },
          Field: {
            enter: (node, key, parent, path, anscestors) => {
              if (node.name.value.startsWith("__")) {
                return;
              }
              const insideIgnoredFragment = anscestors.find(
                f =>
                  f.kind &&
                  f.kind === "FragmentDefinition" &&
                  externalFragments.includes(f.name.value)
              );
              if (insideIgnoredFragment) {
                return;
              }
              const selections = node.selectionSet
                ? node.selectionSet.selections || []
                : [];
              const relevantFragmentSpreads = selections.filter(
                s =>
                  s.kind === graphql.Kind.FRAGMENT_SPREAD &&
                  !externalFragments.includes(s.name.value)
              );
              if (
                selections.length === 0 ||
                relevantFragmentSpreads.length > 0
              ) {
                foundFields++;
              }
              if (schema) {
                const lastType = typesStack[typesStack.length - 1];
                if (lastType) {
                  if (graphql.isObjectType(lastType)) {
                    const field = lastType.getFields()[node.name.value];
                    if (!field) {
                      throw new Error(
                        `Unable to find field "${node.name.value}" on type "${lastType}"!`
                      );
                    }
                    const currentType = field.type;
                    // To handle `Maybe` usage
                    if (hasNullableTypeRecursively(currentType)) {
                      foundFields++;
                    }
                  }
                }
              }
            }
          },
          enter: {
            VariableDefinition: (node, key, parent, path, anscestors) => {
              const insideIgnoredFragment = anscestors.find(
                f =>
                  f.kind &&
                  f.kind === "FragmentDefinition" &&
                  externalFragments.includes(f.name.value)
              );
              if (insideIgnoredFragment) {
                return;
              }
              foundFields++;
            },
            InputValueDefinition: (node, key, parent, path, anscestors) => {
              const insideIgnoredFragment = anscestors.find(
                f =>
                  f.kind &&
                  f.kind === "FragmentDefinition" &&
                  externalFragments.includes(f.name.value)
              );
              if (insideIgnoredFragment) {
                return;
              }
              foundFields++;
            }
          }
        });
        return foundFields > 0;
      }

      /**
       * Federation Spec
       */
      const federationSpec = graphql.parse(/* GraphQL */ `
        scalar _FieldSet

        directive @external on FIELD_DEFINITION
        directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
        directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
        directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
      `);
      /**
       * Adds `__resolveReference` in each ObjectType involved in Federation.
       * @param schema
       */
      function addFederationReferencesToSchema(schema) {
        const typeMap = schema.getTypeMap();
        for (const typeName in typeMap) {
          const type = schema.getType(typeName);
          if (graphql.isObjectType(type) && isFederationObjectType(type)) {
            const typeConfig = type.toConfig();
            typeConfig.fields = {
              [resolveReferenceFieldName]: {
                type
              },
              ...typeConfig.fields
            };
            const newType = new graphql.GraphQLObjectType(typeConfig);
            newType.astNode =
              newType.astNode ||
              graphql.parse(graphql.printType(newType)).definitions[0];
            newType.astNode.fields.unshift({
              kind: graphql.Kind.FIELD_DEFINITION,
              name: {
                kind: graphql.Kind.NAME,
                value: resolveReferenceFieldName
              },
              type: {
                kind: graphql.Kind.NAMED_TYPE,
                name: {
                  kind: graphql.Kind.NAME,
                  value: typeName
                }
              }
            });
            typeMap[typeName] = newType;
          }
        }
        return schema;
      }
      /**
       * Removes Federation Spec from GraphQL Schema
       * @param schema
       * @param config
       */
      function removeFederation(schema) {
        const queryType = schema.getQueryType();
        const queryTypeFields = queryType.getFields();
        delete queryTypeFields._entities;
        delete queryTypeFields._service;
        const typeMap = schema.getTypeMap();
        delete typeMap._Service;
        delete typeMap._Entity;
        delete typeMap._Any;
        return schema;
      }
      const resolveReferenceFieldName = "__resolveReference";
      class ApolloFederation {
        constructor({ enabled, schema }) {
          this.enabled = false;
          this.enabled = enabled;
          this.schema = schema;
          this.providesMap = this.createMapOfProvides();
        }
        /**
         * Excludes types definde by Federation
         * @param typeNames List of type names
         */
        filterTypeNames(typeNames) {
          return this.enabled
            ? typeNames.filter(t => t !== "_FieldSet")
            : typeNames;
        }
        /**
         * Excludes `__resolveReference` fields
         * @param fieldNames List of field names
         */
        filterFieldNames(fieldNames) {
          return this.enabled
            ? fieldNames.filter(t => t !== resolveReferenceFieldName)
            : fieldNames;
        }
        /**
         * Decides if directive should not be generated
         * @param name directive's name
         */
        skipDirective(name) {
          return (
            this.enabled &&
            ["external", "requires", "provides", "key"].includes(name)
          );
        }
        /**
         * Decides if scalar should not be generated
         * @param name directive's name
         */
        skipScalar(name) {
          return this.enabled && name === "_FieldSet";
        }
        /**
         * Decides if field should not be generated
         * @param data
         */
        skipField({ fieldNode, parentType }) {
          if (
            !this.enabled ||
            !graphql.isObjectType(parentType) ||
            !isFederationObjectType(parentType)
          ) {
            return false;
          }
          return this.isExternalAndNotProvided(fieldNode, parentType);
        }
        isResolveReferenceField(fieldNode) {
          const name =
            typeof fieldNode.name === "string"
              ? fieldNode.name
              : fieldNode.name.value;
          return this.enabled && name === resolveReferenceFieldName;
        }
        /**
         * Transforms ParentType signature in ObjectTypes involved in Federation
         * @param data
         */
        transformParentType({ fieldNode, parentType, parentTypeSignature }) {
          if (
            this.enabled &&
            graphql.isObjectType(parentType) &&
            isFederationObjectType(parentType) &&
            (isTypeExtension(parentType) ||
              fieldNode.name.value === resolveReferenceFieldName)
          ) {
            const keys = getDirectivesByName("key", parentType);
            if (keys.length) {
              const outputs = [`{ __typename: '${parentType.name}' } &`];
              // Look for @requires and see what the service needs and gets
              const requires = getDirectivesByName("requires", fieldNode).map(
                this.extractKeyOrRequiresFieldSet
              );
              const requiredFields = this.translateFieldSet(
                lodash.merge({}, ...requires),
                parentTypeSignature
              );
              // @key() @key() - "primary keys" in Federation
              const primaryKeys = keys.map(def => {
                const fields = this.extractKeyOrRequiresFieldSet(def);
                return this.translateFieldSet(fields, parentTypeSignature);
              });
              const [open, close] =
                primaryKeys.length > 1 ? ["(", ")"] : ["", ""];
              outputs.push([open, primaryKeys.join(" | "), close].join(""));
              // include required fields
              if (requires.length) {
                outputs.push(`& ${requiredFields}`);
              }
              return outputs.join(" ");
            }
          }
          return parentTypeSignature;
        }
        isExternalAndNotProvided(fieldNode, objectType) {
          return (
            this.isExternal(fieldNode) &&
            !this.hasProvides(objectType, fieldNode)
          );
        }
        isExternal(node) {
          return getDirectivesByName("external", node).length > 0;
        }
        hasProvides(objectType, node) {
          const fields = this.providesMap[
            graphql.isObjectType(objectType)
              ? objectType.name
              : objectType.name.value
          ];
          if (fields && fields.length) {
            return fields.includes(node.name.value);
          }
          return false;
        }
        translateFieldSet(fields, parentTypeRef) {
          return `GraphQLRecursivePick<${parentTypeRef}, ${JSON.stringify(
            fields
          )}>`;
        }
        extractKeyOrRequiresFieldSet(directive) {
          const arg = directive.arguments.find(
            arg => arg.name.value === "fields"
          );
          const value = arg.value.value;
          return graphql.visit(graphql.parse(`{${value}}`), {
            leave: {
              SelectionSet(node) {
                return node.selections.reduce((accum, field) => {
                  accum[field.name] = field.selection;
                  return accum;
                }, {});
              },
              Field(node) {
                return {
                  name: node.name.value,
                  selection: node.selectionSet ? node.selectionSet : true
                };
              },
              Document(node) {
                return node.definitions.find(
                  def =>
                    def.kind === "OperationDefinition" &&
                    def.operation === "query"
                ).selectionSet;
              }
            }
          });
        }
        extractProvidesFieldSet(directive) {
          const arg = directive.arguments.find(
            arg => arg.name.value === "fields"
          );
          const value = arg.value.value;
          if (/[{}]/gi.test(value)) {
            throw new Error(
              "Nested fields in _FieldSet is not supported in the @provides directive"
            );
          }
          return value.split(/\s+/g);
        }
        createMapOfProvides() {
          const providesMap = {};
          Object.keys(this.schema.getTypeMap()).forEach(typename => {
            const objectType = this.schema.getType(typename);
            if (graphql.isObjectType(objectType)) {
              Object.values(objectType.getFields()).forEach(field => {
                const provides = getDirectivesByName("provides", field.astNode)
                  .map(this.extractProvidesFieldSet)
                  .reduce((prev, curr) => [...prev, ...curr], []);
                const ofType = getBaseType(field.type);
                if (!providesMap[ofType.name]) {
                  providesMap[ofType.name] = [];
                }
                providesMap[ofType.name].push(...provides);
              });
            }
          });
          return providesMap;
        }
      }
      /**
       * Checks if Object Type is involved in Federation. Based on `@key` directive
       * @param node Type
       */
      function isFederationObjectType(node) {
        const definition = graphql.isObjectType(node)
          ? node.astNode ||
            graphql.parse(graphql.printType(node)).definitions[0]
          : node;
        const name = definition.name.value;
        const directives = definition.directives;
        const isNotRoot = !["Query", "Mutation", "Subscription"].includes(name);
        const isNotIntrospection = !name.startsWith("__");
        const hasKeyDirective = directives.some(d => d.name.value === "key");
        return isNotRoot && isNotIntrospection && hasKeyDirective;
      }
      /**
       * Extracts directives from a node based on directive's name
       * @param name directive name
       * @param node ObjectType or Field
       */
      function getDirectivesByName(name, node) {
        let astNode;
        if (graphql.isObjectType(node)) {
          astNode = node.astNode;
        } else {
          astNode = node;
        }
        if (astNode && astNode.directives) {
          return astNode.directives.filter(d => d.name.value === name);
        }
        return [];
      }
      /**
       * Checks if the Object Type extends a federated type from a remote schema.
       * Based on if any of its fields contain the `@external` directive
       * @param node Type
       */
      function isTypeExtension(node) {
        var _a;
        const definition = graphql.isObjectType(node)
          ? node.astNode ||
            graphql.parse(graphql.printType(node)).definitions[0]
          : node;
        return (_a = definition.fields) === null || _a === void 0
          ? void 0
          : _a.some(field => getDirectivesByName("external", field).length);
      }

      class DetailedError extends Error {
        constructor(message, details, source) {
          super(message);
          this.message = message;
          this.details = details;
          this.source = source;
          Object.setPrototypeOf(this, DetailedError.prototype);
          Error.captureStackTrace(this, DetailedError);
        }
      }
      function isDetailedError(error) {
        return error.details;
      }

      exports.ApolloFederation = ApolloFederation;
      exports.DetailedError = DetailedError;
      exports.addFederationReferencesToSchema = addFederationReferencesToSchema;
      exports.federationSpec = federationSpec;
      exports.getBaseType = getBaseType;
      exports.hasNullableTypeRecursively = hasNullableTypeRecursively;
      exports.isComplexPluginOutput = isComplexPluginOutput;
      exports.isConfiguredOutput = isConfiguredOutput;
      exports.isDetailedError = isDetailedError;
      exports.isOutputConfigArray = isOutputConfigArray;
      exports.isUsingTypes = isUsingTypes;
      exports.isWrapperType = isWrapperType;
      exports.mergeOutputs = mergeOutputs;
      exports.normalizeConfig = normalizeConfig;
      exports.normalizeInstanceOrArray = normalizeInstanceOrArray;
      exports.normalizeOutputParam = normalizeOutputParam;
      exports.removeFederation = removeFederation;
      exports.removeNonNullWrapper = removeNonNullWrapper;
      exports.resolveExternalModuleAndFn = resolveExternalModuleAndFn;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ arJZ: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var invariant = __webpack_require__("OUqe");

      /**
       * Generates an identifier for an argument value. The identifier is based on the
       * structure/order of items and keys in the value.
       */
      function getIdentifierForArgumentValue(value) {
        switch (value.kind) {
          case "Variable":
            return {
              variable: value.variableName
            };

          case "Literal":
            return {
              value: value.value
            };

          case "ListValue":
            return {
              list: value.items.map(function(item) {
                return getIdentifierForArgumentValue(item);
              })
            };

          case "ObjectValue":
            return {
              object: value.fields.map(function(field) {
                return {
                  name: field.name,
                  value: getIdentifierForArgumentValue(field.value)
                };
              })
            };

          default:
            true ? (false ? undefined : invariant(false)) : undefined;
        }
      }

      module.exports = getIdentifierForArgumentValue;

      /***/
    },

    /***/ atWj: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var ES5ToInteger = __webpack_require__("hm8L");

      var ToNumber = __webpack_require__("cptH");

      // https://262.ecma-international.org/11.0/#sec-tointeger

      module.exports = function ToInteger(value) {
        var number = ToNumber(value);
        if (number !== 0) {
          number = ES5ToInteger(number);
        }
        return number === 0 ? 0 : number;
      };

      /***/
    },

    /***/ aulS: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isEqualType = isEqualType;
      exports.isTypeSubTypeOf = isTypeSubTypeOf;
      exports.doTypesOverlap = doTypesOverlap;

      var _definition = __webpack_require__("mAVk");

      /**
       * Provided two types, return true if the types are equal (invariant).
       */
      function isEqualType(typeA, typeB) {
        // Equivalent types are equal.
        if (typeA === typeB) {
          return true;
        } // If either type is non-null, the other must also be non-null.

        if (
          (0, _definition.isNonNullType)(typeA) &&
          (0, _definition.isNonNullType)(typeB)
        ) {
          return isEqualType(typeA.ofType, typeB.ofType);
        } // If either type is a list, the other must also be a list.

        if (
          (0, _definition.isListType)(typeA) &&
          (0, _definition.isListType)(typeB)
        ) {
          return isEqualType(typeA.ofType, typeB.ofType);
        } // Otherwise the types are not equal.

        return false;
      }
      /**
       * Provided a type and a super type, return true if the first type is either
       * equal or a subset of the second super type (covariant).
       */

      function isTypeSubTypeOf(schema, maybeSubType, superType) {
        // Equivalent type is a valid subtype
        if (maybeSubType === superType) {
          return true;
        } // If superType is non-null, maybeSubType must also be non-null.

        if ((0, _definition.isNonNullType)(superType)) {
          if ((0, _definition.isNonNullType)(maybeSubType)) {
            return isTypeSubTypeOf(
              schema,
              maybeSubType.ofType,
              superType.ofType
            );
          }

          return false;
        }

        if ((0, _definition.isNonNullType)(maybeSubType)) {
          // If superType is nullable, maybeSubType may be non-null or nullable.
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
        } // If superType type is a list, maybeSubType type must also be a list.

        if ((0, _definition.isListType)(superType)) {
          if ((0, _definition.isListType)(maybeSubType)) {
            return isTypeSubTypeOf(
              schema,
              maybeSubType.ofType,
              superType.ofType
            );
          }

          return false;
        }

        if ((0, _definition.isListType)(maybeSubType)) {
          // If superType is not a list, maybeSubType must also be not a list.
          return false;
        } // If superType type is an abstract type, check if it is super type of maybeSubType.
        // Otherwise, the child type is not a valid subtype of the parent type.

        return (
          (0, _definition.isAbstractType)(superType) &&
          ((0, _definition.isInterfaceType)(maybeSubType) ||
            (0, _definition.isObjectType)(maybeSubType)) &&
          schema.isSubType(superType, maybeSubType)
        );
      }
      /**
       * Provided two composite types, determine if they "overlap". Two composite
       * types overlap when the Sets of possible concrete types for each intersect.
       *
       * This is often used to determine if a fragment of a given type could possibly
       * be visited in a context of another type.
       *
       * This function is commutative.
       */

      function doTypesOverlap(schema, typeA, typeB) {
        // Equivalent types overlap
        if (typeA === typeB) {
          return true;
        }

        if ((0, _definition.isAbstractType)(typeA)) {
          if ((0, _definition.isAbstractType)(typeB)) {
            // If both types are abstract, then determine if there is any intersection
            // between possible concrete types of each.
            return schema.getPossibleTypes(typeA).some(function(type) {
              return schema.isSubType(typeB, type);
            });
          } // Determine if the latter type is a possible concrete type of the former.

          return schema.isSubType(typeA, typeB);
        }

        if ((0, _definition.isAbstractType)(typeB)) {
          // Determine if the former type is a possible concrete type of the latter.
          return schema.isSubType(typeB, typeA);
        } // Otherwise the types do not overlap.

        return false;
      }

      /***/
    },

    /***/ avzg: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const javaCommon = __webpack_require__("SFnX");
      const path = __webpack_require__("oyvS");

      class JavaResolversVisitor extends visitorPluginCommon.BaseVisitor {
        constructor(rawConfig, _schema, defaultPackageName) {
          super(rawConfig, {
            enumValues: rawConfig.enumValues || {},
            listType: rawConfig.listType || "Iterable",
            className: rawConfig.className || "Types",
            classMembersPrefix: rawConfig.classMembersPrefix || "",
            package: rawConfig.package || defaultPackageName,
            scalars: visitorPluginCommon.buildScalarsFromConfig(
              _schema,
              rawConfig,
              javaCommon.JAVA_SCALARS,
              "Object"
            ),
            useEmptyCtor: rawConfig.useEmptyCtor || false
          });
          this._schema = _schema;
          this._addHashMapImport = false;
          this._addMapImport = false;
          this._addListImport = false;
        }
        getImports() {
          const allImports = [];
          if (this._addHashMapImport) {
            allImports.push(`java.util.HashMap`);
          }
          if (this._addMapImport) {
            allImports.push(`java.util.Map`);
          }
          if (this._addListImport) {
            allImports.push(`java.util.List`);
            allImports.push(`java.util.stream.Collectors`);
          }
          return allImports.map(i => `import ${i};`).join("\n") + "\n";
        }
        wrapWithClass(content) {
          return new javaCommon.JavaDeclarationBlock()
            .access("public")
            .asKind("class")
            .withName(this.config.className)
            .withBlock(visitorPluginCommon.indentMultiline(content)).string;
        }
        getPackageName() {
          return `package ${this.config.package};\n`;
        }
        getEnumValue(enumName, enumOption) {
          if (
            this.config.enumValues[enumName] &&
            typeof this.config.enumValues[enumName] === "object" &&
            this.config.enumValues[enumName][enumOption]
          ) {
            return this.config.enumValues[enumName][enumOption];
          }
          return enumOption;
        }
        EnumValueDefinition(node) {
          return enumName => {
            return visitorPluginCommon.indent(
              `${this.getEnumValue(enumName, node.name.value)}`
            );
          };
        }
        EnumTypeDefinition(node) {
          this._addHashMapImport = true;
          this._addMapImport = true;
          const enumName = this.convertName(node.name);
          const enumValues = node.values
            .map(enumValue => {
              const a = enumValue(node.name.value);
              // replace reserved word new
              if (a.trim() === "new") {
                return "_new";
              }
              return a;
            })
            .join(",\n");
          const enumCtor = visitorPluginCommon.indentMultiline(``);
          const enumBlock = [enumValues, enumCtor].join("\n");
          return new javaCommon.JavaDeclarationBlock()
            .access("public")
            .asKind("enum")
            .withComment(node.description)
            .withName(enumName)
            .withBlock(enumBlock).string;
        }
        resolveInputFieldType(typeNode) {
          const innerType = visitorPluginCommon.getBaseTypeNode(typeNode);
          const schemaType = this._schema.getType(innerType.name.value);
          const isArray =
            typeNode.kind === graphql.Kind.LIST_TYPE ||
            (typeNode.kind === graphql.Kind.NON_NULL_TYPE &&
              typeNode.type.kind === graphql.Kind.LIST_TYPE);
          let result;
          if (graphql.isScalarType(schemaType)) {
            if (this.scalars[schemaType.name]) {
              result = {
                baseType: this.scalars[schemaType.name],
                typeName: this.scalars[schemaType.name],
                isScalar: true,
                isEnum: false,
                isArray
              };
            } else {
              result = {
                isArray,
                baseType: "Object",
                typeName: "Object",
                isScalar: true,
                isEnum: false
              };
            }
          } else if (graphql.isInputObjectType(schemaType)) {
            const convertedName = this.convertName(schemaType.name);
            const typeName = convertedName.endsWith("Input")
              ? convertedName
              : `${convertedName}Input`;
            result = {
              baseType: typeName,
              typeName: typeName,
              isScalar: false,
              isEnum: false,
              isArray
            };
          } else if (graphql.isEnumType(schemaType)) {
            result = {
              isArray,
              baseType: this.convertName(schemaType.name),
              typeName: this.convertName(schemaType.name),
              isScalar: false,
              isEnum: true
            };
          } else {
            result = {
              isArray,
              baseType: "Object",
              typeName: "Object",
              isScalar: true,
              isEnum: false
            };
          }
          if (result) {
            result.typeName = javaCommon.wrapTypeWithModifiers(
              result.typeName,
              typeNode,
              this.config.listType
            );
          }
          return result;
        }
        buildInputTransfomer(name, inputValueArray) {
          this._addMapImport = true;
          const classMembers = inputValueArray
            .map(arg => {
              const typeToUse = this.resolveInputFieldType(arg.type);
              if (arg.name.value === "interface" || arg.name.value === "new") {
                // forcing prefix of _ since interface is a keyword in JAVA
                return visitorPluginCommon.indent(
                  `private ${typeToUse.typeName} _${this.config.classMembersPrefix}${arg.name.value};`
                );
              } else {
                return visitorPluginCommon.indent(
                  `private ${typeToUse.typeName} ${this.config.classMembersPrefix}${arg.name.value};`
                );
              }
            })
            .join("\n");
          const ctorSet = inputValueArray
            .map(arg => {
              const typeToUse = this.resolveInputFieldType(arg.type);
              if (typeToUse.isArray && !typeToUse.isScalar) {
                this._addListImport = true;
                return visitorPluginCommon.indentMultiline(
                  `if (args.get("${arg.name.value}") != null) {
		this.${arg.name.value} = (${this.config.listType}<${typeToUse.baseType}>) args.get("${arg.name.value}");
}`,
                  3
                );
              } else if (typeToUse.isScalar) {
                return visitorPluginCommon.indent(
                  `this.${this.config.classMembersPrefix}${arg.name.value} = (${typeToUse.typeName}) args.get("${arg.name.value}");`,
                  3
                );
              } else if (typeToUse.isEnum) {
                return visitorPluginCommon.indentMultiline(
                  `if (args.get("${arg.name.value}") instanceof ${typeToUse.typeName}) {
  this.${this.config.classMembersPrefix}${arg.name.value} = (${typeToUse.typeName}) args.get("${arg.name.value}");
} else {
  this.${this.config.classMembersPrefix}${arg.name.value} = ${typeToUse.typeName}.valueOfLabel((String) args.get("${arg.name.value}"));
}`,
                  3
                );
              } else {
                if (arg.name.value === "interface") {
                  // forcing prefix of _ since interface is a keyword in JAVA
                  return visitorPluginCommon.indent(
                    `this._${this.config.classMembersPrefix}${arg.name.value} = new ${typeToUse.typeName}((Map<String, Object>) args.get("${arg.name.value}"));`,
                    3
                  );
                } else {
                  return visitorPluginCommon.indent(
                    `this.${this.config.classMembersPrefix}${arg.name.value} = new ${typeToUse.typeName}((Map<String, Object>) args.get("${arg.name.value}"));`,
                    3
                  );
                }
              }
            })
            .join("\n");
          const getters = inputValueArray
            .map(arg => {
              const typeToUse = this.resolveInputFieldType(arg.type);
              if (arg.name.value === "interface" || arg.name.value === "new") {
                // forcing prefix of _ since interface is a keyword in JAVA
                return visitorPluginCommon.indent(
                  `public ${typeToUse.typeName} get${this.convertName(
                    arg.name.value
                  )}() { return this._${this.config.classMembersPrefix}${
                    arg.name.value
                  }; }`
                );
              } else {
                return visitorPluginCommon.indent(
                  `public ${typeToUse.typeName} get${this.convertName(
                    arg.name.value
                  )}() { return this.${this.config.classMembersPrefix}${
                    arg.name.value
                  }; }`
                );
              }
            })
            .join("\n");
          const setters = inputValueArray
            .map(arg => {
              const typeToUse = this.resolveInputFieldType(arg.type);
              if (arg.name.value === "interface" || arg.name.value === "new") {
                return visitorPluginCommon.indent(
                  `public void set${this.convertName(arg.name.value)}(${
                    typeToUse.typeName
                  } _${arg.name.value}) { this._${arg.name.value} = _${
                    arg.name.value
                  }; }`
                );
              } else {
                return visitorPluginCommon.indent(
                  `public void set${this.convertName(arg.name.value)}(${
                    typeToUse.typeName
                  } ${arg.name.value}) { this.${arg.name.value} = ${
                    arg.name.value
                  }; }`
                );
              }
            })
            .join("\n");
          if (this.config.useEmptyCtor) {
            return `public static class ${name} {
${classMembers}

  public ${name}() {}

${getters}
${setters}
}`;
          } else {
            return `public static class ${name} {
${classMembers}

  public ${name}(Map<String, Object> args) {
    if (args != null) {
${ctorSet}
    }
  }

${getters}
${setters}
}`;
          }
        }
        FieldDefinition(node) {
          return typeName => {
            if (node.arguments.length > 0) {
              const transformerName = `${this.convertName(typeName, {
                useTypesPrefix: true
              })}${this.convertName(node.name.value, {
                useTypesPrefix: false
              })}Args`;
              return this.buildInputTransfomer(transformerName, node.arguments);
            }
            return null;
          };
        }
        InputObjectTypeDefinition(node) {
          const convertedName = this.convertName(node);
          const name = convertedName.endsWith("Input")
            ? convertedName
            : `${convertedName}Input`;
          return this.buildInputTransfomer(name, node.fields);
        }
        ObjectTypeDefinition(node) {
          const fieldsArguments = node.fields
            .map(f => f(node.name.value))
            .filter(r => r);
          return fieldsArguments.join("\n");
        }
      }

      const plugin = async (schema, documents, config, { outputFile }) => {
        const relevantPath = path.dirname(path.normalize(outputFile));
        const defaultPackageName = javaCommon.buildPackageNameFromPath(
          relevantPath
        );
        const visitor = new JavaResolversVisitor(
          config,
          schema,
          defaultPackageName
        );
        const printedSchema = graphql.printSchema(schema);
        const astNode = graphql.parse(printedSchema);
        const visitorResult = graphql.visit(astNode, { leave: visitor });
        const imports = visitor.getImports();
        const packageName = visitor.getPackageName();
        const blockContent = visitorResult.definitions
          .filter(d => typeof d === "string")
          .join("\n");
        const wrappedContent = visitor.wrapWithClass(blockContent);
        return [packageName, imports, wrappedContent].join("\n");
      };

      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ ayMG: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var has = __webpack_require__("oNNP");

      var assertRecord = __webpack_require__("DELC");

      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-isdatadescriptor

      module.exports = function IsDataDescriptor(Desc) {
        if (typeof Desc === "undefined") {
          return false;
        }

        assertRecord(Type, "Property Descriptor", "Desc", Desc);

        if (!has(Desc, "[[Value]]") && !has(Desc, "[[Writable]]")) {
          return false;
        }

        return true;
      };

      /***/
    },

    /***/ bVbM: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isLowerCase = void 0;
      /**
       * Returns a boolean indicating whether the string is lower case.
       */
      function isLowerCase(input) {
        return input.toLowerCase() === input && input.toUpperCase() !== input;
      }
      exports.isLowerCase = isLowerCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ bi9y: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.astFromValue = astFromValue;

      var _isFinite = _interopRequireDefault(__webpack_require__("zFIs"));

      var _objectValues3 = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _safeArrayFrom = _interopRequireDefault(__webpack_require__("4M+f"));

      var _kinds = __webpack_require__("xaK5");

      var _scalars = __webpack_require__("0N00");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Produces a GraphQL Value AST given a JavaScript object.
       * Function will match JavaScript/JSON values to GraphQL AST schema format
       * by using suggested GraphQLInputType. For example:
       *
       *     astFromValue("value", GraphQLString)
       *
       * A GraphQL type must be provided, which will be used to interpret different
       * JavaScript values.
       *
       * | JSON Value    | GraphQL Value        |
       * | ------------- | -------------------- |
       * | Object        | Input Object         |
       * | Array         | List                 |
       * | Boolean       | Boolean              |
       * | String        | String / Enum Value  |
       * | Number        | Int / Float          |
       * | Mixed         | Enum Value           |
       * | null          | NullValue            |
       *
       */
      function astFromValue(value, type) {
        if ((0, _definition.isNonNullType)(type)) {
          var astValue = astFromValue(value, type.ofType);

          if (
            (astValue === null || astValue === void 0
              ? void 0
              : astValue.kind) === _kinds.Kind.NULL
          ) {
            return null;
          }

          return astValue;
        } // only explicit null, not undefined, NaN

        if (value === null) {
          return {
            kind: _kinds.Kind.NULL
          };
        } // undefined

        if (value === undefined) {
          return null;
        } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
        // the value is not an array, convert the value using the list's item type.

        if ((0, _definition.isListType)(type)) {
          var itemType = type.ofType;
          var items = (0, _safeArrayFrom.default)(value);

          if (items != null) {
            var valuesNodes = [];

            for (var _i2 = 0; _i2 < items.length; _i2++) {
              var item = items[_i2];
              var itemNode = astFromValue(item, itemType);

              if (itemNode != null) {
                valuesNodes.push(itemNode);
              }
            }

            return {
              kind: _kinds.Kind.LIST,
              values: valuesNodes
            };
          }

          return astFromValue(value, itemType);
        } // Populate the fields of the input object by creating ASTs from each value
        // in the JavaScript object according to the fields in the input type.

        if ((0, _definition.isInputObjectType)(type)) {
          if (!(0, _isObjectLike.default)(value)) {
            return null;
          }

          var fieldNodes = [];

          for (
            var _i4 = 0,
              _objectValues2 = (0, _objectValues3.default)(type.getFields());
            _i4 < _objectValues2.length;
            _i4++
          ) {
            var field = _objectValues2[_i4];
            var fieldValue = astFromValue(value[field.name], field.type);

            if (fieldValue) {
              fieldNodes.push({
                kind: _kinds.Kind.OBJECT_FIELD,
                name: {
                  kind: _kinds.Kind.NAME,
                  value: field.name
                },
                value: fieldValue
              });
            }
          }

          return {
            kind: _kinds.Kind.OBJECT,
            fields: fieldNodes
          };
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isLeafType)(type)) {
          // Since value is an internally represented value, it must be serialized
          // to an externally represented value before converting into an AST.
          var serialized = type.serialize(value);

          if (serialized == null) {
            return null;
          } // Others serialize based on their corresponding JavaScript scalar types.

          if (typeof serialized === "boolean") {
            return {
              kind: _kinds.Kind.BOOLEAN,
              value: serialized
            };
          } // JavaScript numbers can be Int or Float values.

          if (
            typeof serialized === "number" &&
            (0, _isFinite.default)(serialized)
          ) {
            var stringNum = String(serialized);
            return integerStringRegExp.test(stringNum)
              ? {
                  kind: _kinds.Kind.INT,
                  value: stringNum
                }
              : {
                  kind: _kinds.Kind.FLOAT,
                  value: stringNum
                };
          }

          if (typeof serialized === "string") {
            // Enum types use Enum literals.
            if ((0, _definition.isEnumType)(type)) {
              return {
                kind: _kinds.Kind.ENUM,
                value: serialized
              };
            } // ID types can use Int literals.

            if (
              type === _scalars.GraphQLID &&
              integerStringRegExp.test(serialized)
            ) {
              return {
                kind: _kinds.Kind.INT,
                value: serialized
              };
            }

            return {
              kind: _kinds.Kind.STRING,
              value: serialized
            };
          }

          throw new TypeError(
            "Cannot convert value to AST: ".concat(
              (0, _inspect.default)(serialized),
              "."
            )
          );
        } // istanbul ignore next (Not reachable. All possible input types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected input type: " + (0, _inspect.default)(type)
          );
      }
      /**
       * IntValue:
       *   - NegativeSign? 0
       *   - NegativeSign? NonZeroDigit ( Digit+ )?
       */

      var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

      /***/
    },

    /***/ bs7P: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $abs = GetIntrinsic("%Math.abs%");

      // http://262.ecma-international.org/5.1/#sec-5.2

      module.exports = function abs(x) {
        return $abs(x);
      };

      /***/
    },

    /***/ cDAi: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * No undefined variables
       *
       * A GraphQL operation is only valid if all variables encountered, both directly
       * and via fragment spreads, are defined by that operation.
       */
      function NoUndefinedVariablesRule(context) {
        var variableNameDefined = Object.create(null);
        return {
          OperationDefinition: {
            enter: function enter() {
              variableNameDefined = Object.create(null);
            },
            leave: function leave(operation) {
              var usages = context.getRecursiveVariableUsages(operation);

              for (var _i2 = 0; _i2 < usages.length; _i2++) {
                var _ref2 = usages[_i2];
                var node = _ref2.node;
                var varName = node.name.value;

                if (variableNameDefined[varName] !== true) {
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      operation.name
                        ? 'Variable "$'
                            .concat(varName, '" is not defined by operation "')
                            .concat(operation.name.value, '".')
                        : 'Variable "$'.concat(varName, '" is not defined.'),
                      [node, operation]
                    )
                  );
                }
              }
            }
          },
          VariableDefinition: function VariableDefinition(node) {
            variableNameDefined[node.variable.name.value] = true;
          }
        };
      }

      /***/
    },

    /***/ cHvl: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueTypeNamesRule = UniqueTypeNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique type names
       *
       * A GraphQL document is only valid if all defined types have unique names.
       */
      function UniqueTypeNamesRule(context) {
        var knownTypeNames = Object.create(null);
        var schema = context.getSchema();
        return {
          ScalarTypeDefinition: checkTypeName,
          ObjectTypeDefinition: checkTypeName,
          InterfaceTypeDefinition: checkTypeName,
          UnionTypeDefinition: checkTypeName,
          EnumTypeDefinition: checkTypeName,
          InputObjectTypeDefinition: checkTypeName
        };

        function checkTypeName(node) {
          var typeName = node.name.value;

          if (
            schema !== null &&
            schema !== void 0 &&
            schema.getType(typeName)
          ) {
            context.reportError(
              new _GraphQLError.GraphQLError(
                'Type "'.concat(
                  typeName,
                  '" already exists in the schema. It cannot also be defined in this type definition.'
                ),
                node.name
              )
            );
            return;
          }

          if (knownTypeNames[typeName]) {
            context.reportError(
              new _GraphQLError.GraphQLError(
                'There can be only one type named "'.concat(typeName, '".'),
                [knownTypeNames[typeName], node.name]
              )
            );
          } else {
            knownTypeNames[typeName] = node.name;
          }

          return false;
        }
      }

      /***/
    },

    /***/ cQuB: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.titleCase = void 0;
      var SMALL_WORDS = /\b(?:an?d?|a[st]|because|but|by|en|for|i[fn]|neither|nor|o[fnr]|only|over|per|so|some|tha[tn]|the|to|up|upon|vs?\.?|versus|via|when|with|without|yet)\b/i;
      var TOKENS = /[^\s:–—-]+|./g;
      var WHITESPACE = /\s/;
      var IS_MANUAL_CASE = /.(?=[A-Z]|\..)/;
      var ALPHANUMERIC_PATTERN = /[A-Za-z0-9\u00C0-\u00FF]/;
      function titleCase(input) {
        var result = "";
        var m;
        // tslint:disable-next-line
        while ((m = TOKENS.exec(input)) !== null) {
          var token = m[0],
            index = m.index;
          if (
            // Ignore already capitalized words.
            !IS_MANUAL_CASE.test(token) &&
            // Ignore small words except at beginning or end.
            (!SMALL_WORDS.test(token) ||
              index === 0 ||
              index + token.length === input.length) &&
            // Ignore URLs.
            (input.charAt(index + token.length) !== ":" ||
              WHITESPACE.test(input.charAt(index + token.length + 1)))
          ) {
            // Find and uppercase first word character, skips over *modifiers*.
            result += token.replace(ALPHANUMERIC_PATTERN, function(m) {
              return m.toUpperCase();
            });
            continue;
          }
          result += token;
        }
        return result;
      }
      exports.titleCase = titleCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ cl1e: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.printSchema = printSchema;
      exports.printIntrospectionSchema = printIntrospectionSchema;
      exports.printType = printType;

      var _objectValues = _interopRequireDefault(__webpack_require__("YDZp"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _printer = __webpack_require__("gCJq");

      var _blockString = __webpack_require__("yQbh");

      var _introspection = __webpack_require__("JIc4");

      var _scalars = __webpack_require__("0N00");

      var _directives = __webpack_require__("L9+1");

      var _definition = __webpack_require__("mAVk");

      var _astFromValue = __webpack_require__("bi9y");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Accepts options as a second argument:
       *
       *    - commentDescriptions:
       *        Provide true to use preceding comments as the description.
       *
       */
      function printSchema(schema, options) {
        return printFilteredSchema(
          schema,
          function(n) {
            return !(0, _directives.isSpecifiedDirective)(n);
          },
          isDefinedType,
          options
        );
      }

      function printIntrospectionSchema(schema, options) {
        return printFilteredSchema(
          schema,
          _directives.isSpecifiedDirective,
          _introspection.isIntrospectionType,
          options
        );
      }

      function isDefinedType(type) {
        return (
          !(0, _scalars.isSpecifiedScalarType)(type) &&
          !(0, _introspection.isIntrospectionType)(type)
        );
      }

      function printFilteredSchema(
        schema,
        directiveFilter,
        typeFilter,
        options
      ) {
        var directives = schema.getDirectives().filter(directiveFilter);
        var types = (0, _objectValues.default)(schema.getTypeMap()).filter(
          typeFilter
        );
        return (
          [printSchemaDefinition(schema)]
            .concat(
              directives.map(function(directive) {
                return printDirective(directive, options);
              }),
              types.map(function(type) {
                return printType(type, options);
              })
            )
            .filter(Boolean)
            .join("\n\n") + "\n"
        );
      }

      function printSchemaDefinition(schema) {
        if (schema.description == null && isSchemaOfCommonNames(schema)) {
          return;
        }

        var operationTypes = [];
        var queryType = schema.getQueryType();

        if (queryType) {
          operationTypes.push("  query: ".concat(queryType.name));
        }

        var mutationType = schema.getMutationType();

        if (mutationType) {
          operationTypes.push("  mutation: ".concat(mutationType.name));
        }

        var subscriptionType = schema.getSubscriptionType();

        if (subscriptionType) {
          operationTypes.push("  subscription: ".concat(subscriptionType.name));
        }

        return (
          printDescription({}, schema) +
          "schema {\n".concat(operationTypes.join("\n"), "\n}")
        );
      }
      /**
       * GraphQL schema define root types for each type of operation. These types are
       * the same as any other type and can be named in any manner, however there is
       * a common naming convention:
       *
       *   schema {
       *     query: Query
       *     mutation: Mutation
       *   }
       *
       * When using this naming convention, the schema description can be omitted.
       */

      function isSchemaOfCommonNames(schema) {
        var queryType = schema.getQueryType();

        if (queryType && queryType.name !== "Query") {
          return false;
        }

        var mutationType = schema.getMutationType();

        if (mutationType && mutationType.name !== "Mutation") {
          return false;
        }

        var subscriptionType = schema.getSubscriptionType();

        if (subscriptionType && subscriptionType.name !== "Subscription") {
          return false;
        }

        return true;
      }

      function printType(type, options) {
        if ((0, _definition.isScalarType)(type)) {
          return printScalar(type, options);
        }

        if ((0, _definition.isObjectType)(type)) {
          return printObject(type, options);
        }

        if ((0, _definition.isInterfaceType)(type)) {
          return printInterface(type, options);
        }

        if ((0, _definition.isUnionType)(type)) {
          return printUnion(type, options);
        }

        if ((0, _definition.isEnumType)(type)) {
          return printEnum(type, options);
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

        if ((0, _definition.isInputObjectType)(type)) {
          return printInputObject(type, options);
        } // istanbul ignore next (Not reachable. All possible types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected type: " + (0, _inspect.default)(type)
          );
      }

      function printScalar(type, options) {
        return (
          printDescription(options, type) +
          "scalar ".concat(type.name) +
          printSpecifiedByUrl(type)
        );
      }

      function printImplementedInterfaces(type) {
        var interfaces = type.getInterfaces();
        return interfaces.length
          ? " implements " +
              interfaces
                .map(function(i) {
                  return i.name;
                })
                .join(" & ")
          : "";
      }

      function printObject(type, options) {
        return (
          printDescription(options, type) +
          "type ".concat(type.name) +
          printImplementedInterfaces(type) +
          printFields(options, type)
        );
      }

      function printInterface(type, options) {
        return (
          printDescription(options, type) +
          "interface ".concat(type.name) +
          printImplementedInterfaces(type) +
          printFields(options, type)
        );
      }

      function printUnion(type, options) {
        var types = type.getTypes();
        var possibleTypes = types.length ? " = " + types.join(" | ") : "";
        return (
          printDescription(options, type) + "union " + type.name + possibleTypes
        );
      }

      function printEnum(type, options) {
        var values = type.getValues().map(function(value, i) {
          return (
            printDescription(options, value, "  ", !i) +
            "  " +
            value.name +
            printDeprecated(value.deprecationReason)
          );
        });
        return (
          printDescription(options, type) +
          "enum ".concat(type.name) +
          printBlock(values)
        );
      }

      function printInputObject(type, options) {
        var fields = (0, _objectValues.default)(type.getFields()).map(function(
          f,
          i
        ) {
          return (
            printDescription(options, f, "  ", !i) + "  " + printInputValue(f)
          );
        });
        return (
          printDescription(options, type) +
          "input ".concat(type.name) +
          printBlock(fields)
        );
      }

      function printFields(options, type) {
        var fields = (0, _objectValues.default)(type.getFields()).map(function(
          f,
          i
        ) {
          return (
            printDescription(options, f, "  ", !i) +
            "  " +
            f.name +
            printArgs(options, f.args, "  ") +
            ": " +
            String(f.type) +
            printDeprecated(f.deprecationReason)
          );
        });
        return printBlock(fields);
      }

      function printBlock(items) {
        return items.length !== 0 ? " {\n" + items.join("\n") + "\n}" : "";
      }

      function printArgs(options, args) {
        var indentation =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : "";

        if (args.length === 0) {
          return "";
        } // If every arg does not have a description, print them on one line.

        if (
          args.every(function(arg) {
            return !arg.description;
          })
        ) {
          return "(" + args.map(printInputValue).join(", ") + ")";
        }

        return (
          "(\n" +
          args
            .map(function(arg, i) {
              return (
                printDescription(options, arg, "  " + indentation, !i) +
                "  " +
                indentation +
                printInputValue(arg)
              );
            })
            .join("\n") +
          "\n" +
          indentation +
          ")"
        );
      }

      function printInputValue(arg) {
        var defaultAST = (0, _astFromValue.astFromValue)(
          arg.defaultValue,
          arg.type
        );
        var argDecl = arg.name + ": " + String(arg.type);

        if (defaultAST) {
          argDecl += " = ".concat((0, _printer.print)(defaultAST));
        }

        return argDecl + printDeprecated(arg.deprecationReason);
      }

      function printDirective(directive, options) {
        return (
          printDescription(options, directive) +
          "directive @" +
          directive.name +
          printArgs(options, directive.args) +
          (directive.isRepeatable ? " repeatable" : "") +
          " on " +
          directive.locations.join(" | ")
        );
      }

      function printDeprecated(reason) {
        if (reason == null) {
          return "";
        }

        var reasonAST = (0, _astFromValue.astFromValue)(
          reason,
          _scalars.GraphQLString
        );

        if (reasonAST && reason !== _directives.DEFAULT_DEPRECATION_REASON) {
          return " @deprecated(reason: " + (0, _printer.print)(reasonAST) + ")";
        }

        return " @deprecated";
      }

      function printSpecifiedByUrl(scalar) {
        if (scalar.specifiedByUrl == null) {
          return "";
        }

        var url = scalar.specifiedByUrl;
        var urlAST = (0, _astFromValue.astFromValue)(
          url,
          _scalars.GraphQLString
        );
        urlAST ||
          (0, _invariant.default)(
            0,
            "Unexpected null value returned from `astFromValue` for specifiedByUrl"
          );
        return " @specifiedBy(url: " + (0, _printer.print)(urlAST) + ")";
      }

      function printDescription(options, def) {
        var indentation =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : "";
        var firstInBlock =
          arguments.length > 3 && arguments[3] !== undefined
            ? arguments[3]
            : true;
        var description = def.description;

        if (description == null) {
          return "";
        }

        if (
          (options === null || options === void 0
            ? void 0
            : options.commentDescriptions) === true
        ) {
          return printDescriptionWithComments(
            description,
            indentation,
            firstInBlock
          );
        }

        var preferMultipleLines = description.length > 70;
        var blockString = (0, _blockString.printBlockString)(
          description,
          "",
          preferMultipleLines
        );
        var prefix =
          indentation && !firstInBlock ? "\n" + indentation : indentation;
        return prefix + blockString.replace(/\n/g, "\n" + indentation) + "\n";
      }

      function printDescriptionWithComments(
        description,
        indentation,
        firstInBlock
      ) {
        var prefix = indentation && !firstInBlock ? "\n" : "";
        var comment = description
          .split("\n")
          .map(function(line) {
            return indentation + (line !== "" ? "# " + line : "#");
          })
          .join("\n");
        return prefix + comment + "\n";
      }

      /***/
    },

    /***/ cptH: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");
      var $Number = GetIntrinsic("%Number%");
      var $RegExp = GetIntrinsic("%RegExp%");
      var $parseInteger = GetIntrinsic("%parseInt%");

      var callBound = __webpack_require__("VF6F");
      var regexTester = __webpack_require__("NePw");
      var isPrimitive = __webpack_require__("9dO7");

      var $strSlice = callBound("String.prototype.slice");
      var isBinary = regexTester(/^0b[01]+$/i);
      var isOctal = regexTester(/^0o[0-7]+$/i);
      var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
      var nonWS = ["\u0085", "\u200b", "\ufffe"].join("");
      var nonWSregex = new $RegExp("[" + nonWS + "]", "g");
      var hasNonWS = regexTester(nonWSregex);

      // whitespace from: https://es5.github.io/#x15.5.4.20
      // implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
      var ws = [
        "\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003",
        "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028",
        "\u2029\uFEFF"
      ].join("");
      var trimRegex = new RegExp("(^[" + ws + "]+)|([" + ws + "]+$)", "g");
      var $replace = callBound("String.prototype.replace");
      var $trim = function(value) {
        return $replace(value, trimRegex, "");
      };

      var ToPrimitive = __webpack_require__("HZad");

      // https://ecma-international.org/ecma-262/6.0/#sec-tonumber

      module.exports = function ToNumber(argument) {
        var value = isPrimitive(argument)
          ? argument
          : ToPrimitive(argument, $Number);
        if (typeof value === "symbol") {
          throw new $TypeError("Cannot convert a Symbol value to a number");
        }
        if (typeof value === "bigint") {
          throw new $TypeError(
            "Conversion from 'BigInt' to 'number' is not allowed."
          );
        }
        if (typeof value === "string") {
          if (isBinary(value)) {
            return ToNumber($parseInteger($strSlice(value, 2), 2));
          } else if (isOctal(value)) {
            return ToNumber($parseInteger($strSlice(value, 2), 8));
          } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
            return NaN;
          } else {
            var trimmed = $trim(value);
            if (trimmed !== value) {
              return ToNumber(trimmed);
            }
          }
        }
        return $Number(value);
      };

      /***/
    },

    /***/ dHxA: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = suggestionList;

      var _naturalCompare = _interopRequireDefault(__webpack_require__("qoX3"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Given an invalid input string and a list of valid options, returns a filtered
       * list of valid options sorted based on their similarity with the input.
       */
      function suggestionList(input, options) {
        var optionsByDistance = Object.create(null);
        var lexicalDistance = new LexicalDistance(input);
        var threshold = Math.floor(input.length * 0.4) + 1;

        for (var _i2 = 0; _i2 < options.length; _i2++) {
          var option = options[_i2];
          var distance = lexicalDistance.measure(option, threshold);

          if (distance !== undefined) {
            optionsByDistance[option] = distance;
          }
        }

        return Object.keys(optionsByDistance).sort(function(a, b) {
          var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
          return distanceDiff !== 0
            ? distanceDiff
            : (0, _naturalCompare.default)(a, b);
        });
      }
      /**
       * Computes the lexical distance between strings A and B.
       *
       * The "distance" between two strings is given by counting the minimum number
       * of edits needed to transform string A into string B. An edit can be an
       * insertion, deletion, or substitution of a single character, or a swap of two
       * adjacent characters.
       *
       * Includes a custom alteration from Damerau-Levenshtein to treat case changes
       * as a single edit which helps identify mis-cased values with an edit distance
       * of 1.
       *
       * This distance can be useful for detecting typos in input or sorting
       */

      var LexicalDistance = /*#__PURE__*/ (function() {
        function LexicalDistance(input) {
          this._input = input;
          this._inputLowerCase = input.toLowerCase();
          this._inputArray = stringToArray(this._inputLowerCase);
          this._rows = [
            new Array(input.length + 1).fill(0),
            new Array(input.length + 1).fill(0),
            new Array(input.length + 1).fill(0)
          ];
        }

        var _proto = LexicalDistance.prototype;

        _proto.measure = function measure(option, threshold) {
          if (this._input === option) {
            return 0;
          }

          var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

          if (this._inputLowerCase === optionLowerCase) {
            return 1;
          }

          var a = stringToArray(optionLowerCase);
          var b = this._inputArray;

          if (a.length < b.length) {
            var tmp = a;
            a = b;
            b = tmp;
          }

          var aLength = a.length;
          var bLength = b.length;

          if (aLength - bLength > threshold) {
            return undefined;
          }

          var rows = this._rows;

          for (var j = 0; j <= bLength; j++) {
            rows[0][j] = j;
          }

          for (var i = 1; i <= aLength; i++) {
            var upRow = rows[(i - 1) % 3];
            var currentRow = rows[i % 3];
            var smallestCell = (currentRow[0] = i);

            for (var _j = 1; _j <= bLength; _j++) {
              var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
              var currentCell = Math.min(
                upRow[_j] + 1, // delete
                currentRow[_j - 1] + 1, // insert
                upRow[_j - 1] + cost // substitute
              );

              if (
                i > 1 &&
                _j > 1 &&
                a[i - 1] === b[_j - 2] &&
                a[i - 2] === b[_j - 1]
              ) {
                // transposition
                var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
                currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
              }

              if (currentCell < smallestCell) {
                smallestCell = currentCell;
              }

              currentRow[_j] = currentCell;
            } // Early exit, since distance can't go smaller than smallest element of the previous row.

            if (smallestCell > threshold) {
              return undefined;
            }
          }

          var distance = rows[aLength % 3][bLength];
          return distance <= threshold ? distance : undefined;
        };

        return LexicalDistance;
      })();

      function stringToArray(str) {
        var strLength = str.length;
        var array = new Array(strLength);

        for (var i = 0; i < strLength; ++i) {
          array[i] = str.charCodeAt(i);
        }

        return array;
      }

      /***/
    },

    /***/ dPEW: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.locatedError = locatedError;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _GraphQLError = __webpack_require__("MafX");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Given an arbitrary value, presumably thrown while attempting to execute a
       * GraphQL operation, produce a new GraphQLError aware of the location in the
       * document responsible for the original Error.
       */
      function locatedError(rawOriginalError, nodes, path) {
        var _nodes;

        // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
        var originalError =
          rawOriginalError instanceof Error
            ? rawOriginalError
            : new Error(
                "Unexpected error value: " +
                  (0, _inspect.default)(rawOriginalError)
              ); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

        if (Array.isArray(originalError.path)) {
          return originalError;
        }

        return new _GraphQLError.GraphQLError(
          originalError.message,
          (_nodes = originalError.nodes) !== null && _nodes !== void 0
            ? _nodes
            : nodes,
          originalError.source,
          originalError.positions,
          path,
          originalError
        );
      }

      /***/
    },

    /***/ fAto: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const path = __webpack_require__("oyvS");
      const pluginHelpers = __webpack_require__("ac+X");
      const graphql = __webpack_require__("uKhV");

      const extensions = {
        ts: [".ts", ".tsx"],
        js: [".js", ".jsx"],
        json: [".json"]
      };
      const plugin = async (schema, _documents, pluginConfig, info) => {
        const config = {
          module: "es2015",
          federation: false,
          apolloClientVersion: 3,
          useExplicitTyping: false,
          ...pluginConfig
        };
        const apolloClientVersion = parseInt(config.apolloClientVersion);
        const cleanSchema = config.federation
          ? pluginHelpers.removeFederation(schema)
          : schema;
        const useExplicitTyping = config.useExplicitTyping;
        const introspection = await graphql.execute({
          schema: cleanSchema,
          document: graphql.parse(`
      {
        __schema {
          types {
            kind
            name
            possibleTypes {
              name
            }
          }
        }
      }
    `)
        });
        const ext = path.extname(info.outputFile).toLowerCase();
        if (!introspection.data) {
          throw new Error(
            `Plugin "fragment-matcher" couldn't introspect the schema`
          );
        }
        const filterUnionAndInterfaceTypes = type =>
          type.kind === "UNION" || type.kind === "INTERFACE";
        const createPossibleTypesCollection = (acc, type) => {
          return {
            ...acc,
            ...{
              [type.name]: type.possibleTypes.map(
                possibleType => possibleType.name
              )
            }
          };
        };
        const filteredData =
          apolloClientVersion === 2
            ? {
                __schema: {
                  ...introspection.data.__schema,
                  types: introspection.data.__schema.types.filter(
                    type => type.kind === "UNION" || type.kind === "INTERFACE"
                  )
                }
              }
            : {
                possibleTypes: introspection.data.__schema.types
                  .filter(filterUnionAndInterfaceTypes)
                  .reduce(createPossibleTypesCollection, {})
              };
        const content = JSON.stringify(filteredData, null, 2);
        if (extensions.json.includes(ext)) {
          return content;
        }
        if (extensions.js.includes(ext)) {
          const defaultExportStatement =
            config.module === "es2015" ? `export default` : "module.exports =";
          return `
      ${defaultExportStatement} ${content}
    `;
        }
        if (extensions.ts.includes(ext)) {
          let typename;
          if (apolloClientVersion === 2) {
            typename = `IntrospectionResultData`;
          } else if (apolloClientVersion === 3) {
            typename = `PossibleTypesResultData`;
          }
          let type;
          if (useExplicitTyping) {
            type = `export type ${typename} = ${content};`;
          } else if (apolloClientVersion === 2) {
            type = `export interface ${typename} {
        __schema: {
          types: {
            kind: string;
            name: string;
            possibleTypes: {
              name: string;
            }[];
          }[];
        };
      }`;
          } else if (apolloClientVersion === 3) {
            type = `export interface ${typename} {
        possibleTypes: {
          [key: string]: string[]
        }
      }`;
          }
          return `
      ${type}
      const result: ${typename} = ${content};
      export default result;
    `;
        }
        throw new Error(`Extension ${ext} is not supported`);
      };
      const validate = async (_schema, _documents, config, outputFile) => {
        const ext = path.extname(outputFile).toLowerCase();
        const all = Object.values(extensions).reduce(
          (acc, exts) => [...acc, ...exts],
          []
        );
        if (!all.includes(ext)) {
          throw new Error(
            `Plugin "fragment-matcher" requires extension to be one of ${all
              .map(val => val.replace(".", ""))
              .join(", ")}!`
          );
        }
        if (config.module === "commonjs" && extensions.ts.includes(ext)) {
          throw new Error(
            `Plugin "fragment-matcher" doesn't support commonjs modules combined with TypeScript!`
          );
        }
      };

      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ fRMO: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      __webpack_require__("ac+X");
      __webpack_require__("oyvS");
      __webpack_require__("zOht");

      class TypeScriptOperationVariablesToObject extends visitorPluginCommon.OperationVariablesToObject {
        constructor(
          _scalars,
          _convertName,
          _avoidOptionals,
          _immutableTypes,
          _namespacedImportName = null,
          _enumNames = [],
          _enumPrefix = true,
          _enumValues = {},
          _applyCoercion = false
        ) {
          super(
            _scalars,
            _convertName,
            _namespacedImportName,
            _enumNames,
            _enumPrefix,
            _enumValues,
            _applyCoercion
          );
          this._avoidOptionals = _avoidOptionals;
          this._immutableTypes = _immutableTypes;
        }
        clearOptional(str) {
          const prefix = this._namespacedImportName
            ? `${this._namespacedImportName}.`
            : "";
          const rgx = new RegExp(`^${this.wrapMaybe(`(.*?)`)}$`, "i");
          if (str.startsWith(`${prefix}Maybe`)) {
            return str.replace(rgx, "$1");
          }
          return str;
        }
        wrapAstTypeWithModifiers(baseType, typeNode, applyCoercion = false) {
          if (typeNode.kind === graphql.Kind.NON_NULL_TYPE) {
            const type = this.wrapAstTypeWithModifiers(
              baseType,
              typeNode.type,
              applyCoercion
            );
            return this.clearOptional(type);
          } else if (typeNode.kind === graphql.Kind.LIST_TYPE) {
            const innerType = this.wrapAstTypeWithModifiers(
              baseType,
              typeNode.type,
              applyCoercion
            );
            const listInputCoercionExtension = applyCoercion
              ? ` | ${innerType}`
              : "";
            return this.wrapMaybe(
              `${
                this._immutableTypes ? "ReadonlyArray" : "Array"
              }<${innerType}>${listInputCoercionExtension}`
            );
          } else {
            return this.wrapMaybe(baseType);
          }
        }
        formatFieldString(fieldName, isNonNullType, hasDefaultValue) {
          return `${fieldName}${
            this.getAvoidOption(isNonNullType, hasDefaultValue) ? "?" : ""
          }`;
        }
        formatTypeString(fieldType, isNonNullType, hasDefaultValue) {
          if (!hasDefaultValue && isNonNullType) {
            return this.clearOptional(fieldType);
          }
          return fieldType;
        }
        wrapMaybe(type) {
          const prefix = this._namespacedImportName
            ? `${this._namespacedImportName}.`
            : "";
          return `${prefix}Maybe${type ? `<${type}>` : ""}`;
        }
        getAvoidOption(isNonNullType, hasDefaultValue) {
          const options = visitorPluginCommon.normalizeAvoidOptionals(
            this._avoidOptionals
          );
          return (
            ((options.object || !options.defaultValue) && hasDefaultValue) ||
            (!options.object && !isNonNullType)
          );
        }
        getPunctuation() {
          return ";";
        }
      }

      const EXACT_SIGNATURE = `type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };`;
      const MAKE_OPTIONAL_SIGNATURE = `type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };`;
      const MAKE_MAYBE_SIGNATURE = `type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };`;
      class TsVisitor extends visitorPluginCommon.BaseTypesVisitor {
        constructor(schema, pluginConfig, additionalConfig = {}) {
          super(schema, pluginConfig, {
            noExport: visitorPluginCommon.getConfigValue(
              pluginConfig.noExport,
              false
            ),
            avoidOptionals: visitorPluginCommon.normalizeAvoidOptionals(
              visitorPluginCommon.getConfigValue(
                pluginConfig.avoidOptionals,
                false
              )
            ),
            maybeValue: visitorPluginCommon.getConfigValue(
              pluginConfig.maybeValue,
              "T | null"
            ),
            constEnums: visitorPluginCommon.getConfigValue(
              pluginConfig.constEnums,
              false
            ),
            enumsAsTypes: visitorPluginCommon.getConfigValue(
              pluginConfig.enumsAsTypes,
              false
            ),
            futureProofEnums: visitorPluginCommon.getConfigValue(
              pluginConfig.futureProofEnums,
              false
            ),
            futureProofUnions: visitorPluginCommon.getConfigValue(
              pluginConfig.futureProofUnions,
              false
            ),
            enumsAsConst: visitorPluginCommon.getConfigValue(
              pluginConfig.enumsAsConst,
              false
            ),
            numericEnums: visitorPluginCommon.getConfigValue(
              pluginConfig.numericEnums,
              false
            ),
            onlyOperationTypes: visitorPluginCommon.getConfigValue(
              pluginConfig.onlyOperationTypes,
              false
            ),
            immutableTypes: visitorPluginCommon.getConfigValue(
              pluginConfig.immutableTypes,
              false
            ),
            useImplementingTypes: visitorPluginCommon.getConfigValue(
              pluginConfig.useImplementingTypes,
              false
            ),
            entireFieldWrapperValue: visitorPluginCommon.getConfigValue(
              pluginConfig.entireFieldWrapperValue,
              "T"
            ),
            wrapEntireDefinitions: visitorPluginCommon.getConfigValue(
              pluginConfig.wrapEntireFieldDefinitions,
              false
            ),
            ...(additionalConfig || {})
          });
          autoBind(this);
          const enumNames = Object.values(schema.getTypeMap())
            .filter(graphql.isEnumType)
            .map(type => type.name);
          this.setArgumentsTransformer(
            new TypeScriptOperationVariablesToObject(
              this.scalars,
              this.convertName,
              this.config.avoidOptionals,
              this.config.immutableTypes,
              null,
              enumNames,
              pluginConfig.enumPrefix,
              this.config.enumValues
            )
          );
          this.setDeclarationBlockConfig({
            enumNameValueSeparator: " =",
            ignoreExport: this.config.noExport
          });
        }
        _getTypeForNode(node) {
          const typeAsString = node.name;
          if (this.config.useImplementingTypes) {
            const allTypesMap = this._schema.getTypeMap();
            const implementingTypes = [];
            // TODO: Move this to a better place, since we are using this logic in some other places as well.
            for (const graphqlType of Object.values(allTypesMap)) {
              if (graphqlType instanceof graphql.GraphQLObjectType) {
                const allInterfaces = graphqlType.getInterfaces();
                if (allInterfaces.some(int => typeAsString === int.name)) {
                  implementingTypes.push(this.convertName(graphqlType.name));
                }
              }
            }
            if (implementingTypes.length > 0) {
              return implementingTypes.join(" | ");
            }
          }
          return super._getTypeForNode(node);
        }
        getWrapperDefinitions() {
          const definitions = [
            this.getMaybeValue(),
            this.getExactDefinition(),
            this.getMakeOptionalDefinition(),
            this.getMakeMaybeDefinition()
          ];
          if (this.config.wrapFieldDefinitions) {
            definitions.push(this.getFieldWrapperValue());
          }
          if (this.config.wrapEntireDefinitions) {
            definitions.push(this.getEntireFieldWrapperValue());
          }
          return definitions;
        }
        getExactDefinition() {
          return `${this.getExportPrefix()}${EXACT_SIGNATURE}`;
        }
        getMakeOptionalDefinition() {
          return `${this.getExportPrefix()}${MAKE_OPTIONAL_SIGNATURE}`;
        }
        getMakeMaybeDefinition() {
          return `${this.getExportPrefix()}${MAKE_MAYBE_SIGNATURE}`;
        }
        getMaybeValue() {
          return `${this.getExportPrefix()}type Maybe<T> = ${
            this.config.maybeValue
          };`;
        }
        clearOptional(str) {
          if (str.startsWith("Maybe")) {
            return str.replace(/Maybe<(.*?)>$/, "$1");
          }
          return str;
        }
        getExportPrefix() {
          if (this.config.noExport) {
            return "";
          }
          return super.getExportPrefix();
        }
        NamedType(node, key, parent, path, ancestors) {
          return `Maybe<${super.NamedType(
            node,
            key,
            parent,
            path,
            ancestors
          )}>`;
        }
        ListType(node) {
          return `Maybe<${super.ListType(node)}>`;
        }
        UnionTypeDefinition(node, key, parent) {
          if (this.config.onlyOperationTypes) return "";
          let withFutureAddedValue = [];
          if (this.config.futureProofUnions) {
            withFutureAddedValue = [
              this.config.immutableTypes
                ? `{ readonly __typename?: "%other" }`
                : `{ __typename?: "%other" }`
            ];
          }
          const originalNode = parent[key];
          const possibleTypes = originalNode.types
            .map(t =>
              this.scalars[t.name.value]
                ? this._getScalar(t.name.value)
                : this.convertName(t)
            )
            .concat(...withFutureAddedValue)
            .join(" | ");
          return new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind("type")
            .withName(this.convertName(node))
            .withComment(node.description)
            .withContent(possibleTypes).string;
          // return super.UnionTypeDefinition(node, key, parent).concat(withFutureAddedValue).join("");
        }
        wrapWithListType(str) {
          return `${
            this.config.immutableTypes ? "ReadonlyArray" : "Array"
          }<${str}>`;
        }
        NonNullType(node) {
          const baseValue = super.NonNullType(node);
          return this.clearOptional(baseValue);
        }
        FieldDefinition(node, key, parent) {
          const typeString = this.config.wrapEntireDefinitions
            ? `EntireFieldWrapper<${node.type}>`
            : node.type;
          const originalFieldNode = parent[key];
          const addOptionalSign =
            !this.config.avoidOptionals.field &&
            originalFieldNode.type.kind !== graphql.Kind.NON_NULL_TYPE;
          const comment = this.getFieldComment(node);
          const { type } = this.config.declarationKind;
          return (
            comment +
            visitorPluginCommon.indent(
              `${this.config.immutableTypes ? "readonly " : ""}${node.name}${
                addOptionalSign ? "?" : ""
              }: ${typeString}${this.getPunctuation(type)}`
            )
          );
        }
        InputValueDefinition(node, key, parent) {
          const originalFieldNode = parent[key];
          const addOptionalSign =
            !this.config.avoidOptionals.inputValue &&
            (originalFieldNode.type.kind !== graphql.Kind.NON_NULL_TYPE ||
              (!this.config.avoidOptionals.defaultValue &&
                node.defaultValue !== undefined));
          const comment = visitorPluginCommon.transformComment(
            node.description,
            1
          );
          const { type } = this.config.declarationKind;
          return (
            comment +
            visitorPluginCommon.indent(
              `${this.config.immutableTypes ? "readonly " : ""}${node.name}${
                addOptionalSign ? "?" : ""
              }: ${node.type}${this.getPunctuation(type)}`
            )
          );
        }
        EnumTypeDefinition(node) {
          const enumName = node.name;
          // In case of mapped external enum string
          if (
            this.config.enumValues[enumName] &&
            this.config.enumValues[enumName].sourceFile
          ) {
            return `export { ${this.config.enumValues[enumName].typeIdentifier} };\n`;
          }
          const getValueFromConfig = enumValue => {
            if (
              this.config.enumValues[enumName] &&
              this.config.enumValues[enumName].mappedValues &&
              typeof this.config.enumValues[enumName].mappedValues[
                enumValue
              ] !== "undefined"
            ) {
              return this.config.enumValues[enumName].mappedValues[enumValue];
            }
            return null;
          };
          const withFutureAddedValue = [
            this.config.futureProofEnums
              ? [
                  visitorPluginCommon.indent(
                    "| " +
                      visitorPluginCommon.wrapWithSingleQuotes(
                        "%future added value"
                      )
                  )
                ]
              : []
          ];
          const enumTypeName = this.convertName(node, {
            useTypesPrefix: this.config.enumPrefix
          });
          if (this.config.enumsAsTypes) {
            return new visitorPluginCommon.DeclarationBlock(
              this._declarationBlockConfig
            )
              .export()
              .asKind("type")
              .withComment(node.description)
              .withName(enumTypeName)
              .withContent(
                "\n" +
                  node.values
                    .map(enumOption => {
                      var _a;
                      const name = enumOption.name;
                      const enumValue =
                        (_a = getValueFromConfig(name)) !== null &&
                        _a !== void 0
                          ? _a
                          : name;
                      const comment = visitorPluginCommon.transformComment(
                        enumOption.description,
                        1
                      );
                      return (
                        comment +
                        visitorPluginCommon.indent(
                          "| " +
                            visitorPluginCommon.wrapWithSingleQuotes(enumValue)
                        )
                      );
                    })
                    .concat(...withFutureAddedValue)
                    .join("\n")
              ).string;
          }
          if (this.config.numericEnums) {
            const block = new visitorPluginCommon.DeclarationBlock(
              this._declarationBlockConfig
            )
              .export()
              .withComment(node.description)
              .withName(enumTypeName)
              .asKind("enum")
              .withBlock(
                node.values
                  .map((enumOption, i) => {
                    const valueFromConfig = getValueFromConfig(enumOption.name);
                    const enumValue =
                      valueFromConfig !== null && valueFromConfig !== void 0
                        ? valueFromConfig
                        : i;
                    const comment = visitorPluginCommon.transformComment(
                      enumOption.description,
                      1
                    );
                    return (
                      comment +
                      visitorPluginCommon.indent(enumOption.name) +
                      ` = ${enumValue}`
                    );
                  })
                  .concat(...withFutureAddedValue)
                  .join(",\n")
              ).string;
            return block;
          }
          if (this.config.enumsAsConst) {
            const typeName = `export type ${enumTypeName} = typeof ${enumTypeName}[keyof typeof ${enumTypeName}];`;
            const enumAsConst = new visitorPluginCommon.DeclarationBlock({
              ...this._declarationBlockConfig,
              blockTransformer: block => {
                return block + " as const";
              }
            })
              .export()
              .asKind("const")
              .withName(enumTypeName)
              .withComment(node.description)
              .withBlock(
                node.values
                  .map(enumOption => {
                    var _a;
                    const optionName = this.convertName(enumOption, {
                      useTypesPrefix: false,
                      transformUnderscore: true
                    });
                    const comment = visitorPluginCommon.transformComment(
                      enumOption.description,
                      1
                    );
                    const name = enumOption.name;
                    const enumValue =
                      (_a = getValueFromConfig(name)) !== null && _a !== void 0
                        ? _a
                        : name;
                    return (
                      comment +
                      visitorPluginCommon.indent(
                        `${optionName}: ${visitorPluginCommon.wrapWithSingleQuotes(
                          enumValue
                        )}`
                      )
                    );
                  })
                  .join(",\n")
              ).string;
            return [enumAsConst, typeName].join("\n");
          }
          return new visitorPluginCommon.DeclarationBlock(
            this._declarationBlockConfig
          )
            .export()
            .asKind(this.config.constEnums ? "const enum" : "enum")
            .withName(enumTypeName)
            .withComment(node.description)
            .withBlock(this.buildEnumValuesBlock(enumName, node.values)).string;
        }
        getPunctuation(_declarationKind) {
          return ";";
        }
      }

      class TsIntrospectionVisitor extends TsVisitor {
        constructor(schema, pluginConfig = {}, typesToInclude) {
          super(schema, pluginConfig);
          this.typesToInclude = [];
          this.typesToInclude = typesToInclude;
          autoBind(this);
        }
        DirectiveDefinition() {
          return null;
        }
        ObjectTypeDefinition(node, key, parent) {
          const name = node.name;
          if (this.typesToInclude.some(type => type.name === name)) {
            return super.ObjectTypeDefinition(node, key, parent);
          }
          return null;
        }
        EnumTypeDefinition(node) {
          const name = node.name;
          if (this.typesToInclude.some(type => type.name === name)) {
            return super.EnumTypeDefinition(node);
          }
          return null;
        }
      }

      function transformSchemaAST(schema, config) {
        const printedSchema = graphql.printSchema(schema);
        const astNode = graphql.parse(printedSchema);
        const transformedAST = config.disableDescriptions
          ? graphql.visit(astNode, {
              leave: node => ({
                ...node,
                description: undefined
              })
            })
          : astNode;
        const transformedSchema = config.disableDescriptions
          ? graphql.buildASTSchema(transformedAST)
          : schema;
        return {
          schema: transformedSchema,
          ast: transformedAST
        };
      }

      const plugin = (schema, documents, config) => {
        const { schema: _schema, ast } = transformSchemaAST(schema, config);
        const visitor = new TsVisitor(_schema, config);
        const visitorResult = graphql.visit(ast, { leave: visitor });
        const introspectionDefinitions = includeIntrospectionDefinitions(
          _schema,
          documents,
          config
        );
        const scalars = visitor.scalarsDefinition;
        return {
          prepend: [
            ...visitor.getEnumsImports(),
            ...visitor.getScalarsImports(),
            ...visitor.getWrapperDefinitions()
          ],
          content: [
            scalars,
            ...visitorResult.definitions,
            ...introspectionDefinitions
          ].join("\n")
        };
      };
      function includeIntrospectionDefinitions(schema, documents, config) {
        const typeInfo = new graphql.TypeInfo(schema);
        const usedTypes = [];
        const documentsVisitor = graphql.visitWithTypeInfo(typeInfo, {
          Field() {
            const type = graphql.getNamedType(typeInfo.getType());
            if (
              graphql.isIntrospectionType(type) &&
              !usedTypes.includes(type)
            ) {
              usedTypes.push(type);
            }
          }
        });
        documents.forEach(doc => graphql.visit(doc.document, documentsVisitor));
        const typesToInclude = [];
        usedTypes.forEach(type => {
          collectTypes(type);
        });
        const visitor = new TsIntrospectionVisitor(
          schema,
          config,
          typesToInclude
        );
        const result = graphql.visit(
          graphql.parse(graphql.printIntrospectionSchema(schema)),
          { leave: visitor }
        );
        // recursively go through each `usedTypes` and their children and collect all used types
        // we don't care about Interfaces, Unions and others, but Objects and Enums
        function collectTypes(type) {
          if (typesToInclude.includes(type)) {
            return;
          }
          typesToInclude.push(type);
          if (graphql.isObjectType(type)) {
            const fields = type.getFields();
            Object.keys(fields).forEach(key => {
              const field = fields[key];
              const type = graphql.getNamedType(field.type);
              collectTypes(type);
            });
          }
        }
        return result.definitions;
      }

      exports.EXACT_SIGNATURE = EXACT_SIGNATURE;
      exports.MAKE_MAYBE_SIGNATURE = MAKE_MAYBE_SIGNATURE;
      exports.MAKE_OPTIONAL_SIGNATURE = MAKE_OPTIONAL_SIGNATURE;
      exports.TsIntrospectionVisitor = TsIntrospectionVisitor;
      exports.TsVisitor = TsVisitor;
      exports.TypeScriptOperationVariablesToObject = TypeScriptOperationVariablesToObject;
      exports.includeIntrospectionDefinitions = includeIntrospectionDefinitions;
      exports.plugin = plugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ fZhc: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isNode = isNode;
      exports.Token = exports.Location = void 0;

      var _defineInspect = _interopRequireDefault(__webpack_require__("wqAJ"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Contains a range of UTF-8 character offsets and token references that
       * identify the region of the source from which the AST derived.
       */
      var Location = /*#__PURE__*/ (function() {
        /**
         * The character offset at which this Node begins.
         */

        /**
         * The character offset at which this Node ends.
         */

        /**
         * The Token at which this Node begins.
         */

        /**
         * The Token at which this Node ends.
         */

        /**
         * The Source document the AST represents.
         */
        function Location(startToken, endToken, source) {
          this.start = startToken.start;
          this.end = endToken.end;
          this.startToken = startToken;
          this.endToken = endToken;
          this.source = source;
        }

        var _proto = Location.prototype;

        _proto.toJSON = function toJSON() {
          return {
            start: this.start,
            end: this.end
          };
        };

        return Location;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.Location = Location;
      (0, _defineInspect.default)(Location);
      /**
       * Represents a range of characters represented by a lexical token
       * within a Source.
       */

      var Token = /*#__PURE__*/ (function() {
        /**
         * The kind of Token.
         */

        /**
         * The character offset at which this Node begins.
         */

        /**
         * The character offset at which this Node ends.
         */

        /**
         * The 1-indexed line number on which this Token appears.
         */

        /**
         * The 1-indexed column number at which this Token begins.
         */

        /**
         * For non-punctuation tokens, represents the interpreted value of the token.
         */

        /**
         * Tokens exist as nodes in a double-linked-list amongst all tokens
         * including ignored tokens. <SOF> is always the first node and <EOF>
         * the last.
         */
        function Token(kind, start, end, line, column, prev, value) {
          this.kind = kind;
          this.start = start;
          this.end = end;
          this.line = line;
          this.column = column;
          this.value = value;
          this.prev = prev;
          this.next = null;
        }

        var _proto2 = Token.prototype;

        _proto2.toJSON = function toJSON() {
          return {
            kind: this.kind,
            value: this.value,
            line: this.line,
            column: this.column
          };
        };

        return Token;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.Token = Token;
      (0, _defineInspect.default)(Token);
      /**
       * @internal
       */

      function isNode(maybeNode) {
        return maybeNode != null && typeof maybeNode.kind === "string";
      }
      /**
       * The list of all possible AST node types.
       */

      /***/
    },

    /***/ feWH: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      /**
       * Unique field definition names
       *
       * A GraphQL complex type is only valid if all its fields are uniquely named.
       */
      function UniqueFieldDefinitionNamesRule(context) {
        var schema = context.getSchema();
        var existingTypeMap = schema
          ? schema.getTypeMap()
          : Object.create(null);
        var knownFieldNames = Object.create(null);
        return {
          InputObjectTypeDefinition: checkFieldUniqueness,
          InputObjectTypeExtension: checkFieldUniqueness,
          InterfaceTypeDefinition: checkFieldUniqueness,
          InterfaceTypeExtension: checkFieldUniqueness,
          ObjectTypeDefinition: checkFieldUniqueness,
          ObjectTypeExtension: checkFieldUniqueness
        };

        function checkFieldUniqueness(node) {
          var _node$fields;

          var typeName = node.name.value;

          if (!knownFieldNames[typeName]) {
            knownFieldNames[typeName] = Object.create(null);
          } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var fieldNodes =
            (_node$fields = node.fields) !== null && _node$fields !== void 0
              ? _node$fields
              : [];
          var fieldNames = knownFieldNames[typeName];

          for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {
            var fieldDef = fieldNodes[_i2];
            var fieldName = fieldDef.name.value;

            if (hasField(existingTypeMap[typeName], fieldName)) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Field "'
                    .concat(typeName, ".")
                    .concat(
                      fieldName,
                      '" already exists in the schema. It cannot also be defined in this type extension.'
                    ),
                  fieldDef.name
                )
              );
            } else if (fieldNames[fieldName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Field "'
                    .concat(typeName, ".")
                    .concat(fieldName, '" can only be defined once.'),
                  [fieldNames[fieldName], fieldDef.name]
                )
              );
            } else {
              fieldNames[fieldName] = fieldDef.name;
            }
          }

          return false;
        }
      }

      function hasField(type, fieldName) {
        if (
          (0, _definition.isObjectType)(type) ||
          (0, _definition.isInterfaceType)(type) ||
          (0, _definition.isInputObjectType)(type)
        ) {
          return type.getFields()[fieldName] != null;
        }

        return false;
      }

      /***/
    },

    /***/ fzwd: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var OR_LIST_MAX_LENGTH = 5;

      var _require = __webpack_require__("VrDQ"),
        createCompilerError = _require.createCompilerError;

      function orList(items) {
        if (items.length === 0) {
          throw createCompilerError(
            "Expected an array of strings. Got empty array"
          );
        }

        if (items.length === 1) {
          return items[0];
        }

        if (items.length > OR_LIST_MAX_LENGTH) {
          return items.slice(0, OR_LIST_MAX_LENGTH).join(", ") + ", ...";
        }

        var selected = items.slice();
        var lastItem = selected.pop();
        return selected.join(", ") + " or " + lastItem;
      }

      module.exports = orList;

      /***/
    },

    /***/ gCJq: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.print = print;

      var _visitor = __webpack_require__("tqCx");

      var _blockString = __webpack_require__("yQbh");

      /**
       * Converts an AST into a string, using one set of reasonable
       * formatting rules.
       */
      function print(ast) {
        return (0, _visitor.visit)(ast, {
          leave: printDocASTReducer
        });
      }

      var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

      var printDocASTReducer = {
        Name: function Name(node) {
          return node.value;
        },
        Variable: function Variable(node) {
          return "$" + node.name;
        },
        // Document
        Document: function Document(node) {
          return join(node.definitions, "\n\n") + "\n";
        },
        OperationDefinition: function OperationDefinition(node) {
          var op = node.operation;
          var name = node.name;
          var varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
          var directives = join(node.directives, " ");
          var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
          // the query short form.

          return !name && !directives && !varDefs && op === "query"
            ? selectionSet
            : join([op, join([name, varDefs]), directives, selectionSet], " ");
        },
        VariableDefinition: function VariableDefinition(_ref) {
          var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue,
            directives = _ref.directives;
          return (
            variable +
            ": " +
            type +
            wrap(" = ", defaultValue) +
            wrap(" ", join(directives, " "))
          );
        },
        SelectionSet: function SelectionSet(_ref2) {
          var selections = _ref2.selections;
          return block(selections);
        },
        Field: function Field(_ref3) {
          var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
          var prefix = wrap("", alias, ": ") + name;
          var argsLine = prefix + wrap("(", join(args, ", "), ")");

          if (argsLine.length > MAX_LINE_LENGTH) {
            argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
          }

          return join([argsLine, join(directives, " "), selectionSet], " ");
        },
        Argument: function Argument(_ref4) {
          var name = _ref4.name,
            value = _ref4.value;
          return name + ": " + value;
        },
        // Fragments
        FragmentSpread: function FragmentSpread(_ref5) {
          var name = _ref5.name,
            directives = _ref5.directives;
          return "..." + name + wrap(" ", join(directives, " "));
        },
        InlineFragment: function InlineFragment(_ref6) {
          var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
          return join(
            [
              "...",
              wrap("on ", typeCondition),
              join(directives, " "),
              selectionSet
            ],
            " "
          );
        },
        FragmentDefinition: function FragmentDefinition(_ref7) {
          var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
          return (
            // Note: fragment variable definitions are experimental and may be changed
            // or removed in the future.
            "fragment "
              .concat(name)
              .concat(wrap("(", join(variableDefinitions, ", "), ")"), " ") +
            "on "
              .concat(typeCondition, " ")
              .concat(wrap("", join(directives, " "), " ")) +
            selectionSet
          );
        },
        // Value
        IntValue: function IntValue(_ref8) {
          var value = _ref8.value;
          return value;
        },
        FloatValue: function FloatValue(_ref9) {
          var value = _ref9.value;
          return value;
        },
        StringValue: function StringValue(_ref10, key) {
          var value = _ref10.value,
            isBlockString = _ref10.block;
          return isBlockString
            ? (0, _blockString.printBlockString)(
                value,
                key === "description" ? "" : "  "
              )
            : JSON.stringify(value);
        },
        BooleanValue: function BooleanValue(_ref11) {
          var value = _ref11.value;
          return value ? "true" : "false";
        },
        NullValue: function NullValue() {
          return "null";
        },
        EnumValue: function EnumValue(_ref12) {
          var value = _ref12.value;
          return value;
        },
        ListValue: function ListValue(_ref13) {
          var values = _ref13.values;
          return "[" + join(values, ", ") + "]";
        },
        ObjectValue: function ObjectValue(_ref14) {
          var fields = _ref14.fields;
          return "{" + join(fields, ", ") + "}";
        },
        ObjectField: function ObjectField(_ref15) {
          var name = _ref15.name,
            value = _ref15.value;
          return name + ": " + value;
        },
        // Directive
        Directive: function Directive(_ref16) {
          var name = _ref16.name,
            args = _ref16.arguments;
          return "@" + name + wrap("(", join(args, ", "), ")");
        },
        // Type
        NamedType: function NamedType(_ref17) {
          var name = _ref17.name;
          return name;
        },
        ListType: function ListType(_ref18) {
          var type = _ref18.type;
          return "[" + type + "]";
        },
        NonNullType: function NonNullType(_ref19) {
          var type = _ref19.type;
          return type + "!";
        },
        // Type System Definitions
        SchemaDefinition: addDescription(function(_ref20) {
          var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
          return join(
            ["schema", join(directives, " "), block(operationTypes)],
            " "
          );
        }),
        OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
          var operation = _ref21.operation,
            type = _ref21.type;
          return operation + ": " + type;
        },
        ScalarTypeDefinition: addDescription(function(_ref22) {
          var name = _ref22.name,
            directives = _ref22.directives;
          return join(["scalar", name, join(directives, " ")], " ");
        }),
        ObjectTypeDefinition: addDescription(function(_ref23) {
          var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
          return join(
            [
              "type",
              name,
              wrap("implements ", join(interfaces, " & ")),
              join(directives, " "),
              block(fields)
            ],
            " "
          );
        }),
        FieldDefinition: addDescription(function(_ref24) {
          var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
          return (
            name +
            (hasMultilineItems(args)
              ? wrap("(\n", indent(join(args, "\n")), "\n)")
              : wrap("(", join(args, ", "), ")")) +
            ": " +
            type +
            wrap(" ", join(directives, " "))
          );
        }),
        InputValueDefinition: addDescription(function(_ref25) {
          var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
          return join(
            [
              name + ": " + type,
              wrap("= ", defaultValue),
              join(directives, " ")
            ],
            " "
          );
        }),
        InterfaceTypeDefinition: addDescription(function(_ref26) {
          var name = _ref26.name,
            interfaces = _ref26.interfaces,
            directives = _ref26.directives,
            fields = _ref26.fields;
          return join(
            [
              "interface",
              name,
              wrap("implements ", join(interfaces, " & ")),
              join(directives, " "),
              block(fields)
            ],
            " "
          );
        }),
        UnionTypeDefinition: addDescription(function(_ref27) {
          var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
          return join(
            [
              "union",
              name,
              join(directives, " "),
              types && types.length !== 0 ? "= " + join(types, " | ") : ""
            ],
            " "
          );
        }),
        EnumTypeDefinition: addDescription(function(_ref28) {
          var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
          return join(
            ["enum", name, join(directives, " "), block(values)],
            " "
          );
        }),
        EnumValueDefinition: addDescription(function(_ref29) {
          var name = _ref29.name,
            directives = _ref29.directives;
          return join([name, join(directives, " ")], " ");
        }),
        InputObjectTypeDefinition: addDescription(function(_ref30) {
          var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
          return join(
            ["input", name, join(directives, " "), block(fields)],
            " "
          );
        }),
        DirectiveDefinition: addDescription(function(_ref31) {
          var name = _ref31.name,
            args = _ref31.arguments,
            repeatable = _ref31.repeatable,
            locations = _ref31.locations;
          return (
            "directive @" +
            name +
            (hasMultilineItems(args)
              ? wrap("(\n", indent(join(args, "\n")), "\n)")
              : wrap("(", join(args, ", "), ")")) +
            (repeatable ? " repeatable" : "") +
            " on " +
            join(locations, " | ")
          );
        }),
        SchemaExtension: function SchemaExtension(_ref32) {
          var directives = _ref32.directives,
            operationTypes = _ref32.operationTypes;
          return join(
            ["extend schema", join(directives, " "), block(operationTypes)],
            " "
          );
        },
        ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
          var name = _ref33.name,
            directives = _ref33.directives;
          return join(["extend scalar", name, join(directives, " ")], " ");
        },
        ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
          var name = _ref34.name,
            interfaces = _ref34.interfaces,
            directives = _ref34.directives,
            fields = _ref34.fields;
          return join(
            [
              "extend type",
              name,
              wrap("implements ", join(interfaces, " & ")),
              join(directives, " "),
              block(fields)
            ],
            " "
          );
        },
        InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
          var name = _ref35.name,
            interfaces = _ref35.interfaces,
            directives = _ref35.directives,
            fields = _ref35.fields;
          return join(
            [
              "extend interface",
              name,
              wrap("implements ", join(interfaces, " & ")),
              join(directives, " "),
              block(fields)
            ],
            " "
          );
        },
        UnionTypeExtension: function UnionTypeExtension(_ref36) {
          var name = _ref36.name,
            directives = _ref36.directives,
            types = _ref36.types;
          return join(
            [
              "extend union",
              name,
              join(directives, " "),
              types && types.length !== 0 ? "= " + join(types, " | ") : ""
            ],
            " "
          );
        },
        EnumTypeExtension: function EnumTypeExtension(_ref37) {
          var name = _ref37.name,
            directives = _ref37.directives,
            values = _ref37.values;
          return join(
            ["extend enum", name, join(directives, " "), block(values)],
            " "
          );
        },
        InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
          var name = _ref38.name,
            directives = _ref38.directives,
            fields = _ref38.fields;
          return join(
            ["extend input", name, join(directives, " "), block(fields)],
            " "
          );
        }
      };

      function addDescription(cb) {
        return function(node) {
          return join([node.description, cb(node)], "\n");
        };
      }
      /**
       * Given maybeArray, print an empty string if it is null or empty, otherwise
       * print all items together separated by separator if provided
       */

      function join(maybeArray) {
        var _maybeArray$filter$jo;

        var separator =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : "";
        return (_maybeArray$filter$jo =
          maybeArray === null || maybeArray === void 0
            ? void 0
            : maybeArray
                .filter(function(x) {
                  return x;
                })
                .join(separator)) !== null && _maybeArray$filter$jo !== void 0
          ? _maybeArray$filter$jo
          : "";
      }
      /**
       * Given array, print each item on its own line, wrapped in an
       * indented "{ }" block.
       */

      function block(array) {
        return wrap("{\n", indent(join(array, "\n")), "\n}");
      }
      /**
       * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
       */

      function wrap(start, maybeString) {
        var end =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : "";
        return maybeString != null && maybeString !== ""
          ? start + maybeString + end
          : "";
      }

      function indent(str) {
        return wrap("  ", str.replace(/\n/g, "\n  "));
      }

      function isMultiline(str) {
        return str.indexOf("\n") !== -1;
      }

      function hasMultilineItems(maybeArray) {
        return maybeArray != null && maybeArray.some(isMultiline);
      }

      /***/
    },

    /***/ gi2y: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var MAX_SAFE_INTEGER = __webpack_require__("yVdY");

      var Call = __webpack_require__("3lu9");
      var CreateDataPropertyOrThrow = __webpack_require__("BwaV");
      var Get = __webpack_require__("V/hC");
      var HasProperty = __webpack_require__("LidF");
      var IsArray = __webpack_require__("plxK");
      var LengthOfArrayLike = __webpack_require__("ZXHR");
      var ToString = __webpack_require__("SYRf");

      // https://262.ecma-international.org/11.0/#sec-flattenintoarray

      // eslint-disable-next-line max-params
      module.exports = function FlattenIntoArray(
        target,
        source,
        sourceLen,
        start,
        depth
      ) {
        var mapperFunction;
        if (arguments.length > 5) {
          mapperFunction = arguments[5];
        }

        var targetIndex = start;
        var sourceIndex = 0;
        while (sourceIndex < sourceLen) {
          var P = ToString(sourceIndex);
          var exists = HasProperty(source, P);
          if (exists === true) {
            var element = Get(source, P);
            if (typeof mapperFunction !== "undefined") {
              if (arguments.length <= 6) {
                throw new $TypeError(
                  "Assertion failed: thisArg is required when mapperFunction is provided"
                );
              }
              element = Call(mapperFunction, arguments[6], [
                element,
                sourceIndex,
                source
              ]);
            }
            var shouldFlatten = false;
            if (depth > 0) {
              shouldFlatten = IsArray(element);
            }
            if (shouldFlatten) {
              var elementLen = LengthOfArrayLike(element);
              targetIndex = FlattenIntoArray(
                target,
                element,
                elementLen,
                targetIndex,
                depth - 1
              );
            } else {
              if (targetIndex >= MAX_SAFE_INTEGER) {
                throw new $TypeError("index too large");
              }
              CreateDataPropertyOrThrow(target, ToString(targetIndex), element);
              targetIndex += 1;
            }
          }
          sourceIndex += 1;
        }

        return targetIndex;
      };

      /***/
    },

    /***/ glbf: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.syntaxError = syntaxError;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Produces a GraphQLError representing a syntax error, containing useful
       * descriptive information about the syntax error's position in the source.
       */
      function syntaxError(source, position, description) {
        return new _GraphQLError.GraphQLError(
          "Syntax Error: ".concat(description),
          undefined,
          source,
          [position]
        );
      }

      /***/
    },

    /***/ "h49/": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.separateOperations = separateOperations;

      var _kinds = __webpack_require__("xaK5");

      var _visitor = __webpack_require__("tqCx");

      /**
       * separateOperations accepts a single AST document which may contain many
       * operations and fragments and returns a collection of AST documents each of
       * which contains a single operation as well the fragment definitions it
       * refers to.
       */
      function separateOperations(documentAST) {
        var operations = [];
        var depGraph = Object.create(null); // Populate metadata and build a dependency graph.

        for (
          var _i2 = 0, _documentAST$definiti2 = documentAST.definitions;
          _i2 < _documentAST$definiti2.length;
          _i2++
        ) {
          var definitionNode = _documentAST$definiti2[_i2];

          switch (definitionNode.kind) {
            case _kinds.Kind.OPERATION_DEFINITION:
              operations.push(definitionNode);
              break;

            case _kinds.Kind.FRAGMENT_DEFINITION:
              depGraph[definitionNode.name.value] = collectDependencies(
                definitionNode.selectionSet
              );
              break;
          }
        } // For each operation, produce a new synthesized AST which includes only what
        // is necessary for completing that operation.

        var separatedDocumentASTs = Object.create(null);

        var _loop = function _loop(_i4) {
          var operation = operations[_i4];
          var dependencies = new Set();

          for (
            var _i6 = 0,
              _collectDependencies2 = collectDependencies(
                operation.selectionSet
              );
            _i6 < _collectDependencies2.length;
            _i6++
          ) {
            var fragmentName = _collectDependencies2[_i6];
            collectTransitiveDependencies(dependencies, depGraph, fragmentName);
          } // Provides the empty string for anonymous operations.

          var operationName = operation.name ? operation.name.value : ""; // The list of definition nodes to be included for this operation, sorted
          // to retain the same order as the original document.

          separatedDocumentASTs[operationName] = {
            kind: _kinds.Kind.DOCUMENT,
            definitions: documentAST.definitions.filter(function(node) {
              return (
                node === operation ||
                (node.kind === _kinds.Kind.FRAGMENT_DEFINITION &&
                  dependencies.has(node.name.value))
              );
            })
          };
        };

        for (var _i4 = 0; _i4 < operations.length; _i4++) {
          _loop(_i4);
        }

        return separatedDocumentASTs;
      }

      // From a dependency graph, collects a list of transitive dependencies by
      // recursing through a dependency graph.
      function collectTransitiveDependencies(collected, depGraph, fromName) {
        if (!collected.has(fromName)) {
          collected.add(fromName);
          var immediateDeps = depGraph[fromName];

          if (immediateDeps !== undefined) {
            for (var _i8 = 0; _i8 < immediateDeps.length; _i8++) {
              var toName = immediateDeps[_i8];
              collectTransitiveDependencies(collected, depGraph, toName);
            }
          }
        }
      }

      function collectDependencies(selectionSet) {
        var dependencies = [];
        (0, _visitor.visit)(selectionSet, {
          FragmentSpread: function FragmentSpread(node) {
            dependencies.push(node.name.value);
          }
        });
        return dependencies;
      }

      /***/
    },

    /***/ hOcR: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // var modulo = require('./modulo');
      var $floor = Math.floor;

      // http://262.ecma-international.org/5.1/#sec-5.2

      module.exports = function floor(x) {
        // return x - modulo(x, 1);
        return $floor(x);
      };

      /***/
    },

    /***/ hYbJ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var assertRecord = __webpack_require__("DELC");

      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-frompropertydescriptor

      module.exports = function FromPropertyDescriptor(Desc) {
        if (typeof Desc === "undefined") {
          return Desc;
        }

        assertRecord(Type, "Property Descriptor", "Desc", Desc);

        var obj = {};
        if ("[[Value]]" in Desc) {
          obj.value = Desc["[[Value]]"];
        }
        if ("[[Writable]]" in Desc) {
          obj.writable = Desc["[[Writable]]"];
        }
        if ("[[Get]]" in Desc) {
          obj.get = Desc["[[Get]]"];
        }
        if ("[[Set]]" in Desc) {
          obj.set = Desc["[[Set]]"];
        }
        if ("[[Enumerable]]" in Desc) {
          obj.enumerable = Desc["[[Enumerable]]"];
        }
        if ("[[Configurable]]" in Desc) {
          obj.configurable = Desc["[[Configurable]]"];
        }
        return obj;
      };

      /***/
    },

    /***/ hm8L: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var abs = __webpack_require__("bs7P");
      var floor = __webpack_require__("hOcR");
      var ToNumber = __webpack_require__("MlE5");

      var $isNaN = __webpack_require__("7qPd");
      var $isFinite = __webpack_require__("QO3R");
      var $sign = __webpack_require__("Bgkv");

      // http://262.ecma-international.org/5.1/#sec-9.4

      module.exports = function ToInteger(value) {
        var number = ToNumber(value);
        if ($isNaN(number)) {
          return 0;
        }
        if (number === 0 || !$isFinite(number)) {
          return number;
        }
        return $sign(number) * floor(abs(number));
      };

      /***/
    },

    /***/ hzsB: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isDefinitionNode = isDefinitionNode;
      exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
      exports.isSelectionNode = isSelectionNode;
      exports.isValueNode = isValueNode;
      exports.isTypeNode = isTypeNode;
      exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
      exports.isTypeDefinitionNode = isTypeDefinitionNode;
      exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
      exports.isTypeExtensionNode = isTypeExtensionNode;

      var _kinds = __webpack_require__("xaK5");

      function isDefinitionNode(node) {
        return (
          isExecutableDefinitionNode(node) ||
          isTypeSystemDefinitionNode(node) ||
          isTypeSystemExtensionNode(node)
        );
      }

      function isExecutableDefinitionNode(node) {
        return (
          node.kind === _kinds.Kind.OPERATION_DEFINITION ||
          node.kind === _kinds.Kind.FRAGMENT_DEFINITION
        );
      }

      function isSelectionNode(node) {
        return (
          node.kind === _kinds.Kind.FIELD ||
          node.kind === _kinds.Kind.FRAGMENT_SPREAD ||
          node.kind === _kinds.Kind.INLINE_FRAGMENT
        );
      }

      function isValueNode(node) {
        return (
          node.kind === _kinds.Kind.VARIABLE ||
          node.kind === _kinds.Kind.INT ||
          node.kind === _kinds.Kind.FLOAT ||
          node.kind === _kinds.Kind.STRING ||
          node.kind === _kinds.Kind.BOOLEAN ||
          node.kind === _kinds.Kind.NULL ||
          node.kind === _kinds.Kind.ENUM ||
          node.kind === _kinds.Kind.LIST ||
          node.kind === _kinds.Kind.OBJECT
        );
      }

      function isTypeNode(node) {
        return (
          node.kind === _kinds.Kind.NAMED_TYPE ||
          node.kind === _kinds.Kind.LIST_TYPE ||
          node.kind === _kinds.Kind.NON_NULL_TYPE
        );
      }

      function isTypeSystemDefinitionNode(node) {
        return (
          node.kind === _kinds.Kind.SCHEMA_DEFINITION ||
          isTypeDefinitionNode(node) ||
          node.kind === _kinds.Kind.DIRECTIVE_DEFINITION
        );
      }

      function isTypeDefinitionNode(node) {
        return (
          node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION ||
          node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION ||
          node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION ||
          node.kind === _kinds.Kind.UNION_TYPE_DEFINITION ||
          node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION ||
          node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION
        );
      }

      function isTypeSystemExtensionNode(node) {
        return (
          node.kind === _kinds.Kind.SCHEMA_EXTENSION ||
          isTypeExtensionNode(node)
        );
      }

      function isTypeExtensionNode(node) {
        return (
          node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION ||
          node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION ||
          node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION ||
          node.kind === _kinds.Kind.UNION_TYPE_EXTENSION ||
          node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION ||
          node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION
        );
      }

      /***/
    },

    /***/ i2do: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;

      var _find = _interopRequireDefault(__webpack_require__("Mj15"));

      var _objectEntries3 = _interopRequireDefault(__webpack_require__("NKuU"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _printer = __webpack_require__("gCJq");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function reasonMessage(reason) {
        if (Array.isArray(reason)) {
          return reason
            .map(function(_ref) {
              var responseName = _ref[0],
                subReason = _ref[1];
              return (
                'subfields "'.concat(responseName, '" conflict because ') +
                reasonMessage(subReason)
              );
            })
            .join(" and ");
        }

        return reason;
      }
      /**
       * Overlapping fields can be merged
       *
       * A selection set is only valid if all fields (including spreading any
       * fragments) either correspond to distinct response names or can be merged
       * without ambiguity.
       */

      function OverlappingFieldsCanBeMergedRule(context) {
        // A memoization for when two fragments are compared "between" each other for
        // conflicts. Two fragments may be compared many times, so memoizing this can
        // dramatically improve the performance of this validator.
        var comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
        // selection set. Selection sets may be asked for this information multiple
        // times, so this improves the performance of this validator.

        var cachedFieldsAndFragmentNames = new Map();
        return {
          SelectionSet: function SelectionSet(selectionSet) {
            var conflicts = findConflictsWithinSelectionSet(
              context,
              cachedFieldsAndFragmentNames,
              comparedFragmentPairs,
              context.getParentType(),
              selectionSet
            );

            for (var _i2 = 0; _i2 < conflicts.length; _i2++) {
              var _ref3 = conflicts[_i2];
              var _ref2$ = _ref3[0];
              var responseName = _ref2$[0];
              var reason = _ref2$[1];
              var fields1 = _ref3[1];
              var fields2 = _ref3[2];
              var reasonMsg = reasonMessage(reason);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Fields "'
                    .concat(responseName, '" conflict because ')
                    .concat(
                      reasonMsg,
                      ". Use different aliases on the fields to fetch both if this was intentional."
                    ),
                  fields1.concat(fields2)
                )
              );
            }
          }
        };
      }

      /**
       * Algorithm:
       *
       * Conflicts occur when two fields exist in a query which will produce the same
       * response name, but represent differing values, thus creating a conflict.
       * The algorithm below finds all conflicts via making a series of comparisons
       * between fields. In order to compare as few fields as possible, this makes
       * a series of comparisons "within" sets of fields and "between" sets of fields.
       *
       * Given any selection set, a collection produces both a set of fields by
       * also including all inline fragments, as well as a list of fragments
       * referenced by fragment spreads.
       *
       * A) Each selection set represented in the document first compares "within" its
       * collected set of fields, finding any conflicts between every pair of
       * overlapping fields.
       * Note: This is the *only time* that a the fields "within" a set are compared
       * to each other. After this only fields "between" sets are compared.
       *
       * B) Also, if any fragment is referenced in a selection set, then a
       * comparison is made "between" the original set of fields and the
       * referenced fragment.
       *
       * C) Also, if multiple fragments are referenced, then comparisons
       * are made "between" each referenced fragment.
       *
       * D) When comparing "between" a set of fields and a referenced fragment, first
       * a comparison is made between each field in the original set of fields and
       * each field in the the referenced set of fields.
       *
       * E) Also, if any fragment is referenced in the referenced selection set,
       * then a comparison is made "between" the original set of fields and the
       * referenced fragment (recursively referring to step D).
       *
       * F) When comparing "between" two fragments, first a comparison is made between
       * each field in the first referenced set of fields and each field in the the
       * second referenced set of fields.
       *
       * G) Also, any fragments referenced by the first must be compared to the
       * second, and any fragments referenced by the second must be compared to the
       * first (recursively referring to step F).
       *
       * H) When comparing two fields, if both have selection sets, then a comparison
       * is made "between" both selection sets, first comparing the set of fields in
       * the first selection set with the set of fields in the second.
       *
       * I) Also, if any fragment is referenced in either selection set, then a
       * comparison is made "between" the other set of fields and the
       * referenced fragment.
       *
       * J) Also, if two fragments are referenced in both selection sets, then a
       * comparison is made "between" the two fragments.
       *
       */
      // Find all conflicts found "within" a selection set, including those found
      // via spreading in fragments. Called when visiting each SelectionSet in the
      // GraphQL Document.
      function findConflictsWithinSelectionSet(
        context,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        parentType,
        selectionSet
      ) {
        var conflicts = [];

        var _getFieldsAndFragment = getFieldsAndFragmentNames(
            context,
            cachedFieldsAndFragmentNames,
            parentType,
            selectionSet
          ),
          fieldMap = _getFieldsAndFragment[0],
          fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts "within" the fields of this selection set.
        // Note: this is the *only place* `collectConflictsWithin` is called.

        collectConflictsWithin(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          fieldMap
        );

        if (fragmentNames.length !== 0) {
          // (B) Then collect conflicts between these fields and those represented by
          // each spread fragment name found.
          for (var i = 0; i < fragmentNames.length; i++) {
            collectConflictsBetweenFieldsAndFragment(
              context,
              conflicts,
              cachedFieldsAndFragmentNames,
              comparedFragmentPairs,
              false,
              fieldMap,
              fragmentNames[i]
            ); // (C) Then compare this fragment with all other fragments found in this
            // selection set to collect conflicts between fragments spread together.
            // This compares each item in the list of fragment names to every other
            // item in that same list (except for itself).

            for (var j = i + 1; j < fragmentNames.length; j++) {
              collectConflictsBetweenFragments(
                context,
                conflicts,
                cachedFieldsAndFragmentNames,
                comparedFragmentPairs,
                false,
                fragmentNames[i],
                fragmentNames[j]
              );
            }
          }
        }

        return conflicts;
      } // Collect all conflicts found between a set of fields and a fragment reference
      // including via spreading in any nested fragments.

      function collectConflictsBetweenFieldsAndFragment(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fieldMap,
        fragmentName
      ) {
        var fragment = context.getFragment(fragmentName);

        if (!fragment) {
          return;
        }

        var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(
            context,
            cachedFieldsAndFragmentNames,
            fragment
          ),
          fieldMap2 = _getReferencedFieldsA[0],
          fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.

        if (fieldMap === fieldMap2) {
          return;
        } // (D) First collect any conflicts between the provided collection of fields
        // and the collection of fields represented by the given fragment.

        collectConflictsBetween(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap,
          fieldMap2
        ); // (E) Then collect any conflicts between the provided collection of fields
        // and any fragment names found in the given fragment.

        for (var i = 0; i < fragmentNames2.length; i++) {
          collectConflictsBetweenFieldsAndFragment(
            context,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            areMutuallyExclusive,
            fieldMap,
            fragmentNames2[i]
          );
        }
      } // Collect all conflicts found between two fragments, including via spreading in
      // any nested fragments.

      function collectConflictsBetweenFragments(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fragmentName1,
        fragmentName2
      ) {
        // No need to compare a fragment to itself.
        if (fragmentName1 === fragmentName2) {
          return;
        } // Memoize so two fragments are not compared for conflicts more than once.

        if (
          comparedFragmentPairs.has(
            fragmentName1,
            fragmentName2,
            areMutuallyExclusive
          )
        ) {
          return;
        }

        comparedFragmentPairs.add(
          fragmentName1,
          fragmentName2,
          areMutuallyExclusive
        );
        var fragment1 = context.getFragment(fragmentName1);
        var fragment2 = context.getFragment(fragmentName2);

        if (!fragment1 || !fragment2) {
          return;
        }

        var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(
            context,
            cachedFieldsAndFragmentNames,
            fragment1
          ),
          fieldMap1 = _getReferencedFieldsA2[0],
          fragmentNames1 = _getReferencedFieldsA2[1];

        var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(
            context,
            cachedFieldsAndFragmentNames,
            fragment2
          ),
          fieldMap2 = _getReferencedFieldsA3[0],
          fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields
        // (not including any nested fragments).

        collectConflictsBetween(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap1,
          fieldMap2
        ); // (G) Then collect conflicts between the first fragment and any nested
        // fragments spread in the second fragment.

        for (var j = 0; j < fragmentNames2.length; j++) {
          collectConflictsBetweenFragments(
            context,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            areMutuallyExclusive,
            fragmentName1,
            fragmentNames2[j]
          );
        } // (G) Then collect conflicts between the second fragment and any nested
        // fragments spread in the first fragment.

        for (var i = 0; i < fragmentNames1.length; i++) {
          collectConflictsBetweenFragments(
            context,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            areMutuallyExclusive,
            fragmentNames1[i],
            fragmentName2
          );
        }
      } // Find all conflicts found between two selection sets, including those found
      // via spreading in fragments. Called when determining if conflicts exist
      // between the sub-fields of two overlapping fields.

      function findConflictsBetweenSubSelectionSets(
        context,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        areMutuallyExclusive,
        parentType1,
        selectionSet1,
        parentType2,
        selectionSet2
      ) {
        var conflicts = [];

        var _getFieldsAndFragment2 = getFieldsAndFragmentNames(
            context,
            cachedFieldsAndFragmentNames,
            parentType1,
            selectionSet1
          ),
          fieldMap1 = _getFieldsAndFragment2[0],
          fragmentNames1 = _getFieldsAndFragment2[1];

        var _getFieldsAndFragment3 = getFieldsAndFragmentNames(
            context,
            cachedFieldsAndFragmentNames,
            parentType2,
            selectionSet2
          ),
          fieldMap2 = _getFieldsAndFragment3[0],
          fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.

        collectConflictsBetween(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap1,
          fieldMap2
        ); // (I) Then collect conflicts between the first collection of fields and
        // those referenced by each fragment name associated with the second.

        if (fragmentNames2.length !== 0) {
          for (var j = 0; j < fragmentNames2.length; j++) {
            collectConflictsBetweenFieldsAndFragment(
              context,
              conflicts,
              cachedFieldsAndFragmentNames,
              comparedFragmentPairs,
              areMutuallyExclusive,
              fieldMap1,
              fragmentNames2[j]
            );
          }
        } // (I) Then collect conflicts between the second collection of fields and
        // those referenced by each fragment name associated with the first.

        if (fragmentNames1.length !== 0) {
          for (var i = 0; i < fragmentNames1.length; i++) {
            collectConflictsBetweenFieldsAndFragment(
              context,
              conflicts,
              cachedFieldsAndFragmentNames,
              comparedFragmentPairs,
              areMutuallyExclusive,
              fieldMap2,
              fragmentNames1[i]
            );
          }
        } // (J) Also collect conflicts between any fragment names by the first and
        // fragment names by the second. This compares each item in the first set of
        // names to each item in the second set of names.

        for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {
          for (var _j = 0; _j < fragmentNames2.length; _j++) {
            collectConflictsBetweenFragments(
              context,
              conflicts,
              cachedFieldsAndFragmentNames,
              comparedFragmentPairs,
              areMutuallyExclusive,
              fragmentNames1[_i3],
              fragmentNames2[_j]
            );
          }
        }

        return conflicts;
      } // Collect all Conflicts "within" one collection of fields.

      function collectConflictsWithin(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        fieldMap
      ) {
        // A field map is a keyed collection, where each key represents a response
        // name and the value at that key is a list of all fields which provide that
        // response name. For every response name, if there are multiple fields, they
        // must be compared to find a potential conflict.
        for (
          var _i5 = 0, _objectEntries2 = (0, _objectEntries3.default)(fieldMap);
          _i5 < _objectEntries2.length;
          _i5++
        ) {
          var _ref5 = _objectEntries2[_i5];
          var responseName = _ref5[0];
          var fields = _ref5[1];

          // This compares every field in the list to every other field in this list
          // (except to itself). If the list only has one item, nothing needs to
          // be compared.
          if (fields.length > 1) {
            for (var i = 0; i < fields.length; i++) {
              for (var j = i + 1; j < fields.length; j++) {
                var conflict = findConflict(
                  context,
                  cachedFieldsAndFragmentNames,
                  comparedFragmentPairs,
                  false, // within one collection is never mutually exclusive
                  responseName,
                  fields[i],
                  fields[j]
                );

                if (conflict) {
                  conflicts.push(conflict);
                }
              }
            }
          }
        }
      } // Collect all Conflicts between two collections of fields. This is similar to,
      // but different from the `collectConflictsWithin` function above. This check
      // assumes that `collectConflictsWithin` has already been called on each
      // provided collection of fields. This is true because this validator traverses
      // each individual selection set.

      function collectConflictsBetween(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        parentFieldsAreMutuallyExclusive,
        fieldMap1,
        fieldMap2
      ) {
        // A field map is a keyed collection, where each key represents a response
        // name and the value at that key is a list of all fields which provide that
        // response name. For any response name which appears in both provided field
        // maps, each field from the first field map must be compared to every field
        // in the second field map to find potential conflicts.
        for (
          var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1);
          _i7 < _Object$keys2.length;
          _i7++
        ) {
          var responseName = _Object$keys2[_i7];
          var fields2 = fieldMap2[responseName];

          if (fields2) {
            var fields1 = fieldMap1[responseName];

            for (var i = 0; i < fields1.length; i++) {
              for (var j = 0; j < fields2.length; j++) {
                var conflict = findConflict(
                  context,
                  cachedFieldsAndFragmentNames,
                  comparedFragmentPairs,
                  parentFieldsAreMutuallyExclusive,
                  responseName,
                  fields1[i],
                  fields2[j]
                );

                if (conflict) {
                  conflicts.push(conflict);
                }
              }
            }
          }
        }
      } // Determines if there is a conflict between two particular fields, including
      // comparing their sub-fields.

      function findConflict(
        context,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        parentFieldsAreMutuallyExclusive,
        responseName,
        field1,
        field2
      ) {
        var parentType1 = field1[0],
          node1 = field1[1],
          def1 = field1[2];
        var parentType2 = field2[0],
          node2 = field2[1],
          def2 = field2[2]; // If it is known that two fields could not possibly apply at the same
        // time, due to the parent types, then it is safe to permit them to diverge
        // in aliased field or arguments used as they will not present any ambiguity
        // by differing.
        // It is known that two parent types could never overlap if they are
        // different Object types. Interface or Union types might overlap - if not
        // in the current state of the schema, then perhaps in some future version,
        // thus may not safely diverge.

        var areMutuallyExclusive =
          parentFieldsAreMutuallyExclusive ||
          (parentType1 !== parentType2 &&
            (0, _definition.isObjectType)(parentType1) &&
            (0, _definition.isObjectType)(parentType2));

        if (!areMutuallyExclusive) {
          var _node1$arguments, _node2$arguments;

          // Two aliases must refer to the same field.
          var name1 = node1.name.value;
          var name2 = node2.name.value;

          if (name1 !== name2) {
            return [
              [
                responseName,
                '"'
                  .concat(name1, '" and "')
                  .concat(name2, '" are different fields')
              ],
              [node1],
              [node2]
            ];
          } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var args1 =
            (_node1$arguments = node1.arguments) !== null &&
            _node1$arguments !== void 0
              ? _node1$arguments
              : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

          var args2 =
            (_node2$arguments = node2.arguments) !== null &&
            _node2$arguments !== void 0
              ? _node2$arguments
              : []; // Two field calls must have the same arguments.

          if (!sameArguments(args1, args2)) {
            return [
              [responseName, "they have differing arguments"],
              [node1],
              [node2]
            ];
          }
        } // The return type for each field.

        var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
        var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;

        if (type1 && type2 && doTypesConflict(type1, type2)) {
          return [
            [
              responseName,
              'they return conflicting types "'
                .concat((0, _inspect.default)(type1), '" and "')
                .concat((0, _inspect.default)(type2), '"')
            ],
            [node1],
            [node2]
          ];
        } // Collect and compare sub-fields. Use the same "visited fragment names" list
        // for both collections so fields in a fragment reference are never
        // compared to themselves.

        var selectionSet1 = node1.selectionSet;
        var selectionSet2 = node2.selectionSet;

        if (selectionSet1 && selectionSet2) {
          var conflicts = findConflictsBetweenSubSelectionSets(
            context,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            areMutuallyExclusive,
            (0, _definition.getNamedType)(type1),
            selectionSet1,
            (0, _definition.getNamedType)(type2),
            selectionSet2
          );
          return subfieldConflicts(conflicts, responseName, node1, node2);
        }
      }

      function sameArguments(arguments1, arguments2) {
        if (arguments1.length !== arguments2.length) {
          return false;
        }

        return arguments1.every(function(argument1) {
          var argument2 = (0, _find.default)(arguments2, function(argument) {
            return argument.name.value === argument1.name.value;
          });

          if (!argument2) {
            return false;
          }

          return sameValue(argument1.value, argument2.value);
        });
      }

      function sameValue(value1, value2) {
        return (0, _printer.print)(value1) === (0, _printer.print)(value2);
      } // Two types conflict if both types could not apply to a value simultaneously.
      // Composite types are ignored as their individual field types will be compared
      // later recursively. However List and Non-Null types must match.

      function doTypesConflict(type1, type2) {
        if ((0, _definition.isListType)(type1)) {
          return (0, _definition.isListType)(type2)
            ? doTypesConflict(type1.ofType, type2.ofType)
            : true;
        }

        if ((0, _definition.isListType)(type2)) {
          return true;
        }

        if ((0, _definition.isNonNullType)(type1)) {
          return (0, _definition.isNonNullType)(type2)
            ? doTypesConflict(type1.ofType, type2.ofType)
            : true;
        }

        if ((0, _definition.isNonNullType)(type2)) {
          return true;
        }

        if (
          (0, _definition.isLeafType)(type1) ||
          (0, _definition.isLeafType)(type2)
        ) {
          return type1 !== type2;
        }

        return false;
      } // Given a selection set, return the collection of fields (a mapping of response
      // name to field nodes and definitions) as well as a list of fragment names
      // referenced via fragment spreads.

      function getFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        parentType,
        selectionSet
      ) {
        var cached = cachedFieldsAndFragmentNames.get(selectionSet);

        if (!cached) {
          var nodeAndDefs = Object.create(null);
          var fragmentNames = Object.create(null);

          _collectFieldsAndFragmentNames(
            context,
            parentType,
            selectionSet,
            nodeAndDefs,
            fragmentNames
          );

          cached = [nodeAndDefs, Object.keys(fragmentNames)];
          cachedFieldsAndFragmentNames.set(selectionSet, cached);
        }

        return cached;
      } // Given a reference to a fragment, return the represented collection of fields
      // as well as a list of nested fragment names referenced via fragment spreads.

      function getReferencedFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        fragment
      ) {
        // Short-circuit building a type from the node if possible.
        var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);

        if (cached) {
          return cached;
        }

        var fragmentType = (0, _typeFromAST.typeFromAST)(
          context.getSchema(),
          fragment.typeCondition
        );
        return getFieldsAndFragmentNames(
          context,
          cachedFieldsAndFragmentNames,
          fragmentType,
          fragment.selectionSet
        );
      }

      function _collectFieldsAndFragmentNames(
        context,
        parentType,
        selectionSet,
        nodeAndDefs,
        fragmentNames
      ) {
        for (
          var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections;
          _i9 < _selectionSet$selecti2.length;
          _i9++
        ) {
          var selection = _selectionSet$selecti2[_i9];

          switch (selection.kind) {
            case _kinds.Kind.FIELD: {
              var fieldName = selection.name.value;
              var fieldDef = void 0;

              if (
                (0, _definition.isObjectType)(parentType) ||
                (0, _definition.isInterfaceType)(parentType)
              ) {
                fieldDef = parentType.getFields()[fieldName];
              }

              var responseName = selection.alias
                ? selection.alias.value
                : fieldName;

              if (!nodeAndDefs[responseName]) {
                nodeAndDefs[responseName] = [];
              }

              nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
              break;
            }

            case _kinds.Kind.FRAGMENT_SPREAD:
              fragmentNames[selection.name.value] = true;
              break;

            case _kinds.Kind.INLINE_FRAGMENT: {
              var typeCondition = selection.typeCondition;
              var inlineFragmentType = typeCondition
                ? (0, _typeFromAST.typeFromAST)(
                    context.getSchema(),
                    typeCondition
                  )
                : parentType;

              _collectFieldsAndFragmentNames(
                context,
                inlineFragmentType,
                selection.selectionSet,
                nodeAndDefs,
                fragmentNames
              );

              break;
            }
          }
        }
      } // Given a series of Conflicts which occurred between two sub-fields, generate
      // a single Conflict.

      function subfieldConflicts(conflicts, responseName, node1, node2) {
        if (conflicts.length > 0) {
          return [
            [
              responseName,
              conflicts.map(function(_ref6) {
                var reason = _ref6[0];
                return reason;
              })
            ],
            conflicts.reduce(
              function(allFields, _ref7) {
                var fields1 = _ref7[1];
                return allFields.concat(fields1);
              },
              [node1]
            ),
            conflicts.reduce(
              function(allFields, _ref8) {
                var fields2 = _ref8[2];
                return allFields.concat(fields2);
              },
              [node2]
            )
          ];
        }
      }
      /**
       * A way to keep track of pairs of things when the ordering of the pair does
       * not matter. We do this by maintaining a sort of double adjacency sets.
       */

      var PairSet = /*#__PURE__*/ (function() {
        function PairSet() {
          this._data = Object.create(null);
        }

        var _proto = PairSet.prototype;

        _proto.has = function has(a, b, areMutuallyExclusive) {
          var first = this._data[a];
          var result = first && first[b];

          if (result === undefined) {
            return false;
          } // areMutuallyExclusive being false is a superset of being true,
          // hence if we want to know if this PairSet "has" these two with no
          // exclusivity, we have to ensure it was added as such.

          if (areMutuallyExclusive === false) {
            return result === false;
          }

          return true;
        };

        _proto.add = function add(a, b, areMutuallyExclusive) {
          this._pairSetAdd(a, b, areMutuallyExclusive);

          this._pairSetAdd(b, a, areMutuallyExclusive);
        };

        _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {
          var map = this._data[a];

          if (!map) {
            map = Object.create(null);
            this._data[a] = map;
          }

          map[b] = areMutuallyExclusive;
        };

        return PairSet;
      })();

      /***/
    },

    /***/ "igW/": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.snakeCase = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var dot_case_1 = __webpack_require__("sgrp");
      function snakeCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return dot_case_1.dotCase(
          input,
          tslib_1.__assign({ delimiter: "_" }, options)
        );
      }
      exports.snakeCase = snakeCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ jK02: /***/ function(module, exports) {
      module.exports = require("util");

      /***/
    },

    /***/ juUo: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.constantCase = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var no_case_1 = __webpack_require__("3yyI");
      var upper_case_1 = __webpack_require__("++DX");
      function constantCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return no_case_1.noCase(
          input,
          tslib_1.__assign(
            { delimiter: "_", transform: upper_case_1.upperCase },
            options
          )
        );
      }
      exports.constantCase = constantCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ k84H: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isSource = isSource;
      exports.Source = void 0;

      var _symbols = __webpack_require__("6CEn");

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _instanceOf = _interopRequireDefault(__webpack_require__("VwI2"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      /**
       * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
       * optional, but they are useful for clients who store GraphQL documents in source files.
       * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
       * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
       * The `line` and `column` properties in `locationOffset` are 1-indexed.
       */
      var Source = /*#__PURE__*/ (function() {
        function Source(body) {
          var name =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "GraphQL request";
          var locationOffset =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : {
                  line: 1,
                  column: 1
                };
          typeof body === "string" ||
            (0, _devAssert.default)(
              0,
              "Body must be a string. Received: ".concat(
                (0, _inspect.default)(body),
                "."
              )
            );
          this.body = body;
          this.name = name;
          this.locationOffset = locationOffset;
          this.locationOffset.line > 0 ||
            (0, _devAssert.default)(
              0,
              "line in locationOffset is 1-indexed and must be positive."
            );
          this.locationOffset.column > 0 ||
            (0, _devAssert.default)(
              0,
              "column in locationOffset is 1-indexed and must be positive."
            );
        } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(Source, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "Source";
            }
          }
        ]);

        return Source;
      })();
      /**
       * Test if the given value is a Source object.
       *
       * @internal
       */

      exports.Source = Source;

      // eslint-disable-next-line no-redeclare
      function isSource(source) {
        return (0, _instanceOf.default)(source, Source);
      }

      /***/
    },

    /***/ k8TY: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = mapAsyncIterator;

      var _symbols = __webpack_require__("6CEn");

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Given an AsyncIterable and a callback function, return an AsyncIterator
       * which produces values mapped via calling the callback function.
       */
      function mapAsyncIterator(iterable, callback, rejectCallback) {
        // $FlowFixMe[prop-missing]
        var iteratorMethod = iterable[_symbols.SYMBOL_ASYNC_ITERATOR];
        var iterator = iteratorMethod.call(iterable);
        var $return;
        var abruptClose;

        if (typeof iterator.return === "function") {
          $return = iterator.return;

          abruptClose = function abruptClose(error) {
            var rethrow = function rethrow() {
              return Promise.reject(error);
            };

            return $return.call(iterator).then(rethrow, rethrow);
          };
        }

        function mapResult(result) {
          return result.done
            ? result
            : asyncMapValue(result.value, callback).then(
                iteratorResult,
                abruptClose
              );
        }

        var mapReject;

        if (rejectCallback) {
          // Capture rejectCallback to ensure it cannot be null.
          var reject = rejectCallback;

          mapReject = function mapReject(error) {
            return asyncMapValue(error, reject).then(
              iteratorResult,
              abruptClose
            );
          };
        }
        /* TODO: Flow doesn't support symbols as keys:
     https://github.com/facebook/flow/issues/3258 */

        return _defineProperty(
          {
            next: function next() {
              return iterator.next().then(mapResult, mapReject);
            },
            return: function _return() {
              return $return
                ? $return.call(iterator).then(mapResult, mapReject)
                : Promise.resolve({
                    value: undefined,
                    done: true
                  });
            },
            throw: function _throw(error) {
              if (typeof iterator.throw === "function") {
                return iterator.throw(error).then(mapResult, mapReject);
              }

              return Promise.reject(error).catch(abruptClose);
            }
          },
          _symbols.SYMBOL_ASYNC_ITERATOR,
          function() {
            return this;
          }
        );
      }

      function asyncMapValue(value, callback) {
        return new Promise(function(resolve) {
          return resolve(callback(value));
        });
      }

      function iteratorResult(value) {
        return {
          value: value,
          done: false
        };
      }

      /***/
    },

    /***/ kCea: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      /* eslint complexity: [2, 18], max-statements: [2, 33] */
      module.exports = function hasSymbols() {
        if (
          typeof Symbol !== "function" ||
          typeof Object.getOwnPropertySymbols !== "function"
        ) {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }

        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }

        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }

        // temp disabled per https://github.com/ljharb/object.assign/issues/17
        // if (sym instanceof Symbol) { return false; }
        // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
        // if (!(symObj instanceof Symbol)) { return false; }

        // if (typeof Symbol.prototype.toString !== 'function') { return false; }
        // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
        if (
          typeof Object.keys === "function" &&
          Object.keys(obj).length !== 0
        ) {
          return false;
        }

        if (
          typeof Object.getOwnPropertyNames === "function" &&
          Object.getOwnPropertyNames(obj).length !== 0
        ) {
          return false;
        }

        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }

        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }

        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }

        return true;
      };

      /***/
    },

    /***/ kIST: /***/ function(module, exports, __webpack_require__) {
      /*!
       * normalize-path <https://github.com/jonschlinkert/normalize-path>
       *
       * Copyright (c) 2014-2017, Jon Schlinkert.
       * Released under the MIT License.
       */

      var removeTrailingSeparator = __webpack_require__("8ocz");

      module.exports = function normalizePath(str, stripTrailing) {
        if (typeof str !== "string") {
          throw new TypeError("expected a string");
        }
        str = str.replace(/[\\\/]+/g, "/");
        if (stripTrailing !== false) {
          str = removeTrailingSeparator(str);
        }
        return str;
      };

      /***/
    },

    /***/ kOHh: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const AggregateError = _interopDefault(__webpack_require__("CApm"));
      const camelCase = __webpack_require__("V/gh");

      const asArray = fns => (Array.isArray(fns) ? fns : fns ? [fns] : []);
      function isEqual(a, b) {
        if (Array.isArray(a) && Array.isArray(b)) {
          if (a.length !== b.length) {
            return false;
          }
          for (let index = 0; index < a.length; index++) {
            if (a[index] !== b[index]) {
              return false;
            }
          }
          return true;
        }
        return a === b || (!a && !b);
      }
      function isNotEqual(a, b) {
        return !isEqual(a, b);
      }
      function isDocumentString(str) {
        // XXX: is-valid-path or is-glob treat SDL as a valid path
        // (`scalar Date` for example)
        // this why checking the extension is fast enough
        // and prevent from parsing the string in order to find out
        // if the string is a SDL
        if (/\.[a-z0-9]+$/i.test(str)) {
          return false;
        }
        try {
          graphql.parse(str);
          return true;
        } catch (e) {}
        return false;
      }
      const invalidPathRegex = /[‘“!%&^<=>`]/;
      function isValidPath(str) {
        return typeof str === "string" && !invalidPathRegex.test(str);
      }
      function compareStrings(a, b) {
        if (a.toString() < b.toString()) {
          return -1;
        }
        if (a.toString() > b.toString()) {
          return 1;
        }
        return 0;
      }
      function nodeToString(a) {
        if ("alias" in a) {
          return a.alias.value;
        }
        if ("name" in a) {
          return a.name.value;
        }
        return a.kind;
      }
      function compareNodes(a, b, customFn) {
        const aStr = nodeToString(a);
        const bStr = nodeToString(b);
        if (typeof customFn === "function") {
          return customFn(aStr, bStr);
        }
        return compareStrings(aStr, bStr);
      }

      function debugLog(...args) {
        if (
          process &&
          process.env &&
          process.env.DEBUG &&
          !process.env.GQL_tools_NODEBUG
        ) {
          // tslint:disable-next-line: no-console
          console.log(...args);
        }
      }

      const fixWindowsPath = path => path.replace(/\\/g, "/");

      const flattenArray = arr =>
        arr.reduce(
          (acc, next) =>
            acc.concat(Array.isArray(next) ? flattenArray(next) : next),
          []
        );

      const MAX_ARRAY_LENGTH = 10;
      const MAX_RECURSIVE_DEPTH = 2;
      /**
       * Used to print values in error messages.
       */
      function inspect(value) {
        return formatValue(value, []);
      }
      function formatValue(value, seenValues) {
        switch (typeof value) {
          case "string":
            return JSON.stringify(value);
          case "function":
            return value.name ? `[function ${value.name}]` : "[function]";
          case "object":
            if (value === null) {
              return "null";
            }
            return formatObjectValue(value, seenValues);
          default:
            return String(value);
        }
      }
      function formatObjectValue(value, previouslySeenValues) {
        if (previouslySeenValues.indexOf(value) !== -1) {
          return "[Circular]";
        }
        const seenValues = [...previouslySeenValues, value];
        const customInspectFn = getCustomFn(value);
        if (customInspectFn !== undefined) {
          const customValue = customInspectFn.call(value);
          // check for infinite recursion
          if (customValue !== value) {
            return typeof customValue === "string"
              ? customValue
              : formatValue(customValue, seenValues);
          }
        } else if (Array.isArray(value)) {
          return formatArray(value, seenValues);
        }
        return formatObject(value, seenValues);
      }
      function formatObject(object, seenValues) {
        const keys = Object.keys(object);
        if (keys.length === 0) {
          return "{}";
        }
        if (seenValues.length > MAX_RECURSIVE_DEPTH) {
          return "[" + getObjectTag(object) + "]";
        }
        const properties = keys.map(key => {
          const value = formatValue(object[key], seenValues);
          return key + ": " + value;
        });
        return "{ " + properties.join(", ") + " }";
      }
      function formatArray(array, seenValues) {
        if (array.length === 0) {
          return "[]";
        }
        if (seenValues.length > MAX_RECURSIVE_DEPTH) {
          return "[Array]";
        }
        const len = Math.min(MAX_ARRAY_LENGTH, array.length);
        const remaining = array.length - len;
        const items = [];
        for (let i = 0; i < len; ++i) {
          items.push(formatValue(array[i], seenValues));
        }
        if (remaining === 1) {
          items.push("... 1 more item");
        } else if (remaining > 1) {
          items.push(`... ${remaining.toString(10)} more items`);
        }
        return "[" + items.join(", ") + "]";
      }
      function getCustomFn(obj) {
        if (typeof obj.inspect === "function") {
          return obj.inspect;
        }
      }
      function getObjectTag(obj) {
        const tag = Object.prototype.toString
          .call(obj)
          .replace(/^\[object /, "")
          .replace(/]$/, "");
        if (tag === "Object" && typeof obj.constructor === "function") {
          const name = obj.constructor.name;
          if (typeof name === "string" && name !== "") {
            return name;
          }
        }
        return tag;
      }

      /**
       * Prepares an object map of argument values given a list of argument
       * definitions and list of argument AST nodes.
       *
       * Note: The returned value is a plain Object with a prototype, since it is
       * exposed to user code. Care should be taken to not pull values from the
       * Object prototype.
       */
      function getArgumentValues(def, node, variableValues = {}) {
        var _a;
        const variableMap = Object.entries(variableValues).reduce(
          (prev, [key, value]) => ({
            ...prev,
            [key]: value
          }),
          {}
        );
        const coercedValues = {};
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        const argumentNodes =
          (_a = node.arguments) !== null && _a !== void 0 ? _a : [];
        const argNodeMap = argumentNodes.reduce(
          (prev, arg) => ({
            ...prev,
            [arg.name.value]: arg
          }),
          {}
        );
        for (const argDef of def.args) {
          const name = argDef.name;
          const argType = argDef.type;
          const argumentNode = argNodeMap[name];
          if (!argumentNode) {
            if (argDef.defaultValue !== undefined) {
              coercedValues[name] = argDef.defaultValue;
            } else if (graphql.isNonNullType(argType)) {
              throw new graphql.GraphQLError(
                `Argument "${name}" of required type "${inspect(argType)}" ` +
                  "was not provided.",
                node
              );
            }
            continue;
          }
          const valueNode = argumentNode.value;
          let isNull = valueNode.kind === graphql.Kind.NULL;
          if (valueNode.kind === graphql.Kind.VARIABLE) {
            const variableName = valueNode.name.value;
            if (variableValues == null || !(variableName in variableMap)) {
              if (argDef.defaultValue !== undefined) {
                coercedValues[name] = argDef.defaultValue;
              } else if (graphql.isNonNullType(argType)) {
                throw new graphql.GraphQLError(
                  `Argument "${name}" of required type "${inspect(argType)}" ` +
                    `was provided the variable "$${variableName}" which was not provided a runtime value.`,
                  valueNode
                );
              }
              continue;
            }
            isNull = variableValues[variableName] == null;
          }
          if (isNull && graphql.isNonNullType(argType)) {
            throw new graphql.GraphQLError(
              `Argument "${name}" of non-null type "${inspect(argType)}" ` +
                "must not be null.",
              valueNode
            );
          }
          const coercedValue = graphql.valueFromAST(
            valueNode,
            argType,
            variableValues
          );
          if (coercedValue === undefined) {
            // Note: ValuesOfCorrectTypeRule validation should catch this before
            // execution. This is a runtime check to ensure execution does not
            // continue with an invalid argument value.
            throw new graphql.GraphQLError(
              `Argument "${name}" has invalid value ${graphql.print(
                valueNode
              )}.`,
              valueNode
            );
          }
          coercedValues[name] = coercedValue;
        }
        return coercedValues;
      }

      function getDirectivesInExtensions(
        node,
        pathToDirectivesInExtensions = ["directives"]
      ) {
        const directivesInExtensions = pathToDirectivesInExtensions.reduce(
          (acc, pathSegment) => (acc == null ? acc : acc[pathSegment]),
          node === null || node === void 0 ? void 0 : node.extensions
        );
        return directivesInExtensions;
      }
      function getDirectives(
        schema,
        node,
        pathToDirectivesInExtensions = ["directives"]
      ) {
        const directivesInExtensions = getDirectivesInExtensions(
          node,
          pathToDirectivesInExtensions
        );
        if (directivesInExtensions != null) {
          return directivesInExtensions;
        }
        const schemaDirectives =
          schema && schema.getDirectives ? schema.getDirectives() : [];
        const schemaDirectiveMap = schemaDirectives.reduce(
          (schemaDirectiveMap, schemaDirective) => {
            schemaDirectiveMap[schemaDirective.name] = schemaDirective;
            return schemaDirectiveMap;
          },
          {}
        );
        let astNodes = [];
        if (node.astNode) {
          astNodes.push(node.astNode);
        }
        if ("extensionASTNodes" in node && node.extensionASTNodes) {
          astNodes = [...astNodes, ...node.extensionASTNodes];
        }
        const result = {};
        astNodes.forEach(astNode => {
          if (astNode.directives) {
            astNode.directives.forEach(directiveNode => {
              var _a;
              const schemaDirective =
                schemaDirectiveMap[directiveNode.name.value];
              if (schemaDirective) {
                if (schemaDirective.isRepeatable) {
                  result[schemaDirective.name] =
                    (_a = result[schemaDirective.name]) !== null &&
                    _a !== void 0
                      ? _a
                      : [];
                  result[schemaDirective.name].push(
                    getArgumentValues(schemaDirective, directiveNode)
                  );
                } else {
                  result[schemaDirective.name] = getArgumentValues(
                    schemaDirective,
                    directiveNode
                  );
                }
              }
            });
          }
        });
        return result;
      }

      function parseDirectiveValue(value) {
        switch (value.kind) {
          case graphql.Kind.INT:
            return parseInt(value.value);
          case graphql.Kind.FLOAT:
            return parseFloat(value.value);
          case graphql.Kind.BOOLEAN:
            return Boolean(value.value);
          case graphql.Kind.STRING:
          case graphql.Kind.ENUM:
            return value.value;
          case graphql.Kind.LIST:
            return value.values.map(v => parseDirectiveValue(v));
          case graphql.Kind.OBJECT:
            return value.fields.reduce(
              (prev, v) => ({
                ...prev,
                [v.name.value]: parseDirectiveValue(v.value)
              }),
              {}
            );
          case graphql.Kind.NULL:
            return null;
          default:
            return null;
        }
      }
      function getFieldsWithDirectives(documentNode, options = {}) {
        const result = {};
        let selected = ["ObjectTypeDefinition", "ObjectTypeExtension"];
        if (options.includeInputTypes) {
          selected = [
            ...selected,
            "InputObjectTypeDefinition",
            "InputObjectTypeExtension"
          ];
        }
        const allTypes = documentNode.definitions.filter(obj =>
          selected.includes(obj.kind)
        );
        for (const type of allTypes) {
          const typeName = type.name.value;
          for (const field of type.fields) {
            if (field.directives && field.directives.length > 0) {
              const fieldName = field.name.value;
              const key = `${typeName}.${fieldName}`;
              const directives = field.directives.map(d => ({
                name: d.name.value,
                args: (d.arguments || []).reduce(
                  (prev, arg) => ({
                    ...prev,
                    [arg.name.value]: parseDirectiveValue(arg.value)
                  }),
                  {}
                )
              }));
              result[key] = directives;
            }
          }
        }
        return result;
      }

      function getImplementingTypes(interfaceName, schema) {
        const allTypesMap = schema.getTypeMap();
        const result = [];
        for (const graphqlTypeName in allTypesMap) {
          const graphqlType = allTypesMap[graphqlTypeName];
          if (graphql.isObjectType(graphqlType)) {
            const allInterfaces = graphqlType.getInterfaces();
            if (allInterfaces.find(int => int.name === interfaceName)) {
              result.push(graphqlType.name);
            }
          }
        }
        return result;
      }

      function astFromType(type) {
        if (graphql.isNonNullType(type)) {
          const innerType = astFromType(type.ofType);
          if (innerType.kind === graphql.Kind.NON_NULL_TYPE) {
            throw new Error(
              `Invalid type node ${JSON.stringify(
                type
              )}. Inner type of non-null type cannot be a non-null type.`
            );
          }
          return {
            kind: graphql.Kind.NON_NULL_TYPE,
            type: innerType
          };
        } else if (graphql.isListType(type)) {
          return {
            kind: graphql.Kind.LIST_TYPE,
            type: astFromType(type.ofType)
          };
        }
        return {
          kind: graphql.Kind.NAMED_TYPE,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          }
        };
      }

      /**
       * Produces a GraphQL Value AST given a JavaScript object.
       * Function will match JavaScript/JSON values to GraphQL AST schema format
       * by using the following mapping.
       *
       * | JSON Value    | GraphQL Value        |
       * | ------------- | -------------------- |
       * | Object        | Input Object         |
       * | Array         | List                 |
       * | Boolean       | Boolean              |
       * | String        | String               |
       * | Number        | Int / Float          |
       * | null          | NullValue            |
       *
       */
      function astFromValueUntyped(value) {
        // only explicit null, not undefined, NaN
        if (value === null) {
          return { kind: graphql.Kind.NULL };
        }
        // undefined
        if (value === undefined) {
          return null;
        }
        // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
        // the value is not an array, convert the value using the list's item type.
        if (Array.isArray(value)) {
          const valuesNodes = [];
          value.forEach(item => {
            const itemNode = astFromValueUntyped(item);
            if (itemNode != null) {
              valuesNodes.push(itemNode);
            }
          });
          return { kind: graphql.Kind.LIST, values: valuesNodes };
        }
        if (typeof value === "object") {
          const fieldNodes = [];
          Object.entries(value).forEach(([fieldName, fieldValue]) => {
            const ast = astFromValueUntyped(fieldValue);
            if (ast) {
              fieldNodes.push({
                kind: graphql.Kind.OBJECT_FIELD,
                name: { kind: graphql.Kind.NAME, value: fieldName },
                value: ast
              });
            }
          });
          return { kind: graphql.Kind.OBJECT, fields: fieldNodes };
        }
        // Others serialize based on their corresponding JavaScript scalar types.
        if (typeof value === "boolean") {
          return { kind: graphql.Kind.BOOLEAN, value };
        }
        // JavaScript numbers can be Int or Float values.
        if (typeof value === "number" && isFinite(value)) {
          const stringNum = String(value);
          return integerStringRegExp.test(stringNum)
            ? { kind: graphql.Kind.INT, value: stringNum }
            : { kind: graphql.Kind.FLOAT, value: stringNum };
        }
        if (typeof value === "string") {
          return { kind: graphql.Kind.STRING, value };
        }
        throw new TypeError(`Cannot convert value to AST: ${value}.`);
      }
      /**
       * IntValue:
       *   - NegativeSign? 0
       *   - NegativeSign? NonZeroDigit ( Digit+ )?
       */
      const integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

      function getDocumentNodeFromSchema(schema, options = {}) {
        const pathToDirectivesInExtensions =
          options.pathToDirectivesInExtensions;
        const typesMap = schema.getTypeMap();
        const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);
        const definitions = schemaNode != null ? [schemaNode] : [];
        const directives = schema.getDirectives();
        for (const directive of directives) {
          if (graphql.isSpecifiedDirective(directive)) {
            continue;
          }
          definitions.push(
            astFromDirective(directive, schema, pathToDirectivesInExtensions)
          );
        }
        for (const typeName in typesMap) {
          const type = typesMap[typeName];
          const isPredefinedScalar = graphql.isSpecifiedScalarType(type);
          const isIntrospection = graphql.isIntrospectionType(type);
          if (isPredefinedScalar || isIntrospection) {
            continue;
          }
          if (graphql.isObjectType(type)) {
            definitions.push(
              astFromObjectType(type, schema, pathToDirectivesInExtensions)
            );
          } else if (graphql.isInterfaceType(type)) {
            definitions.push(
              astFromInterfaceType(type, schema, pathToDirectivesInExtensions)
            );
          } else if (graphql.isUnionType(type)) {
            definitions.push(
              astFromUnionType(type, schema, pathToDirectivesInExtensions)
            );
          } else if (graphql.isInputObjectType(type)) {
            definitions.push(
              astFromInputObjectType(type, schema, pathToDirectivesInExtensions)
            );
          } else if (graphql.isEnumType(type)) {
            definitions.push(
              astFromEnumType(type, schema, pathToDirectivesInExtensions)
            );
          } else if (graphql.isScalarType(type)) {
            definitions.push(
              astFromScalarType(type, schema, pathToDirectivesInExtensions)
            );
          } else {
            throw new Error(`Unknown type ${type}.`);
          }
        }
        return {
          kind: graphql.Kind.DOCUMENT,
          definitions
        };
      }
      // this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible
      // currently does not allow customization of printSchema options having to do with comments.
      function printSchemaWithDirectives(schema, options = {}) {
        const documentNode = getDocumentNodeFromSchema(schema, options);
        return graphql.print(documentNode);
      }
      function astFromSchema(schema, pathToDirectivesInExtensions) {
        var _a, _b;
        const operationTypeMap = {
          query: undefined,
          mutation: undefined,
          subscription: undefined
        };
        let nodes = [];
        if (schema.astNode != null) {
          nodes.push(schema.astNode);
        }
        if (schema.extensionASTNodes != null) {
          nodes = nodes.concat(schema.extensionASTNodes);
        }
        nodes.forEach(node => {
          if (node.operationTypes) {
            node.operationTypes.forEach(operationTypeDefinitionNode => {
              operationTypeMap[
                operationTypeDefinitionNode.operation
              ] = operationTypeDefinitionNode;
            });
          }
        });
        const rootTypeMap = {
          query: schema.getQueryType(),
          mutation: schema.getMutationType(),
          subscription: schema.getSubscriptionType()
        };
        Object.keys(operationTypeMap).forEach(operationTypeNode => {
          if (rootTypeMap[operationTypeNode] != null) {
            if (operationTypeMap[operationTypeNode] != null) {
              operationTypeMap[operationTypeNode].type = astFromType(
                rootTypeMap[operationTypeNode]
              );
            } else {
              operationTypeMap[operationTypeNode] = {
                kind: graphql.Kind.OPERATION_TYPE_DEFINITION,
                operation: operationTypeNode,
                type: astFromType(rootTypeMap[operationTypeNode])
              };
            }
          }
        });
        const operationTypes = Object.values(operationTypeMap).filter(
          operationTypeDefinitionNode => operationTypeDefinitionNode != null
        );
        const directives = getDirectiveNodes(
          schema,
          schema,
          pathToDirectivesInExtensions
        );
        if (!operationTypes.length && !directives.length) {
          return null;
        }
        const schemaNode = {
          kind:
            operationTypes != null
              ? graphql.Kind.SCHEMA_DEFINITION
              : graphql.Kind.SCHEMA_EXTENSION,
          operationTypes,
          directives
        };
        schemaNode.description = ((_b =
          (_a = schema.astNode) === null || _a === void 0
            ? void 0
            : _a.description) !== null && _b !== void 0
        ? _b
        : schema.description != null)
          ? {
              kind: graphql.Kind.STRING,
              value: schema.description,
              block: true
            }
          : undefined;
        return schemaNode;
      }
      function astFromDirective(
        directive,
        schema,
        pathToDirectivesInExtensions
      ) {
        var _a, _b;
        return {
          kind: graphql.Kind.DIRECTIVE_DEFINITION,
          description:
            (_b =
              (_a = directive.astNode) === null || _a === void 0
                ? void 0
                : _a.description) !== null && _b !== void 0
              ? _b
              : directive.description
              ? {
                  kind: graphql.Kind.STRING,
                  value: directive.description
                }
              : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: directive.name
          },
          arguments: (directive === null || directive === void 0
          ? void 0
          : directive.args)
            ? directive.args.map(arg =>
                astFromArg(arg, schema, pathToDirectivesInExtensions)
              )
            : undefined,
          repeatable: directive.isRepeatable,
          locations: (directive === null || directive === void 0
          ? void 0
          : directive.locations)
            ? directive.locations.map(location => ({
                kind: graphql.Kind.NAME,
                value: location
              }))
            : undefined
        };
      }
      function getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {
        const directivesInExtensions = getDirectivesInExtensions(
          entity,
          pathToDirectivesInExtensions
        );
        let nodes = [];
        if (entity.astNode != null) {
          nodes.push(entity.astNode);
        }
        if ("extensionASTNodes" in entity && entity.extensionASTNodes != null) {
          nodes = nodes.concat(entity.extensionASTNodes);
        }
        let directives;
        if (directivesInExtensions != null) {
          directives = makeDirectiveNodes(schema, directivesInExtensions);
        } else {
          directives = [].concat(
            ...nodes
              .filter(node => node.directives != null)
              .map(node => node.directives)
          );
        }
        return directives;
      }
      function getDeprecatableDirectiveNodes(
        entity,
        schema,
        pathToDirectivesInExtensions
      ) {
        var _a, _b;
        let directiveNodesBesidesDeprecated = [];
        let deprecatedDirectiveNode;
        const directivesInExtensions = getDirectivesInExtensions(
          entity,
          pathToDirectivesInExtensions
        );
        let directives;
        if (directivesInExtensions != null) {
          directives = makeDirectiveNodes(schema, directivesInExtensions);
        } else {
          directives =
            (_a = entity.astNode) === null || _a === void 0
              ? void 0
              : _a.directives;
        }
        if (directives != null) {
          directiveNodesBesidesDeprecated = directives.filter(
            directive => directive.name.value !== "deprecated"
          );
          if (entity.deprecationReason != null) {
            deprecatedDirectiveNode =
              (_b = directives.filter(
                directive => directive.name.value === "deprecated"
              )) === null || _b === void 0
                ? void 0
                : _b[0];
          }
        }
        if (
          entity.deprecationReason != null &&
          deprecatedDirectiveNode == null
        ) {
          deprecatedDirectiveNode = makeDeprecatedDirective(
            entity.deprecationReason
          );
        }
        return deprecatedDirectiveNode == null
          ? directiveNodesBesidesDeprecated
          : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);
      }
      function astFromArg(arg, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.INPUT_VALUE_DEFINITION,
          description: ((_b =
            (_a = arg.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : arg.description)
            ? {
                kind: graphql.Kind.STRING,
                value: arg.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: arg.name
          },
          type: astFromType(arg.type),
          defaultValue:
            arg.defaultValue !== undefined
              ? graphql.astFromValue(arg.defaultValue, arg.type)
              : undefined,
          directives: getDeprecatableDirectiveNodes(
            arg,
            schema,
            pathToDirectivesInExtensions
          )
        };
      }
      function astFromObjectType(type, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.OBJECT_TYPE_DEFINITION,
          description: ((_b =
            (_a = type.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : type.description)
            ? {
                kind: graphql.Kind.STRING,
                value: type.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          },
          fields: Object.values(type.getFields()).map(field =>
            astFromField(field, schema, pathToDirectivesInExtensions)
          ),
          interfaces: Object.values(type.getInterfaces()).map(iFace =>
            astFromType(iFace)
          ),
          directives: getDirectiveNodes(
            type,
            schema,
            pathToDirectivesInExtensions
          )
        };
      }
      function astFromInterfaceType(
        type,
        schema,
        pathToDirectivesInExtensions
      ) {
        var _a, _b;
        const node = {
          kind: graphql.Kind.INTERFACE_TYPE_DEFINITION,
          description: ((_b =
            (_a = type.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : type.description)
            ? {
                kind: graphql.Kind.STRING,
                value: type.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          },
          fields: Object.values(type.getFields()).map(field =>
            astFromField(field, schema, pathToDirectivesInExtensions)
          ),
          directives: getDirectiveNodes(
            type,
            schema,
            pathToDirectivesInExtensions
          )
        };
        if ("getInterfaces" in type) {
          node.interfaces = Object.values(type.getInterfaces()).map(iFace =>
            astFromType(iFace)
          );
        }
        return node;
      }
      function astFromUnionType(type, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.UNION_TYPE_DEFINITION,
          description: ((_b =
            (_a = type.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : type.description)
            ? {
                kind: graphql.Kind.STRING,
                value: type.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          },
          directives: getDirectiveNodes(
            type,
            schema,
            pathToDirectivesInExtensions
          ),
          types: type.getTypes().map(type => astFromType(type))
        };
      }
      function astFromInputObjectType(
        type,
        schema,
        pathToDirectivesInExtensions
      ) {
        var _a, _b;
        return {
          kind: graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description: ((_b =
            (_a = type.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : type.description)
            ? {
                kind: graphql.Kind.STRING,
                value: type.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          },
          fields: Object.values(type.getFields()).map(field =>
            astFromInputField(field, schema, pathToDirectivesInExtensions)
          ),
          directives: getDirectiveNodes(
            type,
            schema,
            pathToDirectivesInExtensions
          )
        };
      }
      function astFromEnumType(type, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.ENUM_TYPE_DEFINITION,
          description: ((_b =
            (_a = type.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : type.description)
            ? {
                kind: graphql.Kind.STRING,
                value: type.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          },
          values: Object.values(type.getValues()).map(value =>
            astFromEnumValue(value, schema, pathToDirectivesInExtensions)
          ),
          directives: getDirectiveNodes(
            type,
            schema,
            pathToDirectivesInExtensions
          )
        };
      }
      function astFromScalarType(type, schema, pathToDirectivesInExtensions) {
        var _a, _b, _c, _d;
        let directiveNodesBesidesSpecifiedBy = [];
        let specifiedByDirectiveNode;
        const directivesInExtensions = getDirectivesInExtensions(
          type,
          pathToDirectivesInExtensions
        );
        let allDirectives;
        if (directivesInExtensions != null) {
          allDirectives = makeDirectiveNodes(schema, directivesInExtensions);
        } else {
          allDirectives =
            (_a = type.astNode) === null || _a === void 0
              ? void 0
              : _a.directives;
        }
        if (allDirectives != null) {
          directiveNodesBesidesSpecifiedBy = allDirectives.filter(
            directive => directive.name.value !== "specifiedBy"
          );
          if (type.specifiedByUrl != null) {
            specifiedByDirectiveNode =
              (_b = allDirectives.filter(
                directive => directive.name.value === "specifiedBy"
              )) === null || _b === void 0
                ? void 0
                : _b[0];
          }
        }
        if (type.specifiedByUrl != null && specifiedByDirectiveNode == null) {
          specifiedByDirectiveNode = makeDirectiveNode("specifiedBy", {
            url: type.specifiedByUrl
          });
        }
        const directives =
          specifiedByDirectiveNode == null
            ? directiveNodesBesidesSpecifiedBy
            : [specifiedByDirectiveNode].concat(
                directiveNodesBesidesSpecifiedBy
              );
        return {
          kind: graphql.Kind.SCALAR_TYPE_DEFINITION,
          description: ((_d =
            (_c = type.astNode) === null || _c === void 0
              ? void 0
              : _c.description) !== null && _d !== void 0
          ? _d
          : type.description)
            ? {
                kind: graphql.Kind.STRING,
                value: type.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: type.name
          },
          directives
        };
      }
      function astFromField(field, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.FIELD_DEFINITION,
          description: ((_b =
            (_a = field.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : field.description)
            ? {
                kind: graphql.Kind.STRING,
                value: field.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: field.name
          },
          arguments: field.args.map(arg =>
            astFromArg(arg, schema, pathToDirectivesInExtensions)
          ),
          type: astFromType(field.type),
          directives: getDeprecatableDirectiveNodes(
            field,
            schema,
            pathToDirectivesInExtensions
          )
        };
      }
      function astFromInputField(field, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.INPUT_VALUE_DEFINITION,
          description: ((_b =
            (_a = field.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : field.description)
            ? {
                kind: graphql.Kind.STRING,
                value: field.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: field.name
          },
          type: astFromType(field.type),
          directives: getDeprecatableDirectiveNodes(
            field,
            schema,
            pathToDirectivesInExtensions
          ),
          defaultValue: graphql.astFromValue(field.defaultValue, field.type)
        };
      }
      function astFromEnumValue(value, schema, pathToDirectivesInExtensions) {
        var _a, _b;
        return {
          kind: graphql.Kind.ENUM_VALUE_DEFINITION,
          description: ((_b =
            (_a = value.astNode) === null || _a === void 0
              ? void 0
              : _a.description) !== null && _b !== void 0
          ? _b
          : value.description)
            ? {
                kind: graphql.Kind.STRING,
                value: value.description,
                block: true
              }
            : undefined,
          name: {
            kind: graphql.Kind.NAME,
            value: value.name
          },
          directives: getDirectiveNodes(
            value,
            schema,
            pathToDirectivesInExtensions
          )
        };
      }
      function makeDeprecatedDirective(deprecationReason) {
        return makeDirectiveNode(
          "deprecated",
          { reason: deprecationReason },
          graphql.GraphQLDeprecatedDirective
        );
      }
      function makeDirectiveNode(name, args, directive) {
        const directiveArguments = [];
        if (directive != null) {
          directive.args.forEach(arg => {
            const argName = arg.name;
            const argValue = args[argName];
            if (argValue !== undefined) {
              directiveArguments.push({
                kind: graphql.Kind.ARGUMENT,
                name: {
                  kind: graphql.Kind.NAME,
                  value: argName
                },
                value: graphql.astFromValue(argValue, arg.type)
              });
            }
          });
        } else {
          Object.entries(args).forEach(([argName, argValue]) => {
            directiveArguments.push({
              kind: graphql.Kind.ARGUMENT,
              name: {
                kind: graphql.Kind.NAME,
                value: argName
              },
              value: astFromValueUntyped(argValue)
            });
          });
        }
        return {
          kind: graphql.Kind.DIRECTIVE,
          name: {
            kind: graphql.Kind.NAME,
            value: name
          },
          arguments: directiveArguments
        };
      }
      function makeDirectiveNodes(schema, directiveValues) {
        const directiveNodes = [];
        Object.entries(directiveValues).forEach(
          ([directiveName, arrayOrSingleValue]) => {
            const directive =
              schema === null || schema === void 0
                ? void 0
                : schema.getDirective(directiveName);
            if (Array.isArray(arrayOrSingleValue)) {
              arrayOrSingleValue.forEach(value => {
                directiveNodes.push(
                  makeDirectiveNode(directiveName, value, directive)
                );
              });
            } else {
              directiveNodes.push(
                makeDirectiveNode(directiveName, arrayOrSingleValue, directive)
              );
            }
          }
        );
        return directiveNodes;
      }

      async function validateGraphQlDocuments(
        schema,
        documentFiles,
        effectiveRules
      ) {
        effectiveRules = effectiveRules || createDefaultRules();
        const allFragments = [];
        documentFiles.forEach(documentFile => {
          if (documentFile.document) {
            for (const definitionNode of documentFile.document.definitions) {
              if (definitionNode.kind === graphql.Kind.FRAGMENT_DEFINITION) {
                allFragments.push(definitionNode);
              }
            }
          }
        });
        const allErrors = [];
        await Promise.all(
          documentFiles.map(async documentFile => {
            const documentToValidate = {
              kind: graphql.Kind.DOCUMENT,
              definitions: [
                ...allFragments,
                ...documentFile.document.definitions
              ].filter((definition, index, list) => {
                if (definition.kind === graphql.Kind.FRAGMENT_DEFINITION) {
                  const firstIndex = list.findIndex(
                    def =>
                      def.kind === graphql.Kind.FRAGMENT_DEFINITION &&
                      def.name.value === definition.name.value
                  );
                  const isDuplicated = firstIndex !== index;
                  if (isDuplicated) {
                    return false;
                  }
                }
                return true;
              })
            };
            const errors = graphql.validate(
              schema,
              documentToValidate,
              effectiveRules
            );
            if (errors.length > 0) {
              allErrors.push({
                filePath: documentFile.location,
                errors
              });
            }
          })
        );
        return allErrors;
      }
      function checkValidationErrors(loadDocumentErrors) {
        if (loadDocumentErrors.length > 0) {
          const errors = [];
          for (const loadDocumentError of loadDocumentErrors) {
            for (const graphQLError of loadDocumentError.errors) {
              const error = new Error();
              error.name = "GraphQLDocumentError";
              error.message = `${error.name}: ${graphQLError.message}`;
              error.stack = error.message;
              graphQLError.locations.forEach(
                location =>
                  (error.stack += `\n    at ${loadDocumentError.filePath}:${location.line}:${location.column}`)
              );
              errors.push(error);
            }
          }
          throw new AggregateError(errors);
        }
      }
      function createDefaultRules() {
        const ignored = [
          "NoUnusedFragmentsRule",
          "NoUnusedVariablesRule",
          "KnownDirectivesRule"
        ];
        // GraphQL v14 has no Rule suffix in function names
        // Adding `*Rule` makes validation backwards compatible
        ignored.forEach(rule => {
          ignored.push(rule.replace(/Rule$/, ""));
        });
        return graphql.specifiedRules.filter(f => !ignored.includes(f.name));
      }

      function buildFixedSchema(schema, options) {
        return graphql.buildSchema(printSchemaWithDirectives(schema), {
          noLocation: true,
          ...(options || {})
        });
      }
      function fixSchemaAst(schema, options) {
        let schemaWithValidAst;
        if (!schema.astNode || !schema.extensionASTNodes) {
          schemaWithValidAst = buildFixedSchema(schema, options);
        }
        if (!schema.astNode) {
          schema.astNode = schemaWithValidAst.astNode;
        }
        if (!schema.extensionASTNodes) {
          schema.extensionASTNodes = schemaWithValidAst.extensionASTNodes;
        }
        return schema;
      }

      /**
       * Produces the value of a block string from its parsed raw value, similar to
       * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
       *
       * This implements the GraphQL spec's BlockStringValue() static algorithm.
       *
       * @internal
       */
      function dedentBlockStringValue(rawString) {
        // Expand a block string's raw value into independent lines.
        var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

        var commonIndent = getBlockStringIndentation(rawString);

        if (commonIndent !== 0) {
          for (var i = 1; i < lines.length; i++) {
            lines[i] = lines[i].slice(commonIndent);
          }
        } // Remove leading and trailing blank lines.

        var startLine = 0;

        while (startLine < lines.length && isBlank(lines[startLine])) {
          ++startLine;
        }

        var endLine = lines.length;

        while (endLine > startLine && isBlank(lines[endLine - 1])) {
          --endLine;
        } // Return a string of the lines joined with U+000A.

        return lines.slice(startLine, endLine).join("\n");
      }

      function isBlank(str) {
        for (var i = 0; i < str.length; ++i) {
          if (str[i] !== " " && str[i] !== "\t") {
            return false;
          }
        }

        return true;
      }
      /**
       * @internal
       */

      function getBlockStringIndentation(value) {
        var _commonIndent;

        var isFirstLine = true;
        var isEmptyLine = true;
        var indent = 0;
        var commonIndent = null;

        for (var i = 0; i < value.length; ++i) {
          switch (value.charCodeAt(i)) {
            case 13:
              //  \r
              if (value.charCodeAt(i + 1) === 10) {
                ++i; // skip \r\n as one symbol
              }

            // falls through

            case 10:
              //  \n
              isFirstLine = false;
              isEmptyLine = true;
              indent = 0;
              break;

            case 9: //   \t

            case 32:
              //  <space>
              ++indent;
              break;

            default:
              if (
                isEmptyLine &&
                !isFirstLine &&
                (commonIndent === null || indent < commonIndent)
              ) {
                commonIndent = indent;
              }

              isEmptyLine = false;
          }
        }

        return (_commonIndent = commonIndent) !== null &&
          _commonIndent !== void 0
          ? _commonIndent
          : 0;
      }

      function parseGraphQLSDL(location, rawSDL, options = {}) {
        let document;
        const sdl = rawSDL;
        let sdlModified = false;
        try {
          if (options.commentDescriptions && sdl.includes("#")) {
            sdlModified = true;
            document = transformCommentsToDescriptions(rawSDL, options);
            // If noLocation=true, we need to make sure to print and parse it again, to remove locations,
            // since `transformCommentsToDescriptions` must have locations set in order to transform the comments
            // into descriptions.
            if (options.noLocation) {
              document = graphql.parse(graphql.print(document), options);
            }
          } else {
            document = graphql.parse(
              new graphql.Source(sdl, location),
              options
            );
          }
        } catch (e) {
          if (
            e.message.includes("EOF") &&
            sdl.replace(/(\#[^*]*)/g, "").trim() === ""
          ) {
            document = {
              kind: graphql.Kind.DOCUMENT,
              definitions: []
            };
          } else {
            throw e;
          }
        }
        return {
          location,
          document,
          rawSDL: sdlModified ? graphql.print(document) : sdl
        };
      }
      function getLeadingCommentBlock(node) {
        const loc = node.loc;
        if (!loc) {
          return;
        }
        const comments = [];
        let token = loc.startToken.prev;
        while (
          token != null &&
          token.kind === graphql.TokenKind.COMMENT &&
          token.next &&
          token.prev &&
          token.line + 1 === token.next.line &&
          token.line !== token.prev.line
        ) {
          const value = String(token.value);
          comments.push(value);
          token = token.prev;
        }
        return comments.length > 0 ? comments.reverse().join("\n") : undefined;
      }
      function transformCommentsToDescriptions(sourceSdl, options = {}) {
        const parsedDoc = graphql.parse(sourceSdl, {
          ...options,
          noLocation: false
        });
        const modifiedDoc = graphql.visit(parsedDoc, {
          leave: node => {
            if (isDescribable(node)) {
              const rawValue = getLeadingCommentBlock(node);
              if (rawValue !== undefined) {
                const commentsBlock = dedentBlockStringValue("\n" + rawValue);
                const isBlock = commentsBlock.includes("\n");
                if (!node.description) {
                  return {
                    ...node,
                    description: {
                      kind: graphql.Kind.STRING,
                      value: commentsBlock,
                      block: isBlock
                    }
                  };
                } else {
                  return {
                    ...node,
                    description: {
                      ...node.description,
                      value: node.description.value + "\n" + commentsBlock,
                      block: true
                    }
                  };
                }
              }
            }
          }
        });
        return modifiedDoc;
      }
      function isDescribable(node) {
        return (
          graphql.isTypeSystemDefinitionNode(node) ||
          node.kind === graphql.Kind.FIELD_DEFINITION ||
          node.kind === graphql.Kind.INPUT_VALUE_DEFINITION ||
          node.kind === graphql.Kind.ENUM_VALUE_DEFINITION
        );
      }

      function stripBOM(content) {
        content = content.toString();
        // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
        // because the buffer-to-string conversion in `fs.readFileSync()`
        // translates it to FEFF, the UTF-16 BOM.
        if (content.charCodeAt(0) === 0xfeff) {
          content = content.slice(1);
        }
        return content;
      }
      function parseBOM(content) {
        return JSON.parse(stripBOM(content));
      }
      function parseGraphQLJSON(location, jsonContent, options) {
        let parsedJson = parseBOM(jsonContent);
        if (parsedJson.data) {
          parsedJson = parsedJson.data;
        }
        if (parsedJson.kind === "Document") {
          const document = parsedJson;
          return {
            location,
            document
          };
        } else if (parsedJson.__schema) {
          const schema = graphql.buildClientSchema(parsedJson, options);
          const rawSDL = printSchemaWithDirectives(schema, options);
          return {
            location,
            document: parseGraphQLSDL(location, rawSDL, options).document,
            rawSDL,
            schema
          };
        }
        throw new Error(`Not valid JSON content`);
      }

      /**
       * Get all GraphQL types from schema without:
       *
       * - Query, Mutation, Subscription objects
       * - Internal scalars added by parser
       *
       * @param schema
       */
      function getUserTypesFromSchema(schema) {
        const allTypesMap = schema.getTypeMap();
        // tslint:disable-next-line: no-unnecessary-local-variable
        const modelTypes = Object.values(allTypesMap).filter(graphqlType => {
          if (graphql.isObjectType(graphqlType)) {
            // Filter out private types
            if (graphqlType.name.startsWith("__")) {
              return false;
            }
            if (
              schema.getMutationType() &&
              graphqlType.name === schema.getMutationType().name
            ) {
              return false;
            }
            if (
              schema.getQueryType() &&
              graphqlType.name === schema.getQueryType().name
            ) {
              return false;
            }
            if (
              schema.getSubscriptionType() &&
              graphqlType.name === schema.getSubscriptionType().name
            ) {
              return false;
            }
            return true;
          }
          return false;
        });
        return modelTypes;
      }

      function createSchemaDefinition(def, config) {
        const schemaRoot = {};
        if (def.query) {
          schemaRoot.query = def.query.toString();
        }
        if (def.mutation) {
          schemaRoot.mutation = def.mutation.toString();
        }
        if (def.subscription) {
          schemaRoot.subscription = def.subscription.toString();
        }
        const fields = Object.keys(schemaRoot)
          .map(rootType =>
            schemaRoot[rootType] ? `${rootType}: ${schemaRoot[rootType]}` : null
          )
          .filter(a => a);
        if (fields.length) {
          return `schema { ${fields.join("\n")} }`;
        }
        if (config && config.force) {
          return ` schema { query: Query } `;
        }
        return undefined;
      }

      let operationVariables = [];
      let fieldTypeMap = new Map();
      function addOperationVariable(variable) {
        operationVariables.push(variable);
      }
      function resetOperationVariables() {
        operationVariables = [];
      }
      function resetFieldMap() {
        fieldTypeMap = new Map();
      }
      function buildOperationName(name) {
        return camelCase.camelCase(name);
      }
      function buildOperationNodeForField({
        schema,
        kind,
        field,
        models,
        ignore,
        depthLimit,
        circularReferenceDepth,
        argNames,
        selectedFields = true
      }) {
        resetOperationVariables();
        resetFieldMap();
        const operationNode = buildOperationAndCollectVariables({
          schema,
          fieldName: field,
          kind,
          models: models || [],
          ignore: ignore || [],
          depthLimit: depthLimit || Infinity,
          circularReferenceDepth: circularReferenceDepth || 1,
          argNames,
          selectedFields
        });
        // attach variables
        operationNode.variableDefinitions = [...operationVariables];
        resetOperationVariables();
        resetFieldMap();
        return operationNode;
      }
      function buildOperationAndCollectVariables({
        schema,
        fieldName,
        kind,
        models,
        ignore,
        depthLimit,
        circularReferenceDepth,
        argNames,
        selectedFields
      }) {
        const typeMap = {
          query: schema.getQueryType(),
          mutation: schema.getMutationType(),
          subscription: schema.getSubscriptionType()
        };
        const type = typeMap[kind];
        const field = type.getFields()[fieldName];
        const operationName = buildOperationName(`${fieldName}_${kind}`);
        if (field.args) {
          field.args.forEach(arg => {
            const argName = arg.name;
            if (!argNames || argNames.includes(argName)) {
              addOperationVariable(resolveVariable(arg, argName));
            }
          });
        }
        return {
          kind: graphql.Kind.OPERATION_DEFINITION,
          operation: kind,
          name: {
            kind: "Name",
            value: operationName
          },
          variableDefinitions: [],
          selectionSet: {
            kind: graphql.Kind.SELECTION_SET,
            selections: [
              resolveField({
                type,
                field,
                models,
                firstCall: true,
                path: [],
                ancestors: [],
                ignore,
                depthLimit,
                circularReferenceDepth,
                schema,
                depth: 0,
                argNames,
                selectedFields
              })
            ]
          }
        };
      }
      function resolveSelectionSet({
        parent,
        type,
        models,
        firstCall,
        path,
        ancestors,
        ignore,
        depthLimit,
        circularReferenceDepth,
        schema,
        depth,
        argNames,
        selectedFields
      }) {
        if (typeof selectedFields === "boolean" && depth > depthLimit) {
          return;
        }
        if (graphql.isUnionType(type)) {
          const types = type.getTypes();
          return {
            kind: graphql.Kind.SELECTION_SET,
            selections: types
              .filter(
                t =>
                  !hasCircularRef([...ancestors, t], {
                    depth: circularReferenceDepth
                  })
              )
              .map(t => {
                return {
                  kind: graphql.Kind.INLINE_FRAGMENT,
                  typeCondition: {
                    kind: graphql.Kind.NAMED_TYPE,
                    name: {
                      kind: graphql.Kind.NAME,
                      value: t.name
                    }
                  },
                  selectionSet: resolveSelectionSet({
                    parent: type,
                    type: t,
                    models,
                    path,
                    ancestors,
                    ignore,
                    depthLimit,
                    circularReferenceDepth,
                    schema,
                    depth,
                    argNames,
                    selectedFields
                  })
                };
              })
              .filter(fragmentNode => {
                var _a, _b;
                return (
                  ((_b =
                    (_a =
                      fragmentNode === null || fragmentNode === void 0
                        ? void 0
                        : fragmentNode.selectionSet) === null || _a === void 0
                      ? void 0
                      : _a.selections) === null || _b === void 0
                    ? void 0
                    : _b.length) > 0
                );
              })
          };
        }
        if (graphql.isInterfaceType(type)) {
          const types = Object.values(schema.getTypeMap()).filter(
            t => graphql.isObjectType(t) && t.getInterfaces().includes(type)
          );
          return {
            kind: graphql.Kind.SELECTION_SET,
            selections: types
              .filter(
                t =>
                  !hasCircularRef([...ancestors, t], {
                    depth: circularReferenceDepth
                  })
              )
              .map(t => {
                return {
                  kind: graphql.Kind.INLINE_FRAGMENT,
                  typeCondition: {
                    kind: graphql.Kind.NAMED_TYPE,
                    name: {
                      kind: graphql.Kind.NAME,
                      value: t.name
                    }
                  },
                  selectionSet: resolveSelectionSet({
                    parent: type,
                    type: t,
                    models,
                    path,
                    ancestors,
                    ignore,
                    depthLimit,
                    circularReferenceDepth,
                    schema,
                    depth,
                    argNames,
                    selectedFields
                  })
                };
              })
              .filter(fragmentNode => {
                var _a, _b;
                return (
                  ((_b =
                    (_a =
                      fragmentNode === null || fragmentNode === void 0
                        ? void 0
                        : fragmentNode.selectionSet) === null || _a === void 0
                      ? void 0
                      : _a.selections) === null || _b === void 0
                    ? void 0
                    : _b.length) > 0
                );
              })
          };
        }
        if (graphql.isObjectType(type)) {
          const isIgnored =
            ignore.includes(type.name) ||
            ignore.includes(`${parent.name}.${path[path.length - 1]}`);
          const isModel = models.includes(type.name);
          if (!firstCall && isModel && !isIgnored) {
            return {
              kind: graphql.Kind.SELECTION_SET,
              selections: [
                {
                  kind: graphql.Kind.FIELD,
                  name: {
                    kind: graphql.Kind.NAME,
                    value: "id"
                  }
                }
              ]
            };
          }
          const fields = type.getFields();
          return {
            kind: graphql.Kind.SELECTION_SET,
            selections: Object.keys(fields)
              .filter(fieldName => {
                return !hasCircularRef(
                  [...ancestors, graphql.getNamedType(fields[fieldName].type)],
                  {
                    depth: circularReferenceDepth
                  }
                );
              })
              .map(fieldName => {
                const selectedSubFields =
                  typeof selectedFields === "object"
                    ? selectedFields[fieldName]
                    : true;
                if (selectedSubFields) {
                  return resolveField({
                    type: type,
                    field: fields[fieldName],
                    models,
                    path: [...path, fieldName],
                    ancestors,
                    ignore,
                    depthLimit,
                    circularReferenceDepth,
                    schema,
                    depth,
                    argNames,
                    selectedFields: selectedSubFields
                  });
                }
                return null;
              })
              .filter(f => {
                var _a, _b;
                if (f) {
                  if ("selectionSet" in f) {
                    return (_b =
                      (_a = f.selectionSet) === null || _a === void 0
                        ? void 0
                        : _a.selections) === null || _b === void 0
                      ? void 0
                      : _b.length;
                  } else {
                    return true;
                  }
                }
                return false;
              })
          };
        }
      }
      function resolveVariable(arg, name) {
        function resolveVariableType(type) {
          if (graphql.isListType(type)) {
            return {
              kind: graphql.Kind.LIST_TYPE,
              type: resolveVariableType(type.ofType)
            };
          }
          if (graphql.isNonNullType(type)) {
            return {
              kind: graphql.Kind.NON_NULL_TYPE,
              type: resolveVariableType(type.ofType)
            };
          }
          return {
            kind: graphql.Kind.NAMED_TYPE,
            name: {
              kind: graphql.Kind.NAME,
              value: type.name
            }
          };
        }
        return {
          kind: graphql.Kind.VARIABLE_DEFINITION,
          variable: {
            kind: graphql.Kind.VARIABLE,
            name: {
              kind: graphql.Kind.NAME,
              value: name || arg.name
            }
          },
          type: resolveVariableType(arg.type)
        };
      }
      function getArgumentName(name, path) {
        return camelCase.camelCase([...path, name].join("_"));
      }
      function resolveField({
        type,
        field,
        models,
        firstCall,
        path,
        ancestors,
        ignore,
        depthLimit,
        circularReferenceDepth,
        schema,
        depth,
        argNames,
        selectedFields
      }) {
        const namedType = graphql.getNamedType(field.type);
        let args = [];
        let removeField = false;
        if (field.args && field.args.length) {
          args = field.args
            .map(arg => {
              const argumentName = getArgumentName(arg.name, path);
              if (argNames && !argNames.includes(argumentName)) {
                if (graphql.isNonNullType(arg.type)) {
                  removeField = true;
                }
                return null;
              }
              if (!firstCall) {
                addOperationVariable(resolveVariable(arg, argumentName));
              }
              return {
                kind: graphql.Kind.ARGUMENT,
                name: {
                  kind: graphql.Kind.NAME,
                  value: arg.name
                },
                value: {
                  kind: graphql.Kind.VARIABLE,
                  name: {
                    kind: graphql.Kind.NAME,
                    value: getArgumentName(arg.name, path)
                  }
                }
              };
            })
            .filter(Boolean);
        }
        if (removeField) {
          return null;
        }
        const fieldPath = [...path, field.name];
        const fieldPathStr = fieldPath.join(".");
        let fieldName = field.name;
        if (
          fieldTypeMap.has(fieldPathStr) &&
          fieldTypeMap.get(fieldPathStr) !== field.type.toString()
        ) {
          fieldName += field.type.toString().replace("!", "NonNull");
        }
        fieldTypeMap.set(fieldPathStr, field.type.toString());
        if (
          !graphql.isScalarType(namedType) &&
          !graphql.isEnumType(namedType)
        ) {
          return {
            kind: graphql.Kind.FIELD,
            name: {
              kind: graphql.Kind.NAME,
              value: field.name
            },
            ...(fieldName !== field.name && {
              alias: { kind: graphql.Kind.NAME, value: fieldName }
            }),
            selectionSet:
              resolveSelectionSet({
                parent: type,
                type: namedType,
                models,
                firstCall,
                path: fieldPath,
                ancestors: [...ancestors, type],
                ignore,
                depthLimit,
                circularReferenceDepth,
                schema,
                depth: depth + 1,
                argNames,
                selectedFields
              }) || undefined,
            arguments: args
          };
        }
        return {
          kind: graphql.Kind.FIELD,
          name: {
            kind: graphql.Kind.NAME,
            value: field.name
          },
          ...(fieldName !== field.name && {
            alias: { kind: graphql.Kind.NAME, value: fieldName }
          }),
          arguments: args
        };
      }
      function hasCircularRef(
        types,
        config = {
          depth: 1
        }
      ) {
        const type = types[types.length - 1];
        if (graphql.isScalarType(type)) {
          return false;
        }
        const size = types.filter(t => t.name === type.name).length;
        return size > config.depth;
      }

      (function(VisitSchemaKind) {
        VisitSchemaKind["TYPE"] = "VisitSchemaKind.TYPE";
        VisitSchemaKind["SCALAR_TYPE"] = "VisitSchemaKind.SCALAR_TYPE";
        VisitSchemaKind["ENUM_TYPE"] = "VisitSchemaKind.ENUM_TYPE";
        VisitSchemaKind["COMPOSITE_TYPE"] = "VisitSchemaKind.COMPOSITE_TYPE";
        VisitSchemaKind["OBJECT_TYPE"] = "VisitSchemaKind.OBJECT_TYPE";
        VisitSchemaKind["INPUT_OBJECT_TYPE"] =
          "VisitSchemaKind.INPUT_OBJECT_TYPE";
        VisitSchemaKind["ABSTRACT_TYPE"] = "VisitSchemaKind.ABSTRACT_TYPE";
        VisitSchemaKind["UNION_TYPE"] = "VisitSchemaKind.UNION_TYPE";
        VisitSchemaKind["INTERFACE_TYPE"] = "VisitSchemaKind.INTERFACE_TYPE";
        VisitSchemaKind["ROOT_OBJECT"] = "VisitSchemaKind.ROOT_OBJECT";
        VisitSchemaKind["QUERY"] = "VisitSchemaKind.QUERY";
        VisitSchemaKind["MUTATION"] = "VisitSchemaKind.MUTATION";
        VisitSchemaKind["SUBSCRIPTION"] = "VisitSchemaKind.SUBSCRIPTION";
      })(exports.VisitSchemaKind || (exports.VisitSchemaKind = {}));
      (function(MapperKind) {
        MapperKind["TYPE"] = "MapperKind.TYPE";
        MapperKind["SCALAR_TYPE"] = "MapperKind.SCALAR_TYPE";
        MapperKind["ENUM_TYPE"] = "MapperKind.ENUM_TYPE";
        MapperKind["COMPOSITE_TYPE"] = "MapperKind.COMPOSITE_TYPE";
        MapperKind["OBJECT_TYPE"] = "MapperKind.OBJECT_TYPE";
        MapperKind["INPUT_OBJECT_TYPE"] = "MapperKind.INPUT_OBJECT_TYPE";
        MapperKind["ABSTRACT_TYPE"] = "MapperKind.ABSTRACT_TYPE";
        MapperKind["UNION_TYPE"] = "MapperKind.UNION_TYPE";
        MapperKind["INTERFACE_TYPE"] = "MapperKind.INTERFACE_TYPE";
        MapperKind["ROOT_OBJECT"] = "MapperKind.ROOT_OBJECT";
        MapperKind["QUERY"] = "MapperKind.QUERY";
        MapperKind["MUTATION"] = "MapperKind.MUTATION";
        MapperKind["SUBSCRIPTION"] = "MapperKind.SUBSCRIPTION";
        MapperKind["DIRECTIVE"] = "MapperKind.DIRECTIVE";
        MapperKind["FIELD"] = "MapperKind.FIELD";
        MapperKind["COMPOSITE_FIELD"] = "MapperKind.COMPOSITE_FIELD";
        MapperKind["OBJECT_FIELD"] = "MapperKind.OBJECT_FIELD";
        MapperKind["ROOT_FIELD"] = "MapperKind.ROOT_FIELD";
        MapperKind["QUERY_ROOT_FIELD"] = "MapperKind.QUERY_ROOT_FIELD";
        MapperKind["MUTATION_ROOT_FIELD"] = "MapperKind.MUTATION_ROOT_FIELD";
        MapperKind["SUBSCRIPTION_ROOT_FIELD"] =
          "MapperKind.SUBSCRIPTION_ROOT_FIELD";
        MapperKind["INTERFACE_FIELD"] = "MapperKind.INTERFACE_FIELD";
        MapperKind["INPUT_OBJECT_FIELD"] = "MapperKind.INPUT_OBJECT_FIELD";
        MapperKind["ARGUMENT"] = "MapperKind.ARGUMENT";
        MapperKind["ENUM_VALUE"] = "MapperKind.ENUM_VALUE";
      })(exports.MapperKind || (exports.MapperKind = {}));

      function createNamedStub(name, type) {
        let constructor;
        if (type === "object") {
          constructor = graphql.GraphQLObjectType;
        } else if (type === "interface") {
          constructor = graphql.GraphQLInterfaceType;
        } else {
          constructor = graphql.GraphQLInputObjectType;
        }
        return new constructor({
          name,
          fields: {
            _fake: {
              type: graphql.GraphQLString
            }
          }
        });
      }
      function createStub(node, type) {
        switch (node.kind) {
          case graphql.Kind.LIST_TYPE:
            return new graphql.GraphQLList(createStub(node.type, type));
          case graphql.Kind.NON_NULL_TYPE:
            return new graphql.GraphQLNonNull(createStub(node.type, type));
          default:
            if (type === "output") {
              return createNamedStub(node.name.value, "object");
            }
            return createNamedStub(node.name.value, "input");
        }
      }
      function isNamedStub(type) {
        if (
          graphql.isObjectType(type) ||
          graphql.isInterfaceType(type) ||
          graphql.isInputObjectType(type)
        ) {
          const fields = type.getFields();
          const fieldNames = Object.keys(fields);
          return (
            fieldNames.length === 1 && fields[fieldNames[0]].name === "_fake"
          );
        }
        return false;
      }
      function getBuiltInForStub(type) {
        switch (type.name) {
          case graphql.GraphQLInt.name:
            return graphql.GraphQLInt;
          case graphql.GraphQLFloat.name:
            return graphql.GraphQLFloat;
          case graphql.GraphQLString.name:
            return graphql.GraphQLString;
          case graphql.GraphQLBoolean.name:
            return graphql.GraphQLBoolean;
          case graphql.GraphQLID.name:
            return graphql.GraphQLID;
          default:
            return type;
        }
      }

      function rewireTypes(originalTypeMap, directives) {
        const referenceTypeMap = Object.create(null);
        Object.keys(originalTypeMap).forEach(typeName => {
          referenceTypeMap[typeName] = originalTypeMap[typeName];
        });
        const newTypeMap = Object.create(null);
        Object.keys(referenceTypeMap).forEach(typeName => {
          const namedType = referenceTypeMap[typeName];
          if (namedType == null || typeName.startsWith("__")) {
            return;
          }
          const newName = namedType.name;
          if (newName.startsWith("__")) {
            return;
          }
          if (newTypeMap[newName] != null) {
            throw new Error(`Duplicate schema type name ${newName}`);
          }
          newTypeMap[newName] = namedType;
        });
        Object.keys(newTypeMap).forEach(typeName => {
          newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);
        });
        const newDirectives = directives.map(directive =>
          rewireDirective(directive)
        );
        return {
          typeMap: newTypeMap,
          directives: newDirectives
        };
        function rewireDirective(directive) {
          if (graphql.isSpecifiedDirective(directive)) {
            return directive;
          }
          const directiveConfig = directive.toConfig();
          directiveConfig.args = rewireArgs(directiveConfig.args);
          return new graphql.GraphQLDirective(directiveConfig);
        }
        function rewireArgs(args) {
          const rewiredArgs = {};
          Object.keys(args).forEach(argName => {
            const arg = args[argName];
            const rewiredArgType = rewireType(arg.type);
            if (rewiredArgType != null) {
              arg.type = rewiredArgType;
              rewiredArgs[argName] = arg;
            }
          });
          return rewiredArgs;
        }
        function rewireNamedType(type) {
          if (graphql.isObjectType(type)) {
            const config = type.toConfig();
            const newConfig = {
              ...config,
              fields: () => rewireFields(config.fields),
              interfaces: () => rewireNamedTypes(config.interfaces)
            };
            return new graphql.GraphQLObjectType(newConfig);
          } else if (graphql.isInterfaceType(type)) {
            const config = type.toConfig();
            const newConfig = {
              ...config,
              fields: () => rewireFields(config.fields)
            };
            if ("interfaces" in newConfig) {
              newConfig.interfaces = () => rewireNamedTypes(config.interfaces);
            }
            return new graphql.GraphQLInterfaceType(newConfig);
          } else if (graphql.isUnionType(type)) {
            const config = type.toConfig();
            const newConfig = {
              ...config,
              types: () => rewireNamedTypes(config.types)
            };
            return new graphql.GraphQLUnionType(newConfig);
          } else if (graphql.isInputObjectType(type)) {
            const config = type.toConfig();
            const newConfig = {
              ...config,
              fields: () => rewireInputFields(config.fields)
            };
            return new graphql.GraphQLInputObjectType(newConfig);
          } else if (graphql.isEnumType(type)) {
            const enumConfig = type.toConfig();
            return new graphql.GraphQLEnumType(enumConfig);
          } else if (graphql.isScalarType(type)) {
            if (graphql.isSpecifiedScalarType(type)) {
              return type;
            }
            const scalarConfig = type.toConfig();
            return new graphql.GraphQLScalarType(scalarConfig);
          }
          throw new Error(`Unexpected schema type: ${type}`);
        }
        function rewireFields(fields) {
          const rewiredFields = {};
          Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            const rewiredFieldType = rewireType(field.type);
            if (rewiredFieldType != null) {
              field.type = rewiredFieldType;
              field.args = rewireArgs(field.args);
              rewiredFields[fieldName] = field;
            }
          });
          return rewiredFields;
        }
        function rewireInputFields(fields) {
          const rewiredFields = {};
          Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            const rewiredFieldType = rewireType(field.type);
            if (rewiredFieldType != null) {
              field.type = rewiredFieldType;
              rewiredFields[fieldName] = field;
            }
          });
          return rewiredFields;
        }
        function rewireNamedTypes(namedTypes) {
          const rewiredTypes = [];
          namedTypes.forEach(namedType => {
            const rewiredType = rewireType(namedType);
            if (rewiredType != null) {
              rewiredTypes.push(rewiredType);
            }
          });
          return rewiredTypes;
        }
        function rewireType(type) {
          if (graphql.isListType(type)) {
            const rewiredType = rewireType(type.ofType);
            return rewiredType != null
              ? new graphql.GraphQLList(rewiredType)
              : null;
          } else if (graphql.isNonNullType(type)) {
            const rewiredType = rewireType(type.ofType);
            return rewiredType != null
              ? new graphql.GraphQLNonNull(rewiredType)
              : null;
          } else if (graphql.isNamedType(type)) {
            let rewiredType = referenceTypeMap[type.name];
            if (rewiredType === undefined) {
              rewiredType = isNamedStub(type)
                ? getBuiltInForStub(type)
                : rewireNamedType(type);
              newTypeMap[rewiredType.name] = referenceTypeMap[
                type.name
              ] = rewiredType;
            }
            return rewiredType != null ? newTypeMap[rewiredType.name] : null;
          }
          return null;
        }
      }

      function transformInputValue(
        type,
        value,
        inputLeafValueTransformer = null,
        inputObjectValueTransformer = null
      ) {
        if (value == null) {
          return value;
        }
        const nullableType = graphql.getNullableType(type);
        if (graphql.isLeafType(nullableType)) {
          return inputLeafValueTransformer != null
            ? inputLeafValueTransformer(nullableType, value)
            : value;
        } else if (graphql.isListType(nullableType)) {
          return value.map(listMember =>
            transformInputValue(
              nullableType.ofType,
              listMember,
              inputLeafValueTransformer,
              inputObjectValueTransformer
            )
          );
        } else if (graphql.isInputObjectType(nullableType)) {
          const fields = nullableType.getFields();
          const newValue = {};
          Object.keys(value).forEach(key => {
            const field = fields[key];
            if (field != null) {
              newValue[key] = transformInputValue(
                field.type,
                value[key],
                inputLeafValueTransformer,
                inputObjectValueTransformer
              );
            }
          });
          return inputObjectValueTransformer != null
            ? inputObjectValueTransformer(nullableType, newValue)
            : newValue;
        }
        // unreachable, no other possible return value
      }
      function serializeInputValue(type, value) {
        return transformInputValue(type, value, (t, v) => t.serialize(v));
      }
      function parseInputValue(type, value) {
        return transformInputValue(type, value, (t, v) => t.parseValue(v));
      }
      function parseInputValueLiteral(type, value) {
        return transformInputValue(type, value, (t, v) =>
          t.parseLiteral(v, {})
        );
      }

      function mapSchema(schema, schemaMapper = {}) {
        const originalTypeMap = schema.getTypeMap();
        let newTypeMap = mapDefaultValues(
          originalTypeMap,
          schema,
          serializeInputValue
        );
        newTypeMap = mapTypes(newTypeMap, schema, schemaMapper, type =>
          graphql.isLeafType(type)
        );
        newTypeMap = mapEnumValues(newTypeMap, schema, schemaMapper);
        newTypeMap = mapDefaultValues(newTypeMap, schema, parseInputValue);
        newTypeMap = mapTypes(
          newTypeMap,
          schema,
          schemaMapper,
          type => !graphql.isLeafType(type)
        );
        newTypeMap = mapFields(newTypeMap, schema, schemaMapper);
        newTypeMap = mapArguments(newTypeMap, schema, schemaMapper);
        const originalDirectives = schema.getDirectives();
        const newDirectives = mapDirectives(
          originalDirectives,
          schema,
          schemaMapper
        );
        const queryType = schema.getQueryType();
        const mutationType = schema.getMutationType();
        const subscriptionType = schema.getSubscriptionType();
        const newQueryTypeName =
          queryType != null
            ? newTypeMap[queryType.name] != null
              ? newTypeMap[queryType.name].name
              : undefined
            : undefined;
        const newMutationTypeName =
          mutationType != null
            ? newTypeMap[mutationType.name] != null
              ? newTypeMap[mutationType.name].name
              : undefined
            : undefined;
        const newSubscriptionTypeName =
          subscriptionType != null
            ? newTypeMap[subscriptionType.name] != null
              ? newTypeMap[subscriptionType.name].name
              : undefined
            : undefined;
        const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);
        return new graphql.GraphQLSchema({
          ...schema.toConfig(),
          query: newQueryTypeName ? typeMap[newQueryTypeName] : undefined,
          mutation: newMutationTypeName
            ? typeMap[newMutationTypeName]
            : undefined,
          subscription:
            newSubscriptionTypeName != null
              ? typeMap[newSubscriptionTypeName]
              : undefined,
          types: Object.keys(typeMap).map(typeName => typeMap[typeName]),
          directives
        });
      }
      function mapTypes(
        originalTypeMap,
        schema,
        schemaMapper,
        testFn = () => true
      ) {
        const newTypeMap = {};
        Object.keys(originalTypeMap).forEach(typeName => {
          if (!typeName.startsWith("__")) {
            const originalType = originalTypeMap[typeName];
            if (originalType == null || !testFn(originalType)) {
              newTypeMap[typeName] = originalType;
              return;
            }
            const typeMapper = getTypeMapper(schema, schemaMapper, typeName);
            if (typeMapper == null) {
              newTypeMap[typeName] = originalType;
              return;
            }
            const maybeNewType = typeMapper(originalType, schema);
            if (maybeNewType === undefined) {
              newTypeMap[typeName] = originalType;
              return;
            }
            newTypeMap[typeName] = maybeNewType;
          }
        });
        return newTypeMap;
      }
      function mapEnumValues(originalTypeMap, schema, schemaMapper) {
        const enumValueMapper = getEnumValueMapper(schemaMapper);
        if (!enumValueMapper) {
          return originalTypeMap;
        }
        return mapTypes(
          originalTypeMap,
          schema,
          {
            [exports.MapperKind.ENUM_TYPE]: type => {
              const config = type.toConfig();
              const originalEnumValueConfigMap = config.values;
              const newEnumValueConfigMap = {};
              Object.keys(originalEnumValueConfigMap).forEach(externalValue => {
                const originalEnumValueConfig =
                  originalEnumValueConfigMap[externalValue];
                const mappedEnumValue = enumValueMapper(
                  originalEnumValueConfig,
                  type.name,
                  schema,
                  externalValue
                );
                if (mappedEnumValue === undefined) {
                  newEnumValueConfigMap[
                    externalValue
                  ] = originalEnumValueConfig;
                } else if (Array.isArray(mappedEnumValue)) {
                  const [
                    newExternalValue,
                    newEnumValueConfig
                  ] = mappedEnumValue;
                  newEnumValueConfigMap[newExternalValue] =
                    newEnumValueConfig === undefined
                      ? originalEnumValueConfig
                      : newEnumValueConfig;
                } else if (mappedEnumValue !== null) {
                  newEnumValueConfigMap[externalValue] = mappedEnumValue;
                }
              });
              return correctASTNodes(
                new graphql.GraphQLEnumType({
                  ...config,
                  values: newEnumValueConfigMap
                })
              );
            }
          },
          type => graphql.isEnumType(type)
        );
      }
      function mapDefaultValues(originalTypeMap, schema, fn) {
        const newTypeMap = mapArguments(originalTypeMap, schema, {
          [exports.MapperKind.ARGUMENT]: argumentConfig => {
            if (argumentConfig.defaultValue === undefined) {
              return argumentConfig;
            }
            const maybeNewType = getNewType(
              originalTypeMap,
              argumentConfig.type
            );
            if (maybeNewType != null) {
              return {
                ...argumentConfig,
                defaultValue: fn(maybeNewType, argumentConfig.defaultValue)
              };
            }
          }
        });
        return mapFields(newTypeMap, schema, {
          [exports.MapperKind.INPUT_OBJECT_FIELD]: inputFieldConfig => {
            if (inputFieldConfig.defaultValue === undefined) {
              return inputFieldConfig;
            }
            const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);
            if (maybeNewType != null) {
              return {
                ...inputFieldConfig,
                defaultValue: fn(maybeNewType, inputFieldConfig.defaultValue)
              };
            }
          }
        });
      }
      function getNewType(newTypeMap, type) {
        if (graphql.isListType(type)) {
          const newType = getNewType(newTypeMap, type.ofType);
          return newType != null ? new graphql.GraphQLList(newType) : null;
        } else if (graphql.isNonNullType(type)) {
          const newType = getNewType(newTypeMap, type.ofType);
          return newType != null ? new graphql.GraphQLNonNull(newType) : null;
        } else if (graphql.isNamedType(type)) {
          const newType = newTypeMap[type.name];
          return newType != null ? newType : null;
        }
        return null;
      }
      function mapFields(originalTypeMap, schema, schemaMapper) {
        const newTypeMap = {};
        Object.keys(originalTypeMap).forEach(typeName => {
          if (!typeName.startsWith("__")) {
            const originalType = originalTypeMap[typeName];
            if (
              !graphql.isObjectType(originalType) &&
              !graphql.isInterfaceType(originalType) &&
              !graphql.isInputObjectType(originalType)
            ) {
              newTypeMap[typeName] = originalType;
              return;
            }
            const fieldMapper = getFieldMapper(schema, schemaMapper, typeName);
            if (fieldMapper == null) {
              newTypeMap[typeName] = originalType;
              return;
            }
            const config = originalType.toConfig();
            const originalFieldConfigMap = config.fields;
            const newFieldConfigMap = {};
            Object.keys(originalFieldConfigMap).forEach(fieldName => {
              const originalFieldConfig = originalFieldConfigMap[fieldName];
              const mappedField = fieldMapper(
                originalFieldConfig,
                fieldName,
                typeName,
                schema
              );
              if (mappedField === undefined) {
                newFieldConfigMap[fieldName] = originalFieldConfig;
              } else if (Array.isArray(mappedField)) {
                const [newFieldName, newFieldConfig] = mappedField;
                if (newFieldConfig.astNode != null) {
                  newFieldConfig.astNode = {
                    ...newFieldConfig.astNode,
                    name: {
                      ...newFieldConfig.astNode.name,
                      value: newFieldName
                    }
                  };
                }
                newFieldConfigMap[newFieldName] =
                  newFieldConfig === undefined
                    ? originalFieldConfig
                    : newFieldConfig;
              } else if (mappedField !== null) {
                newFieldConfigMap[fieldName] = mappedField;
              }
            });
            if (graphql.isObjectType(originalType)) {
              newTypeMap[typeName] = correctASTNodes(
                new graphql.GraphQLObjectType({
                  ...config,
                  fields: newFieldConfigMap
                })
              );
            } else if (graphql.isInterfaceType(originalType)) {
              newTypeMap[typeName] = correctASTNodes(
                new graphql.GraphQLInterfaceType({
                  ...config,
                  fields: newFieldConfigMap
                })
              );
            } else {
              newTypeMap[typeName] = correctASTNodes(
                new graphql.GraphQLInputObjectType({
                  ...config,
                  fields: newFieldConfigMap
                })
              );
            }
          }
        });
        return newTypeMap;
      }
      function mapArguments(originalTypeMap, schema, schemaMapper) {
        const newTypeMap = {};
        Object.keys(originalTypeMap).forEach(typeName => {
          if (!typeName.startsWith("__")) {
            const originalType = originalTypeMap[typeName];
            if (
              !graphql.isObjectType(originalType) &&
              !graphql.isInterfaceType(originalType)
            ) {
              newTypeMap[typeName] = originalType;
              return;
            }
            const argumentMapper = getArgumentMapper(schemaMapper);
            if (argumentMapper == null) {
              newTypeMap[typeName] = originalType;
              return;
            }
            const config = originalType.toConfig();
            const originalFieldConfigMap = config.fields;
            const newFieldConfigMap = {};
            Object.keys(originalFieldConfigMap).forEach(fieldName => {
              const originalFieldConfig = originalFieldConfigMap[fieldName];
              const originalArgumentConfigMap = originalFieldConfig.args;
              if (originalArgumentConfigMap == null) {
                newFieldConfigMap[fieldName] = originalFieldConfig;
                return;
              }
              const argumentNames = Object.keys(originalArgumentConfigMap);
              if (!argumentNames.length) {
                newFieldConfigMap[fieldName] = originalFieldConfig;
                return;
              }
              const newArgumentConfigMap = {};
              argumentNames.forEach(argumentName => {
                const originalArgumentConfig =
                  originalArgumentConfigMap[argumentName];
                const mappedArgument = argumentMapper(
                  originalArgumentConfig,
                  fieldName,
                  typeName,
                  schema
                );
                if (mappedArgument === undefined) {
                  newArgumentConfigMap[argumentName] = originalArgumentConfig;
                } else if (Array.isArray(mappedArgument)) {
                  const [newArgumentName, newArgumentConfig] = mappedArgument;
                  newArgumentConfigMap[newArgumentName] = newArgumentConfig;
                } else if (mappedArgument !== null) {
                  newArgumentConfigMap[argumentName] = mappedArgument;
                }
              });
              newFieldConfigMap[fieldName] = {
                ...originalFieldConfig,
                args: newArgumentConfigMap
              };
            });
            if (graphql.isObjectType(originalType)) {
              newTypeMap[typeName] = new graphql.GraphQLObjectType({
                ...config,
                fields: newFieldConfigMap
              });
            } else if (graphql.isInterfaceType(originalType)) {
              newTypeMap[typeName] = new graphql.GraphQLInterfaceType({
                ...config,
                fields: newFieldConfigMap
              });
            } else {
              newTypeMap[typeName] = new graphql.GraphQLInputObjectType({
                ...config,
                fields: newFieldConfigMap
              });
            }
          }
        });
        return newTypeMap;
      }
      function mapDirectives(originalDirectives, schema, schemaMapper) {
        const directiveMapper = getDirectiveMapper(schemaMapper);
        if (directiveMapper == null) {
          return originalDirectives.slice();
        }
        const newDirectives = [];
        originalDirectives.forEach(directive => {
          const mappedDirective = directiveMapper(directive, schema);
          if (mappedDirective === undefined) {
            newDirectives.push(directive);
          } else if (mappedDirective !== null) {
            newDirectives.push(mappedDirective);
          }
        });
        return newDirectives;
      }
      function getTypeSpecifiers(schema, typeName) {
        const type = schema.getType(typeName);
        const specifiers = [exports.MapperKind.TYPE];
        if (graphql.isObjectType(type)) {
          specifiers.push(
            exports.MapperKind.COMPOSITE_TYPE,
            exports.MapperKind.OBJECT_TYPE
          );
          const query = schema.getQueryType();
          const mutation = schema.getMutationType();
          const subscription = schema.getSubscriptionType();
          if (query != null && typeName === query.name) {
            specifiers.push(
              exports.MapperKind.ROOT_OBJECT,
              exports.MapperKind.QUERY
            );
          } else if (mutation != null && typeName === mutation.name) {
            specifiers.push(
              exports.MapperKind.ROOT_OBJECT,
              exports.MapperKind.MUTATION
            );
          } else if (subscription != null && typeName === subscription.name) {
            specifiers.push(
              exports.MapperKind.ROOT_OBJECT,
              exports.MapperKind.SUBSCRIPTION
            );
          }
        } else if (graphql.isInputObjectType(type)) {
          specifiers.push(exports.MapperKind.INPUT_OBJECT_TYPE);
        } else if (graphql.isInterfaceType(type)) {
          specifiers.push(
            exports.MapperKind.COMPOSITE_TYPE,
            exports.MapperKind.ABSTRACT_TYPE,
            exports.MapperKind.INTERFACE_TYPE
          );
        } else if (graphql.isUnionType(type)) {
          specifiers.push(
            exports.MapperKind.COMPOSITE_TYPE,
            exports.MapperKind.ABSTRACT_TYPE,
            exports.MapperKind.UNION_TYPE
          );
        } else if (graphql.isEnumType(type)) {
          specifiers.push(exports.MapperKind.ENUM_TYPE);
        } else if (graphql.isScalarType(type)) {
          specifiers.push(exports.MapperKind.SCALAR_TYPE);
        }
        return specifiers;
      }
      function getTypeMapper(schema, schemaMapper, typeName) {
        const specifiers = getTypeSpecifiers(schema, typeName);
        let typeMapper;
        const stack = [...specifiers];
        while (!typeMapper && stack.length > 0) {
          const next = stack.pop();
          typeMapper = schemaMapper[next];
        }
        return typeMapper != null ? typeMapper : null;
      }
      function getFieldSpecifiers(schema, typeName) {
        const type = schema.getType(typeName);
        const specifiers = [exports.MapperKind.FIELD];
        if (graphql.isObjectType(type)) {
          specifiers.push(
            exports.MapperKind.COMPOSITE_FIELD,
            exports.MapperKind.OBJECT_FIELD
          );
          const query = schema.getQueryType();
          const mutation = schema.getMutationType();
          const subscription = schema.getSubscriptionType();
          if (query != null && typeName === query.name) {
            specifiers.push(
              exports.MapperKind.ROOT_FIELD,
              exports.MapperKind.QUERY_ROOT_FIELD
            );
          } else if (mutation != null && typeName === mutation.name) {
            specifiers.push(
              exports.MapperKind.ROOT_FIELD,
              exports.MapperKind.MUTATION_ROOT_FIELD
            );
          } else if (subscription != null && typeName === subscription.name) {
            specifiers.push(
              exports.MapperKind.ROOT_FIELD,
              exports.MapperKind.SUBSCRIPTION_ROOT_FIELD
            );
          }
        } else if (graphql.isInterfaceType(type)) {
          specifiers.push(
            exports.MapperKind.COMPOSITE_FIELD,
            exports.MapperKind.INTERFACE_FIELD
          );
        } else if (graphql.isInputObjectType(type)) {
          specifiers.push(exports.MapperKind.INPUT_OBJECT_FIELD);
        }
        return specifiers;
      }
      function getFieldMapper(schema, schemaMapper, typeName) {
        const specifiers = getFieldSpecifiers(schema, typeName);
        let fieldMapper;
        const stack = [...specifiers];
        while (!fieldMapper && stack.length > 0) {
          const next = stack.pop();
          fieldMapper = schemaMapper[next];
        }
        return fieldMapper != null ? fieldMapper : null;
      }
      function getArgumentMapper(schemaMapper) {
        const argumentMapper = schemaMapper[exports.MapperKind.ARGUMENT];
        return argumentMapper != null ? argumentMapper : null;
      }
      function getDirectiveMapper(schemaMapper) {
        const directiveMapper = schemaMapper[exports.MapperKind.DIRECTIVE];
        return directiveMapper != null ? directiveMapper : null;
      }
      function getEnumValueMapper(schemaMapper) {
        const enumValueMapper = schemaMapper[exports.MapperKind.ENUM_VALUE];
        return enumValueMapper != null ? enumValueMapper : null;
      }
      function correctASTNodes(type) {
        if (graphql.isObjectType(type)) {
          const config = type.toConfig();
          if (config.astNode != null) {
            const fields = [];
            Object.values(config.fields).forEach(fieldConfig => {
              if (fieldConfig.astNode != null) {
                fields.push(fieldConfig.astNode);
              }
            });
            config.astNode = {
              ...config.astNode,
              kind: graphql.Kind.OBJECT_TYPE_DEFINITION,
              fields
            };
          }
          if (config.extensionASTNodes != null) {
            config.extensionASTNodes = config.extensionASTNodes.map(node => ({
              ...node,
              kind: graphql.Kind.OBJECT_TYPE_EXTENSION,
              fields: undefined
            }));
          }
          return new graphql.GraphQLObjectType(config);
        } else if (graphql.isInterfaceType(type)) {
          const config = type.toConfig();
          if (config.astNode != null) {
            const fields = [];
            Object.values(config.fields).forEach(fieldConfig => {
              if (fieldConfig.astNode != null) {
                fields.push(fieldConfig.astNode);
              }
            });
            config.astNode = {
              ...config.astNode,
              kind: graphql.Kind.INTERFACE_TYPE_DEFINITION,
              fields
            };
          }
          if (config.extensionASTNodes != null) {
            config.extensionASTNodes = config.extensionASTNodes.map(node => ({
              ...node,
              kind: graphql.Kind.INTERFACE_TYPE_EXTENSION,
              fields: undefined
            }));
          }
          return new graphql.GraphQLInterfaceType(config);
        } else if (graphql.isInputObjectType(type)) {
          const config = type.toConfig();
          if (config.astNode != null) {
            const fields = [];
            Object.values(config.fields).forEach(fieldConfig => {
              if (fieldConfig.astNode != null) {
                fields.push(fieldConfig.astNode);
              }
            });
            config.astNode = {
              ...config.astNode,
              kind: graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION,
              fields
            };
          }
          if (config.extensionASTNodes != null) {
            config.extensionASTNodes = config.extensionASTNodes.map(node => ({
              ...node,
              kind: graphql.Kind.INPUT_OBJECT_TYPE_EXTENSION,
              fields: undefined
            }));
          }
          return new graphql.GraphQLInputObjectType(config);
        } else if (graphql.isEnumType(type)) {
          const config = type.toConfig();
          if (config.astNode != null) {
            const values = [];
            Object.values(config.values).forEach(enumValueConfig => {
              if (enumValueConfig.astNode != null) {
                values.push(enumValueConfig.astNode);
              }
            });
            config.astNode = {
              ...config.astNode,
              values
            };
          }
          if (config.extensionASTNodes != null) {
            config.extensionASTNodes = config.extensionASTNodes.map(node => ({
              ...node,
              values: undefined
            }));
          }
          return new graphql.GraphQLEnumType(config);
        } else {
          return type;
        }
      }

      function filterSchema({
        schema,
        typeFilter = () => true,
        fieldFilter = undefined,
        rootFieldFilter = undefined,
        objectFieldFilter = undefined,
        interfaceFieldFilter = undefined,
        inputObjectFieldFilter = undefined,
        argumentFilter = undefined
      }) {
        const filteredSchema = mapSchema(schema, {
          [exports.MapperKind.QUERY]: type =>
            filterRootFields(type, "Query", rootFieldFilter, argumentFilter),
          [exports.MapperKind.MUTATION]: type =>
            filterRootFields(type, "Mutation", rootFieldFilter, argumentFilter),
          [exports.MapperKind.SUBSCRIPTION]: type =>
            filterRootFields(
              type,
              "Subscription",
              rootFieldFilter,
              argumentFilter
            ),
          [exports.MapperKind.OBJECT_TYPE]: type =>
            typeFilter(type.name, type)
              ? filterElementFields(
                  graphql.GraphQLObjectType,
                  type,
                  objectFieldFilter || fieldFilter,
                  argumentFilter
                )
              : null,
          [exports.MapperKind.INTERFACE_TYPE]: type =>
            typeFilter(type.name, type)
              ? filterElementFields(
                  graphql.GraphQLInterfaceType,
                  type,
                  interfaceFieldFilter || fieldFilter,
                  argumentFilter
                )
              : null,
          [exports.MapperKind.INPUT_OBJECT_TYPE]: type =>
            typeFilter(type.name, type)
              ? filterElementFields(
                  graphql.GraphQLInputObjectType,
                  type,
                  inputObjectFieldFilter || fieldFilter
                )
              : null,
          [exports.MapperKind.UNION_TYPE]: type =>
            typeFilter(type.name, type) ? undefined : null,
          [exports.MapperKind.ENUM_TYPE]: type =>
            typeFilter(type.name, type) ? undefined : null,
          [exports.MapperKind.SCALAR_TYPE]: type =>
            typeFilter(type.name, type) ? undefined : null
        });
        return filteredSchema;
      }
      function filterRootFields(
        type,
        operation,
        rootFieldFilter,
        argumentFilter
      ) {
        if (rootFieldFilter || argumentFilter) {
          const config = type.toConfig();
          Object.entries(config.fields).forEach(([fieldName, field]) => {
            if (
              rootFieldFilter &&
              !rootFieldFilter(operation, fieldName, config.fields[fieldName])
            ) {
              delete config.fields[fieldName];
            } else if (argumentFilter) {
              for (const argName of Object.keys(field.args)) {
                if (
                  !argumentFilter(
                    operation,
                    fieldName,
                    argName,
                    field.args[argName]
                  )
                ) {
                  delete field.args[argName];
                }
              }
            }
          });
          return new graphql.GraphQLObjectType(config);
        }
        return type;
      }
      function filterElementFields(
        ElementConstructor,
        type,
        fieldFilter,
        argumentFilter
      ) {
        if (fieldFilter || argumentFilter) {
          const config = type.toConfig();
          Object.entries(config.fields).forEach(([fieldName, field]) => {
            if (
              fieldFilter &&
              !fieldFilter(type.name, fieldName, config.fields[fieldName])
            ) {
              delete config.fields[fieldName];
            } else if (argumentFilter && "args" in field) {
              for (const argName of Object.keys(field.args)) {
                if (
                  !argumentFilter(
                    type.name,
                    fieldName,
                    argName,
                    field.args[argName]
                  )
                ) {
                  delete field.args[argName];
                }
              }
            }
          });
          return new ElementConstructor(config);
        }
      }

      function cloneDirective(directive) {
        return graphql.isSpecifiedDirective(directive)
          ? directive
          : new graphql.GraphQLDirective(directive.toConfig());
      }
      function cloneType(type) {
        if (graphql.isObjectType(type)) {
          const config = type.toConfig();
          return new graphql.GraphQLObjectType({
            ...config,
            interfaces:
              typeof config.interfaces === "function"
                ? config.interfaces
                : config.interfaces.slice()
          });
        } else if (graphql.isInterfaceType(type)) {
          const config = type.toConfig();
          const newConfig = {
            ...config,
            interfaces: [
              ...((typeof config.interfaces === "function"
                ? config.interfaces()
                : config.interfaces) || [])
            ]
          };
          return new graphql.GraphQLInterfaceType(newConfig);
        } else if (graphql.isUnionType(type)) {
          const config = type.toConfig();
          return new graphql.GraphQLUnionType({
            ...config,
            types: config.types.slice()
          });
        } else if (graphql.isInputObjectType(type)) {
          return new graphql.GraphQLInputObjectType(type.toConfig());
        } else if (graphql.isEnumType(type)) {
          return new graphql.GraphQLEnumType(type.toConfig());
        } else if (graphql.isScalarType(type)) {
          return graphql.isSpecifiedScalarType(type)
            ? type
            : new graphql.GraphQLScalarType(type.toConfig());
        }
        throw new Error(`Invalid type ${type}`);
      }
      function cloneSchema(schema) {
        return mapSchema(schema);
      }

      // Update any references to named schema types that disagree with the named
      // types found in schema.getTypeMap().
      //
      // healSchema and its callers (visitSchema/visitSchemaDirectives) all modify the schema in place.
      // Therefore, private variables (such as the stored implementation map and the proper root types)
      // are not updated.
      //
      // If this causes issues, the schema could be more aggressively healed as follows:
      //
      // healSchema(schema);
      // const config = schema.toConfig()
      // const healedSchema = new GraphQLSchema({
      //   ...config,
      //   query: schema.getType('<desired new root query type name>'),
      //   mutation: schema.getType('<desired new root mutation type name>'),
      //   subscription: schema.getType('<desired new root subscription type name>'),
      // });
      //
      // One can then also -- if necessary --  assign the correct private variables to the initial schema
      // as follows:
      // Object.assign(schema, healedSchema);
      //
      // These steps are not taken automatically to preserve backwards compatibility with graphql-tools v4.
      // See https://github.com/ardatan/graphql-tools/issues/1462
      //
      // They were briefly taken in v5, but can now be phased out as they were only required when other
      // areas of the codebase were using healSchema and visitSchema more extensively.
      //
      function healSchema(schema) {
        healTypes(schema.getTypeMap(), schema.getDirectives());
        return schema;
      }
      function healTypes(originalTypeMap, directives) {
        const actualNamedTypeMap = Object.create(null);
        // If any of the .name properties of the GraphQLNamedType objects in
        // schema.getTypeMap() have changed, the keys of the type map need to
        // be updated accordingly.
        Object.entries(originalTypeMap).forEach(([typeName, namedType]) => {
          if (namedType == null || typeName.startsWith("__")) {
            return;
          }
          const actualName = namedType.name;
          if (actualName.startsWith("__")) {
            return;
          }
          if (actualName in actualNamedTypeMap) {
            throw new Error(`Duplicate schema type name ${actualName}`);
          }
          actualNamedTypeMap[actualName] = namedType;
          // Note: we are deliberately leaving namedType in the schema by its
          // original name (which might be different from actualName), so that
          // references by that name can be healed.
        });
        // Now add back every named type by its actual name.
        Object.entries(actualNamedTypeMap).forEach(([typeName, namedType]) => {
          originalTypeMap[typeName] = namedType;
        });
        // Directive declaration argument types can refer to named types.
        directives.forEach(decl => {
          decl.args = decl.args.filter(arg => {
            arg.type = healType(arg.type);
            return arg.type !== null;
          });
        });
        Object.entries(originalTypeMap).forEach(([typeName, namedType]) => {
          // Heal all named types, except for dangling references, kept only to redirect.
          if (!typeName.startsWith("__") && typeName in actualNamedTypeMap) {
            if (namedType != null) {
              healNamedType(namedType);
            }
          }
        });
        for (const typeName of Object.keys(originalTypeMap)) {
          if (!typeName.startsWith("__") && !(typeName in actualNamedTypeMap)) {
            delete originalTypeMap[typeName];
          }
        }
        function healNamedType(type) {
          if (graphql.isObjectType(type)) {
            healFields(type);
            healInterfaces(type);
            return;
          } else if (graphql.isInterfaceType(type)) {
            healFields(type);
            if ("getInterfaces" in type) {
              healInterfaces(type);
            }
            return;
          } else if (graphql.isUnionType(type)) {
            healUnderlyingTypes(type);
            return;
          } else if (graphql.isInputObjectType(type)) {
            healInputFields(type);
            return;
          } else if (graphql.isLeafType(type)) {
            return;
          }
          throw new Error(`Unexpected schema type: ${type}`);
        }
        function healFields(type) {
          const fieldMap = type.getFields();
          for (const [key, field] of Object.entries(fieldMap)) {
            field.args
              .map(arg => {
                arg.type = healType(arg.type);
                return arg.type === null ? null : arg;
              })
              .filter(Boolean);
            field.type = healType(field.type);
            if (field.type === null) {
              delete fieldMap[key];
            }
          }
        }
        function healInterfaces(type) {
          if ("getInterfaces" in type) {
            const interfaces = type.getInterfaces();
            interfaces.push(
              ...interfaces
                .splice(0)
                .map(iface => healType(iface))
                .filter(Boolean)
            );
          }
        }
        function healInputFields(type) {
          const fieldMap = type.getFields();
          for (const [key, field] of Object.entries(fieldMap)) {
            field.type = healType(field.type);
            if (field.type === null) {
              delete fieldMap[key];
            }
          }
        }
        function healUnderlyingTypes(type) {
          const types = type.getTypes();
          types.push(
            ...types
              .splice(0)
              .map(t => healType(t))
              .filter(Boolean)
          );
        }
        function healType(type) {
          // Unwrap the two known wrapper types
          if (graphql.isListType(type)) {
            const healedType = healType(type.ofType);
            return healedType != null
              ? new graphql.GraphQLList(healedType)
              : null;
          } else if (graphql.isNonNullType(type)) {
            const healedType = healType(type.ofType);
            return healedType != null
              ? new graphql.GraphQLNonNull(healedType)
              : null;
          } else if (graphql.isNamedType(type)) {
            // If a type annotation on a field or an argument or a union member is
            // any `GraphQLNamedType` with a `name`, then it must end up identical
            // to `schema.getType(name)`, since `schema.getTypeMap()` is the source
            // of truth for all named schema types.
            // Note that new types can still be simply added by adding a field, as
            // the official type will be undefined, not null.
            const officialType = originalTypeMap[type.name];
            if (officialType && type !== officialType) {
              return officialType;
            }
          }
          return type;
        }
      }

      // Abstract base class of any visitor implementation, defining the available
      // visitor methods along with their parameter types, and providing a static
      // helper function for determining whether a subclass implements a given
      // visitor method, as opposed to inheriting one of the stubs defined here.
      class SchemaVisitor {
        // Determine if this SchemaVisitor (sub)class implements a particular
        // visitor method.
        static implementsVisitorMethod(methodName) {
          if (!methodName.startsWith("visit")) {
            return false;
          }
          const method = this.prototype[methodName];
          if (typeof method !== "function") {
            return false;
          }
          if (this.name === "SchemaVisitor") {
            // The SchemaVisitor class implements every visitor method.
            return true;
          }
          const stub = SchemaVisitor.prototype[methodName];
          if (method === stub) {
            // If this.prototype[methodName] was just inherited from SchemaVisitor,
            // then this class does not really implement the method.
            return false;
          }
          return true;
        }
        // Concrete subclasses of SchemaVisitor should override one or more of these
        // visitor methods, in order to express their interest in handling certain
        // schema types/locations. Each method may return null to remove the given
        // type from the schema, a non-null value of the same type to update the
        // type in the schema, or nothing to leave the type as it was.
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        visitSchema(_schema) {}
        visitScalar(
          _scalar
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        visitObject(
          _object
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        visitFieldDefinition(
          _field,
          _details
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        visitArgumentDefinition(
          _argument,
          _details
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        visitInterface(
          _iface
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        visitUnion(_union) {}
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        visitEnum(_type) {}
        visitEnumValue(
          _value,
          _details
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        visitInputObject(
          _object
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
        visitInputFieldDefinition(
          _field,
          _details
          // eslint-disable-next-line @typescript-eslint/no-empty-function
        ) {}
      }

      function isSchemaVisitor(obj) {
        if ("schema" in obj && graphql.isSchema(obj.schema)) {
          if ("visitSchema" in obj && typeof obj.visitSchema === "function") {
            return true;
          }
        }
        return false;
      }
      // Generic function for visiting GraphQLSchema objects.
      function visitSchema(
        schema,
        // To accommodate as many different visitor patterns as possible, the
        // visitSchema function does not simply accept a single instance of the
        // SchemaVisitor class, but instead accepts a function that takes the
        // current VisitableSchemaType object and the name of a visitor method and
        // returns an array of SchemaVisitor instances that implement the visitor
        // method and have an interest in handling the given VisitableSchemaType
        // object. In the simplest case, this function can always return an array
        // containing a single visitor object, without even looking at the type or
        // methodName parameters. In other cases, this function might sometimes
        // return an empty array to indicate there are no visitors that should be
        // applied to the given VisitableSchemaType object. For an example of a
        // visitor pattern that benefits from this abstraction, see the
        // SchemaDirectiveVisitor class below.
        visitorOrVisitorSelector
      ) {
        const visitorSelector =
          typeof visitorOrVisitorSelector === "function"
            ? visitorOrVisitorSelector
            : () => visitorOrVisitorSelector;
        // Helper function that calls visitorSelector and applies the resulting
        // visitors to the given type, with arguments [type, ...args].
        function callMethod(methodName, type, ...args) {
          let visitors = visitorSelector(type, methodName);
          visitors = Array.isArray(visitors) ? visitors : [visitors];
          let finalType = type;
          visitors.every(visitorOrVisitorDef => {
            let newType;
            if (isSchemaVisitor(visitorOrVisitorDef)) {
              newType = visitorOrVisitorDef[methodName](finalType, ...args);
            } else if (
              graphql.isNamedType(finalType) &&
              (methodName === "visitScalar" ||
                methodName === "visitEnum" ||
                methodName === "visitObject" ||
                methodName === "visitInputObject" ||
                methodName === "visitUnion" ||
                methodName === "visitInterface")
            ) {
              const specifiers = getTypeSpecifiers$1(finalType, schema);
              const typeVisitor = getVisitor(visitorOrVisitorDef, specifiers);
              newType =
                typeVisitor != null
                  ? typeVisitor(finalType, schema)
                  : undefined;
            }
            if (typeof newType === "undefined") {
              // Keep going without modifying type.
              return true;
            }
            if (methodName === "visitSchema" || graphql.isSchema(finalType)) {
              throw new Error(
                `Method ${methodName} cannot replace schema with ${newType}`
              );
            }
            if (newType === null) {
              // Stop the loop and return null form callMethod, which will cause
              // the type to be removed from the schema.
              finalType = null;
              return false;
            }
            // Update type to the new type returned by the visitor method, so that
            // later directives will see the new type, and callMethod will return
            // the final type.
            finalType = newType;
            return true;
          });
          // If there were no directives for this type object, or if all visitor
          // methods returned nothing, type will be returned unmodified.
          return finalType;
        }
        // Recursive helper function that calls any appropriate visitor methods for
        // each object in the schema, then traverses the object's children (if any).
        function visit(type) {
          if (graphql.isSchema(type)) {
            // Unlike the other types, the root GraphQLSchema object cannot be
            // replaced by visitor methods, because that would make life very hard
            // for SchemaVisitor subclasses that rely on the original schema object.
            callMethod("visitSchema", type);
            const typeMap = type.getTypeMap();
            Object.entries(typeMap).forEach(([typeName, namedType]) => {
              if (!typeName.startsWith("__") && namedType != null) {
                // Call visit recursively to let it determine which concrete
                // subclass of GraphQLNamedType we found in the type map.
                // We do not use updateEachKey because we want to preserve
                // deleted types in the typeMap so that other types that reference
                // the deleted types can be healed.
                typeMap[typeName] = visit(namedType);
              }
            });
            return type;
          }
          if (graphql.isObjectType(type)) {
            // Note that callMethod('visitObject', type) may not actually call any
            // methods, if there are no @directive annotations associated with this
            // type, or if this SchemaDirectiveVisitor subclass does not override
            // the visitObject method.
            const newObject = callMethod("visitObject", type);
            if (newObject != null) {
              visitFields(newObject);
            }
            return newObject;
          }
          if (graphql.isInterfaceType(type)) {
            const newInterface = callMethod("visitInterface", type);
            if (newInterface != null) {
              visitFields(newInterface);
            }
            return newInterface;
          }
          if (graphql.isInputObjectType(type)) {
            const newInputObject = callMethod("visitInputObject", type);
            if (newInputObject != null) {
              const fieldMap = newInputObject.getFields();
              for (const key of Object.keys(fieldMap)) {
                fieldMap[key] = callMethod(
                  "visitInputFieldDefinition",
                  fieldMap[key],
                  {
                    // Since we call a different method for input object fields, we
                    // can't reuse the visitFields function here.
                    objectType: newInputObject
                  }
                );
                if (!fieldMap[key]) {
                  delete fieldMap[key];
                }
              }
            }
            return newInputObject;
          }
          if (graphql.isScalarType(type)) {
            return callMethod("visitScalar", type);
          }
          if (graphql.isUnionType(type)) {
            return callMethod("visitUnion", type);
          }
          if (graphql.isEnumType(type)) {
            let newEnum = callMethod("visitEnum", type);
            if (newEnum != null) {
              const newValues = newEnum
                .getValues()
                .map(value =>
                  callMethod("visitEnumValue", value, {
                    enumType: newEnum
                  })
                )
                .filter(Boolean);
              // Recreate the enum type if any of the values changed
              const valuesUpdated = newValues.some(
                (value, index) => value !== newEnum.getValues()[index]
              );
              if (valuesUpdated) {
                newEnum = new graphql.GraphQLEnumType({
                  ...newEnum.toConfig(),
                  values: newValues.reduce(
                    (prev, value) => ({
                      ...prev,
                      [value.name]: {
                        value: value.value,
                        deprecationReason: value.deprecationReason,
                        description: value.description,
                        astNode: value.astNode
                      }
                    }),
                    {}
                  )
                });
              }
            }
            return newEnum;
          }
          throw new Error(`Unexpected schema type: ${type}`);
        }
        function visitFields(type) {
          const fieldMap = type.getFields();
          for (const [key, field] of Object.entries(fieldMap)) {
            // It would be nice if we could call visit(field) recursively here, but
            // GraphQLField is merely a type, not a value that can be detected using
            // an instanceof check, so we have to visit the fields in this lexical
            // context, so that TypeScript can validate the call to
            // visitFieldDefinition.
            const newField = callMethod("visitFieldDefinition", field, {
              // While any field visitor needs a reference to the field object, some
              // field visitors may also need to know the enclosing (parent) type,
              // perhaps to determine if the parent is a GraphQLObjectType or a
              // GraphQLInterfaceType. To obtain a reference to the parent, a
              // visitor method can have a second parameter, which will be an object
              // with an .objectType property referring to the parent.
              objectType: type
            });
            if (
              (newField === null || newField === void 0
                ? void 0
                : newField.args) != null
            ) {
              newField.args = newField.args
                .map(arg =>
                  callMethod("visitArgumentDefinition", arg, {
                    // Like visitFieldDefinition, visitArgumentDefinition takes a
                    // second parameter that provides additional context, namely the
                    // parent .field and grandparent .objectType. Remember that the
                    // current GraphQLSchema is always available via this.schema.
                    field: newField,
                    objectType: type
                  })
                )
                .filter(Boolean);
            }
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (newField) {
              fieldMap[key] = newField;
            } else {
              delete fieldMap[key];
            }
          }
        }
        visit(schema);
        // Automatically update any references to named schema types replaced
        // during the traversal, so implementers don't have to worry about that.
        healSchema(schema);
        // Return schema for convenience, even though schema parameter has all updated types.
        return schema;
      }
      function getTypeSpecifiers$1(type, schema) {
        const specifiers = [exports.VisitSchemaKind.TYPE];
        if (graphql.isObjectType(type)) {
          specifiers.push(
            exports.VisitSchemaKind.COMPOSITE_TYPE,
            exports.VisitSchemaKind.OBJECT_TYPE
          );
          const query = schema.getQueryType();
          const mutation = schema.getMutationType();
          const subscription = schema.getSubscriptionType();
          if (type === query) {
            specifiers.push(
              exports.VisitSchemaKind.ROOT_OBJECT,
              exports.VisitSchemaKind.QUERY
            );
          } else if (type === mutation) {
            specifiers.push(
              exports.VisitSchemaKind.ROOT_OBJECT,
              exports.VisitSchemaKind.MUTATION
            );
          } else if (type === subscription) {
            specifiers.push(
              exports.VisitSchemaKind.ROOT_OBJECT,
              exports.VisitSchemaKind.SUBSCRIPTION
            );
          }
        } else if (graphql.isInputType(type)) {
          specifiers.push(exports.VisitSchemaKind.INPUT_OBJECT_TYPE);
        } else if (graphql.isInterfaceType(type)) {
          specifiers.push(
            exports.VisitSchemaKind.COMPOSITE_TYPE,
            exports.VisitSchemaKind.ABSTRACT_TYPE,
            exports.VisitSchemaKind.INTERFACE_TYPE
          );
        } else if (graphql.isUnionType(type)) {
          specifiers.push(
            exports.VisitSchemaKind.COMPOSITE_TYPE,
            exports.VisitSchemaKind.ABSTRACT_TYPE,
            exports.VisitSchemaKind.UNION_TYPE
          );
        } else if (graphql.isEnumType(type)) {
          specifiers.push(exports.VisitSchemaKind.ENUM_TYPE);
        } else if (graphql.isScalarType(type)) {
          specifiers.push(exports.VisitSchemaKind.SCALAR_TYPE);
        }
        return specifiers;
      }
      function getVisitor(visitorDef, specifiers) {
        let typeVisitor;
        const stack = [...specifiers];
        while (!typeVisitor && stack.length > 0) {
          const next = stack.pop();
          typeVisitor = visitorDef[next];
        }
        return typeVisitor != null ? typeVisitor : null;
      }

      // This class represents a reusable implementation of a @directive that may
      // appear in a GraphQL schema written in Schema Definition Language.
      //
      // By overriding one or more visit{Object,Union,...} methods, a subclass
      // registers interest in certain schema types, such as GraphQLObjectType,
      // GraphQLUnionType, etc. When SchemaDirectiveVisitor.visitSchemaDirectives is
      // called with a GraphQLSchema object and a map of visitor subclasses, the
      // overridden methods of those subclasses allow the visitors to obtain
      // references to any type objects that have @directives attached to them,
      // enabling visitors to inspect or modify the schema as appropriate.
      //
      // For example, if a directive called @rest(url: "...") appears after a field
      // definition, a SchemaDirectiveVisitor subclass could provide meaning to that
      // directive by overriding the visitFieldDefinition method (which receives a
      // GraphQLField parameter), and then the body of that visitor method could
      // manipulate the field's resolver function to fetch data from a REST endpoint
      // described by the url argument passed to the @rest directive:
      //
      //   const typeDefs = `
      //   type Query {
      //     people: [Person] @rest(url: "/api/v1/people")
      //   }`;
      //
      //   const schema = makeExecutableSchema({ typeDefs });
      //
      //   SchemaDirectiveVisitor.visitSchemaDirectives(schema, {
      //     rest: class extends SchemaDirectiveVisitor {
      //       public visitFieldDefinition(field: GraphQLField<any, any>) {
      //         const { url } = this.args;
      //         field.resolve = () => fetch(url);
      //       }
      //     }
      //   });
      //
      // The subclass in this example is defined as an anonymous class expression,
      // for brevity. A truly reusable SchemaDirectiveVisitor would most likely be
      // defined in a library using a named class declaration, and then exported for
      // consumption by other modules and packages.
      //
      // See below for a complete list of overridable visitor methods, their
      // parameter types, and more details about the properties exposed by instances
      // of the SchemaDirectiveVisitor class.
      class SchemaDirectiveVisitor extends SchemaVisitor {
        // Mark the constructor protected to enforce passing SchemaDirectiveVisitor
        // subclasses (not instances) to visitSchemaDirectives.
        constructor(config) {
          super();
          this.name = config.name;
          this.args = config.args;
          this.visitedType = config.visitedType;
          this.schema = config.schema;
          this.context = config.context;
        }
        // Override this method to return a custom GraphQLDirective (or modify one
        // already present in the schema) to enforce argument types, provide default
        // argument values, or specify schema locations where this @directive may
        // appear. By default, any declaration found in the schema will be returned.
        static getDirectiveDeclaration(directiveName, schema) {
          return schema.getDirective(directiveName);
        }
        // Call SchemaDirectiveVisitor.visitSchemaDirectives to visit every
        // @directive in the schema and create an appropriate SchemaDirectiveVisitor
        // instance to visit the object decorated by the @directive.
        static visitSchemaDirectives(
          schema,
          // The keys of this object correspond to directive names as they appear
          // in the schema, and the values should be subclasses (not instances!)
          // of the SchemaDirectiveVisitor class. This distinction is important
          // because a new SchemaDirectiveVisitor instance will be created each
          // time a matching directive is found in the schema AST, with arguments
          // and other metadata specific to that occurrence. To help prevent the
          // mistake of passing instances, the SchemaDirectiveVisitor constructor
          // method is marked as protected.
          directiveVisitors,
          // Optional context object that will be available to all visitor instances
          // via this.context. Defaults to an empty null-prototype object.
          context = Object.create(null),
          // The visitSchemaDirectives method returns a map from directive names to
          // lists of SchemaDirectiveVisitors created while visiting the schema.
          pathToDirectivesInExtensions = ["directives"]
        ) {
          // If the schema declares any directives for public consumption, record
          // them here so that we can properly coerce arguments when/if we encounter
          // an occurrence of the directive while walking the schema below.
          const declaredDirectives = this.getDeclaredDirectives(
            schema,
            directiveVisitors
          );
          // Map from directive names to lists of SchemaDirectiveVisitor instances
          // created while visiting the schema.
          const createdVisitors = Object.keys(directiveVisitors).reduce(
            (prev, item) => ({
              ...prev,
              [item]: []
            }),
            {}
          );
          const directiveVisitorMap = Object.entries(directiveVisitors).reduce(
            (prev, [key, value]) => ({
              ...prev,
              [key]: value
            }),
            {}
          );
          function visitorSelector(type, methodName) {
            var _a, _b;
            const directivesInExtensions = pathToDirectivesInExtensions.reduce(
              (acc, pathSegment) => (acc == null ? acc : acc[pathSegment]),
              type === null || type === void 0 ? void 0 : type.extensions
            );
            const directives = Object.create(null);
            if (directivesInExtensions != null) {
              Object.entries(directivesInExtensions).forEach(
                ([directiveName, directiveValue]) => {
                  if (!directives[directiveName]) {
                    directives[directiveName] = [directiveValue];
                  } else {
                    directives[directiveName].push([directiveValue]);
                  }
                }
              );
            } else {
              let directiveNodes =
                (_b =
                  (_a =
                    type === null || type === void 0
                      ? void 0
                      : type.astNode) === null || _a === void 0
                    ? void 0
                    : _a.directives) !== null && _b !== void 0
                  ? _b
                  : [];
              const extensionASTNodes = type.extensionASTNodes;
              if (extensionASTNodes != null) {
                extensionASTNodes.forEach(extensionASTNode => {
                  if (extensionASTNode.directives != null) {
                    directiveNodes = directiveNodes.concat(
                      extensionASTNode.directives
                    );
                  }
                });
              }
              directiveNodes.forEach(directiveNode => {
                const directiveName = directiveNode.name.value;
                const decl = declaredDirectives[directiveName];
                let args;
                if (decl != null) {
                  // If this directive was explicitly declared, use the declared
                  // argument types (and any default values) to check, coerce, and/or
                  // supply default values for the given arguments.
                  args = getArgumentValues(decl, directiveNode);
                } else {
                  // If this directive was not explicitly declared, just convert the
                  // argument nodes to their corresponding JavaScript values.
                  args = Object.create(null);
                  if (directiveNode.arguments != null) {
                    directiveNode.arguments.forEach(arg => {
                      args[arg.name.value] = graphql.valueFromASTUntyped(
                        arg.value
                      );
                    });
                  }
                }
                if (!directives[directiveName]) {
                  directives[directiveName] = [args];
                } else {
                  directives[directiveName].push(args);
                }
              });
            }
            const visitors = [];
            Object.entries(directives).forEach(
              ([directiveName, directiveValues]) => {
                if (!(directiveName in directiveVisitorMap)) {
                  return;
                }
                const VisitorClass = directiveVisitorMap[directiveName];
                // Avoid creating visitor objects if visitorClass does not override
                // the visitor method named by methodName.
                if (!VisitorClass.implementsVisitorMethod(methodName)) {
                  return;
                }
                directiveValues.forEach(directiveValue => {
                  // As foretold in comments near the top of the visitSchemaDirectives
                  // method, this is where instances of the SchemaDirectiveVisitor class
                  // get created and assigned names. While subclasses could override the
                  // constructor method, the constructor is marked as protected, so
                  // these are the only arguments that will ever be passed.
                  visitors.push(
                    new VisitorClass({
                      name: directiveName,
                      args: directiveValue,
                      visitedType: type,
                      schema,
                      context
                    })
                  );
                });
              }
            );
            if (visitors.length > 0) {
              visitors.forEach(visitor => {
                createdVisitors[visitor.name].push(visitor);
              });
            }
            return visitors;
          }
          visitSchema(schema, visitorSelector);
          return createdVisitors;
        }
        static getDeclaredDirectives(schema, directiveVisitors) {
          const declaredDirectives = schema.getDirectives().reduce(
            (prev, curr) => ({
              ...prev,
              [curr.name]: curr
            }),
            {}
          );
          // If the visitor subclass overrides getDirectiveDeclaration, and it
          // returns a non-null GraphQLDirective, use that instead of any directive
          // declared in the schema itself. Reasoning: if a SchemaDirectiveVisitor
          // goes to the trouble of implementing getDirectiveDeclaration, it should
          // be able to rely on that implementation.
          Object.entries(directiveVisitors).forEach(
            ([directiveName, visitorClass]) => {
              const decl = visitorClass.getDirectiveDeclaration(
                directiveName,
                schema
              );
              if (decl != null) {
                declaredDirectives[directiveName] = decl;
              }
            }
          );
          Object.entries(declaredDirectives).forEach(([name, decl]) => {
            if (!(name in directiveVisitors)) {
              // SchemaDirectiveVisitors.visitSchemaDirectives might be called
              // multiple times with partial directiveVisitors maps, so it's not
              // necessarily an error for directiveVisitors to be missing an
              // implementation of a directive that was declared in the schema.
              return;
            }
            const visitorClass = directiveVisitors[name];
            decl.locations.forEach(loc => {
              const visitorMethodName = directiveLocationToVisitorMethodName(
                loc
              );
              if (
                SchemaVisitor.implementsVisitorMethod(visitorMethodName) &&
                !visitorClass.implementsVisitorMethod(visitorMethodName)
              ) {
                // While visitor subclasses may implement extra visitor methods,
                // it's definitely a mistake if the GraphQLDirective declares itself
                // applicable to certain schema locations, and the visitor subclass
                // does not implement all the corresponding methods.
                throw new Error(
                  `SchemaDirectiveVisitor for @${name} must implement ${visitorMethodName} method`
                );
              }
            });
          });
          return declaredDirectives;
        }
      }
      // Convert a string like "FIELD_DEFINITION" to "visitFieldDefinition".
      function directiveLocationToVisitorMethodName(loc) {
        return (
          "visit" +
          loc.replace(
            /([^_]*)_?/g,
            (_wholeMatch, part) =>
              part.charAt(0).toUpperCase() + part.slice(1).toLowerCase()
          )
        );
      }

      function getResolversFromSchema(schema) {
        const resolvers = Object.create({});
        const typeMap = schema.getTypeMap();
        Object.keys(typeMap).forEach(typeName => {
          if (!typeName.startsWith("__")) {
            const type = typeMap[typeName];
            if (graphql.isScalarType(type)) {
              if (!graphql.isSpecifiedScalarType(type)) {
                const config = type.toConfig();
                delete config.astNode; // avoid AST duplication elsewhere
                resolvers[typeName] = new graphql.GraphQLScalarType(config);
              }
            } else if (graphql.isEnumType(type)) {
              resolvers[typeName] = {};
              const values = type.getValues();
              values.forEach(value => {
                resolvers[typeName][value.name] = value.value;
              });
            } else if (graphql.isInterfaceType(type)) {
              if (type.resolveType != null) {
                resolvers[typeName] = {
                  __resolveType: type.resolveType
                };
              }
            } else if (graphql.isUnionType(type)) {
              if (type.resolveType != null) {
                resolvers[typeName] = {
                  __resolveType: type.resolveType
                };
              }
            } else if (graphql.isObjectType(type)) {
              resolvers[typeName] = {};
              if (type.isTypeOf != null) {
                resolvers[typeName].__isTypeOf = type.isTypeOf;
              }
              const fields = type.getFields();
              Object.keys(fields).forEach(fieldName => {
                var _a, _b;
                const field = fields[fieldName];
                if (field.subscribe != null) {
                  resolvers[typeName][fieldName] =
                    resolvers[typeName][fieldName] || {};
                  resolvers[typeName][fieldName].subscribe = field.subscribe;
                }
                if (
                  field.resolve != null &&
                  ((_a = field.resolve) === null || _a === void 0
                    ? void 0
                    : _a.name) !== "defaultFieldResolver" &&
                  ((_b = field.resolve) === null || _b === void 0
                    ? void 0
                    : _b.name) !== "defaultMergedResolver"
                ) {
                  resolvers[typeName][fieldName] =
                    resolvers[typeName][fieldName] || {};
                  resolvers[typeName][fieldName].resolve = field.resolve;
                }
              });
            }
          }
        });
        return resolvers;
      }

      function forEachField(schema, fn) {
        const typeMap = schema.getTypeMap();
        Object.keys(typeMap).forEach(typeName => {
          const type = typeMap[typeName];
          // TODO: maybe have an option to include these?
          if (
            !graphql.getNamedType(type).name.startsWith("__") &&
            graphql.isObjectType(type)
          ) {
            const fields = type.getFields();
            Object.keys(fields).forEach(fieldName => {
              const field = fields[fieldName];
              fn(field, typeName, fieldName);
            });
          }
        });
      }

      function forEachDefaultValue(schema, fn) {
        const typeMap = schema.getTypeMap();
        Object.keys(typeMap).forEach(typeName => {
          const type = typeMap[typeName];
          if (!graphql.getNamedType(type).name.startsWith("__")) {
            if (graphql.isObjectType(type)) {
              const fields = type.getFields();
              Object.keys(fields).forEach(fieldName => {
                const field = fields[fieldName];
                field.args.forEach(arg => {
                  arg.defaultValue = fn(arg.type, arg.defaultValue);
                });
              });
            } else if (graphql.isInputObjectType(type)) {
              const fields = type.getFields();
              Object.keys(fields).forEach(fieldName => {
                const field = fields[fieldName];
                field.defaultValue = fn(field.type, field.defaultValue);
              });
            }
          }
        });
      }

      // addTypes uses toConfig to create a new schema with a new or replaced
      function addTypes(schema, newTypesOrDirectives) {
        const queryType = schema.getQueryType();
        const mutationType = schema.getMutationType();
        const subscriptionType = schema.getSubscriptionType();
        const queryTypeName = queryType != null ? queryType.name : undefined;
        const mutationTypeName =
          mutationType != null ? mutationType.name : undefined;
        const subscriptionTypeName =
          subscriptionType != null ? subscriptionType.name : undefined;
        const config = schema.toConfig();
        const originalTypeMap = {};
        config.types.forEach(type => {
          originalTypeMap[type.name] = type;
        });
        const originalDirectiveMap = {};
        config.directives.forEach(directive => {
          originalDirectiveMap[directive.name] = directive;
        });
        newTypesOrDirectives.forEach(newTypeOrDirective => {
          if (graphql.isNamedType(newTypeOrDirective)) {
            originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;
          } else if (graphql.isDirective(newTypeOrDirective)) {
            originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;
          }
        });
        const { typeMap, directives } = rewireTypes(
          originalTypeMap,
          Object.keys(originalDirectiveMap).map(
            directiveName => originalDirectiveMap[directiveName]
          )
        );
        return new graphql.GraphQLSchema({
          ...config,
          query: queryTypeName ? typeMap[queryTypeName] : undefined,
          mutation: mutationTypeName ? typeMap[mutationTypeName] : undefined,
          subscription:
            subscriptionTypeName != null
              ? typeMap[subscriptionTypeName]
              : undefined,
          types: Object.keys(typeMap).map(typeName => typeMap[typeName]),
          directives
        });
      }

      /**
       * Prunes the provided schema, removing unused and empty types
       * @param schema The schema to prune
       * @param options Additional options for removing unused types from the schema
       */
      function pruneSchema(schema, options = {}) {
        const pruningContext = {
          schema,
          unusedTypes: Object.create(null),
          implementations: Object.create(null)
        };
        Object.keys(schema.getTypeMap()).forEach(typeName => {
          const type = schema.getType(typeName);
          if ("getInterfaces" in type) {
            type.getInterfaces().forEach(iface => {
              const implementations = getImplementations(pruningContext, iface);
              if (implementations == null) {
                pruningContext.implementations[iface.name] = Object.create(
                  null
                );
              }
              pruningContext.implementations[iface.name][type.name] = true;
            });
          }
        });
        visitTypes(pruningContext, schema);
        return mapSchema(schema, {
          [exports.MapperKind.TYPE]: type => {
            // If we should NOT prune the type, return it immediately as unmodified
            if (options.skipPruning && options.skipPruning(type)) {
              return type;
            }
            if (graphql.isObjectType(type) || graphql.isInputObjectType(type)) {
              if (
                (!Object.keys(type.getFields()).length &&
                  !options.skipEmptyCompositeTypePruning) ||
                (pruningContext.unusedTypes[type.name] &&
                  !options.skipUnusedTypesPruning)
              ) {
                return null;
              }
            } else if (graphql.isUnionType(type)) {
              if (
                (!type.getTypes().length && !options.skipEmptyUnionPruning) ||
                (pruningContext.unusedTypes[type.name] &&
                  !options.skipUnusedTypesPruning)
              ) {
                return null;
              }
            } else if (graphql.isInterfaceType(type)) {
              const implementations = getImplementations(pruningContext, type);
              if (
                (!Object.keys(type.getFields()).length &&
                  !options.skipEmptyCompositeTypePruning) ||
                (implementations &&
                  !Object.keys(implementations).length &&
                  !options.skipUnimplementedInterfacesPruning) ||
                (pruningContext.unusedTypes[type.name] &&
                  !options.skipUnusedTypesPruning)
              ) {
                return null;
              }
            } else {
              if (
                pruningContext.unusedTypes[type.name] &&
                !options.skipUnusedTypesPruning
              ) {
                return null;
              }
            }
          }
        });
      }
      function visitOutputType(visitedTypes, pruningContext, type) {
        if (visitedTypes[type.name]) {
          return;
        }
        visitedTypes[type.name] = true;
        pruningContext.unusedTypes[type.name] = false;
        if (graphql.isObjectType(type) || graphql.isInterfaceType(type)) {
          const fields = type.getFields();
          Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            const namedType = graphql.getNamedType(field.type);
            visitOutputType(visitedTypes, pruningContext, namedType);
            const args = field.args;
            args.forEach(arg => {
              const type = graphql.getNamedType(arg.type);
              visitInputType(visitedTypes, pruningContext, type);
            });
          });
          if (graphql.isInterfaceType(type)) {
            const implementations = getImplementations(pruningContext, type);
            if (implementations) {
              Object.keys(implementations).forEach(typeName => {
                visitOutputType(
                  visitedTypes,
                  pruningContext,
                  pruningContext.schema.getType(typeName)
                );
              });
            }
          }
          if ("getInterfaces" in type) {
            type.getInterfaces().forEach(type => {
              visitOutputType(visitedTypes, pruningContext, type);
            });
          }
        } else if (graphql.isUnionType(type)) {
          const types = type.getTypes();
          types.forEach(type =>
            visitOutputType(visitedTypes, pruningContext, type)
          );
        }
      }
      /**
       * Get the implementations of an interface. May return undefined.
       */
      function getImplementations(pruningContext, type) {
        return pruningContext.implementations[type.name];
      }
      function visitInputType(visitedTypes, pruningContext, type) {
        if (visitedTypes[type.name]) {
          return;
        }
        pruningContext.unusedTypes[type.name] = false;
        visitedTypes[type.name] = true;
        if (graphql.isInputObjectType(type)) {
          const fields = type.getFields();
          Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            const namedType = graphql.getNamedType(field.type);
            visitInputType(visitedTypes, pruningContext, namedType);
          });
        }
      }
      function visitTypes(pruningContext, schema) {
        Object.keys(schema.getTypeMap()).forEach(typeName => {
          if (!typeName.startsWith("__")) {
            pruningContext.unusedTypes[typeName] = true;
          }
        });
        const visitedTypes = Object.create(null);
        const rootTypes = [
          schema.getQueryType(),
          schema.getMutationType(),
          schema.getSubscriptionType()
        ].filter(type => type != null);
        rootTypes.forEach(rootType =>
          visitOutputType(visitedTypes, pruningContext, rootType)
        );
        schema.getDirectives().forEach(directive => {
          directive.args.forEach(arg => {
            const type = graphql.getNamedType(arg.type);
            visitInputType(visitedTypes, pruningContext, type);
          });
        });
      }

      /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
      function mergeDeep(target, ...sources) {
        if (graphql.isScalarType(target)) {
          return target;
        }
        const output = {
          ...target
        };
        for (const source of sources) {
          if (isObject(target) && isObject(source)) {
            for (const key in source) {
              if (isObject(source[key])) {
                if (!(key in target)) {
                  Object.assign(output, { [key]: source[key] });
                } else {
                  output[key] = mergeDeep(target[key], source[key]);
                }
              } else {
                Object.assign(output, { [key]: source[key] });
              }
            }
          }
        }
        return output;
      }
      function isObject(item) {
        return item && typeof item === "object" && !Array.isArray(item);
      }

      function parseSelectionSet(selectionSet, options) {
        const query = graphql.parse(selectionSet, options).definitions[0];
        return query.selectionSet;
      }

      /**
       * Get the key under which the result of this resolver will be placed in the response JSON. Basically, just
       * resolves aliases.
       * @param info The info argument to the resolver.
       */
      function getResponseKeyFromInfo(info) {
        return info.fieldNodes[0].alias != null
          ? info.fieldNodes[0].alias.value
          : info.fieldName;
      }

      function appendObjectFields(schema, typeName, additionalFields) {
        if (schema.getType(typeName) == null) {
          return addTypes(schema, [
            new graphql.GraphQLObjectType({
              name: typeName,
              fields: additionalFields
            })
          ]);
        }
        return mapSchema(schema, {
          [exports.MapperKind.OBJECT_TYPE]: type => {
            if (type.name === typeName) {
              const config = type.toConfig();
              const originalFieldConfigMap = config.fields;
              const newFieldConfigMap = {};
              Object.keys(originalFieldConfigMap).forEach(fieldName => {
                newFieldConfigMap[fieldName] =
                  originalFieldConfigMap[fieldName];
              });
              Object.keys(additionalFields).forEach(fieldName => {
                newFieldConfigMap[fieldName] = additionalFields[fieldName];
              });
              return correctASTNodes(
                new graphql.GraphQLObjectType({
                  ...config,
                  fields: newFieldConfigMap
                })
              );
            }
          }
        });
      }
      function removeObjectFields(schema, typeName, testFn) {
        const removedFields = {};
        const newSchema = mapSchema(schema, {
          [exports.MapperKind.OBJECT_TYPE]: type => {
            if (type.name === typeName) {
              const config = type.toConfig();
              const originalFieldConfigMap = config.fields;
              const newFieldConfigMap = {};
              Object.keys(originalFieldConfigMap).forEach(fieldName => {
                const originalFieldConfig = originalFieldConfigMap[fieldName];
                if (testFn(fieldName, originalFieldConfig)) {
                  removedFields[fieldName] = originalFieldConfig;
                } else {
                  newFieldConfigMap[fieldName] = originalFieldConfig;
                }
              });
              return correctASTNodes(
                new graphql.GraphQLObjectType({
                  ...config,
                  fields: newFieldConfigMap
                })
              );
            }
          }
        });
        return [newSchema, removedFields];
      }
      function selectObjectFields(schema, typeName, testFn) {
        const selectedFields = {};
        mapSchema(schema, {
          [exports.MapperKind.OBJECT_TYPE]: type => {
            if (type.name === typeName) {
              const config = type.toConfig();
              const originalFieldConfigMap = config.fields;
              Object.keys(originalFieldConfigMap).forEach(fieldName => {
                const originalFieldConfig = originalFieldConfigMap[fieldName];
                if (testFn(fieldName, originalFieldConfig)) {
                  selectedFields[fieldName] = originalFieldConfig;
                }
              });
            }
            return undefined;
          }
        });
        return selectedFields;
      }
      function modifyObjectFields(schema, typeName, testFn, newFields) {
        const removedFields = {};
        const newSchema = mapSchema(schema, {
          [exports.MapperKind.OBJECT_TYPE]: type => {
            if (type.name === typeName) {
              const config = type.toConfig();
              const originalFieldConfigMap = config.fields;
              const newFieldConfigMap = {};
              Object.keys(originalFieldConfigMap).forEach(fieldName => {
                const originalFieldConfig = originalFieldConfigMap[fieldName];
                if (testFn(fieldName, originalFieldConfig)) {
                  removedFields[fieldName] = originalFieldConfig;
                } else {
                  newFieldConfigMap[fieldName] = originalFieldConfig;
                }
              });
              Object.keys(newFields).forEach(fieldName => {
                const fieldConfig = newFields[fieldName];
                newFieldConfigMap[fieldName] = fieldConfig;
              });
              return correctASTNodes(
                new graphql.GraphQLObjectType({
                  ...config,
                  fields: newFieldConfigMap
                })
              );
            }
          }
        });
        return [newSchema, removedFields];
      }

      function renameType(type, newTypeName) {
        if (graphql.isObjectType(type)) {
          return new graphql.GraphQLObjectType({
            ...type.toConfig(),
            name: newTypeName,
            astNode:
              type.astNode == null
                ? type.astNode
                : {
                    ...type.astNode,
                    name: {
                      ...type.astNode.name,
                      value: newTypeName
                    }
                  },
            extensionASTNodes:
              type.extensionASTNodes == null
                ? type.extensionASTNodes
                : type.extensionASTNodes.map(node => ({
                    ...node,
                    name: {
                      ...node.name,
                      value: newTypeName
                    }
                  }))
          });
        } else if (graphql.isInterfaceType(type)) {
          return new graphql.GraphQLInterfaceType({
            ...type.toConfig(),
            name: newTypeName,
            astNode:
              type.astNode == null
                ? type.astNode
                : {
                    ...type.astNode,
                    name: {
                      ...type.astNode.name,
                      value: newTypeName
                    }
                  },
            extensionASTNodes:
              type.extensionASTNodes == null
                ? type.extensionASTNodes
                : type.extensionASTNodes.map(node => ({
                    ...node,
                    name: {
                      ...node.name,
                      value: newTypeName
                    }
                  }))
          });
        } else if (graphql.isUnionType(type)) {
          return new graphql.GraphQLUnionType({
            ...type.toConfig(),
            name: newTypeName,
            astNode:
              type.astNode == null
                ? type.astNode
                : {
                    ...type.astNode,
                    name: {
                      ...type.astNode.name,
                      value: newTypeName
                    }
                  },
            extensionASTNodes:
              type.extensionASTNodes == null
                ? type.extensionASTNodes
                : type.extensionASTNodes.map(node => ({
                    ...node,
                    name: {
                      ...node.name,
                      value: newTypeName
                    }
                  }))
          });
        } else if (graphql.isInputObjectType(type)) {
          return new graphql.GraphQLInputObjectType({
            ...type.toConfig(),
            name: newTypeName,
            astNode:
              type.astNode == null
                ? type.astNode
                : {
                    ...type.astNode,
                    name: {
                      ...type.astNode.name,
                      value: newTypeName
                    }
                  },
            extensionASTNodes:
              type.extensionASTNodes == null
                ? type.extensionASTNodes
                : type.extensionASTNodes.map(node => ({
                    ...node,
                    name: {
                      ...node.name,
                      value: newTypeName
                    }
                  }))
          });
        } else if (graphql.isEnumType(type)) {
          return new graphql.GraphQLEnumType({
            ...type.toConfig(),
            name: newTypeName,
            astNode:
              type.astNode == null
                ? type.astNode
                : {
                    ...type.astNode,
                    name: {
                      ...type.astNode.name,
                      value: newTypeName
                    }
                  },
            extensionASTNodes:
              type.extensionASTNodes == null
                ? type.extensionASTNodes
                : type.extensionASTNodes.map(node => ({
                    ...node,
                    name: {
                      ...node.name,
                      value: newTypeName
                    }
                  }))
          });
        } else if (graphql.isScalarType(type)) {
          return new graphql.GraphQLScalarType({
            ...type.toConfig(),
            name: newTypeName,
            astNode:
              type.astNode == null
                ? type.astNode
                : {
                    ...type.astNode,
                    name: {
                      ...type.astNode.name,
                      value: newTypeName
                    }
                  },
            extensionASTNodes:
              type.extensionASTNodes == null
                ? type.extensionASTNodes
                : type.extensionASTNodes.map(node => ({
                    ...node,
                    name: {
                      ...node.name,
                      value: newTypeName
                    }
                  }))
          });
        }
        throw new Error(`Unknown type ${type}.`);
      }

      /**
       * Given a selectionSet, adds all of the fields in that selection to
       * the passed in map of fields, and returns it at the end.
       *
       * CollectFields requires the "runtime type" of an object. For a field which
       * returns an Interface or Union type, the "runtime type" will be the actual
       * Object type returned by that field.
       *
       * @internal
       */
      function collectFields(
        exeContext,
        runtimeType,
        selectionSet,
        fields,
        visitedFragmentNames
      ) {
        for (const selection of selectionSet.selections) {
          switch (selection.kind) {
            case graphql.Kind.FIELD: {
              if (!shouldIncludeNode(exeContext, selection)) {
                continue;
              }
              const name = getFieldEntryKey(selection);
              if (!(name in fields)) {
                fields[name] = [];
              }
              fields[name].push(selection);
              break;
            }
            case graphql.Kind.INLINE_FRAGMENT: {
              if (
                !shouldIncludeNode(exeContext, selection) ||
                !doesFragmentConditionMatch(exeContext, selection, runtimeType)
              ) {
                continue;
              }
              collectFields(
                exeContext,
                runtimeType,
                selection.selectionSet,
                fields,
                visitedFragmentNames
              );
              break;
            }
            case graphql.Kind.FRAGMENT_SPREAD: {
              const fragName = selection.name.value;
              if (
                visitedFragmentNames[fragName] ||
                !shouldIncludeNode(exeContext, selection)
              ) {
                continue;
              }
              visitedFragmentNames[fragName] = true;
              const fragment = exeContext.fragments[fragName];
              if (
                !fragment ||
                !doesFragmentConditionMatch(exeContext, fragment, runtimeType)
              ) {
                continue;
              }
              collectFields(
                exeContext,
                runtimeType,
                fragment.selectionSet,
                fields,
                visitedFragmentNames
              );
              break;
            }
          }
        }
        return fields;
      }
      /**
       * Determines if a field should be included based on the @include and @skip
       * directives, where @skip has higher precedence than @include.
       */
      function shouldIncludeNode(exeContext, node) {
        const skip = graphql.getDirectiveValues(
          graphql.GraphQLSkipDirective,
          node,
          exeContext.variableValues
        );
        if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
          return false;
        }
        const include = graphql.getDirectiveValues(
          graphql.GraphQLIncludeDirective,
          node,
          exeContext.variableValues
        );
        if (
          (include === null || include === void 0 ? void 0 : include.if) ===
          false
        ) {
          return false;
        }
        return true;
      }
      /**
       * Determines if a fragment is applicable to the given type.
       */
      function doesFragmentConditionMatch(exeContext, fragment, type) {
        const typeConditionNode = fragment.typeCondition;
        if (!typeConditionNode) {
          return true;
        }
        const conditionalType = graphql.typeFromAST(
          exeContext.schema,
          typeConditionNode
        );
        if (conditionalType === type) {
          return true;
        }
        if (graphql.isAbstractType(conditionalType)) {
          return exeContext.schema.isPossibleType(conditionalType, type);
        }
        return false;
      }
      /**
       * Implements the logic to compute the key of a given field's entry
       */
      function getFieldEntryKey(node) {
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        return node.alias ? node.alias.value : node.name.value;
      }

      /**
       * Given an AsyncIterable and a callback function, return an AsyncIterator
       * which produces values mapped via calling the callback function.
       */
      function mapAsyncIterator(iterator, callback, rejectCallback) {
        let $return;
        let abruptClose;
        if (typeof iterator.return === "function") {
          $return = iterator.return;
          abruptClose = error => {
            const rethrow = () => Promise.reject(error);
            return $return.call(iterator).then(rethrow, rethrow);
          };
        }
        function mapResult(result) {
          return result.done
            ? result
            : asyncMapValue(result.value, callback).then(
                iteratorResult,
                abruptClose
              );
        }
        let mapReject;
        if (rejectCallback) {
          // Capture rejectCallback to ensure it cannot be null.
          const reject = rejectCallback;
          mapReject = error =>
            asyncMapValue(error, reject).then(iteratorResult, abruptClose);
        }
        return {
          next() {
            return iterator.next().then(mapResult, mapReject);
          },
          return() {
            return $return
              ? $return.call(iterator).then(mapResult, mapReject)
              : Promise.resolve({ value: undefined, done: true });
          },
          throw(error) {
            if (typeof iterator.throw === "function") {
              return iterator.throw(error).then(mapResult, mapReject);
            }
            return Promise.reject(error).catch(abruptClose);
          },
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }
      function asyncMapValue(value, callback) {
        return new Promise(resolve => resolve(callback(value)));
      }
      function iteratorResult(value) {
        return { value, done: false };
      }

      function updateArgument(
        argName,
        argType,
        argumentNodes,
        variableDefinitionsMap,
        variableValues,
        newArg
      ) {
        let varName;
        let numGeneratedVariables = 0;
        do {
          varName = `_v${(numGeneratedVariables++).toString()}_${argName}`;
        } while (varName in variableDefinitionsMap);
        argumentNodes[argName] = {
          kind: graphql.Kind.ARGUMENT,
          name: {
            kind: graphql.Kind.NAME,
            value: argName
          },
          value: {
            kind: graphql.Kind.VARIABLE,
            name: {
              kind: graphql.Kind.NAME,
              value: varName
            }
          }
        };
        variableDefinitionsMap[varName] = {
          kind: graphql.Kind.VARIABLE_DEFINITION,
          variable: {
            kind: graphql.Kind.VARIABLE,
            name: {
              kind: graphql.Kind.NAME,
              value: varName
            }
          },
          type: astFromType(argType)
        };
        if (newArg === undefined) {
          delete variableValues[varName];
        } else {
          variableValues[varName] = newArg;
        }
      }

      function implementsAbstractType(schema, typeA, typeB) {
        if (typeA === typeB) {
          return true;
        } else if (
          graphql.isCompositeType(typeA) &&
          graphql.isCompositeType(typeB)
        ) {
          return graphql.doTypesOverlap(schema, typeA, typeB);
        }
        return false;
      }

      function relocatedError(originalError, path) {
        return new graphql.GraphQLError(
          originalError.message,
          originalError.nodes,
          originalError.source,
          originalError.positions,
          path === null
            ? undefined
            : path === undefined
            ? originalError.path
            : path,
          originalError.originalError,
          originalError.extensions
        );
      }

      function inputFieldToFieldConfig(field) {
        return {
          description: field.description,
          type: field.type,
          defaultValue: field.defaultValue,
          extensions: field.extensions,
          astNode: field.astNode
        };
      }
      function fieldToFieldConfig(field) {
        return {
          description: field.description,
          type: field.type,
          args: argsToFieldConfigArgumentMap(field.args),
          resolve: field.resolve,
          subscribe: field.subscribe,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        };
      }
      function argsToFieldConfigArgumentMap(args) {
        const newArguments = {};
        args.forEach(arg => {
          newArguments[arg.name] = argumentToArgumentConfig(arg);
        });
        return newArguments;
      }
      function argumentToArgumentConfig(arg) {
        return {
          description: arg.description,
          type: arg.type,
          defaultValue: arg.defaultValue,
          extensions: arg.extensions,
          astNode: arg.astNode
        };
      }

      function observableToAsyncIterable(observable) {
        const pullQueue = [];
        const pushQueue = [];
        let listening = true;
        const pushValue = value => {
          if (pullQueue.length !== 0) {
            pullQueue.shift()({ value, done: false });
          } else {
            pushQueue.push({ value, done: false });
          }
        };
        const pushError = error => {
          if (pullQueue.length !== 0) {
            pullQueue.shift()({ value: { errors: [error] }, done: false });
          } else {
            pushQueue.push({ value: { errors: [error] }, done: false });
          }
        };
        const pushDone = () => {
          if (pullQueue.length !== 0) {
            pullQueue.shift()({ done: true });
          } else {
            pushQueue.push({ done: true });
          }
        };
        const pullValue = () =>
          new Promise(resolve => {
            if (pushQueue.length !== 0) {
              const element = pushQueue.shift();
              // either {value: {errors: [...]}} or {value: ...}
              resolve(element);
            } else {
              pullQueue.push(resolve);
            }
          });
        const subscription = observable.subscribe({
          next(value) {
            pushValue(value);
          },
          error(err) {
            pushError(err);
          },
          complete() {
            pushDone();
          }
        });
        const emptyQueue = () => {
          if (listening) {
            listening = false;
            subscription.unsubscribe();
            pullQueue.forEach(resolve =>
              resolve({ value: undefined, done: true })
            );
            pullQueue.length = 0;
            pushQueue.length = 0;
          }
        };
        return {
          next() {
            return listening ? pullValue() : this.return();
          },
          return() {
            emptyQueue();
            return Promise.resolve({ value: undefined, done: true });
          },
          throw(error) {
            emptyQueue();
            return Promise.reject(error);
          },
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }

      function visitData(data, enter, leave) {
        if (Array.isArray(data)) {
          return data.map(value => visitData(value, enter, leave));
        } else if (typeof data === "object") {
          const newData = enter != null ? enter(data) : data;
          if (newData != null) {
            Object.keys(newData).forEach(key => {
              const value = newData[key];
              newData[key] = visitData(value, enter, leave);
            });
          }
          return leave != null ? leave(newData) : newData;
        }
        return data;
      }
      function visitErrors(errors, visitor) {
        return errors.map(error => visitor(error));
      }
      function visitResult(
        result,
        request,
        schema,
        resultVisitorMap,
        errorVisitorMap
      ) {
        const partialExecutionContext = {
          schema,
          fragments: request.document.definitions.reduce((acc, def) => {
            if (def.kind === graphql.Kind.FRAGMENT_DEFINITION) {
              acc[def.name.value] = def;
            }
            return acc;
          }, {}),
          variableValues: request.variables
        };
        const errorInfo = {
          segmentInfoMap: new Map(),
          unpathedErrors: new Set()
        };
        const data = result.data;
        const errors = result.errors;
        const visitingErrors = errors != null && errorVisitorMap != null;
        if (data != null) {
          result.data = visitRoot(
            data,
            graphql.getOperationAST(request.document, undefined),
            partialExecutionContext,
            resultVisitorMap,
            visitingErrors ? errors : undefined,
            errorInfo
          );
        }
        if (visitingErrors) {
          result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);
        }
        return result;
      }
      function visitErrorsByType(errors, errorVisitorMap, errorInfo) {
        const segmentInfoMap = errorInfo.segmentInfoMap;
        const unpathedErrors = errorInfo.unpathedErrors;
        const unpathedErrorVisitor = errorVisitorMap["__unpathed"];
        return errors.map(originalError => {
          const pathSegmentsInfo = segmentInfoMap.get(originalError);
          const newError =
            pathSegmentsInfo == null
              ? originalError
              : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {
                  const typeName = segmentInfo.type.name;
                  const typeVisitorMap = errorVisitorMap[typeName];
                  if (typeVisitorMap == null) {
                    return acc;
                  }
                  const errorVisitor = typeVisitorMap[segmentInfo.fieldName];
                  return errorVisitor == null
                    ? acc
                    : errorVisitor(acc, segmentInfo.pathIndex);
                }, originalError);
          if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {
            return unpathedErrorVisitor(newError);
          }
          return newError;
        });
      }
      function visitRoot(
        root,
        operation,
        exeContext,
        resultVisitorMap,
        errors,
        errorInfo
      ) {
        const operationRootType = graphql.getOperationRootType(
          exeContext.schema,
          operation
        );
        const collectedFields = collectFields(
          exeContext,
          operationRootType,
          operation.selectionSet,
          Object.create(null),
          Object.create(null)
        );
        return visitObjectValue(
          root,
          operationRootType,
          collectedFields,
          exeContext,
          resultVisitorMap,
          0,
          errors,
          errorInfo
        );
      }
      function visitObjectValue(
        object,
        type,
        fieldNodeMap,
        exeContext,
        resultVisitorMap,
        pathIndex,
        errors,
        errorInfo
      ) {
        const fieldMap = type.getFields();
        const typeVisitorMap =
          resultVisitorMap === null || resultVisitorMap === void 0
            ? void 0
            : resultVisitorMap[type.name];
        const enterObject =
          typeVisitorMap === null || typeVisitorMap === void 0
            ? void 0
            : typeVisitorMap.__enter;
        const newObject = enterObject != null ? enterObject(object) : object;
        let sortedErrors;
        let errorMap;
        if (errors != null) {
          sortedErrors = sortErrorsByPathSegment(errors, pathIndex);
          errorMap = sortedErrors.errorMap;
          sortedErrors.unpathedErrors.forEach(error =>
            errorInfo.unpathedErrors.add(error)
          );
        }
        Object.keys(fieldNodeMap).forEach(responseKey => {
          const subFieldNodes = fieldNodeMap[responseKey];
          const fieldName = subFieldNodes[0].name.value;
          const fieldType =
            fieldName === "__typename"
              ? graphql.TypeNameMetaFieldDef.type
              : fieldMap[fieldName].type;
          const newPathIndex = pathIndex + 1;
          let fieldErrors;
          if (errors != null) {
            fieldErrors = errorMap[responseKey];
            if (fieldErrors != null) {
              delete errorMap[responseKey];
            }
            addPathSegmentInfo(
              type,
              fieldName,
              newPathIndex,
              fieldErrors,
              errorInfo
            );
          }
          const newValue = visitFieldValue(
            object[responseKey],
            fieldType,
            subFieldNodes,
            exeContext,
            resultVisitorMap,
            newPathIndex,
            fieldErrors,
            errorInfo
          );
          updateObject(
            newObject,
            responseKey,
            newValue,
            typeVisitorMap,
            fieldName
          );
        });
        const oldTypename = newObject.__typename;
        if (oldTypename != null) {
          updateObject(
            newObject,
            "__typename",
            oldTypename,
            typeVisitorMap,
            "__typename"
          );
        }
        if (errors != null) {
          Object.keys(errorMap).forEach(unknownResponseKey => {
            errorMap[unknownResponseKey].forEach(error =>
              errorInfo.unpathedErrors.add(error)
            );
          });
        }
        const leaveObject =
          typeVisitorMap === null || typeVisitorMap === void 0
            ? void 0
            : typeVisitorMap.__leave;
        return leaveObject != null ? leaveObject(newObject) : newObject;
      }
      function updateObject(
        object,
        responseKey,
        newValue,
        typeVisitorMap,
        fieldName
      ) {
        if (typeVisitorMap == null) {
          object[responseKey] = newValue;
          return;
        }
        const fieldVisitor = typeVisitorMap[fieldName];
        if (fieldVisitor == null) {
          object[responseKey] = newValue;
          return;
        }
        const visitedValue = fieldVisitor(newValue);
        if (visitedValue === undefined) {
          delete object[responseKey];
          return;
        }
        object[responseKey] = visitedValue;
      }
      function visitListValue(
        list,
        returnType,
        fieldNodes,
        exeContext,
        resultVisitorMap,
        pathIndex,
        errors,
        errorInfo
      ) {
        return list.map(listMember =>
          visitFieldValue(
            listMember,
            returnType,
            fieldNodes,
            exeContext,
            resultVisitorMap,
            pathIndex + 1,
            errors,
            errorInfo
          )
        );
      }
      function visitFieldValue(
        value,
        returnType,
        fieldNodes,
        exeContext,
        resultVisitorMap,
        pathIndex,
        errors = [],
        errorInfo
      ) {
        if (value == null) {
          return value;
        }
        const nullableType = graphql.getNullableType(returnType);
        if (graphql.isListType(nullableType)) {
          return visitListValue(
            value,
            nullableType.ofType,
            fieldNodes,
            exeContext,
            resultVisitorMap,
            pathIndex,
            errors,
            errorInfo
          );
        } else if (graphql.isAbstractType(nullableType)) {
          const finalType = exeContext.schema.getType(value.__typename);
          const collectedFields = collectSubFields(
            exeContext,
            finalType,
            fieldNodes
          );
          return visitObjectValue(
            value,
            finalType,
            collectedFields,
            exeContext,
            resultVisitorMap,
            pathIndex,
            errors,
            errorInfo
          );
        } else if (graphql.isObjectType(nullableType)) {
          const collectedFields = collectSubFields(
            exeContext,
            nullableType,
            fieldNodes
          );
          return visitObjectValue(
            value,
            nullableType,
            collectedFields,
            exeContext,
            resultVisitorMap,
            pathIndex,
            errors,
            errorInfo
          );
        }
        const typeVisitorMap =
          resultVisitorMap === null || resultVisitorMap === void 0
            ? void 0
            : resultVisitorMap[nullableType.name];
        if (typeVisitorMap == null) {
          return value;
        }
        const visitedValue = typeVisitorMap(value);
        return visitedValue === undefined ? value : visitedValue;
      }
      function sortErrorsByPathSegment(errors, pathIndex) {
        const errorMap = Object.create(null);
        const unpathedErrors = new Set();
        errors.forEach(error => {
          var _a;
          const pathSegment =
            (_a = error.path) === null || _a === void 0
              ? void 0
              : _a[pathIndex];
          if (pathSegment == null) {
            unpathedErrors.add(error);
            return;
          }
          if (pathSegment in errorMap) {
            errorMap[pathSegment].push(error);
          } else {
            errorMap[pathSegment] = [error];
          }
        });
        return {
          errorMap,
          unpathedErrors
        };
      }
      function addPathSegmentInfo(
        type,
        fieldName,
        pathIndex,
        errors = [],
        errorInfo
      ) {
        errors.forEach(error => {
          const segmentInfo = {
            type,
            fieldName,
            pathIndex
          };
          const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);
          if (pathSegmentsInfo == null) {
            errorInfo.segmentInfoMap.set(error, [segmentInfo]);
          } else {
            pathSegmentsInfo.push(segmentInfo);
          }
        });
      }
      function collectSubFields(exeContext, type, fieldNodes) {
        let subFieldNodes = Object.create(null);
        const visitedFragmentNames = Object.create(null);
        fieldNodes.forEach(fieldNode => {
          subFieldNodes = collectFields(
            exeContext,
            type,
            fieldNode.selectionSet,
            subFieldNodes,
            visitedFragmentNames
          );
        });
        return subFieldNodes;
      }

      function valueMatchesCriteria(value, criteria) {
        if (value == null) {
          return value === criteria;
        } else if (Array.isArray(value)) {
          return (
            Array.isArray(criteria) &&
            value.every((val, index) =>
              valueMatchesCriteria(val, criteria[index])
            )
          );
        } else if (typeof value === "object") {
          return (
            typeof criteria === "object" &&
            criteria &&
            Object.keys(criteria).every(propertyName =>
              valueMatchesCriteria(value[propertyName], criteria[propertyName])
            )
          );
        } else if (criteria instanceof RegExp) {
          return criteria.test(value);
        }
        return value === criteria;
      }

      function isAsyncIterable(value) {
        return (
          typeof value === "object" &&
          value != null &&
          Symbol.asyncIterator in value
        );
      }

      function isDocumentNode(object) {
        return (
          object &&
          typeof object === "object" &&
          "kind" in object &&
          object.kind === graphql.Kind.DOCUMENT
        );
      }

      function withCancel(asyncIteratorLike, onCancel) {
        const asyncIterator = asyncIteratorLike[Symbol.asyncIterator]();
        if (!asyncIterator.return) {
          asyncIterator.return = () =>
            Promise.resolve({ value: undefined, done: true });
        }
        const savedReturn = asyncIterator.return.bind(asyncIterator);
        asyncIterator.return = () => {
          onCancel();
          return savedReturn();
        };
        return asyncIterator;
      }

      exports.SchemaDirectiveVisitor = SchemaDirectiveVisitor;
      exports.SchemaVisitor = SchemaVisitor;
      exports.addTypes = addTypes;
      exports.appendObjectFields = appendObjectFields;
      exports.argsToFieldConfigArgumentMap = argsToFieldConfigArgumentMap;
      exports.argumentToArgumentConfig = argumentToArgumentConfig;
      exports.asArray = asArray;
      exports.astFromArg = astFromArg;
      exports.astFromDirective = astFromDirective;
      exports.astFromEnumType = astFromEnumType;
      exports.astFromEnumValue = astFromEnumValue;
      exports.astFromField = astFromField;
      exports.astFromInputField = astFromInputField;
      exports.astFromInputObjectType = astFromInputObjectType;
      exports.astFromInterfaceType = astFromInterfaceType;
      exports.astFromObjectType = astFromObjectType;
      exports.astFromScalarType = astFromScalarType;
      exports.astFromSchema = astFromSchema;
      exports.astFromUnionType = astFromUnionType;
      exports.astFromValueUntyped = astFromValueUntyped;
      exports.buildOperationNodeForField = buildOperationNodeForField;
      exports.checkValidationErrors = checkValidationErrors;
      exports.cloneDirective = cloneDirective;
      exports.cloneSchema = cloneSchema;
      exports.cloneType = cloneType;
      exports.collectFields = collectFields;
      exports.compareNodes = compareNodes;
      exports.compareStrings = compareStrings;
      exports.correctASTNodes = correctASTNodes;
      exports.createNamedStub = createNamedStub;
      exports.createSchemaDefinition = createSchemaDefinition;
      exports.createStub = createStub;
      exports.debugLog = debugLog;
      exports.fieldToFieldConfig = fieldToFieldConfig;
      exports.filterSchema = filterSchema;
      exports.fixSchemaAst = fixSchemaAst;
      exports.fixWindowsPath = fixWindowsPath;
      exports.flattenArray = flattenArray;
      exports.forEachDefaultValue = forEachDefaultValue;
      exports.forEachField = forEachField;
      exports.getArgumentValues = getArgumentValues;
      exports.getBuiltInForStub = getBuiltInForStub;
      exports.getDeprecatableDirectiveNodes = getDeprecatableDirectiveNodes;
      exports.getDirectiveNodes = getDirectiveNodes;
      exports.getDirectives = getDirectives;
      exports.getDirectivesInExtensions = getDirectivesInExtensions;
      exports.getDocumentNodeFromSchema = getDocumentNodeFromSchema;
      exports.getFieldsWithDirectives = getFieldsWithDirectives;
      exports.getImplementingTypes = getImplementingTypes;
      exports.getLeadingCommentBlock = getLeadingCommentBlock;
      exports.getResolversFromSchema = getResolversFromSchema;
      exports.getResponseKeyFromInfo = getResponseKeyFromInfo;
      exports.getUserTypesFromSchema = getUserTypesFromSchema;
      exports.healSchema = healSchema;
      exports.healTypes = healTypes;
      exports.implementsAbstractType = implementsAbstractType;
      exports.inputFieldToFieldConfig = inputFieldToFieldConfig;
      exports.isAsyncIterable = isAsyncIterable;
      exports.isDescribable = isDescribable;
      exports.isDocumentNode = isDocumentNode;
      exports.isDocumentString = isDocumentString;
      exports.isEqual = isEqual;
      exports.isNamedStub = isNamedStub;
      exports.isNotEqual = isNotEqual;
      exports.isValidPath = isValidPath;
      exports.makeDeprecatedDirective = makeDeprecatedDirective;
      exports.makeDirectiveNode = makeDirectiveNode;
      exports.makeDirectiveNodes = makeDirectiveNodes;
      exports.mapAsyncIterator = mapAsyncIterator;
      exports.mapSchema = mapSchema;
      exports.mergeDeep = mergeDeep;
      exports.modifyObjectFields = modifyObjectFields;
      exports.nodeToString = nodeToString;
      exports.observableToAsyncIterable = observableToAsyncIterable;
      exports.parseGraphQLJSON = parseGraphQLJSON;
      exports.parseGraphQLSDL = parseGraphQLSDL;
      exports.parseInputValue = parseInputValue;
      exports.parseInputValueLiteral = parseInputValueLiteral;
      exports.parseSelectionSet = parseSelectionSet;
      exports.printSchemaWithDirectives = printSchemaWithDirectives;
      exports.pruneSchema = pruneSchema;
      exports.relocatedError = relocatedError;
      exports.removeObjectFields = removeObjectFields;
      exports.renameType = renameType;
      exports.rewireTypes = rewireTypes;
      exports.selectObjectFields = selectObjectFields;
      exports.serializeInputValue = serializeInputValue;
      exports.transformCommentsToDescriptions = transformCommentsToDescriptions;
      exports.transformInputValue = transformInputValue;
      exports.updateArgument = updateArgument;
      exports.validateGraphQlDocuments = validateGraphQlDocuments;
      exports.valueMatchesCriteria = valueMatchesCriteria;
      exports.visitData = visitData;
      exports.visitErrors = visitErrors;
      exports.visitResult = visitResult;
      exports.visitSchema = visitSchema;
      exports.withCancel = withCancel;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ kX1W: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      var _introspection = __webpack_require__("JIc4");

      /**
       * Prohibit introspection queries
       *
       * A GraphQL document is only valid if all fields selected are not fields that
       * return an introspection type.
       *
       * Note: This rule is optional and is not part of the Validation section of the
       * GraphQL Specification. This rule effectively disables introspection, which
       * does not reflect best practices and should only be done if absolutely necessary.
       */
      function NoSchemaIntrospectionCustomRule(context) {
        return {
          Field: function Field(node) {
            var type = (0, _definition.getNamedType)(context.getType());

            if (type && (0, _introspection.isIntrospectionType)(type)) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'GraphQL introspection has been disabled, but the requested query contained the field "'.concat(
                    node.name.value,
                    '".'
                  ),
                  node
                )
              );
            }
          }
        };
      }

      /***/
    },

    /***/ kjGV: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.extendSchema = extendSchema;
      exports.extendSchemaImpl = extendSchemaImpl;
      exports.getDescription = getDescription;

      var _objectValues = _interopRequireDefault(__webpack_require__("YDZp"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _mapValue = _interopRequireDefault(__webpack_require__("y8DL"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _kinds = __webpack_require__("xaK5");

      var _tokenKind = __webpack_require__("XfSa");

      var _blockString = __webpack_require__("yQbh");

      var _predicates = __webpack_require__("hzsB");

      var _validate = __webpack_require__("sk25");

      var _values = __webpack_require__("aQB7");

      var _schema = __webpack_require__("+X2/");

      var _scalars = __webpack_require__("0N00");

      var _introspection = __webpack_require__("JIc4");

      var _directives = __webpack_require__("L9+1");

      var _definition = __webpack_require__("mAVk");

      var _valueFromAST = __webpack_require__("MrvF");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      /**
       * Produces a new schema given an existing schema and a document which may
       * contain GraphQL type extensions and definitions. The original schema will
       * remain unaltered.
       *
       * Because a schema represents a graph of references, a schema cannot be
       * extended without effectively making an entire copy. We do not know until it's
       * too late if subgraphs remain unchanged.
       *
       * This algorithm copies the provided schema, applying extensions while
       * producing the copy. The original schema remains unaltered.
       *
       * Accepts options as a third argument:
       *
       *    - commentDescriptions:
       *        Provide true to use preceding comments as the description.
       *
       */
      function extendSchema(schema, documentAST, options) {
        (0, _schema.assertSchema)(schema);
        (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||
          (0, _devAssert.default)(0, "Must provide valid Document AST.");

        if (
          (options === null || options === void 0
            ? void 0
            : options.assumeValid) !== true &&
          (options === null || options === void 0
            ? void 0
            : options.assumeValidSDL) !== true
        ) {
          (0, _validate.assertValidSDLExtension)(documentAST, schema);
        }

        var schemaConfig = schema.toConfig();
        var extendedConfig = extendSchemaImpl(
          schemaConfig,
          documentAST,
          options
        );
        return schemaConfig === extendedConfig
          ? schema
          : new _schema.GraphQLSchema(extendedConfig);
      }
      /**
       * @internal
       */

      function extendSchemaImpl(schemaConfig, documentAST, options) {
        var _schemaDef,
          _schemaDef$descriptio,
          _schemaDef2,
          _options$assumeValid;

        // Collect the type definitions and extensions found in the document.
        var typeDefs = [];
        var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
        // have the same name. For example, a type named "skip".

        var directiveDefs = [];
        var schemaDef; // Schema extensions are collected which may add additional operation types.

        var schemaExtensions = [];

        for (
          var _i2 = 0, _documentAST$definiti2 = documentAST.definitions;
          _i2 < _documentAST$definiti2.length;
          _i2++
        ) {
          var def = _documentAST$definiti2[_i2];

          if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
            schemaDef = def;
          } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
            schemaExtensions.push(def);
          } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
            typeDefs.push(def);
          } else if ((0, _predicates.isTypeExtensionNode)(def)) {
            var extendedTypeName = def.name.value;
            var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
            typeExtensionsMap[extendedTypeName] = existingTypeExtensions
              ? existingTypeExtensions.concat([def])
              : [def];
          } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
            directiveDefs.push(def);
          }
        } // If this document contains no new types, extensions, or directives then
        // return the same unmodified GraphQLSchema instance.

        if (
          Object.keys(typeExtensionsMap).length === 0 &&
          typeDefs.length === 0 &&
          directiveDefs.length === 0 &&
          schemaExtensions.length === 0 &&
          schemaDef == null
        ) {
          return schemaConfig;
        }

        var typeMap = Object.create(null);

        for (
          var _i4 = 0, _schemaConfig$types2 = schemaConfig.types;
          _i4 < _schemaConfig$types2.length;
          _i4++
        ) {
          var existingType = _schemaConfig$types2[_i4];
          typeMap[existingType.name] = extendNamedType(existingType);
        }

        for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {
          var _stdTypeMap$name;

          var typeNode = typeDefs[_i6];
          var name = typeNode.name.value;
          typeMap[name] =
            (_stdTypeMap$name = stdTypeMap[name]) !== null &&
            _stdTypeMap$name !== void 0
              ? _stdTypeMap$name
              : buildType(typeNode);
        }

        var operationTypes = _objectSpread(
          _objectSpread(
            {
              // Get the extended root operation types.
              query: schemaConfig.query && replaceNamedType(schemaConfig.query),
              mutation:
                schemaConfig.mutation &&
                replaceNamedType(schemaConfig.mutation),
              subscription:
                schemaConfig.subscription &&
                replaceNamedType(schemaConfig.subscription)
            },
            schemaDef && getOperationTypes([schemaDef])
          ),
          getOperationTypes(schemaExtensions)
        ); // Then produce and return a Schema config with these types.

        return _objectSpread(
          _objectSpread(
            {
              description:
                (_schemaDef = schemaDef) === null || _schemaDef === void 0
                  ? void 0
                  : (_schemaDef$descriptio = _schemaDef.description) === null ||
                    _schemaDef$descriptio === void 0
                  ? void 0
                  : _schemaDef$descriptio.value
            },
            operationTypes
          ),
          {},
          {
            types: (0, _objectValues.default)(typeMap),
            directives: [].concat(
              schemaConfig.directives.map(replaceDirective),
              directiveDefs.map(buildDirective)
            ),
            extensions: undefined,
            astNode:
              (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0
                ? _schemaDef2
                : schemaConfig.astNode,
            extensionASTNodes: schemaConfig.extensionASTNodes.concat(
              schemaExtensions
            ),
            assumeValid:
              (_options$assumeValid =
                options === null || options === void 0
                  ? void 0
                  : options.assumeValid) !== null &&
              _options$assumeValid !== void 0
                ? _options$assumeValid
                : false
          }
        ); // Below are functions used for producing this schema that have closed over
        // this scope and have access to the schema, cache, and newly defined types.

        function replaceType(type) {
          if ((0, _definition.isListType)(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definition.GraphQLList(replaceType(type.ofType));
          }

          if ((0, _definition.isNonNullType)(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definition.GraphQLNonNull(replaceType(type.ofType));
          }

          return replaceNamedType(type);
        }

        function replaceNamedType(type) {
          // Note: While this could make early assertions to get the correctly
          // typed values, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.
          return typeMap[type.name];
        }

        function replaceDirective(directive) {
          var config = directive.toConfig();
          return new _directives.GraphQLDirective(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                args: (0, _mapValue.default)(config.args, extendArg)
              }
            )
          );
        }

        function extendNamedType(type) {
          if (
            (0, _introspection.isIntrospectionType)(type) ||
            (0, _scalars.isSpecifiedScalarType)(type)
          ) {
            // Builtin types are not extended.
            return type;
          }

          if ((0, _definition.isScalarType)(type)) {
            return extendScalarType(type);
          }

          if ((0, _definition.isObjectType)(type)) {
            return extendObjectType(type);
          }

          if ((0, _definition.isInterfaceType)(type)) {
            return extendInterfaceType(type);
          }

          if ((0, _definition.isUnionType)(type)) {
            return extendUnionType(type);
          }

          if ((0, _definition.isEnumType)(type)) {
            return extendEnumType(type);
          } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')

          if ((0, _definition.isInputObjectType)(type)) {
            return extendInputObjectType(type);
          } // istanbul ignore next (Not reachable. All possible types have been considered)

          false ||
            (0, _invariant.default)(
              0,
              "Unexpected type: " + (0, _inspect.default)(type)
            );
        }

        function extendInputObjectType(type) {
          var _typeExtensionsMap$co;

          var config = type.toConfig();
          var extensions =
            (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&
            _typeExtensionsMap$co !== void 0
              ? _typeExtensionsMap$co
              : [];
          return new _definition.GraphQLInputObjectType(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                fields: function fields() {
                  return _objectSpread(
                    _objectSpread(
                      {},
                      (0, _mapValue.default)(config.fields, function(field) {
                        return _objectSpread(
                          _objectSpread({}, field),
                          {},
                          {
                            type: replaceType(field.type)
                          }
                        );
                      })
                    ),
                    buildInputFieldMap(extensions)
                  );
                },
                extensionASTNodes: config.extensionASTNodes.concat(extensions)
              }
            )
          );
        }

        function extendEnumType(type) {
          var _typeExtensionsMap$ty;

          var config = type.toConfig();
          var extensions =
            (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&
            _typeExtensionsMap$ty !== void 0
              ? _typeExtensionsMap$ty
              : [];
          return new _definition.GraphQLEnumType(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                values: _objectSpread(
                  _objectSpread({}, config.values),
                  buildEnumValueMap(extensions)
                ),
                extensionASTNodes: config.extensionASTNodes.concat(extensions)
              }
            )
          );
        }

        function extendScalarType(type) {
          var _typeExtensionsMap$co2;

          var config = type.toConfig();
          var extensions =
            (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !==
              null && _typeExtensionsMap$co2 !== void 0
              ? _typeExtensionsMap$co2
              : [];
          var specifiedByUrl = config.specifiedByUrl;

          for (var _i8 = 0; _i8 < extensions.length; _i8++) {
            var _getSpecifiedByUrl;

            var extensionNode = extensions[_i8];
            specifiedByUrl =
              (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !==
                null && _getSpecifiedByUrl !== void 0
                ? _getSpecifiedByUrl
                : specifiedByUrl;
          }

          return new _definition.GraphQLScalarType(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                specifiedByUrl: specifiedByUrl,
                extensionASTNodes: config.extensionASTNodes.concat(extensions)
              }
            )
          );
        }

        function extendObjectType(type) {
          var _typeExtensionsMap$co3;

          var config = type.toConfig();
          var extensions =
            (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !==
              null && _typeExtensionsMap$co3 !== void 0
              ? _typeExtensionsMap$co3
              : [];
          return new _definition.GraphQLObjectType(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                interfaces: function interfaces() {
                  return [].concat(
                    type.getInterfaces().map(replaceNamedType),
                    buildInterfaces(extensions)
                  );
                },
                fields: function fields() {
                  return _objectSpread(
                    _objectSpread(
                      {},
                      (0, _mapValue.default)(config.fields, extendField)
                    ),
                    buildFieldMap(extensions)
                  );
                },
                extensionASTNodes: config.extensionASTNodes.concat(extensions)
              }
            )
          );
        }

        function extendInterfaceType(type) {
          var _typeExtensionsMap$co4;

          var config = type.toConfig();
          var extensions =
            (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !==
              null && _typeExtensionsMap$co4 !== void 0
              ? _typeExtensionsMap$co4
              : [];
          return new _definition.GraphQLInterfaceType(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                interfaces: function interfaces() {
                  return [].concat(
                    type.getInterfaces().map(replaceNamedType),
                    buildInterfaces(extensions)
                  );
                },
                fields: function fields() {
                  return _objectSpread(
                    _objectSpread(
                      {},
                      (0, _mapValue.default)(config.fields, extendField)
                    ),
                    buildFieldMap(extensions)
                  );
                },
                extensionASTNodes: config.extensionASTNodes.concat(extensions)
              }
            )
          );
        }

        function extendUnionType(type) {
          var _typeExtensionsMap$co5;

          var config = type.toConfig();
          var extensions =
            (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !==
              null && _typeExtensionsMap$co5 !== void 0
              ? _typeExtensionsMap$co5
              : [];
          return new _definition.GraphQLUnionType(
            _objectSpread(
              _objectSpread({}, config),
              {},
              {
                types: function types() {
                  return [].concat(
                    type.getTypes().map(replaceNamedType),
                    buildUnionTypes(extensions)
                  );
                },
                extensionASTNodes: config.extensionASTNodes.concat(extensions)
              }
            )
          );
        }

        function extendField(field) {
          return _objectSpread(
            _objectSpread({}, field),
            {},
            {
              type: replaceType(field.type),
              // $FlowFixMe[incompatible-call]
              args: (0, _mapValue.default)(field.args, extendArg)
            }
          );
        }

        function extendArg(arg) {
          return _objectSpread(
            _objectSpread({}, arg),
            {},
            {
              type: replaceType(arg.type)
            }
          );
        }

        function getOperationTypes(nodes) {
          var opTypes = {};

          for (var _i10 = 0; _i10 < nodes.length; _i10++) {
            var _node$operationTypes;

            var node = nodes[_i10];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var operationTypesNodes =
              (_node$operationTypes = node.operationTypes) !== null &&
              _node$operationTypes !== void 0
                ? _node$operationTypes
                : [];

            for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {
              var operationType = operationTypesNodes[_i12];
              opTypes[operationType.operation] = getNamedType(
                operationType.type
              );
            }
          } // Note: While this could make early assertions to get the correctly
          // typed values below, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.

          return opTypes;
        }

        function getNamedType(node) {
          var _stdTypeMap$name2;

          var name = node.name.value;
          var type =
            (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&
            _stdTypeMap$name2 !== void 0
              ? _stdTypeMap$name2
              : typeMap[name];

          if (type === undefined) {
            throw new Error('Unknown type: "'.concat(name, '".'));
          }

          return type;
        }

        function getWrappedType(node) {
          if (node.kind === _kinds.Kind.LIST_TYPE) {
            return new _definition.GraphQLList(getWrappedType(node.type));
          }

          if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
            return new _definition.GraphQLNonNull(getWrappedType(node.type));
          }

          return getNamedType(node);
        }

        function buildDirective(node) {
          var locations = node.locations.map(function(_ref) {
            var value = _ref.value;
            return value;
          });
          return new _directives.GraphQLDirective({
            name: node.name.value,
            description: getDescription(node, options),
            locations: locations,
            isRepeatable: node.repeatable,
            args: buildArgumentMap(node.arguments),
            astNode: node
          });
        }

        function buildFieldMap(nodes) {
          var fieldConfigMap = Object.create(null);

          for (var _i14 = 0; _i14 < nodes.length; _i14++) {
            var _node$fields;

            var node = nodes[_i14];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var nodeFields =
              (_node$fields = node.fields) !== null && _node$fields !== void 0
                ? _node$fields
                : [];

            for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {
              var field = nodeFields[_i16];
              fieldConfigMap[field.name.value] = {
                // Note: While this could make assertions to get the correctly typed
                // value, that would throw immediately while type system validation
                // with validateSchema() will produce more actionable results.
                type: getWrappedType(field.type),
                description: getDescription(field, options),
                args: buildArgumentMap(field.arguments),
                deprecationReason: getDeprecationReason(field),
                astNode: field
              };
            }
          }

          return fieldConfigMap;
        }

        function buildArgumentMap(args) {
          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
          var argsNodes = args !== null && args !== void 0 ? args : [];
          var argConfigMap = Object.create(null);

          for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {
            var arg = argsNodes[_i18];
            // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.
            var type = getWrappedType(arg.type);
            argConfigMap[arg.name.value] = {
              type: type,
              description: getDescription(arg, options),
              defaultValue: (0, _valueFromAST.valueFromAST)(
                arg.defaultValue,
                type
              ),
              deprecationReason: getDeprecationReason(arg),
              astNode: arg
            };
          }

          return argConfigMap;
        }

        function buildInputFieldMap(nodes) {
          var inputFieldMap = Object.create(null);

          for (var _i20 = 0; _i20 < nodes.length; _i20++) {
            var _node$fields2;

            var node = nodes[_i20];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var fieldsNodes =
              (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0
                ? _node$fields2
                : [];

            for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {
              var field = fieldsNodes[_i22];
              // Note: While this could make assertions to get the correctly typed
              // value, that would throw immediately while type system validation
              // with validateSchema() will produce more actionable results.
              var type = getWrappedType(field.type);
              inputFieldMap[field.name.value] = {
                type: type,
                description: getDescription(field, options),
                defaultValue: (0, _valueFromAST.valueFromAST)(
                  field.defaultValue,
                  type
                ),
                deprecationReason: getDeprecationReason(field),
                astNode: field
              };
            }
          }

          return inputFieldMap;
        }

        function buildEnumValueMap(nodes) {
          var enumValueMap = Object.create(null);

          for (var _i24 = 0; _i24 < nodes.length; _i24++) {
            var _node$values;

            var node = nodes[_i24];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var valuesNodes =
              (_node$values = node.values) !== null && _node$values !== void 0
                ? _node$values
                : [];

            for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {
              var value = valuesNodes[_i26];
              enumValueMap[value.name.value] = {
                description: getDescription(value, options),
                deprecationReason: getDeprecationReason(value),
                astNode: value
              };
            }
          }

          return enumValueMap;
        }

        function buildInterfaces(nodes) {
          var interfaces = [];

          for (var _i28 = 0; _i28 < nodes.length; _i28++) {
            var _node$interfaces;

            var node = nodes[_i28];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var interfacesNodes =
              (_node$interfaces = node.interfaces) !== null &&
              _node$interfaces !== void 0
                ? _node$interfaces
                : [];

            for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {
              var type = interfacesNodes[_i30];
              // Note: While this could make assertions to get the correctly typed
              // values below, that would throw immediately while type system
              // validation with validateSchema() will produce more actionable
              // results.
              interfaces.push(getNamedType(type));
            }
          }

          return interfaces;
        }

        function buildUnionTypes(nodes) {
          var types = [];

          for (var _i32 = 0; _i32 < nodes.length; _i32++) {
            var _node$types;

            var node = nodes[_i32];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var typeNodes =
              (_node$types = node.types) !== null && _node$types !== void 0
                ? _node$types
                : [];

            for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {
              var type = typeNodes[_i34];
              // Note: While this could make assertions to get the correctly typed
              // values below, that would throw immediately while type system
              // validation with validateSchema() will produce more actionable
              // results.
              types.push(getNamedType(type));
            }
          }

          return types;
        }

        function buildType(astNode) {
          var _typeExtensionsMap$na;

          var name = astNode.name.value;
          var description = getDescription(astNode, options);
          var extensionNodes =
            (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&
            _typeExtensionsMap$na !== void 0
              ? _typeExtensionsMap$na
              : [];

          switch (astNode.kind) {
            case _kinds.Kind.OBJECT_TYPE_DEFINITION: {
              var extensionASTNodes = extensionNodes;
              var allNodes = [astNode].concat(extensionASTNodes);
              return new _definition.GraphQLObjectType({
                name: name,
                description: description,
                interfaces: function interfaces() {
                  return buildInterfaces(allNodes);
                },
                fields: function fields() {
                  return buildFieldMap(allNodes);
                },
                astNode: astNode,
                extensionASTNodes: extensionASTNodes
              });
            }

            case _kinds.Kind.INTERFACE_TYPE_DEFINITION: {
              var _extensionASTNodes = extensionNodes;

              var _allNodes = [astNode].concat(_extensionASTNodes);

              return new _definition.GraphQLInterfaceType({
                name: name,
                description: description,
                interfaces: function interfaces() {
                  return buildInterfaces(_allNodes);
                },
                fields: function fields() {
                  return buildFieldMap(_allNodes);
                },
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes
              });
            }

            case _kinds.Kind.ENUM_TYPE_DEFINITION: {
              var _extensionASTNodes2 = extensionNodes;

              var _allNodes2 = [astNode].concat(_extensionASTNodes2);

              return new _definition.GraphQLEnumType({
                name: name,
                description: description,
                values: buildEnumValueMap(_allNodes2),
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes2
              });
            }

            case _kinds.Kind.UNION_TYPE_DEFINITION: {
              var _extensionASTNodes3 = extensionNodes;

              var _allNodes3 = [astNode].concat(_extensionASTNodes3);

              return new _definition.GraphQLUnionType({
                name: name,
                description: description,
                types: function types() {
                  return buildUnionTypes(_allNodes3);
                },
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes3
              });
            }

            case _kinds.Kind.SCALAR_TYPE_DEFINITION: {
              var _extensionASTNodes4 = extensionNodes;
              return new _definition.GraphQLScalarType({
                name: name,
                description: description,
                specifiedByUrl: getSpecifiedByUrl(astNode),
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes4
              });
            }

            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION: {
              var _extensionASTNodes5 = extensionNodes;

              var _allNodes4 = [astNode].concat(_extensionASTNodes5);

              return new _definition.GraphQLInputObjectType({
                name: name,
                description: description,
                fields: function fields() {
                  return buildInputFieldMap(_allNodes4);
                },
                astNode: astNode,
                extensionASTNodes: _extensionASTNodes5
              });
            }
          } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)

          false ||
            (0, _invariant.default)(
              0,
              "Unexpected type definition node: " +
                (0, _inspect.default)(astNode)
            );
        }
      }

      var stdTypeMap = (0, _keyMap.default)(
        _scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes),
        function(type) {
          return type.name;
        }
      );
      /**
       * Given a field or enum value node, returns the string value for the
       * deprecation reason.
       */

      function getDeprecationReason(node) {
        var deprecated = (0, _values.getDirectiveValues)(
          _directives.GraphQLDeprecatedDirective,
          node
        );
        return deprecated === null || deprecated === void 0
          ? void 0
          : deprecated.reason;
      }
      /**
       * Given a scalar node, returns the string value for the specifiedByUrl.
       */

      function getSpecifiedByUrl(node) {
        var specifiedBy = (0, _values.getDirectiveValues)(
          _directives.GraphQLSpecifiedByDirective,
          node
        );
        return specifiedBy === null || specifiedBy === void 0
          ? void 0
          : specifiedBy.url;
      }
      /**
       * Given an ast node, returns its string description.
       * @deprecated: provided to ease adoption and will be removed in v16.
       *
       * Accepts options as a second argument:
       *
       *    - commentDescriptions:
       *        Provide true to use preceding comments as the description.
       *
       */

      function getDescription(node, options) {
        if (node.description) {
          return node.description.value;
        }

        if (
          (options === null || options === void 0
            ? void 0
            : options.commentDescriptions) === true
        ) {
          var rawValue = getLeadingCommentBlock(node);

          if (rawValue !== undefined) {
            return (0, _blockString.dedentBlockStringValue)("\n" + rawValue);
          }
        }
      }

      function getLeadingCommentBlock(node) {
        var loc = node.loc;

        if (!loc) {
          return;
        }

        var comments = [];
        var token = loc.startToken.prev;

        while (
          token != null &&
          token.kind === _tokenKind.TokenKind.COMMENT &&
          token.next &&
          token.prev &&
          token.line + 1 === token.next.line &&
          token.line !== token.prev.line
        ) {
          var value = String(token.value);
          comments.push(value);
          token = token.prev;
        }

        return comments.length > 0 ? comments.reverse().join("\n") : undefined;
      }

      /***/
    },

    /***/ knwK: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoFragmentCyclesRule = NoFragmentCyclesRule;

      var _GraphQLError = __webpack_require__("MafX");

      function NoFragmentCyclesRule(context) {
        // Tracks already visited fragments to maintain O(N) and to ensure that cycles
        // are not redundantly reported.
        var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

        var spreadPath = []; // Position in the spread path

        var spreadPathIndexByName = Object.create(null);
        return {
          OperationDefinition: function OperationDefinition() {
            return false;
          },
          FragmentDefinition: function FragmentDefinition(node) {
            detectCycleRecursive(node);
            return false;
          }
        }; // This does a straight-forward DFS to find cycles.
        // It does not terminate when a cycle was found but continues to explore
        // the graph to find all possible cycles.

        function detectCycleRecursive(fragment) {
          if (visitedFrags[fragment.name.value]) {
            return;
          }

          var fragmentName = fragment.name.value;
          visitedFrags[fragmentName] = true;
          var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);

          if (spreadNodes.length === 0) {
            return;
          }

          spreadPathIndexByName[fragmentName] = spreadPath.length;

          for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {
            var spreadNode = spreadNodes[_i2];
            var spreadName = spreadNode.name.value;
            var cycleIndex = spreadPathIndexByName[spreadName];
            spreadPath.push(spreadNode);

            if (cycleIndex === undefined) {
              var spreadFragment = context.getFragment(spreadName);

              if (spreadFragment) {
                detectCycleRecursive(spreadFragment);
              }
            } else {
              var cyclePath = spreadPath.slice(cycleIndex);
              var viaPath = cyclePath
                .slice(0, -1)
                .map(function(s) {
                  return '"' + s.name.value + '"';
                })
                .join(", ");
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Cannot spread fragment "'.concat(
                    spreadName,
                    '" within itself'
                  ) + (viaPath !== "" ? " via ".concat(viaPath, ".") : "."),
                  cyclePath
                )
              );
            }

            spreadPath.pop();
          }

          spreadPathIndexByName[fragmentName] = undefined;
        }
      }

      /***/
    },

    /***/ "l1+S": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var implementation = __webpack_require__("HYxC");

      module.exports = function getPolyfill() {
        return Array.prototype.flatMap || implementation;
      };

      /***/
    },

    /***/ lAXL: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ValueOrPromise = void 0;
      function isPromiseLike(object) {
        return object != null && typeof object.then === "function";
      }
      const defaultOnRejectedFn = reason => {
        throw reason;
      };
      class ValueOrPromise {
        constructor(executor) {
          let value;
          try {
            value = executor();
          } catch (reason) {
            this.state = { status: "rejected", value: reason };
            return;
          }
          if (isPromiseLike(value)) {
            this.state = { status: "pending", value };
            return;
          }
          this.state = { status: "fulfilled", value };
        }
        then(onFulfilled, onRejected) {
          const state = this.state;
          if (state.status === "pending") {
            return new ValueOrPromise(() =>
              state.value.then(onFulfilled, onRejected)
            );
          }
          const onRejectedFn =
            typeof onRejected === "function" ? onRejected : defaultOnRejectedFn;
          if (state.status === "rejected") {
            return new ValueOrPromise(() => onRejectedFn(state.value));
          }
          try {
            const onFulfilledFn =
              typeof onFulfilled === "function" ? onFulfilled : undefined;
            return onFulfilledFn === undefined
              ? new ValueOrPromise(() => state.value)
              : new ValueOrPromise(() => onFulfilledFn(state.value));
          } catch (e) {
            return new ValueOrPromise(() => onRejectedFn(e));
          }
        }
        catch(onRejected) {
          return this.then(undefined, onRejected);
        }
        resolve() {
          const state = this.state;
          if (state.status === "pending") {
            return state.value;
          }
          if (state.status === "rejected") {
            throw state.value;
          }
          return state.value;
        }
        static all(valueOrPromises) {
          const values = [];
          for (let i = 0; i < valueOrPromises.length; i++) {
            const valueOrPromise = valueOrPromises[i];
            const state = valueOrPromise.state;
            if (state.status === "rejected") {
              return new ValueOrPromise(() => {
                throw state.value;
              });
            }
            if (state.status === "pending") {
              return new ValueOrPromise(() =>
                Promise.all(valueOrPromises.slice(i)).then(resolvedPromises =>
                  values.concat(resolvedPromises)
                )
              );
            }
            values.push(state.value);
          }
          return new ValueOrPromise(() => values);
        }
      }
      exports.ValueOrPromise = ValueOrPromise;
      //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWVPclByb21pc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvVmFsdWVPclByb21pc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBUyxhQUFhLENBQUksTUFBZTtJQUN2QyxPQUFPLE1BQU0sSUFBSSxJQUFJLElBQUksT0FBUSxNQUFxQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7QUFDN0UsQ0FBQztBQW1CRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsTUFBZSxFQUFFLEVBQUU7SUFDOUMsTUFBTSxNQUFNLENBQUM7QUFDZixDQUFDLENBQUM7QUFFRixNQUFhLGNBQWM7SUFHekIsWUFBWSxRQUFxRDtRQUMvRCxJQUFJLEtBQTRDLENBQUM7UUFFakQsSUFBSTtZQUNGLEtBQUssR0FBRyxRQUFRLEVBQUUsQ0FBQztTQUNwQjtRQUFDLE9BQU8sTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQ25ELE9BQU87U0FDUjtRQUVELElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQzFDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFTSxJQUFJLENBQ1QsV0FHUSxFQUNSLFVBR1E7UUFFUixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXpCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDOUIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FDN0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUMxQyxDQUFDO1NBQ0g7UUFFRCxNQUFNLFlBQVksR0FDaEIsT0FBTyxVQUFVLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO1FBRXRFLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7WUFDL0IsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFJO1lBQ0YsTUFBTSxhQUFhLEdBQ2pCLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFOUQsT0FBTyxhQUFhLEtBQUssU0FBUztnQkFDaEMsQ0FBQyxDQUFDLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFFLEtBQUssQ0FBQyxLQUE2QixDQUFDO2dCQUNoRSxDQUFDLENBQUMsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFVLENBQUMsQ0FBQyxDQUFDO1NBQy9EO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FDVixVQUdRO1FBRVIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUM5QixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDcEI7UUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssVUFBVSxFQUFFO1lBQy9CLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQztTQUNuQjtRQUVELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsQ0FDZixlQUFpRDtRQUVqRCxNQUFNLE1BQU0sR0FBZ0MsRUFBRSxDQUFDO1FBRS9DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUxQyxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDO1lBRW5DLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQy9CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFO29CQUM3QixNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ3BCLENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUM5QixPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FDaEMsQ0FDRixDQUFDO2FBQ0g7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjtRQUVELE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBOUdELHdDQThHQyJ9

      /***/
    },

    /***/ lSNA: /***/ function(module, exports) {
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      module.exports = _defineProperty;

      /***/
    },

    /***/ lXvH: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var fnToStr = Function.prototype.toString;
      var reflectApply =
        typeof Reflect === "object" && Reflect !== null && Reflect.apply;
      var badArrayLike;
      var isCallableMarker;
      if (
        typeof reflectApply === "function" &&
        typeof Object.defineProperty === "function"
      ) {
        try {
          badArrayLike = Object.defineProperty({}, "length", {
            get: function() {
              throw isCallableMarker;
            }
          });
          isCallableMarker = {};
          // eslint-disable-next-line no-throw-literal
          reflectApply(
            function() {
              throw 42;
            },
            null,
            badArrayLike
          );
        } catch (_) {
          if (_ !== isCallableMarker) {
            reflectApply = null;
          }
        }
      } else {
        reflectApply = null;
      }

      var constructorRegex = /^\s*class\b/;
      var isES6ClassFn = function isES6ClassFunction(value) {
        try {
          var fnStr = fnToStr.call(value);
          return constructorRegex.test(fnStr);
        } catch (e) {
          return false; // not a function
        }
      };

      var tryFunctionObject = function tryFunctionToStr(value) {
        try {
          if (isES6ClassFn(value)) {
            return false;
          }
          fnToStr.call(value);
          return true;
        } catch (e) {
          return false;
        }
      };
      var toStr = Object.prototype.toString;
      var fnClass = "[object Function]";
      var genClass = "[object GeneratorFunction]";
      var hasToStringTag =
        typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
      /* globals document: false */
      var documentDotAll =
        typeof document === "object" &&
        typeof document.all === "undefined" &&
        document.all !== undefined
          ? document.all
          : {};

      module.exports = reflectApply
        ? function isCallable(value) {
            if (value === documentDotAll) {
              return true;
            }
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (typeof value === "function" && !value.prototype) {
              return true;
            }
            try {
              reflectApply(value, null, badArrayLike);
            } catch (e) {
              if (e !== isCallableMarker) {
                return false;
              }
            }
            return !isES6ClassFn(value);
          }
        : function isCallable(value) {
            if (value === documentDotAll) {
              return true;
            }
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (typeof value === "function" && !value.prototype) {
              return true;
            }
            if (hasToStringTag) {
              return tryFunctionObject(value);
            }
            if (isES6ClassFn(value)) {
              return false;
            }
            var strClass = toStr.call(value);
            return strClass === fnClass || strClass === genClass;
          };

      /***/
    },

    /***/ lboY: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = didYouMean;
      var MAX_SUGGESTIONS = 5;
      /**
       * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
       */

      // eslint-disable-next-line no-redeclare
      function didYouMean(firstArg, secondArg) {
        var _ref =
            typeof firstArg === "string"
              ? [firstArg, secondArg]
              : [undefined, firstArg],
          subMessage = _ref[0],
          suggestionsArg = _ref[1];

        var message = " Did you mean ";

        if (subMessage) {
          message += subMessage + " ";
        }

        var suggestions = suggestionsArg.map(function(x) {
          return '"'.concat(x, '"');
        });

        switch (suggestions.length) {
          case 0:
            return "";

          case 1:
            return message + suggestions[0] + "?";

          case 2:
            return message + suggestions[0] + " or " + suggestions[1] + "?";
        }

        var selected = suggestions.slice(0, MAX_SUGGESTIONS);
        var lastItem = selected.pop();
        return message + selected.join(", ") + ", or " + lastItem + "?";
      }

      /***/
    },

    /***/ mAVk: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isType = isType;
      exports.assertType = assertType;
      exports.isScalarType = isScalarType;
      exports.assertScalarType = assertScalarType;
      exports.isObjectType = isObjectType;
      exports.assertObjectType = assertObjectType;
      exports.isInterfaceType = isInterfaceType;
      exports.assertInterfaceType = assertInterfaceType;
      exports.isUnionType = isUnionType;
      exports.assertUnionType = assertUnionType;
      exports.isEnumType = isEnumType;
      exports.assertEnumType = assertEnumType;
      exports.isInputObjectType = isInputObjectType;
      exports.assertInputObjectType = assertInputObjectType;
      exports.isListType = isListType;
      exports.assertListType = assertListType;
      exports.isNonNullType = isNonNullType;
      exports.assertNonNullType = assertNonNullType;
      exports.isInputType = isInputType;
      exports.assertInputType = assertInputType;
      exports.isOutputType = isOutputType;
      exports.assertOutputType = assertOutputType;
      exports.isLeafType = isLeafType;
      exports.assertLeafType = assertLeafType;
      exports.isCompositeType = isCompositeType;
      exports.assertCompositeType = assertCompositeType;
      exports.isAbstractType = isAbstractType;
      exports.assertAbstractType = assertAbstractType;
      exports.GraphQLList = GraphQLList;
      exports.GraphQLNonNull = GraphQLNonNull;
      exports.isWrappingType = isWrappingType;
      exports.assertWrappingType = assertWrappingType;
      exports.isNullableType = isNullableType;
      exports.assertNullableType = assertNullableType;
      exports.getNullableType = getNullableType;
      exports.isNamedType = isNamedType;
      exports.assertNamedType = assertNamedType;
      exports.getNamedType = getNamedType;
      exports.argsToArgsConfig = argsToArgsConfig;
      exports.isRequiredArgument = isRequiredArgument;
      exports.isRequiredInputField = isRequiredInputField;
      exports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = void 0;

      var _objectEntries = _interopRequireDefault(__webpack_require__("NKuU"));

      var _symbols = __webpack_require__("6CEn");

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _keyMap = _interopRequireDefault(__webpack_require__("44eS"));

      var _mapValue = _interopRequireDefault(__webpack_require__("y8DL"));

      var _toObjMap = _interopRequireDefault(__webpack_require__("UjIq"));

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _keyValMap = _interopRequireDefault(__webpack_require__("IatC"));

      var _instanceOf = _interopRequireDefault(__webpack_require__("VwI2"));

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _isObjectLike = _interopRequireDefault(__webpack_require__("5wpL"));

      var _identityFunc = _interopRequireDefault(__webpack_require__("zwBC"));

      var _defineInspect = _interopRequireDefault(__webpack_require__("wqAJ"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _printer = __webpack_require__("gCJq");

      var _valueFromASTUntyped = __webpack_require__("S6i8");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function isType(type) {
        return (
          isScalarType(type) ||
          isObjectType(type) ||
          isInterfaceType(type) ||
          isUnionType(type) ||
          isEnumType(type) ||
          isInputObjectType(type) ||
          isListType(type) ||
          isNonNullType(type)
        );
      }

      function assertType(type) {
        if (!isType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL type."
            )
          );
        }

        return type;
      }
      /**
       * There are predicates for each kind of GraphQL type.
       */

      // eslint-disable-next-line no-redeclare
      function isScalarType(type) {
        return (0, _instanceOf.default)(type, GraphQLScalarType);
      }

      function assertScalarType(type) {
        if (!isScalarType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Scalar type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isObjectType(type) {
        return (0, _instanceOf.default)(type, GraphQLObjectType);
      }

      function assertObjectType(type) {
        if (!isObjectType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Object type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isInterfaceType(type) {
        return (0, _instanceOf.default)(type, GraphQLInterfaceType);
      }

      function assertInterfaceType(type) {
        if (!isInterfaceType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Interface type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isUnionType(type) {
        return (0, _instanceOf.default)(type, GraphQLUnionType);
      }

      function assertUnionType(type) {
        if (!isUnionType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Union type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isEnumType(type) {
        return (0, _instanceOf.default)(type, GraphQLEnumType);
      }

      function assertEnumType(type) {
        if (!isEnumType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Enum type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isInputObjectType(type) {
        return (0, _instanceOf.default)(type, GraphQLInputObjectType);
      }

      function assertInputObjectType(type) {
        if (!isInputObjectType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Input Object type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isListType(type) {
        return (0, _instanceOf.default)(type, GraphQLList);
      }

      function assertListType(type) {
        if (!isListType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL List type."
            )
          );
        }

        return type;
      }

      // eslint-disable-next-line no-redeclare
      function isNonNullType(type) {
        return (0, _instanceOf.default)(type, GraphQLNonNull);
      }

      function assertNonNullType(type) {
        if (!isNonNullType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL Non-Null type."
            )
          );
        }

        return type;
      }
      /**
       * These types may be used as input types for arguments and directives.
       */

      function isInputType(type) {
        return (
          isScalarType(type) ||
          isEnumType(type) ||
          isInputObjectType(type) ||
          (isWrappingType(type) && isInputType(type.ofType))
        );
      }

      function assertInputType(type) {
        if (!isInputType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL input type."
            )
          );
        }

        return type;
      }
      /**
       * These types may be used as output types as the result of fields.
       */

      function isOutputType(type) {
        return (
          isScalarType(type) ||
          isObjectType(type) ||
          isInterfaceType(type) ||
          isUnionType(type) ||
          isEnumType(type) ||
          (isWrappingType(type) && isOutputType(type.ofType))
        );
      }

      function assertOutputType(type) {
        if (!isOutputType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL output type."
            )
          );
        }

        return type;
      }
      /**
       * These types may describe types which may be leaf values.
       */

      function isLeafType(type) {
        return isScalarType(type) || isEnumType(type);
      }

      function assertLeafType(type) {
        if (!isLeafType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL leaf type."
            )
          );
        }

        return type;
      }
      /**
       * These types may describe the parent context of a selection set.
       */

      function isCompositeType(type) {
        return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
      }

      function assertCompositeType(type) {
        if (!isCompositeType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL composite type."
            )
          );
        }

        return type;
      }
      /**
       * These types may describe the parent context of a selection set.
       */

      function isAbstractType(type) {
        return isInterfaceType(type) || isUnionType(type);
      }

      function assertAbstractType(type) {
        if (!isAbstractType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL abstract type."
            )
          );
        }

        return type;
      }
      /**
       * List Type Wrapper
       *
       * A list is a wrapping type which points to another type.
       * Lists are often created within the context of defining the fields of
       * an object type.
       *
       * Example:
       *
       *     const PersonType = new GraphQLObjectType({
       *       name: 'Person',
       *       fields: () => ({
       *         parents: { type: new GraphQLList(PersonType) },
       *         children: { type: new GraphQLList(PersonType) },
       *       })
       *     })
       *
       */
      // FIXME: workaround to fix issue with Babel parser

      /* ::
declare class GraphQLList<+T: GraphQLType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLList<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/

      function GraphQLList(ofType) {
        // istanbul ignore else (to be removed in v16.0.0)
        if (this instanceof GraphQLList) {
          this.ofType = assertType(ofType);
        } else {
          return new GraphQLList(ofType);
        }
      } // Need to cast through any to alter the prototype.

      GraphQLList.prototype.toString = function toString() {
        return "[" + String(this.ofType) + "]";
      };

      GraphQLList.prototype.toJSON = function toJSON() {
        return this.toString();
      };

      Object.defineProperty(
        GraphQLList.prototype,
        _symbols.SYMBOL_TO_STRING_TAG,
        {
          get: function get() {
            return "GraphQLList";
          }
        }
      ); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      (0, _defineInspect.default)(GraphQLList);
      /**
       * Non-Null Type Wrapper
       *
       * A non-null is a wrapping type which points to another type.
       * Non-null types enforce that their values are never null and can ensure
       * an error is raised if this ever occurs during a request. It is useful for
       * fields which you can make a strong guarantee on non-nullability, for example
       * usually the id field of a database row will never be null.
       *
       * Example:
       *
       *     const RowType = new GraphQLObjectType({
       *       name: 'Row',
       *       fields: () => ({
       *         id: { type: new GraphQLNonNull(GraphQLString) },
       *       })
       *     })
       *
       * Note: the enforcement of non-nullability occurs within the executor.
       */
      // FIXME: workaround to fix issue with Babel parser

      /* ::
declare class GraphQLNonNull<+T: GraphQLNullableType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLNonNull<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/

      function GraphQLNonNull(ofType) {
        // istanbul ignore else (to be removed in v16.0.0)
        if (this instanceof GraphQLNonNull) {
          this.ofType = assertNullableType(ofType);
        } else {
          return new GraphQLNonNull(ofType);
        }
      } // Need to cast through any to alter the prototype.

      GraphQLNonNull.prototype.toString = function toString() {
        return String(this.ofType) + "!";
      };

      GraphQLNonNull.prototype.toJSON = function toJSON() {
        return this.toString();
      };

      Object.defineProperty(
        GraphQLNonNull.prototype,
        _symbols.SYMBOL_TO_STRING_TAG,
        {
          get: function get() {
            return "GraphQLNonNull";
          }
        }
      ); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      (0, _defineInspect.default)(GraphQLNonNull);
      /**
       * These types wrap and modify other types
       */

      function isWrappingType(type) {
        return isListType(type) || isNonNullType(type);
      }

      function assertWrappingType(type) {
        if (!isWrappingType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL wrapping type."
            )
          );
        }

        return type;
      }
      /**
       * These types can all accept null as a value.
       */

      function isNullableType(type) {
        return isType(type) && !isNonNullType(type);
      }

      function assertNullableType(type) {
        if (!isNullableType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL nullable type."
            )
          );
        }

        return type;
      }
      /* eslint-disable no-redeclare */

      function getNullableType(type) {
        /* eslint-enable no-redeclare */
        if (type) {
          return isNonNullType(type) ? type.ofType : type;
        }
      }
      /**
       * These named types do not include modifiers like List or NonNull.
       */

      function isNamedType(type) {
        return (
          isScalarType(type) ||
          isObjectType(type) ||
          isInterfaceType(type) ||
          isUnionType(type) ||
          isEnumType(type) ||
          isInputObjectType(type)
        );
      }

      function assertNamedType(type) {
        if (!isNamedType(type)) {
          throw new Error(
            "Expected ".concat(
              (0, _inspect.default)(type),
              " to be a GraphQL named type."
            )
          );
        }

        return type;
      }
      /* eslint-disable no-redeclare */

      function getNamedType(type) {
        /* eslint-enable no-redeclare */
        if (type) {
          var unwrappedType = type;

          while (isWrappingType(unwrappedType)) {
            unwrappedType = unwrappedType.ofType;
          }

          return unwrappedType;
        }
      }
      /**
       * Used while defining GraphQL types to allow for circular references in
       * otherwise immutable type definitions.
       */

      function resolveThunk(thunk) {
        // $FlowFixMe[incompatible-use]
        return typeof thunk === "function" ? thunk() : thunk;
      }

      function undefineIfEmpty(arr) {
        return arr && arr.length > 0 ? arr : undefined;
      }
      /**
       * Scalar Type Definition
       *
       * The leaf values of any request and input values to arguments are
       * Scalars (or Enums) and are defined with a name and a series of functions
       * used to parse input from ast or variables and to ensure validity.
       *
       * If a type's serialize function does not return a value (i.e. it returns
       * `undefined`) then an error will be raised and a `null` value will be returned
       * in the response. If the serialize function returns `null`, then no error will
       * be included in the response.
       *
       * Example:
       *
       *     const OddType = new GraphQLScalarType({
       *       name: 'Odd',
       *       serialize(value) {
       *         if (value % 2 === 1) {
       *           return value;
       *         }
       *       }
       *     });
       *
       */

      var GraphQLScalarType = /*#__PURE__*/ (function() {
        function GraphQLScalarType(config) {
          var _config$parseValue, _config$serialize, _config$parseLiteral;

          var parseValue =
            (_config$parseValue = config.parseValue) !== null &&
            _config$parseValue !== void 0
              ? _config$parseValue
              : _identityFunc.default;
          this.name = config.name;
          this.description = config.description;
          this.specifiedByUrl = config.specifiedByUrl;
          this.serialize =
            (_config$serialize = config.serialize) !== null &&
            _config$serialize !== void 0
              ? _config$serialize
              : _identityFunc.default;
          this.parseValue = parseValue;
          this.parseLiteral =
            (_config$parseLiteral = config.parseLiteral) !== null &&
            _config$parseLiteral !== void 0
              ? _config$parseLiteral
              : function(node, variables) {
                  return parseValue(
                    (0, _valueFromASTUntyped.valueFromASTUntyped)(
                      node,
                      variables
                    )
                  );
                };
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
          typeof config.name === "string" ||
            (0, _devAssert.default)(0, "Must provide name.");
          config.specifiedByUrl == null ||
            typeof config.specifiedByUrl === "string" ||
            (0, _devAssert.default)(
              0,
              "".concat(
                this.name,
                ' must provide "specifiedByUrl" as a string, '
              ) +
                "but got: ".concat(
                  (0, _inspect.default)(config.specifiedByUrl),
                  "."
                )
            );
          config.serialize == null ||
            typeof config.serialize === "function" ||
            (0, _devAssert.default)(
              0,
              "".concat(
                this.name,
                ' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.'
              )
            );

          if (config.parseLiteral) {
            (typeof config.parseValue === "function" &&
              typeof config.parseLiteral === "function") ||
              (0, _devAssert.default)(
                0,
                "".concat(
                  this.name,
                  ' must provide both "parseValue" and "parseLiteral" functions.'
                )
              );
          }
        }

        var _proto = GraphQLScalarType.prototype;

        _proto.toConfig = function toConfig() {
          var _this$extensionASTNod;

          return {
            name: this.name,
            description: this.description,
            specifiedByUrl: this.specifiedByUrl,
            serialize: this.serialize,
            parseValue: this.parseValue,
            parseLiteral: this.parseLiteral,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes:
              (_this$extensionASTNod = this.extensionASTNodes) !== null &&
              _this$extensionASTNod !== void 0
                ? _this$extensionASTNod
                : []
          };
        };

        _proto.toString = function toString() {
          return this.name;
        };

        _proto.toJSON = function toJSON() {
          return this.toString();
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLScalarType, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLScalarType";
            }
          }
        ]);

        return GraphQLScalarType;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLScalarType = GraphQLScalarType;
      (0, _defineInspect.default)(GraphQLScalarType);

      /**
       * Object Type Definition
       *
       * Almost all of the GraphQL types you define will be object types. Object types
       * have a name, but most importantly describe their fields.
       *
       * Example:
       *
       *     const AddressType = new GraphQLObjectType({
       *       name: 'Address',
       *       fields: {
       *         street: { type: GraphQLString },
       *         number: { type: GraphQLInt },
       *         formatted: {
       *           type: GraphQLString,
       *           resolve(obj) {
       *             return obj.number + ' ' + obj.street
       *           }
       *         }
       *       }
       *     });
       *
       * When two types need to refer to each other, or a type needs to refer to
       * itself in a field, you can use a function expression (aka a closure or a
       * thunk) to supply the fields lazily.
       *
       * Example:
       *
       *     const PersonType = new GraphQLObjectType({
       *       name: 'Person',
       *       fields: () => ({
       *         name: { type: GraphQLString },
       *         bestFriend: { type: PersonType },
       *       })
       *     });
       *
       */
      var GraphQLObjectType = /*#__PURE__*/ (function() {
        function GraphQLObjectType(config) {
          this.name = config.name;
          this.description = config.description;
          this.isTypeOf = config.isTypeOf;
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
          this._fields = defineFieldMap.bind(undefined, config);
          this._interfaces = defineInterfaces.bind(undefined, config);
          typeof config.name === "string" ||
            (0, _devAssert.default)(0, "Must provide name.");
          config.isTypeOf == null ||
            typeof config.isTypeOf === "function" ||
            (0, _devAssert.default)(
              0,
              "".concat(this.name, ' must provide "isTypeOf" as a function, ') +
                "but got: ".concat((0, _inspect.default)(config.isTypeOf), ".")
            );
        }

        var _proto2 = GraphQLObjectType.prototype;

        _proto2.getFields = function getFields() {
          if (typeof this._fields === "function") {
            this._fields = this._fields();
          }

          return this._fields;
        };

        _proto2.getInterfaces = function getInterfaces() {
          if (typeof this._interfaces === "function") {
            this._interfaces = this._interfaces();
          }

          return this._interfaces;
        };

        _proto2.toConfig = function toConfig() {
          return {
            name: this.name,
            description: this.description,
            interfaces: this.getInterfaces(),
            fields: fieldsToFieldsConfig(this.getFields()),
            isTypeOf: this.isTypeOf,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: this.extensionASTNodes || []
          };
        };

        _proto2.toString = function toString() {
          return this.name;
        };

        _proto2.toJSON = function toJSON() {
          return this.toString();
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLObjectType, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLObjectType";
            }
          }
        ]);

        return GraphQLObjectType;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLObjectType = GraphQLObjectType;
      (0, _defineInspect.default)(GraphQLObjectType);

      function defineInterfaces(config) {
        var _resolveThunk;

        var interfaces =
          (_resolveThunk = resolveThunk(config.interfaces)) !== null &&
          _resolveThunk !== void 0
            ? _resolveThunk
            : [];
        Array.isArray(interfaces) ||
          (0, _devAssert.default)(
            0,
            "".concat(
              config.name,
              " interfaces must be an Array or a function which returns an Array."
            )
          );
        return interfaces;
      }

      function defineFieldMap(config) {
        var fieldMap = resolveThunk(config.fields);
        isPlainObj(fieldMap) ||
          (0, _devAssert.default)(
            0,
            "".concat(
              config.name,
              " fields must be an object with field names as keys or a function which returns such an object."
            )
          );
        return (0, _mapValue.default)(fieldMap, function(
          fieldConfig,
          fieldName
        ) {
          var _fieldConfig$args;

          isPlainObj(fieldConfig) ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(config.name, ".")
                .concat(fieldName, " field config must be an object.")
            );
          !("isDeprecated" in fieldConfig) ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(config.name, ".")
                .concat(
                  fieldName,
                  ' should provide "deprecationReason" instead of "isDeprecated".'
                )
            );
          fieldConfig.resolve == null ||
            typeof fieldConfig.resolve === "function" ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(config.name, ".")
                .concat(fieldName, " field resolver must be a function if ") +
                "provided, but got: ".concat(
                  (0, _inspect.default)(fieldConfig.resolve),
                  "."
                )
            );
          var argsConfig =
            (_fieldConfig$args = fieldConfig.args) !== null &&
            _fieldConfig$args !== void 0
              ? _fieldConfig$args
              : {};
          isPlainObj(argsConfig) ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(config.name, ".")
                .concat(
                  fieldName,
                  " args must be an object with argument names as keys."
                )
            );
          var args = (0, _objectEntries.default)(argsConfig).map(function(
            _ref
          ) {
            var argName = _ref[0],
              argConfig = _ref[1];
            return {
              name: argName,
              description: argConfig.description,
              type: argConfig.type,
              defaultValue: argConfig.defaultValue,
              deprecationReason: argConfig.deprecationReason,
              extensions:
                argConfig.extensions &&
                (0, _toObjMap.default)(argConfig.extensions),
              astNode: argConfig.astNode
            };
          });
          return {
            name: fieldName,
            description: fieldConfig.description,
            type: fieldConfig.type,
            args: args,
            resolve: fieldConfig.resolve,
            subscribe: fieldConfig.subscribe,
            isDeprecated: fieldConfig.deprecationReason != null,
            deprecationReason: fieldConfig.deprecationReason,
            extensions:
              fieldConfig.extensions &&
              (0, _toObjMap.default)(fieldConfig.extensions),
            astNode: fieldConfig.astNode
          };
        });
      }

      function isPlainObj(obj) {
        return (0, _isObjectLike.default)(obj) && !Array.isArray(obj);
      }

      function fieldsToFieldsConfig(fields) {
        return (0, _mapValue.default)(fields, function(field) {
          return {
            description: field.description,
            type: field.type,
            args: argsToArgsConfig(field.args),
            resolve: field.resolve,
            subscribe: field.subscribe,
            deprecationReason: field.deprecationReason,
            extensions: field.extensions,
            astNode: field.astNode
          };
        });
      }
      /**
       * @internal
       */

      function argsToArgsConfig(args) {
        return (0, _keyValMap.default)(
          args,
          function(arg) {
            return arg.name;
          },
          function(arg) {
            return {
              description: arg.description,
              type: arg.type,
              defaultValue: arg.defaultValue,
              deprecationReason: arg.deprecationReason,
              extensions: arg.extensions,
              astNode: arg.astNode
            };
          }
        );
      }

      function isRequiredArgument(arg) {
        return isNonNullType(arg.type) && arg.defaultValue === undefined;
      }

      /**
       * Interface Type Definition
       *
       * When a field can return one of a heterogeneous set of types, a Interface type
       * is used to describe what types are possible, what fields are in common across
       * all types, as well as a function to determine which type is actually used
       * when the field is resolved.
       *
       * Example:
       *
       *     const EntityType = new GraphQLInterfaceType({
       *       name: 'Entity',
       *       fields: {
       *         name: { type: GraphQLString }
       *       }
       *     });
       *
       */
      var GraphQLInterfaceType = /*#__PURE__*/ (function() {
        function GraphQLInterfaceType(config) {
          this.name = config.name;
          this.description = config.description;
          this.resolveType = config.resolveType;
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
          this._fields = defineFieldMap.bind(undefined, config);
          this._interfaces = defineInterfaces.bind(undefined, config);
          typeof config.name === "string" ||
            (0, _devAssert.default)(0, "Must provide name.");
          config.resolveType == null ||
            typeof config.resolveType === "function" ||
            (0, _devAssert.default)(
              0,
              "".concat(
                this.name,
                ' must provide "resolveType" as a function, '
              ) +
                "but got: ".concat(
                  (0, _inspect.default)(config.resolveType),
                  "."
                )
            );
        }

        var _proto3 = GraphQLInterfaceType.prototype;

        _proto3.getFields = function getFields() {
          if (typeof this._fields === "function") {
            this._fields = this._fields();
          }

          return this._fields;
        };

        _proto3.getInterfaces = function getInterfaces() {
          if (typeof this._interfaces === "function") {
            this._interfaces = this._interfaces();
          }

          return this._interfaces;
        };

        _proto3.toConfig = function toConfig() {
          var _this$extensionASTNod2;

          return {
            name: this.name,
            description: this.description,
            interfaces: this.getInterfaces(),
            fields: fieldsToFieldsConfig(this.getFields()),
            resolveType: this.resolveType,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes:
              (_this$extensionASTNod2 = this.extensionASTNodes) !== null &&
              _this$extensionASTNod2 !== void 0
                ? _this$extensionASTNod2
                : []
          };
        };

        _proto3.toString = function toString() {
          return this.name;
        };

        _proto3.toJSON = function toJSON() {
          return this.toString();
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLInterfaceType, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLInterfaceType";
            }
          }
        ]);

        return GraphQLInterfaceType;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLInterfaceType = GraphQLInterfaceType;
      (0, _defineInspect.default)(GraphQLInterfaceType);

      /**
       * Union Type Definition
       *
       * When a field can return one of a heterogeneous set of types, a Union type
       * is used to describe what types are possible as well as providing a function
       * to determine which type is actually used when the field is resolved.
       *
       * Example:
       *
       *     const PetType = new GraphQLUnionType({
       *       name: 'Pet',
       *       types: [ DogType, CatType ],
       *       resolveType(value) {
       *         if (value instanceof Dog) {
       *           return DogType;
       *         }
       *         if (value instanceof Cat) {
       *           return CatType;
       *         }
       *       }
       *     });
       *
       */
      var GraphQLUnionType = /*#__PURE__*/ (function() {
        function GraphQLUnionType(config) {
          this.name = config.name;
          this.description = config.description;
          this.resolveType = config.resolveType;
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
          this._types = defineTypes.bind(undefined, config);
          typeof config.name === "string" ||
            (0, _devAssert.default)(0, "Must provide name.");
          config.resolveType == null ||
            typeof config.resolveType === "function" ||
            (0, _devAssert.default)(
              0,
              "".concat(
                this.name,
                ' must provide "resolveType" as a function, '
              ) +
                "but got: ".concat(
                  (0, _inspect.default)(config.resolveType),
                  "."
                )
            );
        }

        var _proto4 = GraphQLUnionType.prototype;

        _proto4.getTypes = function getTypes() {
          if (typeof this._types === "function") {
            this._types = this._types();
          }

          return this._types;
        };

        _proto4.toConfig = function toConfig() {
          var _this$extensionASTNod3;

          return {
            name: this.name,
            description: this.description,
            types: this.getTypes(),
            resolveType: this.resolveType,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes:
              (_this$extensionASTNod3 = this.extensionASTNodes) !== null &&
              _this$extensionASTNod3 !== void 0
                ? _this$extensionASTNod3
                : []
          };
        };

        _proto4.toString = function toString() {
          return this.name;
        };

        _proto4.toJSON = function toJSON() {
          return this.toString();
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLUnionType, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLUnionType";
            }
          }
        ]);

        return GraphQLUnionType;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLUnionType = GraphQLUnionType;
      (0, _defineInspect.default)(GraphQLUnionType);

      function defineTypes(config) {
        var types = resolveThunk(config.types);
        Array.isArray(types) ||
          (0, _devAssert.default)(
            0,
            "Must provide Array of types or a function which returns such an array for Union ".concat(
              config.name,
              "."
            )
          );
        return types;
      }

      /**
       * Enum Type Definition
       *
       * Some leaf values of requests and input values are Enums. GraphQL serializes
       * Enum values as strings, however internally Enums can be represented by any
       * kind of type, often integers.
       *
       * Example:
       *
       *     const RGBType = new GraphQLEnumType({
       *       name: 'RGB',
       *       values: {
       *         RED: { value: 0 },
       *         GREEN: { value: 1 },
       *         BLUE: { value: 2 }
       *       }
       *     });
       *
       * Note: If a value is not provided in a definition, the name of the enum value
       * will be used as its internal value.
       */
      var GraphQLEnumType =
        /* <T> */
        /*#__PURE__*/ (function() {
          function GraphQLEnumType(config) {
            this.name = config.name;
            this.description = config.description;
            this.extensions =
              config.extensions && (0, _toObjMap.default)(config.extensions);
            this.astNode = config.astNode;
            this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
            this._values = defineEnumValues(this.name, config.values);
            this._valueLookup = new Map(
              this._values.map(function(enumValue) {
                return [enumValue.value, enumValue];
              })
            );
            this._nameLookup = (0, _keyMap.default)(this._values, function(
              value
            ) {
              return value.name;
            });
            typeof config.name === "string" ||
              (0, _devAssert.default)(0, "Must provide name.");
          }

          var _proto5 = GraphQLEnumType.prototype;

          _proto5.getValues = function getValues() {
            return this._values;
          };

          _proto5.getValue = function getValue(name) {
            return this._nameLookup[name];
          };

          _proto5.serialize = function serialize(outputValue) {
            var enumValue = this._valueLookup.get(outputValue);

            if (enumValue === undefined) {
              throw new _GraphQLError.GraphQLError(
                'Enum "'
                  .concat(this.name, '" cannot represent value: ')
                  .concat((0, _inspect.default)(outputValue))
              );
            }

            return enumValue.name;
          };

          _proto5.parseValue = function parseValue(inputValue) /* T */
          {
            if (typeof inputValue !== "string") {
              var valueStr = (0, _inspect.default)(inputValue);
              throw new _GraphQLError.GraphQLError(
                'Enum "'
                  .concat(this.name, '" cannot represent non-string value: ')
                  .concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr)
              );
            }

            var enumValue = this.getValue(inputValue);

            if (enumValue == null) {
              throw new _GraphQLError.GraphQLError(
                'Value "'
                  .concat(inputValue, '" does not exist in "')
                  .concat(this.name, '" enum.') +
                  didYouMeanEnumValue(this, inputValue)
              );
            }

            return enumValue.value;
          };

          _proto5.parseLiteral = function parseLiteral(
            valueNode,
            _variables
          ) /* T */
          {
            // Note: variables will be resolved to a value before calling this function.
            if (valueNode.kind !== _kinds.Kind.ENUM) {
              var valueStr = (0, _printer.print)(valueNode);
              throw new _GraphQLError.GraphQLError(
                'Enum "'
                  .concat(this.name, '" cannot represent non-enum value: ')
                  .concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr),
                valueNode
              );
            }

            var enumValue = this.getValue(valueNode.value);

            if (enumValue == null) {
              var _valueStr = (0, _printer.print)(valueNode);

              throw new _GraphQLError.GraphQLError(
                'Value "'
                  .concat(_valueStr, '" does not exist in "')
                  .concat(this.name, '" enum.') +
                  didYouMeanEnumValue(this, _valueStr),
                valueNode
              );
            }

            return enumValue.value;
          };

          _proto5.toConfig = function toConfig() {
            var _this$extensionASTNod4;

            var values = (0, _keyValMap.default)(
              this.getValues(),
              function(value) {
                return value.name;
              },
              function(value) {
                return {
                  description: value.description,
                  value: value.value,
                  deprecationReason: value.deprecationReason,
                  extensions: value.extensions,
                  astNode: value.astNode
                };
              }
            );
            return {
              name: this.name,
              description: this.description,
              values: values,
              extensions: this.extensions,
              astNode: this.astNode,
              extensionASTNodes:
                (_this$extensionASTNod4 = this.extensionASTNodes) !== null &&
                _this$extensionASTNod4 !== void 0
                  ? _this$extensionASTNod4
                  : []
            };
          };

          _proto5.toString = function toString() {
            return this.name;
          };

          _proto5.toJSON = function toJSON() {
            return this.toString();
          }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

          _createClass(GraphQLEnumType, [
            {
              key: _symbols.SYMBOL_TO_STRING_TAG,
              get: function get() {
                return "GraphQLEnumType";
              }
            }
          ]);

          return GraphQLEnumType;
        })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLEnumType = GraphQLEnumType;
      (0, _defineInspect.default)(GraphQLEnumType);

      function didYouMeanEnumValue(enumType, unknownValueStr) {
        var allNames = enumType.getValues().map(function(value) {
          return value.name;
        });
        var suggestedValues = (0, _suggestionList.default)(
          unknownValueStr,
          allNames
        );
        return (0, _didYouMean.default)("the enum value", suggestedValues);
      }

      function defineEnumValues(typeName, valueMap) {
        isPlainObj(valueMap) ||
          (0, _devAssert.default)(
            0,
            "".concat(
              typeName,
              " values must be an object with value names as keys."
            )
          );
        return (0, _objectEntries.default)(valueMap).map(function(_ref2) {
          var valueName = _ref2[0],
            valueConfig = _ref2[1];
          isPlainObj(valueConfig) ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(typeName, ".")
                .concat(
                  valueName,
                  ' must refer to an object with a "value" key '
                ) +
                "representing an internal value but got: ".concat(
                  (0, _inspect.default)(valueConfig),
                  "."
                )
            );
          !("isDeprecated" in valueConfig) ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(typeName, ".")
                .concat(
                  valueName,
                  ' should provide "deprecationReason" instead of "isDeprecated".'
                )
            );
          return {
            name: valueName,
            description: valueConfig.description,
            value:
              valueConfig.value !== undefined ? valueConfig.value : valueName,
            isDeprecated: valueConfig.deprecationReason != null,
            deprecationReason: valueConfig.deprecationReason,
            extensions:
              valueConfig.extensions &&
              (0, _toObjMap.default)(valueConfig.extensions),
            astNode: valueConfig.astNode
          };
        });
      }

      /**
       * Input Object Type Definition
       *
       * An input object defines a structured collection of fields which may be
       * supplied to a field argument.
       *
       * Using `NonNull` will ensure that a value must be provided by the query
       *
       * Example:
       *
       *     const GeoPoint = new GraphQLInputObjectType({
       *       name: 'GeoPoint',
       *       fields: {
       *         lat: { type: new GraphQLNonNull(GraphQLFloat) },
       *         lon: { type: new GraphQLNonNull(GraphQLFloat) },
       *         alt: { type: GraphQLFloat, defaultValue: 0 },
       *       }
       *     });
       *
       */
      var GraphQLInputObjectType = /*#__PURE__*/ (function() {
        function GraphQLInputObjectType(config) {
          this.name = config.name;
          this.description = config.description;
          this.extensions =
            config.extensions && (0, _toObjMap.default)(config.extensions);
          this.astNode = config.astNode;
          this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
          this._fields = defineInputFieldMap.bind(undefined, config);
          typeof config.name === "string" ||
            (0, _devAssert.default)(0, "Must provide name.");
        }

        var _proto6 = GraphQLInputObjectType.prototype;

        _proto6.getFields = function getFields() {
          if (typeof this._fields === "function") {
            this._fields = this._fields();
          }

          return this._fields;
        };

        _proto6.toConfig = function toConfig() {
          var _this$extensionASTNod5;

          var fields = (0, _mapValue.default)(this.getFields(), function(
            field
          ) {
            return {
              description: field.description,
              type: field.type,
              defaultValue: field.defaultValue,
              extensions: field.extensions,
              astNode: field.astNode
            };
          });
          return {
            name: this.name,
            description: this.description,
            fields: fields,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes:
              (_this$extensionASTNod5 = this.extensionASTNodes) !== null &&
              _this$extensionASTNod5 !== void 0
                ? _this$extensionASTNod5
                : []
          };
        };

        _proto6.toString = function toString() {
          return this.name;
        };

        _proto6.toJSON = function toJSON() {
          return this.toString();
        }; // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

        _createClass(GraphQLInputObjectType, [
          {
            key: _symbols.SYMBOL_TO_STRING_TAG,
            get: function get() {
              return "GraphQLInputObjectType";
            }
          }
        ]);

        return GraphQLInputObjectType;
      })(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

      exports.GraphQLInputObjectType = GraphQLInputObjectType;
      (0, _defineInspect.default)(GraphQLInputObjectType);

      function defineInputFieldMap(config) {
        var fieldMap = resolveThunk(config.fields);
        isPlainObj(fieldMap) ||
          (0, _devAssert.default)(
            0,
            "".concat(
              config.name,
              " fields must be an object with field names as keys or a function which returns such an object."
            )
          );
        return (0, _mapValue.default)(fieldMap, function(
          fieldConfig,
          fieldName
        ) {
          !("resolve" in fieldConfig) ||
            (0, _devAssert.default)(
              0,
              ""
                .concat(config.name, ".")
                .concat(
                  fieldName,
                  " field has a resolve property, but Input Types cannot define resolvers."
                )
            );
          return {
            name: fieldName,
            description: fieldConfig.description,
            type: fieldConfig.type,
            defaultValue: fieldConfig.defaultValue,
            deprecationReason: fieldConfig.deprecationReason,
            extensions:
              fieldConfig.extensions &&
              (0, _toObjMap.default)(fieldConfig.extensions),
            astNode: fieldConfig.astNode
          };
        });
      }

      function isRequiredInputField(field) {
        return isNonNullType(field.type) && field.defaultValue === undefined;
      }

      /***/
    },

    /***/ mZcR: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /*!
       * unixify <https://github.com/jonschlinkert/unixify>
       *
       * Copyright (c) 2014, 2017, Jon Schlinkert.
       * Released under the MIT License.
       */

      var normalizePath = __webpack_require__("kIST");

      module.exports = function unixify(filepath, stripTrailing) {
        filepath = normalizePath(filepath, stripTrailing);
        return filepath.replace(/^([a-zA-Z]+:|\.\/)/, "");
      };

      /***/
    },

    /***/ ma1s: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ScalarLeafsRule = ScalarLeafsRule;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Scalar leafs
       *
       * A GraphQL document is valid only if all leaf fields (fields without
       * sub selections) are of scalar or enum types.
       */
      function ScalarLeafsRule(context) {
        return {
          Field: function Field(node) {
            var type = context.getType();
            var selectionSet = node.selectionSet;

            if (type) {
              if (
                (0, _definition.isLeafType)((0, _definition.getNamedType)(type))
              ) {
                if (selectionSet) {
                  var fieldName = node.name.value;
                  var typeStr = (0, _inspect.default)(type);
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      'Field "'
                        .concat(
                          fieldName,
                          '" must not have a selection since type "'
                        )
                        .concat(typeStr, '" has no subfields.'),
                      selectionSet
                    )
                  );
                }
              } else if (!selectionSet) {
                var _fieldName = node.name.value;

                var _typeStr = (0, _inspect.default)(type);

                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Field "'
                      .concat(_fieldName, '" of type "')
                      .concat(
                        _typeStr,
                        '" must have a selection of subfields. Did you mean "'
                      )
                      .concat(_fieldName, ' { ... }"?'),
                    node
                  )
                );
              }
            }
          }
        };
      }

      /***/
    },

    /***/ me4n: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%");
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          // IE 8 has a broken gOPD
          $gOPD = null;
        }
      }

      module.exports = $gOPD;

      /***/
    },

    /***/ ml7t: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // https://ecma-international.org/ecma-262/6.0/#sec-ispropertykey

      module.exports = function IsPropertyKey(argument) {
        return typeof argument === "string" || typeof argument === "symbol";
      };

      /***/
    },

    /***/ mw0H: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * No unused fragments
       *
       * A GraphQL document is only valid if all fragment definitions are spread
       * within operations, or spread within other fragments spread within operations.
       */
      function NoUnusedFragmentsRule(context) {
        var operationDefs = [];
        var fragmentDefs = [];
        return {
          OperationDefinition: function OperationDefinition(node) {
            operationDefs.push(node);
            return false;
          },
          FragmentDefinition: function FragmentDefinition(node) {
            fragmentDefs.push(node);
            return false;
          },
          Document: {
            leave: function leave() {
              var fragmentNameUsed = Object.create(null);

              for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {
                var operation = operationDefs[_i2];

                for (
                  var _i4 = 0,
                    _context$getRecursive2 = context.getRecursivelyReferencedFragments(
                      operation
                    );
                  _i4 < _context$getRecursive2.length;
                  _i4++
                ) {
                  var fragment = _context$getRecursive2[_i4];
                  fragmentNameUsed[fragment.name.value] = true;
                }
              }

              for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {
                var fragmentDef = fragmentDefs[_i6];
                var fragName = fragmentDef.name.value;

                if (fragmentNameUsed[fragName] !== true) {
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      'Fragment "'.concat(fragName, '" is never used.'),
                      fragmentDef
                    )
                  );
                }
              }
            }
          }
        };
      }

      /***/
    },

    /***/ "o++3": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const changeCaseAll = __webpack_require__("3XYS");
      const path = __webpack_require__("oyvS");

      class UrqlVisitor extends visitorPluginCommon.ClientSideBaseVisitor {
        constructor(schema, fragments, rawConfig) {
          super(schema, fragments, rawConfig, {
            withComponent: visitorPluginCommon.getConfigValue(
              rawConfig.withComponent,
              false
            ),
            withHooks: visitorPluginCommon.getConfigValue(
              rawConfig.withHooks,
              true
            ),
            urqlImportFrom: visitorPluginCommon.getConfigValue(
              rawConfig.urqlImportFrom,
              null
            )
          });
          autoBind(this);
        }
        getImports() {
          const baseImports = super.getImports();
          const imports = [];
          const hasOperations = this._collectedOperations.length > 0;
          if (!hasOperations) {
            return baseImports;
          }
          if (this.config.withComponent) {
            imports.push(`import * as React from 'react';`);
          }
          if (this.config.withComponent || this.config.withHooks) {
            imports.push(
              `import * as Urql from '${this.config.urqlImportFrom || "urql"}';`
            );
          }
          imports.push(visitorPluginCommon.OMIT_TYPE);
          return [...baseImports, ...imports];
        }
        _buildComponent(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          var _a, _b;
          const componentName = this.convertName(
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "",
            {
              suffix: "Component",
              useTypesPrefix: false
            }
          );
          const isVariablesRequired =
            operationType === "Query" &&
            node.variableDefinitions.some(
              variableDef =>
                variableDef.type.kind === graphql.Kind.NON_NULL_TYPE
            );
          const generics = [operationResultType, operationVariablesTypes];
          if (operationType === "Subscription") {
            generics.unshift(operationResultType);
          }
          return `
export const ${componentName} = (props: Omit<Urql.${operationType}Props<${generics.join(
            ", "
          )}>, 'query'> & { variables${
            isVariablesRequired ? "" : "?"
          }: ${operationVariablesTypes} }) => (
  <Urql.${operationType} {...props} query={${documentVariableName}} />
);
`;
        }
        _buildHooks(
          node,
          operationType,
          documentVariableName,
          operationResultType,
          operationVariablesTypes
        ) {
          var _a, _b;
          const operationName = this.convertName(
            (_b =
              (_a = node.name) === null || _a === void 0
                ? void 0
                : _a.value) !== null && _b !== void 0
              ? _b
              : "",
            {
              suffix: this.config.omitOperationSuffix
                ? ""
                : changeCaseAll.pascalCase(operationType),
              useTypesPrefix: false
            }
          );
          if (operationType === "Mutation") {
            return `
export function use${operationName}() {
  return Urql.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${documentVariableName});
};`;
          }
          if (operationType === "Subscription") {
            return `
export function use${operationName}<TData = ${operationResultType}>(options: Omit<Urql.Use${operationType}Args<${operationVariablesTypes}>, 'query'> = {}, handler?: Urql.SubscriptionHandler<${operationResultType}, TData>) {
  return Urql.use${operationType}<${operationResultType}, TData, ${operationVariablesTypes}>({ query: ${documentVariableName}, ...options }, handler);
};`;
          }
          return `
export function use${operationName}(options: Omit<Urql.Use${operationType}Args<${operationVariablesTypes}>, 'query'> = {}) {
  return Urql.use${operationType}<${operationResultType}>({ query: ${documentVariableName}, ...options });
};`;
        }
        buildOperation(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          const component = this.config.withComponent
            ? this._buildComponent(
                node,
                documentVariableName,
                operationType,
                operationResultType,
                operationVariablesTypes
              )
            : null;
          const hooks = this.config.withHooks
            ? this._buildHooks(
                node,
                operationType,
                documentVariableName,
                operationResultType,
                operationVariablesTypes
              )
            : null;
          return [component, hooks].filter(a => a).join("\n");
        }
      }

      const plugin = (schema, documents, config) => {
        const allAst = graphql.concatAST(documents.map(v => v.document));
        const allFragments = [
          ...allAst.definitions
            .filter(d => d.kind === graphql.Kind.FRAGMENT_DEFINITION)
            .map(fragmentDef => ({
              node: fragmentDef,
              name: fragmentDef.name.value,
              onType: fragmentDef.typeCondition.name.value,
              isExternal: false
            })),
          ...(config.externalFragments || [])
        ];
        const visitor = new UrqlVisitor(schema, allFragments, config);
        const visitorResult = graphql.visit(allAst, { leave: visitor });
        return {
          prepend: visitor.getImports(),
          content: [
            visitor.fragments,
            ...visitorResult.definitions.filter(t => typeof t === "string")
          ].join("\n")
        };
      };
      const validate = async (schema, documents, config, outputFile) => {
        if (config.withComponent === true) {
          if (path.extname(outputFile) !== ".tsx") {
            throw new Error(
              `Plugin "typescript-urql" requires extension to be ".tsx" when withComponent: true is set!`
            );
          }
        } else {
          if (
            path.extname(outputFile) !== ".ts" &&
            path.extname(outputFile) !== ".tsx"
          ) {
            throw new Error(
              `Plugin "typescript-urql" requires extension to be ".ts" or ".tsx"!`
            );
          }
        }
      };

      exports.UrqlVisitor = UrqlVisitor;
      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ oCqT: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports = __webpack_require__("3SWA");

      /***/
    },

    /***/ oNNP: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var bind = __webpack_require__("D3zA");

      module.exports = bind.call(
        Function.call,
        Object.prototype.hasOwnProperty
      );

      /***/
    },

    /***/ otCQ: /***/ function(module, exports, __webpack_require__) {
      module.exports = __webpack_require__("jK02").inspect;

      /***/
    },

    /***/ oyvS: /***/ function(module, exports) {
      module.exports = require("path");

      /***/
    },

    /***/ p8j7: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Lone Schema definition
       *
       * A GraphQL document is only valid if it contains only one schema definition.
       */
      function LoneSchemaDefinitionRule(context) {
        var _ref, _ref2, _oldSchema$astNode;

        var oldSchema = context.getSchema();
        var alreadyDefined =
          (_ref =
            (_ref2 =
              (_oldSchema$astNode =
                oldSchema === null || oldSchema === void 0
                  ? void 0
                  : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0
                ? _oldSchema$astNode
                : oldSchema === null || oldSchema === void 0
                ? void 0
                : oldSchema.getQueryType()) !== null && _ref2 !== void 0
              ? _ref2
              : oldSchema === null || oldSchema === void 0
              ? void 0
              : oldSchema.getMutationType()) !== null && _ref !== void 0
            ? _ref
            : oldSchema === null || oldSchema === void 0
            ? void 0
            : oldSchema.getSubscriptionType();
        var schemaDefinitionsCount = 0;
        return {
          SchemaDefinition: function SchemaDefinition(node) {
            if (alreadyDefined) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "Cannot define a new schema within a schema extension.",
                  node
                )
              );
              return;
            }

            if (schemaDefinitionsCount > 0) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  "Must provide only one schema definition.",
                  node
                )
              );
            }

            ++schemaDefinitionsCount;
          }
        };
      }

      /***/
    },

    /***/ pIW5: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const graphql = __webpack_require__("uKhV");

      /**
       * This optimizer removes "desciption" field from schema AST definitions.
       * @param input
       */
      const removeDescriptions = input => {
        function transformNode(node) {
          if (node.description) {
            node.description = undefined;
          }
          return node;
        }
        return graphql.visit(input, {
          ScalarTypeDefinition: transformNode,
          ObjectTypeDefinition: transformNode,
          InterfaceTypeDefinition: transformNode,
          UnionTypeDefinition: transformNode,
          EnumTypeDefinition: transformNode,
          EnumValueDefinition: transformNode,
          InputObjectTypeDefinition: transformNode,
          InputValueDefinition: transformNode,
          FieldDefinition: transformNode
        });
      };

      /**
       * This optimizer removes empty nodes/arrays (directives/argument/variableDefinitions) from a given DocumentNode of operation/fragment.
       * @param input
       */
      const removeEmptyNodes = input => {
        function transformNode(node) {
          let resultNode = node;
          if (
            resultNode.directives &&
            Array.isArray(resultNode.directives) &&
            resultNode.directives.length === 0
          ) {
            const { directives, ...rest } = resultNode;
            resultNode = rest;
          }
          if (
            resultNode.arguments &&
            Array.isArray(resultNode.arguments) &&
            resultNode.arguments.length === 0
          ) {
            const { arguments: args, ...rest } = resultNode;
            resultNode = rest;
          }
          if (
            resultNode.variableDefinitions &&
            Array.isArray(resultNode.variableDefinitions) &&
            resultNode.variableDefinitions.length === 0
          ) {
            const { variableDefinitions, ...rest } = resultNode;
            resultNode = rest;
          }
          return resultNode;
        }
        return graphql.visit(input, {
          FragmentDefinition: transformNode,
          OperationDefinition: transformNode,
          VariableDefinition: transformNode,
          Field: transformNode,
          FragmentSpread: transformNode,
          InlineFragment: transformNode,
          Name: transformNode,
          Directive: transformNode
        });
      };

      /**
       * This optimizer removes "loc" fields
       * @param input
       */
      const removeLoc = input => {
        function transformNode(node) {
          if (node.loc && typeof node.loc === "object") {
            const { loc, ...rest } = node;
            return rest;
          }
          return node;
        }
        return graphql.visit(input, { enter: transformNode });
      };

      const DEFAULT_OPTIMIZERS = [
        removeDescriptions,
        removeEmptyNodes,
        removeLoc
      ];
      /**
       * This method accept a DocumentNode and applies the optimizations you wish to use.
       * You can override the defualt ones or provide you own optimizers if you wish.
       *
       * @param node document to optimize
       * @param optimizers optional, list of optimizer to use
       */
      function optimizeDocumentNode(node, optimizers = DEFAULT_OPTIMIZERS) {
        let resultNode = node;
        for (const optimizer of optimizers) {
          if (typeof optimizer !== "function") {
            throw new Error(
              `Optimizer provided for "optimizeDocumentNode" must be a function!`
            );
          }
          const result = optimizer(resultNode);
          if (!result) {
            throw new Error(
              `Optimizer provided for "optimizeDocumentNode" returned empty value instead of modified "DocumentNode"!`
            );
          }
          resultNode = result;
        }
        return resultNode;
      }

      exports.optimizeDocumentNode = optimizeDocumentNode;
      exports.removeDescriptions = removeDescriptions;
      exports.removeEmptyNodes = removeEmptyNodes;
      exports.removeLoc = removeLoc;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ pTxg: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.graphql = graphql;
      exports.graphqlSync = graphqlSync;

      var _isPromise = _interopRequireDefault(__webpack_require__("Z4gy"));

      var _parser = __webpack_require__("DEM2");

      var _validate = __webpack_require__("sk25");

      var _validate2 = __webpack_require__("QINa");

      var _execute = __webpack_require__("TcFd");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function graphql(
        argsOrSchema,
        source,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      ) {
        var _arguments = arguments;

        /* eslint-enable no-redeclare */
        // Always return a Promise for a consistent API.
        return new Promise(function(resolve) {
          return resolve(
            // Extract arguments from object args if provided.
            _arguments.length === 1
              ? graphqlImpl(argsOrSchema)
              : graphqlImpl({
                  schema: argsOrSchema,
                  source: source,
                  rootValue: rootValue,
                  contextValue: contextValue,
                  variableValues: variableValues,
                  operationName: operationName,
                  fieldResolver: fieldResolver,
                  typeResolver: typeResolver
                })
          );
        });
      }
      /**
       * The graphqlSync function also fulfills GraphQL operations by parsing,
       * validating, and executing a GraphQL document along side a GraphQL schema.
       * However, it guarantees to complete synchronously (or throw an error) assuming
       * that all field resolvers are also synchronous.
       */

      function graphqlSync(
        argsOrSchema,
        source,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      ) {
        /* eslint-enable no-redeclare */
        // Extract arguments from object args if provided.
        var result =
          arguments.length === 1
            ? graphqlImpl(argsOrSchema)
            : graphqlImpl({
                schema: argsOrSchema,
                source: source,
                rootValue: rootValue,
                contextValue: contextValue,
                variableValues: variableValues,
                operationName: operationName,
                fieldResolver: fieldResolver,
                typeResolver: typeResolver
              }); // Assert that the execution was synchronous.

        if ((0, _isPromise.default)(result)) {
          throw new Error(
            "GraphQL execution failed to complete synchronously."
          );
        }

        return result;
      }

      function graphqlImpl(args) {
        var schema = args.schema,
          source = args.source,
          rootValue = args.rootValue,
          contextValue = args.contextValue,
          variableValues = args.variableValues,
          operationName = args.operationName,
          fieldResolver = args.fieldResolver,
          typeResolver = args.typeResolver; // Validate Schema

        var schemaValidationErrors = (0, _validate2.validateSchema)(schema);

        if (schemaValidationErrors.length > 0) {
          return {
            errors: schemaValidationErrors
          };
        } // Parse

        var document;

        try {
          document = (0, _parser.parse)(source);
        } catch (syntaxError) {
          return {
            errors: [syntaxError]
          };
        } // Validate

        var validationErrors = (0, _validate.validate)(schema, document);

        if (validationErrors.length > 0) {
          return {
            errors: validationErrors
          };
        } // Execute

        return (0, _execute.execute)({
          schema: schema,
          document: document,
          rootValue: rootValue,
          contextValue: contextValue,
          variableValues: variableValues,
          operationName: operationName,
          fieldResolver: fieldResolver,
          typeResolver: typeResolver
        });
      }

      /***/
    },

    /***/ plxK: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $Array = GetIntrinsic("%Array%");

      // eslint-disable-next-line global-require
      var toStr =
        !$Array.isArray &&
        __webpack_require__("VF6F")("Object.prototype.toString");

      // https://ecma-international.org/ecma-262/6.0/#sec-isarray

      module.exports =
        $Array.isArray ||
        function IsArray(argument) {
          return toStr(argument) === "[object Array]";
        };

      /***/
    },

    /***/ q34w: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var regex = __webpack_require__("7alT")();

      module.exports = function(filepath) {
        if (typeof filepath !== "string") {
          throw new TypeError("expected a string");
        }
        return regex.test(filepath);
      };

      /***/
    },

    /***/ "qDO/": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function(o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                  return m[k];
                }
              });
            }
          : function(o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
            });
      var __exportStar =
        (this && this.__exportStar) ||
        function(m, exports) {
          for (var p in m)
            if (
              p !== "default" &&
              !Object.prototype.hasOwnProperty.call(exports, p)
            )
              __createBinding(exports, m, p);
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(__webpack_require__("lAXL"), exports);
      //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsbURBQWlDIn0=

      /***/
    },

    /***/ qZCK: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }

      const graphql = __webpack_require__("uKhV");
      const visitorPluginCommon = __webpack_require__("MBzn");
      const autoBind = _interopDefault(__webpack_require__("zeTQ"));
      const changeCaseAll = __webpack_require__("3XYS");
      const path = __webpack_require__("oyvS");

      var StencilComponentType;
      (function(StencilComponentType) {
        StencilComponentType["functional"] = "functional";
        StencilComponentType["class"] = "class";
      })(StencilComponentType || (StencilComponentType = {}));

      class StencilApolloVisitor extends visitorPluginCommon.ClientSideBaseVisitor {
        constructor(schema, fragments, rawConfig) {
          super(schema, fragments, rawConfig, {
            componentType: visitorPluginCommon.getConfigValue(
              rawConfig.componentType,
              StencilComponentType.functional
            ),
            noExport: rawConfig.componentType === StencilComponentType.class
          });
          autoBind(this);
        }
        getImports() {
          const baseImports = super.getImports();
          const imports = [];
          const hasOperations = this._collectedOperations.length > 0;
          if (!hasOperations) {
            return baseImports;
          }
          if (this.config.componentType === StencilComponentType.class) {
            imports.push(`import 'stencil-apollo';`);
            imports.push(`import { Component, Prop, h } from '@stencil/core';`);
          } else {
            imports.push(`import * as StencilApollo from 'stencil-apollo';`);
            imports.push(`import { h } from '@stencil/core';`);
          }
          return [...baseImports, ...imports];
        }
        _buildOperationFunctionalComponent(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          const operationName = this.convertName(node.name.value);
          const propsTypeName = this.convertName(operationName + "Props");
          const rendererSignature =
            changeCaseAll.pascalCase(`${operationType}Renderer`) +
            `<${operationResultType}, ${operationVariablesTypes}>`;
          const apolloStencilComponentTag = changeCaseAll.paramCase(
            `Apollo${operationType}`
          );
          const componentName = this.convertName(`${operationName}Component`);
          const propsVar = `
export type ${propsTypeName} = {
    variables ?: ${operationVariablesTypes};
    inlist ?: StencilApollo.${rendererSignature};
};
      `;
          const component = `
export const ${componentName} = (props: ${propsTypeName}, children: [StencilApollo.${rendererSignature}]) => (
  <${apolloStencilComponentTag} ${operationType.toLowerCase()}={ ${documentVariableName} } { ...props } renderer={ children[0] } />
);
      `;
          return [propsVar, component].filter(a => a).join("\n");
        }
        _buildClassComponent(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          const componentName = this.convertName(node.name.value + "Component");
          const apolloStencilComponentTag = changeCaseAll.paramCase(
            `Apollo${operationType}`
          );
          const rendererSignature = changeCaseAll.pascalCase(
            `${operationType}Renderer`
          );
          return `
@Component({
    tag: '${changeCaseAll.paramCase(
      `Apollo${changeCaseAll.pascalCase(node.name.value)}`
    )}'
})
export class ${componentName} {
    @Prop() renderer: import('stencil-apollo').${rendererSignature}<${operationResultType}, ${operationVariablesTypes}>;
    @Prop() variables: ${operationVariablesTypes};
    render() {
        return <${apolloStencilComponentTag} ${operationType.toLowerCase()}={ ${documentVariableName} } variables={ this.variables } renderer={ this.renderer } />;
    }
}
      `;
        }
        buildOperation(
          node,
          documentVariableName,
          operationType,
          operationResultType,
          operationVariablesTypes
        ) {
          switch (this.config.componentType) {
            case StencilComponentType.class:
              return this._buildClassComponent(
                node,
                documentVariableName,
                operationType,
                operationResultType,
                operationVariablesTypes
              );
            case StencilComponentType.functional:
              return this._buildOperationFunctionalComponent(
                node,
                documentVariableName,
                operationType,
                operationResultType,
                operationVariablesTypes
              );
            default:
              return "";
          }
        }
      }

      const plugin = (schema, documents, config) => {
        const allAst = graphql.concatAST(documents.map(v => v.document));
        const allFragments = [
          ...allAst.definitions
            .filter(d => d.kind === graphql.Kind.FRAGMENT_DEFINITION)
            .map(fragmentDef => ({
              node: fragmentDef,
              name: fragmentDef.name.value,
              onType: fragmentDef.typeCondition.name.value,
              isExternal: false
            })),
          ...(config.externalFragments || [])
        ];
        const visitor = new StencilApolloVisitor(schema, allFragments, config);
        const visitorResult = graphql.visit(allAst, { leave: visitor });
        return {
          prepend: visitor.getImports(),
          content: [
            "",
            visitor.fragments,
            ...visitorResult.definitions.filter(t => typeof t === "string")
          ].join("\n")
        };
      };
      const validate = async (schema, documents, config, outputFile) => {
        if (path.extname(outputFile) !== ".tsx") {
          throw new Error(
            `Plugin "stencil-apollo" requires extension to be ".tsx"!`
          );
        }
      };

      exports.StencilApolloVisitor = StencilApolloVisitor;
      exports.plugin = plugin;
      exports.validate = validate;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ qoX3: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = naturalCompare;

      /**
       * Returns a number indicating whether a reference string comes before, or after,
       * or is the same as the given string in natural sort order.
       *
       * See: https://en.wikipedia.org/wiki/Natural_sort_order
       *
       */
      function naturalCompare(aStr, bStr) {
        var aIdx = 0;
        var bIdx = 0;

        while (aIdx < aStr.length && bIdx < bStr.length) {
          var aChar = aStr.charCodeAt(aIdx);
          var bChar = bStr.charCodeAt(bIdx);

          if (isDigit(aChar) && isDigit(bChar)) {
            var aNum = 0;

            do {
              ++aIdx;
              aNum = aNum * 10 + aChar - DIGIT_0;
              aChar = aStr.charCodeAt(aIdx);
            } while (isDigit(aChar) && aNum > 0);

            var bNum = 0;

            do {
              ++bIdx;
              bNum = bNum * 10 + bChar - DIGIT_0;
              bChar = bStr.charCodeAt(bIdx);
            } while (isDigit(bChar) && bNum > 0);

            if (aNum < bNum) {
              return -1;
            }

            if (aNum > bNum) {
              return 1;
            }
          } else {
            if (aChar < bChar) {
              return -1;
            }

            if (aChar > bChar) {
              return 1;
            }

            ++aIdx;
            ++bIdx;
          }
        }

        return aStr.length - bStr.length;
      }

      var DIGIT_0 = 48;
      var DIGIT_9 = 57;

      function isDigit(code) {
        return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
      }

      /***/
    },

    /***/ "r+Cj": /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _interopRequireDefault = __webpack_require__("TqRt");

      var _defineProperty2 = _interopRequireDefault(
        __webpack_require__("lSNA")
      );

      var _toConsumableArray2 = _interopRequireDefault(
        __webpack_require__("RIqP")
      );

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              (0, _defineProperty2["default"])(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (
            Array.isArray(o) ||
            (it = _unsupportedIterableToArray(o)) ||
            (allowArrayLike && o && typeof o.length === "number")
          ) {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
              s: F,
              n: function n() {
                if (i >= o.length) return { done: true };
                return { done: false, value: o[i++] };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        var normalCompletion = true,
          didErr = false,
          err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it["return"] != null) it["return"]();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }

      var Profiler = __webpack_require__("tNbq");

      var orList = __webpack_require__("fzwd");

      var partitionArray = __webpack_require__("E690");

      var _require = __webpack_require__("sriv"),
        DEFAULT_HANDLE_KEY = _require.DEFAULT_HANDLE_KEY;

      var _require2 = __webpack_require__("VrDQ"),
        createCompilerError = _require2.createCompilerError,
        createUserError = _require2.createUserError,
        eachWithCombinedError = _require2.eachWithCombinedError;

      var _require3 = __webpack_require__("FFNC"),
        isExecutableDefinitionAST = _require3.isExecutableDefinitionAST;

      var _require4 = __webpack_require__("TYx5"),
        getFieldDefinitionLegacy = _require4.getFieldDefinitionLegacy;

      var _require5 = __webpack_require__("uKhV"),
        parseGraphQL = _require5.parse,
        parseType = _require5.parseType,
        print = _require5.print,
        Source = _require5.Source;

      var ARGUMENT_DEFINITIONS = "argumentDefinitions";
      var ARGUMENTS = "arguments";
      var DEPRECATED_UNCHECKED_ARGUMENTS = "uncheckedArguments_DEPRECATED";
      var DIRECTIVE_WHITELIST = new Set([
        ARGUMENT_DEFINITIONS,
        DEPRECATED_UNCHECKED_ARGUMENTS,
        ARGUMENTS
      ]);
      /**
       * @internal
       *
       * This directive is not intended for use by developers directly. To set a field
       * handle in product code use a compiler plugin.
       */

      var CLIENT_FIELD = "__clientField";
      var CLIENT_FIELD_HANDLE = "handle";
      var CLIENT_FIELD_KEY = "key";
      var CLIENT_FIELD_FILTERS = "filters";
      var INCLUDE = "include";
      var SKIP = "skip";
      var IF = "if";
      /**
       * Transforms GraphQL text into Relay Compiler's internal, strongly-typed
       * intermediate representation (IR).
       */

      function parse(schema, text, filename) {
        var ast = parseGraphQL(new Source(text, filename));
        var parser = new RelayParser(schema.extend(ast), ast.definitions);
        return parser.transform();
      }
      /**
       * Transforms untyped GraphQL parse trees (ASTs) into Relay Compiler's
       * internal, strongly-typed intermediate representation (IR).
       */

      function transform(schema, definitions) {
        return Profiler.run("RelayParser.transform", function() {
          var parser = new RelayParser(schema, definitions);
          return parser.transform();
        });
      }
      /**
       * @private
       */

      var RelayParser = /*#__PURE__*/ (function() {
        function RelayParser(schema, definitions) {
          var _this = this;

          this._definitions = new Map(); // leaving this configurable to make it easy to experiment w changing later

          this._getFieldDefinition = getFieldDefinitionLegacy;
          this._schema = schema;
          var duplicated = new Set();
          definitions.forEach(function(def) {
            if (isExecutableDefinitionAST(def)) {
              var name = getName(def);

              if (_this._definitions.has(name)) {
                duplicated.add(name);
                return;
              }

              _this._definitions.set(name, def);
            }
          });

          if (duplicated.size) {
            throw createUserError(
              "RelayParser: Encountered duplicate definitions for one or more " +
                "documents: each document must have a unique name. Duplicated documents:\n" +
                Array.from(duplicated, function(name) {
                  return "- ".concat(name);
                }).join("\n")
            );
          }
        }

        var _proto = RelayParser.prototype;

        _proto.transform = function transform() {
          var _this2 = this;

          var nodes = [];
          var entries = new Map(); // Construct a mapping of name to definition ast + variable definitions.
          // This allows the subsequent AST -> IR tranformation to reference the
          // defined arguments of referenced fragments.

          eachWithCombinedError(this._definitions, function(_ref) {
            var name = _ref[0],
              definition = _ref[1];

            var variableDefinitions = _this2._buildArgumentDefinitions(
              definition
            );

            entries.set(name, {
              definition: definition,
              variableDefinitions: variableDefinitions
            });
          }); // Convert the ASTs to IR.

          eachWithCombinedError(entries.values(), function(_ref2) {
            var definition = _ref2.definition,
              variableDefinitions = _ref2.variableDefinitions;
            var node = parseDefinition(
              _this2._schema,
              _this2._getFieldDefinition,
              entries,
              definition,
              variableDefinitions
            );
            nodes.push(node);
          });
          return nodes;
        };
        /**
         * Constructs a mapping of variable names to definitions for the given
         * operation/fragment definition.
         */

        _proto._buildArgumentDefinitions = function _buildArgumentDefinitions(
          definition
        ) {
          switch (definition.kind) {
            case "OperationDefinition":
              return this._buildOperationArgumentDefinitions(definition);

            case "FragmentDefinition":
              return this._buildFragmentArgumentDefinitions(definition);

            default:
              definition;
              throw createCompilerError(
                "Unexpected ast kind '".concat(definition.kind, "'."),
                [definition]
              );
          }
        };
        /**
         * Constructs a mapping of variable names to definitions using the
         * variables defined in `@argumentDefinitions`.
         */

        _proto._buildFragmentArgumentDefinitions = function _buildFragmentArgumentDefinitions(
          fragment
        ) {
          var _this3 = this;

          var variableDirectives = (fragment.directives || []).filter(function(
            directive
          ) {
            return getName(directive) === ARGUMENT_DEFINITIONS;
          });

          if (!variableDirectives.length) {
            return new Map();
          }

          if (variableDirectives.length !== 1) {
            throw createUserError(
              "Directive @".concat(
                ARGUMENT_DEFINITIONS,
                " may be defined at most once per "
              ) + "fragment.",
              null,
              variableDirectives
            );
          }

          var variableDirective = variableDirectives[0]; // work, below accesses all report arguments could still be null/undefined.

          var args = variableDirective.arguments;

          if (variableDirective == null || !Array.isArray(args)) {
            return new Map();
          }

          if (!args.length) {
            throw createUserError(
              "Directive @".concat(
                ARGUMENT_DEFINITIONS,
                " requires arguments: remove the "
              ) +
                "directive to skip defining local variables for this fragment.",
              null,
              [variableDirective]
            );
          }

          var variables = new Map();
          args.forEach(function(arg) {
            var _defaultValue$value;

            var argName = getName(arg);
            var previousVariable = variables.get(argName);

            if (previousVariable != null) {
              throw createUserError(
                "Duplicate definition for variable '$".concat(argName, "'."),
                null,
                [previousVariable.ast, arg]
              );
            }

            if (arg.value.kind !== "ObjectValue") {
              throw createUserError(
                "Expected definition for variable '$".concat(
                  argName,
                  "' to be an object "
                ) + "with the shape: '{type: string, defaultValue?: mixed}.",
                null,
                [arg.value]
              );
            }

            var defaultValueNode;
            var typeString;
            arg.value.fields.forEach(function(field) {
              var name = getName(field);

              if (name === "type") {
                typeString = transformLiteralValue(field.value, field);
              } else if (name === "defaultValue") {
                defaultValueNode = field.value;
              } else {
                throw createUserError(
                  "Expected definition for variable '$".concat(
                    argName,
                    "' to be an object "
                  ) + "with the shape: '{type: string, defaultValue?: mixed}.",
                  null,
                  [arg.value]
                );
              }
            });

            if (typeof typeString !== "string") {
              throw createUserError(
                "Expected definition for variable '$".concat(
                  argName,
                  "' to be an object "
                ) + "with the shape: '{type: string, defaultValue?: mixed}.",
                null,
                [arg.value]
              );
            }

            var typeFromAST = _this3._schema.getTypeFromAST(
              parseType(typeString)
            );

            if (typeFromAST == null) {
              throw createUserError(
                'Unknown type "'.concat(
                  typeString,
                  '" referenced in the argument definitions.'
                ),
                null,
                [arg]
              );
            }

            var type = _this3._schema.asInputType(typeFromAST);

            if (type == null) {
              throw createUserError(
                'Expected type "'
                  .concat(typeString, '" to be an input type in the "')
                  .concat(arg.name.value, '" argument definitions.'),
                null,
                [arg.value]
              );
            }

            var defaultValue =
              defaultValueNode != null
                ? transformValue(
                    _this3._schema,
                    defaultValueNode,
                    type,
                    function(variableAst) {
                      throw createUserError(
                        "Expected 'defaultValue' to be a literal, got a variable.",
                        null,
                        [variableAst]
                      );
                    }
                  )
                : null;

            if (defaultValue != null && defaultValue.kind !== "Literal") {
              throw createUserError(
                "Expected 'defaultValue' to be a literal, got a variable.",
                [defaultValue.loc]
              );
            }

            variables.set(argName, {
              ast: arg,
              defaultValue:
                (_defaultValue$value =
                  defaultValue === null || defaultValue === void 0
                    ? void 0
                    : defaultValue.value) !== null &&
                _defaultValue$value !== void 0
                  ? _defaultValue$value
                  : null,
              defined: true,
              name: argName,
              type: type
            });
          });
          return variables;
        };
        /**
         * Constructs a mapping of variable names to definitions using the
         * standard GraphQL syntax for variable definitions.
         */

        _proto._buildOperationArgumentDefinitions = function _buildOperationArgumentDefinitions(
          operation
        ) {
          var schema = this._schema;
          var variableDefinitions = new Map();
          (operation.variableDefinitions || []).forEach(function(def) {
            var name = getName(def.variable);
            var typeFromAST = schema.getTypeFromAST(def.type);

            if (typeFromAST == null) {
              throw createUserError(
                "Unknown type: '".concat(getTypeName(def.type), "'."),
                null,
                [def.type]
              );
            }

            var type = schema.asInputType(typeFromAST);

            if (type == null) {
              throw createUserError(
                'Expected type "'.concat(
                  getTypeName(def.type),
                  '" to be an input type.'
                ),
                null,
                [def.type]
              );
            }

            var defaultValue = def.defaultValue
              ? transformLiteralValue(def.defaultValue, def)
              : null;
            var previousDefinition = variableDefinitions.get(name);

            if (previousDefinition != null) {
              throw createUserError(
                "Duplicate definition for variable '$".concat(name, "'."),
                null,
                [previousDefinition.ast, def]
              );
            }

            variableDefinitions.set(name, {
              ast: def,
              defaultValue: defaultValue,
              defined: true,
              name: name,
              type: type
            });
          });
          return variableDefinitions;
        };

        return RelayParser;
      })();
      /**
       * @private
       */

      function parseDefinition(
        schema,
        getFieldDefinition,
        entries,
        definition,
        variableDefinitions
      ) {
        var parser = new GraphQLDefinitionParser(
          schema,
          getFieldDefinition,
          entries,
          definition,
          variableDefinitions
        );
        return parser.transform();
      }
      /**
       * @private
       */

      var GraphQLDefinitionParser = /*#__PURE__*/ (function() {
        function GraphQLDefinitionParser(
          schema,
          getFieldDefinition,
          entries,
          definition,
          variableDefinitions
        ) {
          this._definition = definition;
          this._entries = entries;
          this._getFieldDefinition = getFieldDefinition;
          this._schema = schema;
          this._variableDefinitions = variableDefinitions;
          this._unknownVariables = new Map();
        }

        var _proto2 = GraphQLDefinitionParser.prototype;

        _proto2.transform = function transform() {
          var definition = this._definition;

          switch (definition.kind) {
            case "OperationDefinition":
              return this._transformOperation(definition);

            case "FragmentDefinition":
              return this._transformFragment(definition);

            default:
              definition;
              throw createCompilerError(
                "Unsupported definition type ".concat(definition.kind),
                [definition]
              );
          }
        };

        _proto2._recordAndVerifyVariableReference = function _recordAndVerifyVariableReference(
          variable,
          name,
          usedAsType
        ) {
          // Special case for variables used in @arguments where we currently
          // aren't guaranteed to be able to resolve the type.
          if (usedAsType == null) {
            if (
              !this._variableDefinitions.has(name) &&
              !this._unknownVariables.has(name)
            ) {
              this._unknownVariables.set(name, {
                ast: variable,
                type: null
              });
            }

            return;
          }

          var variableDefinition = this._variableDefinitions.get(name);

          if (variableDefinition != null) {
            // If the variable is defined, all usages must be compatible
            var effectiveType = variableDefinition.type;

            if (variableDefinition.defaultValue != null) {
              // If a default value is defined then it is guaranteed to be used
              // at runtime such that the effective type of the variable is non-null
              effectiveType = this._schema.getNonNullType(
                this._schema.getNullableType(effectiveType)
              );
            }

            if (!this._schema.isTypeSubTypeOf(effectiveType, usedAsType)) {
              throw createUserError(
                "Variable '$"
                  .concat(name, "' was defined as type '")
                  .concat(
                    String(variableDefinition.type),
                    "' but used in a location expecting the type '"
                  )
                  .concat(String(usedAsType), "'"),
                null,
                [variableDefinition.ast, variable]
              );
            }
          } else {
            var previous = this._unknownVariables.get(name);

            if (!previous || !previous.type) {
              // No previous usage, current type is strongest
              this._unknownVariables.set(name, {
                ast: variable,
                type: usedAsType
              });
            } else {
              var previousVariable = previous.ast,
                previousType = previous.type;

              if (
                !(
                  this._schema.isTypeSubTypeOf(usedAsType, previousType) ||
                  this._schema.isTypeSubTypeOf(previousType, usedAsType)
                )
              ) {
                throw createUserError(
                  "Variable '$"
                    .concat(
                      name,
                      "' was used in locations expecting the conflicting types '"
                    )
                    .concat(String(previousType), "' and '")
                    .concat(String(usedAsType), "'."),
                  null,
                  [previousVariable, variable]
                );
              } // If the new used type has stronger requirements, use that type as reference,
              // otherwise keep referencing the previous type

              if (this._schema.isTypeSubTypeOf(usedAsType, previousType)) {
                this._unknownVariables.set(name, {
                  ast: variable,
                  type: usedAsType
                });
              }
            }
          }
        };

        _proto2._getDirectiveLocations = function _getDirectiveLocations() {
          if (!this._directiveLocations) {
            var directiveDefs = this._schema.getDirectives();

            this._directiveLocations = new Map();

            var _iterator = _createForOfIteratorHelper(directiveDefs),
              _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var def = _step.value;

                this._directiveLocations.set(def.name, def.locations);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }

          return this._directiveLocations;
        };

        _proto2._validateDirectivesLocation = function _validateDirectivesLocation(
          directives,
          allowedLocaction
        ) {
          if (!directives || !directives.length) {
            return;
          }

          var directiveLocs = this._getDirectiveLocations();

          var mismatches = directives.filter(function(directive) {
            var name = getName(directive);

            if (DIRECTIVE_WHITELIST.has(name)) {
              return false;
            }

            var locs = directiveLocs.get(name);

            if (locs == null) {
              throw createUserError(
                "Unknown directive '".concat(name, "'."),
                null,
                [directive]
              );
            }

            return !locs.some(function(loc) {
              return loc === allowedLocaction;
            });
          });

          if (mismatches.length) {
            var invalidDirectives = mismatches
              .map(function(directive) {
                return "@" + getName(directive);
              })
              .join(", ");
            throw createUserError(
              "Invalid directives "
                .concat(invalidDirectives, " found on ")
                .concat(allowedLocaction, "."),
              null,
              mismatches
            );
          }
        };

        _proto2._transformFragment = function _transformFragment(fragment) {
          var directives = this._transformDirectives(
            (fragment.directives || []).filter(function(directive) {
              return getName(directive) !== ARGUMENT_DEFINITIONS;
            }),
            "FRAGMENT_DEFINITION"
          );

          var typeFromAST = this._schema.getTypeFromAST(fragment.typeCondition);

          if (typeFromAST == null) {
            throw createUserError(
              'Fragment "'.concat(
                fragment.name.value,
                '" cannot condition on unknown '
              ) +
                'type "'.concat(
                  String(fragment.typeCondition.name.value),
                  '".'
                ),
              null,
              [fragment.typeCondition]
            );
          }

          var type = this._schema.asCompositeType(typeFromAST);

          if (type == null) {
            throw createUserError(
              'Fragment "'.concat(
                fragment.name.value,
                '" cannot condition on non composite '
              ) + 'type "'.concat(String(type), '".'),
              null,
              [fragment.typeCondition]
            );
          }

          var selections = this._transformSelections(
            fragment.selectionSet,
            type,
            fragment.typeCondition
          );

          var argumentDefinitions = (0, _toConsumableArray2["default"])(
            buildArgumentDefinitions(this._variableDefinitions)
          );

          var _iterator2 = _createForOfIteratorHelper(this._unknownVariables),
            _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _step2$value = _step2.value,
                name = _step2$value[0],
                variableReference = _step2$value[1];
              argumentDefinitions.push({
                kind: "RootArgumentDefinition",
                loc: buildLocation(variableReference.ast.loc),
                name: name,
                type: variableReference.type
              });
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          return {
            kind: "Fragment",
            directives: directives,
            loc: buildLocation(fragment.loc),
            metadata: null,
            name: getName(fragment),
            selections: selections,
            type: type,
            // $FlowFixMe[incompatible-return] - could be null
            argumentDefinitions: argumentDefinitions
          };
        };

        _proto2._getLocationFromOperation = function _getLocationFromOperation(
          definition
        ) {
          switch (definition.operation) {
            case "query":
              return "QUERY";

            case "mutation":
              return "MUTATION";

            case "subscription":
              return "SUBSCRIPTION";

            default:
              definition.operation;
              throw createCompilerError(
                "Unknown operation type '".concat(definition.operation, "'."),
                null,
                [definition]
              );
          }
        };

        _proto2._transformOperation = function _transformOperation(definition) {
          var name = getName(definition);

          var directives = this._transformDirectives(
            definition.directives || [],
            this._getLocationFromOperation(definition)
          );

          var type;
          var operation;
          var schema = this._schema;

          switch (definition.operation) {
            case "query":
              operation = "query";
              type = schema.expectQueryType();
              break;

            case "mutation":
              operation = "mutation";
              type = schema.expectMutationType();
              break;

            case "subscription":
              operation = "subscription";
              type = schema.expectSubscriptionType();
              break;

            default:
              definition.operation;
              throw createCompilerError(
                "Unknown operation type '".concat(definition.operation, "'."),
                null,
                [definition]
              );
          }

          if (!definition.selectionSet) {
            throw createUserError(
              "Expected operation to have selections.",
              null,
              [definition]
            );
          }

          var selections = this._transformSelections(
            definition.selectionSet,
            type
          );

          var argumentDefinitions = buildArgumentDefinitions(
            this._variableDefinitions
          );

          if (this._unknownVariables.size !== 0) {
            throw createUserError(
              "Query '".concat(name, "' references undefined variables."),
              null,
              Array.from(this._unknownVariables.values(), function(
                variableReference
              ) {
                return variableReference.ast;
              })
            );
          }

          return {
            kind: "Root",
            operation: operation,
            loc: buildLocation(definition.loc),
            metadata: null,
            name: name,
            argumentDefinitions: argumentDefinitions,
            directives: directives,
            selections: selections,
            type: type
          };
        };

        _proto2._transformSelections = function _transformSelections(
          selectionSet,
          parentType,
          parentTypeAST
        ) {
          var _this4 = this;

          return selectionSet.selections.map(function(selection) {
            var node;

            if (selection.kind === "Field") {
              node = _this4._transformField(selection, parentType);
            } else if (selection.kind === "FragmentSpread") {
              node = _this4._transformFragmentSpread(
                selection,
                parentType,
                parentTypeAST
              );
            } else if (selection.kind === "InlineFragment") {
              node = _this4._transformInlineFragment(
                selection,
                parentType,
                parentTypeAST
              );
            } else {
              selection.kind;
              throw createCompilerError(
                "Unknown ast kind '".concat(selection.kind, "'."),
                [selection]
              );
            }

            var _this4$_splitConditio = _this4._splitConditions(
                node.directives
              ),
              conditions = _this4$_splitConditio[0],
              directives = _this4$_splitConditio[1];

            var conditionalNodes = applyConditions(
              conditions, // $FlowFixMe[incompatible-call]
              [
                _objectSpread(
                  _objectSpread({}, node),
                  {},
                  {
                    directives: directives
                  }
                )
              ]
            );

            if (conditionalNodes.length !== 1) {
              throw createCompilerError(
                "Expected exactly one condition node.",
                null,
                selection.directives
              );
            }

            return conditionalNodes[0];
          });
        };

        _proto2._transformInlineFragment = function _transformInlineFragment(
          fragment,
          parentType,
          parentTypeAST
        ) {
          var schema = this._schema;
          var typeCondition =
            fragment.typeCondition != null
              ? schema.getTypeFromAST(fragment.typeCondition)
              : parentType;

          if (typeCondition == null) {
            var _fragment$typeConditi;

            throw createUserError(
              "Inline fragments can only be on object, interface or union types" +
                ", got unknown type '".concat(
                  getTypeName(fragment.typeCondition),
                  "'."
                ),
              null,
              [
                (_fragment$typeConditi = fragment.typeCondition) !== null &&
                _fragment$typeConditi !== void 0
                  ? _fragment$typeConditi
                  : fragment
              ]
            );
          }

          var typeConditionName = schema.getTypeString(typeCondition);
          typeCondition = schema.asCompositeType(typeCondition);

          if (typeCondition == null) {
            var _fragment$typeConditi2;

            throw createUserError(
              "Inline fragments can only be on object, interface or union types" +
                ", got '".concat(typeConditionName, "'."),
              null,
              [
                (_fragment$typeConditi2 = fragment.typeCondition) !== null &&
                _fragment$typeConditi2 !== void 0
                  ? _fragment$typeConditi2
                  : fragment
              ]
            );
          }

          var rawParentType = this._schema.assertCompositeType(
            this._schema.getRawType(parentType)
          );

          checkFragmentSpreadTypeCompatibility(
            this._schema,
            typeCondition,
            rawParentType,
            null,
            fragment.typeCondition,
            parentTypeAST
          );

          var directives = this._transformDirectives(
            fragment.directives || [],
            "INLINE_FRAGMENT"
          );

          var selections = this._transformSelections(
            fragment.selectionSet,
            typeCondition,
            fragment.typeCondition
          );

          return {
            kind: "InlineFragment",
            directives: directives,
            loc: buildLocation(fragment.loc),
            metadata: null,
            selections: selections,
            typeCondition: typeCondition
          };
        };

        _proto2._transformFragmentSpread = function _transformFragmentSpread(
          fragmentSpread,
          parentType,
          parentTypeAST
        ) {
          var _this5 = this;

          var fragmentName = getName(fragmentSpread);

          var _partitionArray = partitionArray(
              fragmentSpread.directives || [],
              function(directive) {
                var name = getName(directive);
                return (
                  name === ARGUMENTS || name === DEPRECATED_UNCHECKED_ARGUMENTS
                );
              }
            ),
            argumentDirectives = _partitionArray[0],
            otherDirectives = _partitionArray[1];

          if (argumentDirectives.length > 1) {
            throw createUserError(
              "Directive @".concat(
                ARGUMENTS,
                " may be used at most once per a fragment spread."
              ),
              null,
              argumentDirectives
            );
          }

          var fragmentDefinition = this._entries.get(fragmentName);

          if (fragmentDefinition == null) {
            throw createUserError(
              "Unknown fragment '".concat(fragmentName, "'."),
              null,
              [fragmentSpread.name]
            );
          }

          var fragmentTypeNode = getFragmentType(fragmentDefinition.definition);

          var fragmentType = this._schema.assertCompositeType(
            this._schema.expectTypeFromAST(fragmentTypeNode)
          );

          var rawParentType = this._schema.assertCompositeType(
            this._schema.getRawType(parentType)
          );

          checkFragmentSpreadTypeCompatibility(
            this._schema,
            fragmentType,
            rawParentType,
            fragmentSpread.name.value,
            fragmentSpread,
            parentTypeAST
          );
          var fragmentArgumentDefinitions =
            fragmentDefinition.variableDefinitions;
          var argumentsDirective = argumentDirectives[0];
          var args;

          if (argumentsDirective != null) {
            var isDeprecatedUncheckedArguments =
              getName(argumentsDirective) === DEPRECATED_UNCHECKED_ARGUMENTS;
            var hasInvalidArgument = false;
            args = (argumentsDirective.arguments || []).map(function(arg) {
              var _argumentDefinition$t;

              var argName = getName(arg);
              var argValue = arg.value;
              var argumentDefinition = fragmentArgumentDefinitions.get(argName);
              var argumentType =
                (_argumentDefinition$t =
                  argumentDefinition === null || argumentDefinition === void 0
                    ? void 0
                    : argumentDefinition.type) !== null &&
                _argumentDefinition$t !== void 0
                  ? _argumentDefinition$t
                  : null;

              if (argValue.kind === "Variable") {
                if (
                  argumentDefinition == null &&
                  !isDeprecatedUncheckedArguments
                ) {
                  throw createUserError(
                    "Variable @".concat(
                      ARGUMENTS,
                      " values are only supported when the "
                    ) +
                      "argument is defined with @".concat(
                        ARGUMENT_DEFINITIONS,
                        ". Check "
                      ) +
                      "the definition of fragment '".concat(fragmentName, "'."),
                    null,
                    [arg.value, fragmentDefinition.definition]
                  );
                }

                hasInvalidArgument =
                  hasInvalidArgument || argumentDefinition == null; // TODO: check the type of the variable and use the type

                return {
                  kind: "Argument",
                  loc: buildLocation(arg.loc),
                  name: argName,
                  value: _this5._transformVariable(argValue, null),
                  type: null
                };
              } else {
                if (argumentType == null) {
                  throw createUserError(
                    "Literal @".concat(
                      ARGUMENTS,
                      " values are only supported when the "
                    ) +
                      "argument is defined with @".concat(
                        ARGUMENT_DEFINITIONS,
                        ". Check "
                      ) +
                      "the definition of fragment '".concat(fragmentName, "'."),
                    null,
                    [arg.value, fragmentDefinition.definition]
                  );
                }

                var value = _this5._transformValue(argValue, argumentType);

                return {
                  kind: "Argument",
                  loc: buildLocation(arg.loc),
                  name: argName,
                  value: value,
                  type: argumentType
                };
              }
            });

            if (isDeprecatedUncheckedArguments && !hasInvalidArgument) {
              throw createUserError(
                "Invalid use of @".concat(
                  DEPRECATED_UNCHECKED_ARGUMENTS,
                  ": all arguments "
                ) + "are defined, use @".concat(ARGUMENTS, " instead."),
                null,
                [argumentsDirective]
              );
            }
          }

          var directives = this._transformDirectives(
            otherDirectives,
            "FRAGMENT_SPREAD"
          );

          return {
            kind: "FragmentSpread",
            args: args || [],
            metadata: null,
            loc: buildLocation(fragmentSpread.loc),
            name: fragmentName,
            directives: directives
          };
        };

        _proto2._transformField = function _transformField(field, parentType) {
          var _field$alias$value, _field$alias;

          var schema = this._schema;
          var name = getName(field);

          var fieldDef = this._getFieldDefinition(
            schema,
            parentType,
            name,
            field
          );

          if (fieldDef == null) {
            throw createUserError(
              "Unknown field '"
                .concat(name, "' on type '")
                .concat(schema.getTypeString(parentType), "'."),
              null,
              [field]
            );
          }

          var alias =
            (_field$alias$value =
              (_field$alias = field.alias) === null || _field$alias === void 0
                ? void 0
                : _field$alias.value) !== null && _field$alias$value !== void 0
              ? _field$alias$value
              : name;

          var args = this._transformArguments(
            field.arguments || [],
            schema.getFieldArgs(fieldDef),
            fieldDef
          );

          var _partitionArray2 = partitionArray(
              field.directives || [],
              function(directive) {
                return getName(directive) !== CLIENT_FIELD;
              }
            ),
            otherDirectives = _partitionArray2[0],
            clientFieldDirectives = _partitionArray2[1];

          var directives = this._transformDirectives(otherDirectives, "FIELD");

          var type = schema.getFieldType(fieldDef);

          var handles = this._transformHandle(
            name,
            args,
            clientFieldDirectives
          );

          if (schema.isLeafType(schema.getRawType(type))) {
            if (
              field.selectionSet &&
              field.selectionSet.selections &&
              field.selectionSet.selections.length
            ) {
              throw createUserError(
                "Expected no selections for scalar field '".concat(name, "'."),
                null,
                [field]
              );
            }

            return {
              kind: "ScalarField",
              alias: alias,
              args: args,
              directives: directives,
              handles: handles,
              loc: buildLocation(field.loc),
              metadata: null,
              name: name,
              type: schema.assertScalarFieldType(type)
            };
          } else {
            var selections = field.selectionSet
              ? this._transformSelections(field.selectionSet, type)
              : null;

            if (selections == null || selections.length === 0) {
              throw createUserError(
                "Expected at least one selection for non-scalar field '"
                  .concat(name, "' on type '")
                  .concat(schema.getTypeString(type), "'."),
                null,
                [field]
              );
            }

            return {
              kind: "LinkedField",
              alias: alias,
              args: args,
              connection: false,
              directives: directives,
              handles: handles,
              loc: buildLocation(field.loc),
              metadata: null,
              name: name,
              selections: selections,
              type: schema.assertLinkedFieldType(type)
            };
          }
        };

        _proto2._transformHandle = function _transformHandle(
          fieldName,
          fieldArgs,
          clientFieldDirectives
        ) {
          var handles = null;
          clientFieldDirectives.forEach(function(clientFieldDirective) {
            var handleArgument = (clientFieldDirective.arguments || []).find(
              function(arg) {
                return getName(arg) === CLIENT_FIELD_HANDLE;
              }
            );

            if (handleArgument) {
              var name = null;
              var key = DEFAULT_HANDLE_KEY;
              var filters = null;
              var maybeHandle = transformLiteralValue(
                handleArgument.value,
                handleArgument
              );

              if (typeof maybeHandle !== "string") {
                throw createUserError(
                  "Expected a string literal argument for the @".concat(
                    CLIENT_FIELD,
                    " directive."
                  ),
                  null,
                  [handleArgument.value]
                );
              }

              name = maybeHandle;
              var keyArgument = (clientFieldDirective.arguments || []).find(
                function(arg) {
                  return getName(arg) === CLIENT_FIELD_KEY;
                }
              );

              if (keyArgument) {
                var maybeKey = transformLiteralValue(
                  keyArgument.value,
                  keyArgument
                );

                if (typeof maybeKey !== "string") {
                  throw createUserError(
                    "Expected a string literal argument for the @".concat(
                      CLIENT_FIELD,
                      " directive."
                    ),
                    null,
                    [keyArgument.value]
                  );
                }

                key = maybeKey;
              }

              var filtersArgument = (clientFieldDirective.arguments || []).find(
                function(arg) {
                  return getName(arg) === CLIENT_FIELD_FILTERS;
                }
              );

              if (filtersArgument) {
                var maybeFilters = transformLiteralValue(
                  filtersArgument.value,
                  filtersArgument
                );

                if (
                  !(
                    Array.isArray(maybeFilters) &&
                    maybeFilters.every(function(filter) {
                      return (
                        typeof filter === "string" &&
                        fieldArgs.some(function(fieldArg) {
                          return fieldArg.name === filter;
                        })
                      );
                    })
                  )
                ) {
                  throw createUserError(
                    "Expected an array of argument names on field '".concat(
                      fieldName,
                      "'."
                    ),
                    null,
                    [filtersArgument.value]
                  );
                } // $FlowFixMe[incompatible-cast]

                filters = maybeFilters;
              }

              var dynamicKeyArgument = (
                clientFieldDirective.arguments || []
              ).find(function(arg) {
                return getName(arg) === "dynamicKey_UNSTABLE";
              });

              if (dynamicKeyArgument != null) {
                throw createUserError(
                  "Dynamic keys are only supported with @connection.",
                  null,
                  [dynamicKeyArgument.value]
                );
              }

              handles = handles || [];
              handles.push({
                name: name,
                key: key,
                filters: filters,
                dynamicKey: null
              });
            }
          });
          return handles;
        };

        _proto2._transformDirectives = function _transformDirectives(
          directives,
          location
        ) {
          var _this6 = this;

          this._validateDirectivesLocation(directives, location);

          return directives.map(function(directive) {
            var name = getName(directive);

            var directiveDef = _this6._schema.getDirective(name);

            if (directiveDef == null) {
              throw createUserError(
                "Unknown directive '".concat(name, "'."),
                null,
                [directive]
              );
            }

            var args = _this6._transformArguments(
              directive.arguments || [],
              directiveDef.args.map(function(item) {
                return {
                  name: item.name,
                  type: item.type,
                  defaultValue: item.defaultValue
                };
              }),
              null,
              name
            );

            return {
              kind: "Directive",
              loc: buildLocation(directive.loc),
              name: name,
              args: args
            };
          });
        };

        _proto2._transformArguments = function _transformArguments(
          args,
          argumentDefinitions,
          field,
          directiveName
        ) {
          var _this7 = this;

          return args.map(function(arg) {
            var argName = getName(arg);
            var argDef = argumentDefinitions.find(function(def) {
              return def.name === argName;
            });

            if (argDef == null) {
              var message =
                "Unknown argument '".concat(argName, "'") +
                (field
                  ? " on field '".concat(
                      _this7._schema.getFieldName(field),
                      "'"
                    ) +
                    " of type '".concat(
                      _this7._schema.getTypeString(
                        _this7._schema.getFieldParentType(field)
                      ),
                      "'."
                    )
                  : directiveName != null
                  ? " on directive '@".concat(directiveName, "'.")
                  : ".");
              throw createUserError(message, null, [arg]);
            }

            var value = _this7._transformValue(arg.value, argDef.type);

            return {
              kind: "Argument",
              loc: buildLocation(arg.loc),
              name: argName,
              value: value,
              type: argDef.type
            };
          });
        };

        _proto2._splitConditions = function _splitConditions(mixedDirectives) {
          var _partitionArray3 = partitionArray(mixedDirectives, function(
              directive
            ) {
              return directive.name === INCLUDE || directive.name === SKIP;
            }),
            conditionDirectives = _partitionArray3[0],
            otherDirectives = _partitionArray3[1];

          var conditions = conditionDirectives.map(function(directive) {
            var passingValue = directive.name === INCLUDE;
            var arg = directive.args[0];

            if (arg == null || arg.name !== IF) {
              throw createUserError(
                "Expected an 'if' argument to @".concat(directive.name, "."),
                [directive.loc]
              );
            }

            if (
              !(arg.value.kind === "Variable" || arg.value.kind === "Literal")
            ) {
              throw createUserError(
                "Expected the 'if' argument to @".concat(
                  directive.name,
                  " to be a variable or literal."
                ),
                [directive.loc]
              );
            }

            return {
              kind: "Condition",
              condition: arg.value,
              loc: directive.loc,
              passingValue: passingValue,
              selections: []
            };
          });
          var sortedConditions = conditions.sort(function(a, b) {
            if (
              a.condition.kind === "Variable" &&
              b.condition.kind === "Variable"
            ) {
              return a.condition.variableName < b.condition.variableName
                ? -1
                : a.condition.variableName > b.condition.variableName
                ? 1
                : 0;
            } else {
              // sort literals earlier, variables later
              return a.condition.kind === "Variable"
                ? 1
                : b.condition.kind === "Variable"
                ? -1
                : 0;
            }
          });
          return [sortedConditions, otherDirectives];
        };

        _proto2._transformVariable = function _transformVariable(
          ast,
          usedAsType
        ) {
          var variableName = getName(ast);

          this._recordAndVerifyVariableReference(ast, variableName, usedAsType);

          return {
            kind: "Variable",
            loc: buildLocation(ast.loc),
            variableName: variableName,
            type: usedAsType
          };
        };

        _proto2._transformValue = function _transformValue(ast, type) {
          var _this8 = this;

          return transformValue(this._schema, ast, type, function(
            variableAst,
            variableType
          ) {
            return _this8._transformVariable(variableAst, variableType);
          });
        };

        return GraphQLDefinitionParser;
      })();
      /**
       * Transforms and validates argument values according to the expected
       * type.
       */

      function transformValue(schema, ast, type, transformVariable) {
        if (ast.kind === "Variable") {
          // Special case variables since there is no value to parse
          return transformVariable(ast, type);
        } else if (ast.kind === "NullValue") {
          // Special case null literals since there is no value to parse
          if (schema.isNonNull(type)) {
            throw createUserError(
              "Expected a value matching type '".concat(String(type), "'."),
              null,
              [ast]
            );
          }

          return {
            kind: "Literal",
            loc: buildLocation(ast.loc),
            value: null
          };
        } else {
          return transformNonNullLiteral(schema, ast, type, transformVariable);
        }
      }
      /**
       * Transforms and validates non-null literal (non-variable) values
       * according to the expected type.
       */

      function transformNonNullLiteral(schema, ast, type, transformVariable) {
        // Transform the value based on the type without a non-null wrapper.
        // Note that error messages should still use the original `type`
        // since that accurately describes to the user what the expected
        // type is (using nullableType would suggest that `null` is legal
        // even when it may not be, for example).
        var nullableType = schema.getNullableType(type);

        if (schema.isList(nullableType)) {
          if (ast.kind !== "ListValue") {
            // Parse singular (non-list) values flowing into a list type
            // as scalars, ie without wrapping them in an array.
            if (!schema.isInputType(schema.getListItemType(nullableType))) {
              throw createUserError(
                "Expected type ".concat(
                  schema.getTypeString(nullableType),
                  " to be an input type."
                ),
                null,
                [ast]
              );
            }

            return transformValue(
              schema,
              ast,
              schema.assertInputType(schema.getListItemType(nullableType)),
              transformVariable
            );
          }

          var itemType = schema.assertInputType(
            schema.getListItemType(nullableType)
          );
          var literalList = [];
          var items = [];
          var areAllItemsScalar = true;
          ast.values.forEach(function(item) {
            var itemValue = transformValue(
              schema,
              item,
              itemType,
              transformVariable
            );

            if (itemValue.kind === "Literal") {
              literalList.push(itemValue.value);
            }

            items.push(itemValue);
            areAllItemsScalar =
              areAllItemsScalar && itemValue.kind === "Literal";
          });

          if (areAllItemsScalar) {
            return {
              kind: "Literal",
              loc: buildLocation(ast.loc),
              value: literalList
            };
          } else {
            return {
              kind: "ListValue",
              loc: buildLocation(ast.loc),
              items: items
            };
          }
        } else if (schema.isInputObject(nullableType)) {
          if (ast.kind !== "ObjectValue") {
            throw createUserError(
              "Expected a value matching type '".concat(
                schema.getTypeString(type),
                "'."
              ),
              null,
              [ast]
            );
          }

          var literalObject = {};
          var fields = [];
          var areAllFieldsScalar = true;
          var inputType = schema.assertInputObjectType(nullableType);
          var requiredFieldNames = new Set(
            schema
              .getFields(inputType)
              .filter(function(field) {
                return schema.isNonNull(schema.getFieldType(field));
              })
              .map(function(field) {
                return schema.getFieldName(field);
              })
          );
          var seenFields = new Map();
          ast.fields.forEach(function(field) {
            var fieldName = getName(field);
            var seenField = seenFields.get(fieldName);

            if (seenField) {
              throw createUserError(
                "Duplicated field name '".concat(
                  fieldName,
                  "' in the input object."
                ),
                null,
                [field, seenField]
              );
            }

            var fieldID = schema.getFieldByName(inputType, fieldName);

            if (!fieldID) {
              throw createUserError(
                "Unknown field '"
                  .concat(fieldName, "' on type '")
                  .concat(schema.getTypeString(inputType), "'."),
                null,
                [field]
              );
            }

            var fieldConfig = schema.getFieldConfig(fieldID);
            var fieldType = schema.assertInputType(fieldConfig.type);
            var fieldValue = transformValue(
              schema,
              field.value,
              fieldType,
              transformVariable
            );

            if (fieldValue.kind === "Literal") {
              literalObject[field.name.value] = fieldValue.value;
            }

            fields.push({
              kind: "ObjectFieldValue",
              loc: buildLocation(field.loc),
              name: fieldName,
              value: fieldValue
            });
            seenFields.set(fieldName, field);
            requiredFieldNames["delete"](fieldName);
            areAllFieldsScalar =
              areAllFieldsScalar && fieldValue.kind === "Literal";
          });

          if (requiredFieldNames.size > 0) {
            var requiredFieldStr = Array.from(requiredFieldNames)
              .map(function(item) {
                return "'".concat(item, "'");
              })
              .join(", ");
            throw createUserError(
              "Missing non-optional field"
                .concat(requiredFieldNames.size > 1 ? "s:" : "", " ")
                .concat(requiredFieldStr, " for input type '")
                .concat(schema.getTypeString(inputType), "'."),
              null,
              [ast]
            );
          }

          if (areAllFieldsScalar) {
            return {
              kind: "Literal",
              loc: buildLocation(ast.loc),
              value: literalObject
            };
          } else {
            return {
              kind: "ObjectValue",
              loc: buildLocation(ast.loc),
              fields: fields
            };
          }
        } else if (schema.isId(nullableType)) {
          // GraphQLID's parseLiteral() always returns the string value. However
          // the int/string distinction may be important at runtime, so this
          // transform parses int/string literals into the corresponding JS types.
          if (ast.kind === "IntValue") {
            return {
              kind: "Literal",
              loc: buildLocation(ast.loc),
              value: parseInt(ast.value, 10)
            };
          } else if (ast.kind === "StringValue") {
            return {
              kind: "Literal",
              loc: buildLocation(ast.loc),
              value: ast.value
            };
          } else {
            throw createUserError(
              "Invalid value, expected a value matching type '".concat(
                schema.getTypeString(type),
                "'."
              ),
              null,
              [ast]
            );
          }
        } else if (schema.isEnum(nullableType)) {
          var enumType = schema.assertEnumType(nullableType);
          var value = schema.parseLiteral(enumType, ast);

          if (value == null) {
            var suggestions = schema.getEnumValues(enumType); // parseLiteral() should return a non-null JavaScript value
            // if the ast value is valid for the type.

            throw createUserError(
              "Expected a value matching type '"
                .concat(schema.getTypeString(type), "'. Possible values: ")
                .concat(orList(suggestions), "?'"),
              null,
              [ast]
            );
          }

          return {
            kind: "Literal",
            loc: buildLocation(ast.loc),
            value: value
          };
        } else if (schema.isScalar(nullableType)) {
          var _value = schema.parseLiteral(
            schema.assertScalarType(nullableType),
            ast
          );

          if (_value == null) {
            // parseLiteral() should return a non-null JavaScript value
            // if the ast value is valid for the type.
            throw createUserError(
              "Expected a value matching type '".concat(
                schema.getTypeString(type),
                "'."
              ),
              null,
              [ast]
            );
          }

          return {
            kind: "Literal",
            loc: buildLocation(ast.loc),
            value: _value
          };
        } else {
          throw createCompilerError(
            "Unsupported type '".concat(
              schema.getTypeString(type),
              "' for input value, expected a GraphQLList, "
            ) +
              "GraphQLInputObjectType, GraphQLEnumType, or GraphQLScalarType.",
            null,
            [ast]
          );
        }
      }
      /**
       * @private
       */

      function transformLiteralValue(ast, context) {
        switch (ast.kind) {
          case "IntValue":
            return parseInt(ast.value, 10);

          case "FloatValue":
            return parseFloat(ast.value);

          case "StringValue":
            return ast.value;

          case "BooleanValue":
            // Note: duplicated because Flow does not understand fall-through cases
            return ast.value;

          case "EnumValue":
            // Note: duplicated because Flow does not understand fall-through cases
            return ast.value;

          case "ListValue":
            return ast.values.map(function(item) {
              return transformLiteralValue(item, context);
            });

          case "NullValue":
            return null;

          case "ObjectValue": {
            var objectValue = {};
            ast.fields.forEach(function(field) {
              var fieldName = getName(field);
              var value = transformLiteralValue(field.value, context);
              objectValue[fieldName] = value;
            });
            return objectValue;
          }

          case "Variable":
            throw createUserError(
              "Unexpected variable where a literal (static) value is required.",
              null,
              [ast, context]
            );

          default:
            ast.kind;
            throw createCompilerError(
              "Unknown ast kind '".concat(ast.kind, "'."),
              [ast]
            );
        }
      }
      /**
       * @private
       */

      function buildArgumentDefinitions(variables) {
        return Array.from(variables.values(), function(_ref3) {
          var ast = _ref3.ast,
            name = _ref3.name,
            defaultValue = _ref3.defaultValue,
            type = _ref3.type;
          return {
            kind: "LocalArgumentDefinition",
            loc: buildLocation(ast.loc),
            name: name,
            type: type,
            defaultValue: defaultValue
          };
        });
      }
      /**
       * @private
       */

      function buildLocation(loc) {
        if (loc == null) {
          return {
            kind: "Unknown"
          };
        }

        return {
          kind: "Source",
          start: loc.start,
          end: loc.end,
          source: loc.source
        };
      }
      /**
       * @private
       */

      function applyConditions(conditions, selections) {
        var nextSelections = selections;
        conditions.forEach(function(condition) {
          nextSelections = [
            _objectSpread(
              _objectSpread({}, condition),
              {},
              {
                selections: nextSelections
              }
            )
          ];
        });
        return nextSelections;
      }
      /**
       * @private
       */

      function getName(ast) {
        var _ast$name;

        var name =
          (_ast$name = ast.name) === null || _ast$name === void 0
            ? void 0
            : _ast$name.value;

        if (typeof name !== "string") {
          throw createCompilerError(
            "Expected ast node to have a 'name'.",
            null,
            [ast]
          );
        }

        return name;
      }

      function getTypeName(ast) {
        return ast ? print(ast) : "Undefined Type Name";
      }
      /**
       * @private
       */

      function getFragmentType(ast) {
        if (ast.kind === "FragmentDefinition") {
          return ast.typeCondition;
        }

        throw createCompilerError(
          "Expected ast node to be a FragmentDefinition node.",
          null,
          [ast]
        );
      }

      function checkFragmentSpreadTypeCompatibility(
        schema,
        fragmentType,
        parentType,
        fragmentName,
        fragmentTypeAST,
        parentTypeAST
      ) {
        if (
          !schema.doTypesOverlap(
            fragmentType,
            schema.assertCompositeType(parentType)
          )
        ) {
          var nodes = [];

          if (parentTypeAST) {
            nodes.push(parentTypeAST);
          }

          if (fragmentTypeAST) {
            nodes.push(fragmentTypeAST);
          }

          var possibleConcreteTypes = schema.isAbstractType(parentType)
            ? Array.from(
                schema.getPossibleTypes(schema.assertAbstractType(parentType))
              )
            : [];
          var suggestedTypesMessage = "";

          if (possibleConcreteTypes.length !== 0) {
            suggestedTypesMessage = " Possible concrete types include ".concat(
              possibleConcreteTypes
                .sort()
                .slice(0, 3)
                .map(function(type) {
                  return "'".concat(schema.getTypeString(type), "'");
                })
                .join(", "),
              ", etc."
            );
          }

          throw createUserError(
            (fragmentName != null
              ? "Fragment '".concat(
                  fragmentName,
                  "' cannot be spread here as objects of "
                )
              : "Fragment cannot be spread here as objects of ") +
              "type '".concat(schema.getTypeString(parentType), "' ") +
              "can never be of type '".concat(
                schema.getTypeString(fragmentType),
                "'."
              ) +
              suggestedTypesMessage,
            null,
            nodes
          );
        }
      }

      module.exports = {
        parse: parse,
        transform: transform
      };

      /***/
    },

    /***/ r4ky: /***/ function(module, exports, __webpack_require__) {
      /**
       *  Copyright (c) 2014-2015, Facebook, Inc.
       *  All rights reserved.
       *
       *  This source code is licensed under the BSD-style license found in the
       *  LICENSE file in the root directory of this source tree. An additional grant
       *  of patent rights can be found in the PATENTS file in the same directory.
       */

      (function(global, factory) {
        true ? (module.exports = factory()) : undefined;
      })(this, function() {
        "use strict";
        var SLICE$0 = Array.prototype.slice;

        function createClass(ctor, superClass) {
          if (superClass) {
            ctor.prototype = Object.create(superClass.prototype);
          }
          ctor.prototype.constructor = ctor;
        }

        function Iterable(value) {
          return isIterable(value) ? value : Seq(value);
        }

        createClass(KeyedIterable, Iterable);
        function KeyedIterable(value) {
          return isKeyed(value) ? value : KeyedSeq(value);
        }

        createClass(IndexedIterable, Iterable);
        function IndexedIterable(value) {
          return isIndexed(value) ? value : IndexedSeq(value);
        }

        createClass(SetIterable, Iterable);
        function SetIterable(value) {
          return isIterable(value) && !isAssociative(value)
            ? value
            : SetSeq(value);
        }

        function isIterable(maybeIterable) {
          return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
        }

        function isKeyed(maybeKeyed) {
          return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
        }

        function isIndexed(maybeIndexed) {
          return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
        }

        function isAssociative(maybeAssociative) {
          return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
        }

        function isOrdered(maybeOrdered) {
          return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
        }

        Iterable.isIterable = isIterable;
        Iterable.isKeyed = isKeyed;
        Iterable.isIndexed = isIndexed;
        Iterable.isAssociative = isAssociative;
        Iterable.isOrdered = isOrdered;

        Iterable.Keyed = KeyedIterable;
        Iterable.Indexed = IndexedIterable;
        Iterable.Set = SetIterable;

        var IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
        var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
        var IS_INDEXED_SENTINEL = "@@__IMMUTABLE_INDEXED__@@";
        var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";

        // Used for setting prototype methods that IE8 chokes on.
        var DELETE = "delete";

        // Constants describing the size of trie nodes.
        var SHIFT = 5; // Resulted in best performance after ______?
        var SIZE = 1 << SHIFT;
        var MASK = SIZE - 1;

        // A consistent shared value representing "not set" which equals nothing other
        // than itself, and nothing that could be provided externally.
        var NOT_SET = {};

        // Boolean references, Rough equivalent of `bool &`.
        var CHANGE_LENGTH = { value: false };
        var DID_ALTER = { value: false };

        function MakeRef(ref) {
          ref.value = false;
          return ref;
        }

        function SetRef(ref) {
          ref && (ref.value = true);
        }

        // A function which returns a value representing an "owner" for transient writes
        // to tries. The return value will only ever equal itself, and will not equal
        // the return of any subsequent call of this function.
        function OwnerID() {}

        // http://jsperf.com/copy-array-inline
        function arrCopy(arr, offset) {
          offset = offset || 0;
          var len = Math.max(0, arr.length - offset);
          var newArr = new Array(len);
          for (var ii = 0; ii < len; ii++) {
            newArr[ii] = arr[ii + offset];
          }
          return newArr;
        }

        function ensureSize(iter) {
          if (iter.size === undefined) {
            iter.size = iter.__iterate(returnTrue);
          }
          return iter.size;
        }

        function wrapIndex(iter, index) {
          // This implements "is array index" which the ECMAString spec defines as:
          //
          //     A String property name P is an array index if and only if
          //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
          //     to 2^32−1.
          //
          // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
          if (typeof index !== "number") {
            var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
            if ("" + uint32Index !== index || uint32Index === 4294967295) {
              return NaN;
            }
            index = uint32Index;
          }
          return index < 0 ? ensureSize(iter) + index : index;
        }

        function returnTrue() {
          return true;
        }

        function wholeSlice(begin, end, size) {
          return (
            (begin === 0 || (size !== undefined && begin <= -size)) &&
            (end === undefined || (size !== undefined && end >= size))
          );
        }

        function resolveBegin(begin, size) {
          return resolveIndex(begin, size, 0);
        }

        function resolveEnd(end, size) {
          return resolveIndex(end, size, size);
        }

        function resolveIndex(index, size, defaultIndex) {
          return index === undefined
            ? defaultIndex
            : index < 0
            ? Math.max(0, size + index)
            : size === undefined
            ? index
            : Math.min(size, index);
        }

        /* global Symbol */

        var ITERATE_KEYS = 0;
        var ITERATE_VALUES = 1;
        var ITERATE_ENTRIES = 2;

        var REAL_ITERATOR_SYMBOL =
          typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";

        var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

        function Iterator(next) {
          this.next = next;
        }

        Iterator.prototype.toString = function() {
          return "[Iterator]";
        };

        Iterator.KEYS = ITERATE_KEYS;
        Iterator.VALUES = ITERATE_VALUES;
        Iterator.ENTRIES = ITERATE_ENTRIES;

        Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
          return this.toString();
        };
        Iterator.prototype[ITERATOR_SYMBOL] = function() {
          return this;
        };

        function iteratorValue(type, k, v, iteratorResult) {
          var value = type === 0 ? k : type === 1 ? v : [k, v];
          iteratorResult
            ? (iteratorResult.value = value)
            : (iteratorResult = {
                value: value,
                done: false
              });
          return iteratorResult;
        }

        function iteratorDone() {
          return { value: undefined, done: true };
        }

        function hasIterator(maybeIterable) {
          return !!getIteratorFn(maybeIterable);
        }

        function isIterator(maybeIterator) {
          return maybeIterator && typeof maybeIterator.next === "function";
        }

        function getIterator(iterable) {
          var iteratorFn = getIteratorFn(iterable);
          return iteratorFn && iteratorFn.call(iterable);
        }

        function getIteratorFn(iterable) {
          var iteratorFn =
            iterable &&
            ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
              iterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }

        function isArrayLike(value) {
          return value && typeof value.length === "number";
        }

        createClass(Seq, Iterable);
        function Seq(value) {
          return value === null || value === undefined
            ? emptySequence()
            : isIterable(value)
            ? value.toSeq()
            : seqFromValue(value);
        }

        Seq.of = function(/*...values*/) {
          return Seq(arguments);
        };

        Seq.prototype.toSeq = function() {
          return this;
        };

        Seq.prototype.toString = function() {
          return this.__toString("Seq {", "}");
        };

        Seq.prototype.cacheResult = function() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };

        // abstract __iterateUncached(fn, reverse)

        Seq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, true);
        };

        // abstract __iteratorUncached(type, reverse)

        Seq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, true);
        };

        createClass(KeyedSeq, Seq);
        function KeyedSeq(value) {
          return value === null || value === undefined
            ? emptySequence().toKeyedSeq()
            : isIterable(value)
            ? isKeyed(value)
              ? value.toSeq()
              : value.fromEntrySeq()
            : keyedSeqFromValue(value);
        }

        KeyedSeq.prototype.toKeyedSeq = function() {
          return this;
        };

        createClass(IndexedSeq, Seq);
        function IndexedSeq(value) {
          return value === null || value === undefined
            ? emptySequence()
            : !isIterable(value)
            ? indexedSeqFromValue(value)
            : isKeyed(value)
            ? value.entrySeq()
            : value.toIndexedSeq();
        }

        IndexedSeq.of = function(/*...values*/) {
          return IndexedSeq(arguments);
        };

        IndexedSeq.prototype.toIndexedSeq = function() {
          return this;
        };

        IndexedSeq.prototype.toString = function() {
          return this.__toString("Seq [", "]");
        };

        IndexedSeq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, false);
        };

        IndexedSeq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, false);
        };

        createClass(SetSeq, Seq);
        function SetSeq(value) {
          return (value === null || value === undefined
            ? emptySequence()
            : !isIterable(value)
            ? indexedSeqFromValue(value)
            : isKeyed(value)
            ? value.entrySeq()
            : value
          ).toSetSeq();
        }

        SetSeq.of = function(/*...values*/) {
          return SetSeq(arguments);
        };

        SetSeq.prototype.toSetSeq = function() {
          return this;
        };

        Seq.isSeq = isSeq;
        Seq.Keyed = KeyedSeq;
        Seq.Set = SetSeq;
        Seq.Indexed = IndexedSeq;

        var IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";

        Seq.prototype[IS_SEQ_SENTINEL] = true;

        createClass(ArraySeq, IndexedSeq);
        function ArraySeq(array) {
          this._array = array;
          this.size = array.length;
        }

        ArraySeq.prototype.get = function(index, notSetValue) {
          return this.has(index)
            ? this._array[wrapIndex(this, index)]
            : notSetValue;
        };

        ArraySeq.prototype.__iterate = function(fn, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };

        ArraySeq.prototype.__iterator = function(type, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          var ii = 0;
          return new Iterator(function() {
            return ii > maxIndex
              ? iteratorDone()
              : iteratorValue(
                  type,
                  ii,
                  array[reverse ? maxIndex - ii++ : ii++]
                );
          });
        };

        createClass(ObjectSeq, KeyedSeq);
        function ObjectSeq(object) {
          var keys = Object.keys(object);
          this._object = object;
          this._keys = keys;
          this.size = keys.length;
        }

        ObjectSeq.prototype.get = function(key, notSetValue) {
          if (notSetValue !== undefined && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };

        ObjectSeq.prototype.has = function(key) {
          return this._object.hasOwnProperty(key);
        };

        ObjectSeq.prototype.__iterate = function(fn, reverse) {
          var object = this._object;
          var keys = this._keys;
          var maxIndex = keys.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            var key = keys[reverse ? maxIndex - ii : ii];
            if (fn(object[key], key, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };

        ObjectSeq.prototype.__iterator = function(type, reverse) {
          var object = this._object;
          var keys = this._keys;
          var maxIndex = keys.length - 1;
          var ii = 0;
          return new Iterator(function() {
            var key = keys[reverse ? maxIndex - ii : ii];
            return ii++ > maxIndex
              ? iteratorDone()
              : iteratorValue(type, key, object[key]);
          });
        };

        ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;

        createClass(IterableSeq, IndexedSeq);
        function IterableSeq(iterable) {
          this._iterable = iterable;
          this.size = iterable.length || iterable.size;
        }

        IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };

        IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done
              ? step
              : iteratorValue(type, iterations++, step.value);
          });
        };

        createClass(IteratorSeq, IndexedSeq);
        function IteratorSeq(iterator) {
          this._iterator = iterator;
          this._iteratorCache = [];
        }

        IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          while (iterations < cache.length) {
            if (fn(cache[iterations], iterations++, this) === false) {
              return iterations;
            }
          }
          var step;
          while (!(step = iterator.next()).done) {
            var val = step.value;
            cache[iterations] = val;
            if (fn(val, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };

        IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          return new Iterator(function() {
            if (iterations >= cache.length) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              cache[iterations] = step.value;
            }
            return iteratorValue(type, iterations, cache[iterations++]);
          });
        };

        // # pragma Helper functions

        function isSeq(maybeSeq) {
          return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
        }

        var EMPTY_SEQ;

        function emptySequence() {
          return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
        }

        function keyedSeqFromValue(value) {
          var seq = Array.isArray(value)
            ? new ArraySeq(value).fromEntrySeq()
            : isIterator(value)
            ? new IteratorSeq(value).fromEntrySeq()
            : hasIterator(value)
            ? new IterableSeq(value).fromEntrySeq()
            : typeof value === "object"
            ? new ObjectSeq(value)
            : undefined;
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of [k, v] entries, " +
                "or keyed object: " +
                value
            );
          }
          return seq;
        }

        function indexedSeqFromValue(value) {
          var seq = maybeIndexedSeqFromValue(value);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values: " + value
            );
          }
          return seq;
        }

        function seqFromValue(value) {
          var seq =
            maybeIndexedSeqFromValue(value) ||
            (typeof value === "object" && new ObjectSeq(value));
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values, or keyed object: " +
                value
            );
          }
          return seq;
        }

        function maybeIndexedSeqFromValue(value) {
          return isArrayLike(value)
            ? new ArraySeq(value)
            : isIterator(value)
            ? new IteratorSeq(value)
            : hasIterator(value)
            ? new IterableSeq(value)
            : undefined;
        }

        function seqIterate(seq, fn, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            for (var ii = 0; ii <= maxIndex; ii++) {
              var entry = cache[reverse ? maxIndex - ii : ii];
              if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
                return ii + 1;
              }
            }
            return ii;
          }
          return seq.__iterateUncached(fn, reverse);
        }

        function seqIterator(seq, type, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            var ii = 0;
            return new Iterator(function() {
              var entry = cache[reverse ? maxIndex - ii : ii];
              return ii++ > maxIndex
                ? iteratorDone()
                : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
            });
          }
          return seq.__iteratorUncached(type, reverse);
        }

        function fromJS(json, converter) {
          return converter
            ? fromJSWith(converter, json, "", { "": json })
            : fromJSDefault(json);
        }

        function fromJSWith(converter, json, key, parentJSON) {
          if (Array.isArray(json)) {
            return converter.call(
              parentJSON,
              key,
              IndexedSeq(json).map(function(v, k) {
                return fromJSWith(converter, v, k, json);
              })
            );
          }
          if (isPlainObj(json)) {
            return converter.call(
              parentJSON,
              key,
              KeyedSeq(json).map(function(v, k) {
                return fromJSWith(converter, v, k, json);
              })
            );
          }
          return json;
        }

        function fromJSDefault(json) {
          if (Array.isArray(json)) {
            return IndexedSeq(json)
              .map(fromJSDefault)
              .toList();
          }
          if (isPlainObj(json)) {
            return KeyedSeq(json)
              .map(fromJSDefault)
              .toMap();
          }
          return json;
        }

        function isPlainObj(value) {
          return (
            value &&
            (value.constructor === Object || value.constructor === undefined)
          );
        }

        /**
         * An extension of the "same-value" algorithm as [described for use by ES6 Map
         * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
         *
         * NaN is considered the same as NaN, however -0 and 0 are considered the same
         * value, which is different from the algorithm described by
         * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
         *
         * This is extended further to allow Objects to describe the values they
         * represent, by way of `valueOf` or `equals` (and `hashCode`).
         *
         * Note: because of this extension, the key equality of Immutable.Map and the
         * value equality of Immutable.Set will differ from ES6 Map and Set.
         *
         * ### Defining custom values
         *
         * The easiest way to describe the value an object represents is by implementing
         * `valueOf`. For example, `Date` represents a value by returning a unix
         * timestamp for `valueOf`:
         *
         *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
         *     var date2 = new Date(1234567890000);
         *     date1.valueOf(); // 1234567890000
         *     assert( date1 !== date2 );
         *     assert( Immutable.is( date1, date2 ) );
         *
         * Note: overriding `valueOf` may have other implications if you use this object
         * where JavaScript expects a primitive, such as implicit string coercion.
         *
         * For more complex types, especially collections, implementing `valueOf` may
         * not be performant. An alternative is to implement `equals` and `hashCode`.
         *
         * `equals` takes another object, presumably of similar type, and returns true
         * if the it is equal. Equality is symmetrical, so the same result should be
         * returned if this and the argument are flipped.
         *
         *     assert( a.equals(b) === b.equals(a) );
         *
         * `hashCode` returns a 32bit integer number representing the object which will
         * be used to determine how to store the value object in a Map or Set. You must
         * provide both or neither methods, one must not exist without the other.
         *
         * Also, an important relationship between these methods must be upheld: if two
         * values are equal, they *must* return the same hashCode. If the values are not
         * equal, they might have the same hashCode; this is called a hash collision,
         * and while undesirable for performance reasons, it is acceptable.
         *
         *     if (a.equals(b)) {
         *       assert( a.hashCode() === b.hashCode() );
         *     }
         *
         * All Immutable collections implement `equals` and `hashCode`.
         *
         */
        function is(valueA, valueB) {
          if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
          if (
            typeof valueA.valueOf === "function" &&
            typeof valueB.valueOf === "function"
          ) {
            valueA = valueA.valueOf();
            valueB = valueB.valueOf();
            if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
              return true;
            }
            if (!valueA || !valueB) {
              return false;
            }
          }
          if (
            typeof valueA.equals === "function" &&
            typeof valueB.equals === "function" &&
            valueA.equals(valueB)
          ) {
            return true;
          }
          return false;
        }

        function deepEqual(a, b) {
          if (a === b) {
            return true;
          }

          if (
            !isIterable(b) ||
            (a.size !== undefined &&
              b.size !== undefined &&
              a.size !== b.size) ||
            (a.__hash !== undefined &&
              b.__hash !== undefined &&
              a.__hash !== b.__hash) ||
            isKeyed(a) !== isKeyed(b) ||
            isIndexed(a) !== isIndexed(b) ||
            isOrdered(a) !== isOrdered(b)
          ) {
            return false;
          }

          if (a.size === 0 && b.size === 0) {
            return true;
          }

          var notAssociative = !isAssociative(a);

          if (isOrdered(a)) {
            var entries = a.entries();
            return (
              b.every(function(v, k) {
                var entry = entries.next().value;
                return (
                  entry &&
                  is(entry[1], v) &&
                  (notAssociative || is(entry[0], k))
                );
              }) && entries.next().done
            );
          }

          var flipped = false;

          if (a.size === undefined) {
            if (b.size === undefined) {
              if (typeof a.cacheResult === "function") {
                a.cacheResult();
              }
            } else {
              flipped = true;
              var _ = a;
              a = b;
              b = _;
            }
          }

          var allEqual = true;
          var bSize = b.__iterate(function(v, k) {
            if (
              notAssociative
                ? !a.has(v)
                : flipped
                ? !is(v, a.get(k, NOT_SET))
                : !is(a.get(k, NOT_SET), v)
            ) {
              allEqual = false;
              return false;
            }
          });

          return allEqual && a.size === bSize;
        }

        createClass(Repeat, IndexedSeq);

        function Repeat(value, times) {
          if (!(this instanceof Repeat)) {
            return new Repeat(value, times);
          }
          this._value = value;
          this.size = times === undefined ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }

        Repeat.prototype.toString = function() {
          if (this.size === 0) {
            return "Repeat []";
          }
          return "Repeat [ " + this._value + " " + this.size + " times ]";
        };

        Repeat.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };

        Repeat.prototype.includes = function(searchValue) {
          return is(this._value, searchValue);
        };

        Repeat.prototype.slice = function(begin, end) {
          var size = this.size;
          return wholeSlice(begin, end, size)
            ? this
            : new Repeat(
                this._value,
                resolveEnd(end, size) - resolveBegin(begin, size)
              );
        };

        Repeat.prototype.reverse = function() {
          return this;
        };

        Repeat.prototype.indexOf = function(searchValue) {
          if (is(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };

        Repeat.prototype.lastIndexOf = function(searchValue) {
          if (is(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };

        Repeat.prototype.__iterate = function(fn, reverse) {
          for (var ii = 0; ii < this.size; ii++) {
            if (fn(this._value, ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };

        Repeat.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          var ii = 0;
          return new Iterator(function() {
            return ii < this$0.size
              ? iteratorValue(type, ii++, this$0._value)
              : iteratorDone();
          });
        };

        Repeat.prototype.equals = function(other) {
          return other instanceof Repeat
            ? is(this._value, other._value)
            : deepEqual(other);
        };

        var EMPTY_REPEAT;

        function invariant(condition, error) {
          if (!condition) throw new Error(error);
        }

        createClass(Range, IndexedSeq);

        function Range(start, end, step) {
          if (!(this instanceof Range)) {
            return new Range(start, end, step);
          }
          invariant(step !== 0, "Cannot step a Range by 0");
          start = start || 0;
          if (end === undefined) {
            end = Infinity;
          }
          step = step === undefined ? 1 : Math.abs(step);
          if (end < start) {
            step = -step;
          }
          this._start = start;
          this._end = end;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }

        Range.prototype.toString = function() {
          if (this.size === 0) {
            return "Range []";
          }
          return (
            "Range [ " +
            this._start +
            "..." +
            this._end +
            (this._step > 1 ? " by " + this._step : "") +
            " ]"
          );
        };

        Range.prototype.get = function(index, notSetValue) {
          return this.has(index)
            ? this._start + wrapIndex(this, index) * this._step
            : notSetValue;
        };

        Range.prototype.includes = function(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return (
            possibleIndex >= 0 &&
            possibleIndex < this.size &&
            possibleIndex === Math.floor(possibleIndex)
          );
        };

        Range.prototype.slice = function(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end = resolveEnd(end, this.size);
          if (end <= begin) {
            return new Range(0, 0);
          }
          return new Range(
            this.get(begin, this._end),
            this.get(end, this._end),
            this._step
          );
        };

        Range.prototype.indexOf = function(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };

        Range.prototype.lastIndexOf = function(searchValue) {
          return this.indexOf(searchValue);
        };

        Range.prototype.__iterate = function(fn, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value = reverse ? this._start + maxIndex * step : this._start;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(value, ii, this) === false) {
              return ii + 1;
            }
            value += reverse ? -step : step;
          }
          return ii;
        };

        Range.prototype.__iterator = function(type, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value = reverse ? this._start + maxIndex * step : this._start;
          var ii = 0;
          return new Iterator(function() {
            var v = value;
            value += reverse ? -step : step;
            return ii > maxIndex
              ? iteratorDone()
              : iteratorValue(type, ii++, v);
          });
        };

        Range.prototype.equals = function(other) {
          return other instanceof Range
            ? this._start === other._start &&
                this._end === other._end &&
                this._step === other._step
            : deepEqual(this, other);
        };

        var EMPTY_RANGE;

        createClass(Collection, Iterable);
        function Collection() {
          throw TypeError("Abstract");
        }

        createClass(KeyedCollection, Collection);
        function KeyedCollection() {}

        createClass(IndexedCollection, Collection);
        function IndexedCollection() {}

        createClass(SetCollection, Collection);
        function SetCollection() {}

        Collection.Keyed = KeyedCollection;
        Collection.Indexed = IndexedCollection;
        Collection.Set = SetCollection;

        var imul =
          typeof Math.imul === "function" && Math.imul(0xffffffff, 2) === -2
            ? Math.imul
            : function imul(a, b) {
                a = a | 0; // int
                b = b | 0; // int
                var c = a & 0xffff;
                var d = b & 0xffff;
                // Shift by 0 fixes the sign on the high part.
                return (
                  (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) |
                  0
                ); // int
              };

        // v8 has an optimization for storing 31-bit signed numbers.
        // Values which have either 00 or 11 as the high order bits qualify.
        // This function drops the highest order bit in a signed number, maintaining
        // the sign bit.
        function smi(i32) {
          return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);
        }

        function hash(o) {
          if (o === false || o === null || o === undefined) {
            return 0;
          }
          if (typeof o.valueOf === "function") {
            o = o.valueOf();
            if (o === false || o === null || o === undefined) {
              return 0;
            }
          }
          if (o === true) {
            return 1;
          }
          var type = typeof o;
          if (type === "number") {
            var h = o | 0;
            if (h !== o) {
              h ^= o * 0xffffffff;
            }
            while (o > 0xffffffff) {
              o /= 0xffffffff;
              h ^= o;
            }
            return smi(h);
          }
          if (type === "string") {
            return o.length > STRING_HASH_CACHE_MIN_STRLEN
              ? cachedHashString(o)
              : hashString(o);
          }
          if (typeof o.hashCode === "function") {
            return o.hashCode();
          }
          if (type === "object") {
            return hashJSObj(o);
          }
          if (typeof o.toString === "function") {
            return hashString(o.toString());
          }
          throw new Error("Value type " + type + " cannot be hashed.");
        }

        function cachedHashString(string) {
          var hash = stringHashCache[string];
          if (hash === undefined) {
            hash = hashString(string);
            if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
              STRING_HASH_CACHE_SIZE = 0;
              stringHashCache = {};
            }
            STRING_HASH_CACHE_SIZE++;
            stringHashCache[string] = hash;
          }
          return hash;
        }

        // http://jsperf.com/hashing-strings
        function hashString(string) {
          // This is the hash from JVM
          // The hash code for a string is computed as
          // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
          // where s[i] is the ith character of the string and n is the length of
          // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
          // (exclusive) by dropping high bits.
          var hash = 0;
          for (var ii = 0; ii < string.length; ii++) {
            hash = (31 * hash + string.charCodeAt(ii)) | 0;
          }
          return smi(hash);
        }

        function hashJSObj(obj) {
          var hash;
          if (usingWeakMap) {
            hash = weakMap.get(obj);
            if (hash !== undefined) {
              return hash;
            }
          }

          hash = obj[UID_HASH_KEY];
          if (hash !== undefined) {
            return hash;
          }

          if (!canDefineProperty) {
            hash =
              obj.propertyIsEnumerable &&
              obj.propertyIsEnumerable[UID_HASH_KEY];
            if (hash !== undefined) {
              return hash;
            }

            hash = getIENodeHash(obj);
            if (hash !== undefined) {
              return hash;
            }
          }

          hash = ++objHashUID;
          if (objHashUID & 0x40000000) {
            objHashUID = 0;
          }

          if (usingWeakMap) {
            weakMap.set(obj, hash);
          } else if (
            isExtensible !== undefined &&
            isExtensible(obj) === false
          ) {
            throw new Error("Non-extensible objects are not allowed as keys.");
          } else if (canDefineProperty) {
            Object.defineProperty(obj, UID_HASH_KEY, {
              enumerable: false,
              configurable: false,
              writable: false,
              value: hash
            });
          } else if (
            obj.propertyIsEnumerable !== undefined &&
            obj.propertyIsEnumerable ===
              obj.constructor.prototype.propertyIsEnumerable
          ) {
            // Since we can't define a non-enumerable property on the object
            // we'll hijack one of the less-used non-enumerable properties to
            // save our hash on it. Since this is a function it will not show up in
            // `JSON.stringify` which is what we want.
            obj.propertyIsEnumerable = function() {
              return this.constructor.prototype.propertyIsEnumerable.apply(
                this,
                arguments
              );
            };
            obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
          } else if (obj.nodeType !== undefined) {
            // At this point we couldn't get the IE `uniqueID` to use as a hash
            // and we couldn't use a non-enumerable property to exploit the
            // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
            // itself.
            obj[UID_HASH_KEY] = hash;
          } else {
            throw new Error(
              "Unable to set a non-enumerable property on object."
            );
          }

          return hash;
        }

        // Get references to ES5 object methods.
        var isExtensible = Object.isExtensible;

        // True if Object.defineProperty works as expected. IE8 fails this test.
        var canDefineProperty = (function() {
          try {
            Object.defineProperty({}, "@", {});
            return true;
          } catch (e) {
            return false;
          }
        })();

        // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
        // and avoid memory leaks from the IE cloneNode bug.
        function getIENodeHash(node) {
          if (node && node.nodeType > 0) {
            switch (node.nodeType) {
              case 1: // Element
                return node.uniqueID;
              case 9: // Document
                return node.documentElement && node.documentElement.uniqueID;
            }
          }
        }

        // If possible, use a WeakMap.
        var usingWeakMap = typeof WeakMap === "function";
        var weakMap;
        if (usingWeakMap) {
          weakMap = new WeakMap();
        }

        var objHashUID = 0;

        var UID_HASH_KEY = "__immutablehash__";
        if (typeof Symbol === "function") {
          UID_HASH_KEY = Symbol(UID_HASH_KEY);
        }

        var STRING_HASH_CACHE_MIN_STRLEN = 16;
        var STRING_HASH_CACHE_MAX_SIZE = 255;
        var STRING_HASH_CACHE_SIZE = 0;
        var stringHashCache = {};

        function assertNotInfinite(size) {
          invariant(
            size !== Infinity,
            "Cannot perform this action with an infinite size."
          );
        }

        createClass(Map, KeyedCollection);

        // @pragma Construction

        function Map(value) {
          return value === null || value === undefined
            ? emptyMap()
            : isMap(value) && !isOrdered(value)
            ? value
            : emptyMap().withMutations(function(map) {
                var iter = KeyedIterable(value);
                assertNotInfinite(iter.size);
                iter.forEach(function(v, k) {
                  return map.set(k, v);
                });
              });
        }

        Map.prototype.toString = function() {
          return this.__toString("Map {", "}");
        };

        // @pragma Access

        Map.prototype.get = function(k, notSetValue) {
          return this._root
            ? this._root.get(0, undefined, k, notSetValue)
            : notSetValue;
        };

        // @pragma Modification

        Map.prototype.set = function(k, v) {
          return updateMap(this, k, v);
        };

        Map.prototype.setIn = function(keyPath, v) {
          return this.updateIn(keyPath, NOT_SET, function() {
            return v;
          });
        };

        Map.prototype.remove = function(k) {
          return updateMap(this, k, NOT_SET);
        };

        Map.prototype.deleteIn = function(keyPath) {
          return this.updateIn(keyPath, function() {
            return NOT_SET;
          });
        };

        Map.prototype.update = function(k, notSetValue, updater) {
          return arguments.length === 1
            ? k(this)
            : this.updateIn([k], notSetValue, updater);
        };

        Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
          if (!updater) {
            updater = notSetValue;
            notSetValue = undefined;
          }
          var updatedValue = updateInDeepMap(
            this,
            forceIterator(keyPath),
            notSetValue,
            updater
          );
          return updatedValue === NOT_SET ? undefined : updatedValue;
        };

        Map.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };

        // @pragma Composition

        Map.prototype.merge = function(/*...iters*/) {
          return mergeIntoMapWith(this, undefined, arguments);
        };

        Map.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, merger, iters);
        };

        Map.prototype.mergeIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(keyPath, emptyMap(), function(m) {
            return typeof m.merge === "function"
              ? m.merge.apply(m, iters)
              : iters[iters.length - 1];
          });
        };

        Map.prototype.mergeDeep = function(/*...iters*/) {
          return mergeIntoMapWith(this, deepMerger, arguments);
        };

        Map.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, deepMergerWith(merger), iters);
        };

        Map.prototype.mergeDeepIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(keyPath, emptyMap(), function(m) {
            return typeof m.mergeDeep === "function"
              ? m.mergeDeep.apply(m, iters)
              : iters[iters.length - 1];
          });
        };

        Map.prototype.sort = function(comparator) {
          // Late binding
          return OrderedMap(sortFactory(this, comparator));
        };

        Map.prototype.sortBy = function(mapper, comparator) {
          // Late binding
          return OrderedMap(sortFactory(this, comparator, mapper));
        };

        // @pragma Mutability

        Map.prototype.withMutations = function(fn) {
          var mutable = this.asMutable();
          fn(mutable);
          return mutable.wasAltered()
            ? mutable.__ensureOwner(this.__ownerID)
            : this;
        };

        Map.prototype.asMutable = function() {
          return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
        };

        Map.prototype.asImmutable = function() {
          return this.__ensureOwner();
        };

        Map.prototype.wasAltered = function() {
          return this.__altered;
        };

        Map.prototype.__iterator = function(type, reverse) {
          return new MapIterator(this, type, reverse);
        };

        Map.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          this._root &&
            this._root.iterate(function(entry) {
              iterations++;
              return fn(entry[1], entry[0], this$0);
            }, reverse);
          return iterations;
        };

        Map.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };

        function isMap(maybeMap) {
          return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
        }

        Map.isMap = isMap;

        var IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";

        var MapPrototype = Map.prototype;
        MapPrototype[IS_MAP_SENTINEL] = true;
        MapPrototype[DELETE] = MapPrototype.remove;
        MapPrototype.removeIn = MapPrototype.deleteIn;

        // #pragma Trie Nodes

        function ArrayMapNode(ownerID, entries) {
          this.ownerID = ownerID;
          this.entries = entries;
        }

        ArrayMapNode.prototype.get = function(
          shift,
          keyHash,
          key,
          notSetValue
        ) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };

        ArrayMapNode.prototype.update = function(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        ) {
          var removed = value === NOT_SET;

          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;

          if (exists ? entries[idx][1] === value : removed) {
            return this;
          }

          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);

          if (removed && entries.length === 1) {
            return; // undefined
          }

          if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
            return createNodes(ownerID, entries, key, value);
          }

          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);

          if (exists) {
            if (removed) {
              idx === len - 1
                ? newEntries.pop()
                : (newEntries[idx] = newEntries.pop());
            } else {
              newEntries[idx] = [key, value];
            }
          } else {
            newEntries.push([key, value]);
          }

          if (isEditable) {
            this.entries = newEntries;
            return this;
          }

          return new ArrayMapNode(ownerID, newEntries);
        };

        function BitmapIndexedNode(ownerID, bitmap, nodes) {
          this.ownerID = ownerID;
          this.bitmap = bitmap;
          this.nodes = nodes;
        }

        BitmapIndexedNode.prototype.get = function(
          shift,
          keyHash,
          key,
          notSetValue
        ) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
          var bitmap = this.bitmap;
          return (bitmap & bit) === 0
            ? notSetValue
            : this.nodes[popCount(bitmap & (bit - 1))].get(
                shift + SHIFT,
                keyHash,
                key,
                notSetValue
              );
        };

        BitmapIndexedNode.prototype.update = function(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        ) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var bit = 1 << keyHashFrag;
          var bitmap = this.bitmap;
          var exists = (bitmap & bit) !== 0;

          if (!exists && value === NOT_SET) {
            return this;
          }

          var idx = popCount(bitmap & (bit - 1));
          var nodes = this.nodes;
          var node = exists ? nodes[idx] : undefined;
          var newNode = updateNode(
            node,
            ownerID,
            shift + SHIFT,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter
          );

          if (newNode === node) {
            return this;
          }

          if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
          }

          if (
            exists &&
            !newNode &&
            nodes.length === 2 &&
            isLeafNode(nodes[idx ^ 1])
          ) {
            return nodes[idx ^ 1];
          }

          if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
            return newNode;
          }

          var isEditable = ownerID && ownerID === this.ownerID;
          var newBitmap = exists
            ? newNode
              ? bitmap
              : bitmap ^ bit
            : bitmap | bit;
          var newNodes = exists
            ? newNode
              ? setIn(nodes, idx, newNode, isEditable)
              : spliceOut(nodes, idx, isEditable)
            : spliceIn(nodes, idx, newNode, isEditable);

          if (isEditable) {
            this.bitmap = newBitmap;
            this.nodes = newNodes;
            return this;
          }

          return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
        };

        function HashArrayMapNode(ownerID, count, nodes) {
          this.ownerID = ownerID;
          this.count = count;
          this.nodes = nodes;
        }

        HashArrayMapNode.prototype.get = function(
          shift,
          keyHash,
          key,
          notSetValue
        ) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var node = this.nodes[idx];
          return node
            ? node.get(shift + SHIFT, keyHash, key, notSetValue)
            : notSetValue;
        };

        HashArrayMapNode.prototype.update = function(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        ) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var removed = value === NOT_SET;
          var nodes = this.nodes;
          var node = nodes[idx];

          if (removed && !node) {
            return this;
          }

          var newNode = updateNode(
            node,
            ownerID,
            shift + SHIFT,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter
          );
          if (newNode === node) {
            return this;
          }

          var newCount = this.count;
          if (!node) {
            newCount++;
          } else if (!newNode) {
            newCount--;
            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
              return packNodes(ownerID, nodes, newCount, idx);
            }
          }

          var isEditable = ownerID && ownerID === this.ownerID;
          var newNodes = setIn(nodes, idx, newNode, isEditable);

          if (isEditable) {
            this.count = newCount;
            this.nodes = newNodes;
            return this;
          }

          return new HashArrayMapNode(ownerID, newCount, newNodes);
        };

        function HashCollisionNode(ownerID, keyHash, entries) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entries = entries;
        }

        HashCollisionNode.prototype.get = function(
          shift,
          keyHash,
          key,
          notSetValue
        ) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };

        HashCollisionNode.prototype.update = function(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        ) {
          if (keyHash === undefined) {
            keyHash = hash(key);
          }

          var removed = value === NOT_SET;

          if (keyHash !== this.keyHash) {
            if (removed) {
              return this;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
          }

          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;

          if (exists ? entries[idx][1] === value : removed) {
            return this;
          }

          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);

          if (removed && len === 2) {
            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
          }

          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);

          if (exists) {
            if (removed) {
              idx === len - 1
                ? newEntries.pop()
                : (newEntries[idx] = newEntries.pop());
            } else {
              newEntries[idx] = [key, value];
            }
          } else {
            newEntries.push([key, value]);
          }

          if (isEditable) {
            this.entries = newEntries;
            return this;
          }

          return new HashCollisionNode(ownerID, this.keyHash, newEntries);
        };

        function ValueNode(ownerID, keyHash, entry) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entry = entry;
        }

        ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
        };

        ValueNode.prototype.update = function(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        ) {
          var removed = value === NOT_SET;
          var keyMatch = is(key, this.entry[0]);
          if (keyMatch ? value === this.entry[1] : removed) {
            return this;
          }

          SetRef(didAlter);

          if (removed) {
            SetRef(didChangeSize);
            return; // undefined
          }

          if (keyMatch) {
            if (ownerID && ownerID === this.ownerID) {
              this.entry[1] = value;
              return this;
            }
            return new ValueNode(ownerID, this.keyHash, [key, value]);
          }

          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
        };

        // #pragma Iterators

        ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(
          fn,
          reverse
        ) {
          var entries = this.entries;
          for (
            var ii = 0, maxIndex = entries.length - 1;
            ii <= maxIndex;
            ii++
          ) {
            if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
              return false;
            }
          }
        };

        BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(
          fn,
          reverse
        ) {
          var nodes = this.nodes;
          for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
            var node = nodes[reverse ? maxIndex - ii : ii];
            if (node && node.iterate(fn, reverse) === false) {
              return false;
            }
          }
        };

        ValueNode.prototype.iterate = function(fn, reverse) {
          return fn(this.entry);
        };

        createClass(MapIterator, Iterator);

        function MapIterator(map, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map._root && mapIteratorFrame(map._root);
        }

        MapIterator.prototype.next = function() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node = stack.node;
            var index = stack.index++;
            var maxIndex;
            if (node.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node.entry);
              }
            } else if (node.entries) {
              maxIndex = node.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(
                  type,
                  node.entries[this._reverse ? maxIndex - index : index]
                );
              }
            } else {
              maxIndex = node.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode =
                  node.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };

        function mapIteratorValue(type, entry) {
          return iteratorValue(type, entry[0], entry[1]);
        }

        function mapIteratorFrame(node, prev) {
          return {
            node: node,
            index: 0,
            __prev: prev
          };
        }

        function makeMap(size, root, ownerID, hash) {
          var map = Object.create(MapPrototype);
          map.size = size;
          map._root = root;
          map.__ownerID = ownerID;
          map.__hash = hash;
          map.__altered = false;
          return map;
        }

        var EMPTY_MAP;
        function emptyMap() {
          return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
        }

        function updateMap(map, k, v) {
          var newRoot;
          var newSize;
          if (!map._root) {
            if (v === NOT_SET) {
              return map;
            }
            newSize = 1;
            newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
          } else {
            var didChangeSize = MakeRef(CHANGE_LENGTH);
            var didAlter = MakeRef(DID_ALTER);
            newRoot = updateNode(
              map._root,
              map.__ownerID,
              0,
              undefined,
              k,
              v,
              didChangeSize,
              didAlter
            );
            if (!didAlter.value) {
              return map;
            }
            newSize =
              map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);
          }
          if (map.__ownerID) {
            map.size = newSize;
            map._root = newRoot;
            map.__hash = undefined;
            map.__altered = true;
            return map;
          }
          return newRoot ? makeMap(newSize, newRoot) : emptyMap();
        }

        function updateNode(
          node,
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        ) {
          if (!node) {
            if (value === NOT_SET) {
              return node;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return new ValueNode(ownerID, keyHash, [key, value]);
          }
          return node.update(
            ownerID,
            shift,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter
          );
        }

        function isLeafNode(node) {
          return (
            node.constructor === ValueNode ||
            node.constructor === HashCollisionNode
          );
        }

        function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
          if (node.keyHash === keyHash) {
            return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
          }

          var idx1 =
            (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
          var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

          var newNode;
          var nodes =
            idx1 === idx2
              ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]
              : ((newNode = new ValueNode(ownerID, keyHash, entry)),
                idx1 < idx2 ? [node, newNode] : [newNode, node]);

          return new BitmapIndexedNode(
            ownerID,
            (1 << idx1) | (1 << idx2),
            nodes
          );
        }

        function createNodes(ownerID, entries, key, value) {
          if (!ownerID) {
            ownerID = new OwnerID();
          }
          var node = new ValueNode(ownerID, hash(key), [key, value]);
          for (var ii = 0; ii < entries.length; ii++) {
            var entry = entries[ii];
            node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
          }
          return node;
        }

        function packNodes(ownerID, nodes, count, excluding) {
          var bitmap = 0;
          var packedII = 0;
          var packedNodes = new Array(count);
          for (
            var ii = 0, bit = 1, len = nodes.length;
            ii < len;
            ii++, bit <<= 1
          ) {
            var node = nodes[ii];
            if (node !== undefined && ii !== excluding) {
              bitmap |= bit;
              packedNodes[packedII++] = node;
            }
          }
          return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
        }

        function expandNodes(ownerID, nodes, bitmap, including, node) {
          var count = 0;
          var expandedNodes = new Array(SIZE);
          for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
            expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
          }
          expandedNodes[including] = node;
          return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
        }

        function mergeIntoMapWith(map, merger, iterables) {
          var iters = [];
          for (var ii = 0; ii < iterables.length; ii++) {
            var value = iterables[ii];
            var iter = KeyedIterable(value);
            if (!isIterable(value)) {
              iter = iter.map(function(v) {
                return fromJS(v);
              });
            }
            iters.push(iter);
          }
          return mergeIntoCollectionWith(map, merger, iters);
        }

        function deepMerger(existing, value, key) {
          return existing && existing.mergeDeep && isIterable(value)
            ? existing.mergeDeep(value)
            : is(existing, value)
            ? existing
            : value;
        }

        function deepMergerWith(merger) {
          return function(existing, value, key) {
            if (existing && existing.mergeDeepWith && isIterable(value)) {
              return existing.mergeDeepWith(merger, value);
            }
            var nextValue = merger(existing, value, key);
            return is(existing, nextValue) ? existing : nextValue;
          };
        }

        function mergeIntoCollectionWith(collection, merger, iters) {
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return collection;
          }
          if (
            collection.size === 0 &&
            !collection.__ownerID &&
            iters.length === 1
          ) {
            return collection.constructor(iters[0]);
          }
          return collection.withMutations(function(collection) {
            var mergeIntoMap = merger
              ? function(value, key) {
                  collection.update(key, NOT_SET, function(existing) {
                    return existing === NOT_SET
                      ? value
                      : merger(existing, value, key);
                  });
                }
              : function(value, key) {
                  collection.set(key, value);
                };
            for (var ii = 0; ii < iters.length; ii++) {
              iters[ii].forEach(mergeIntoMap);
            }
          });
        }

        function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
          var isNotSet = existing === NOT_SET;
          var step = keyPathIter.next();
          if (step.done) {
            var existingValue = isNotSet ? notSetValue : existing;
            var newValue = updater(existingValue);
            return newValue === existingValue ? existing : newValue;
          }
          invariant(isNotSet || (existing && existing.set), "invalid keyPath");
          var key = step.value;
          var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
          var nextUpdated = updateInDeepMap(
            nextExisting,
            keyPathIter,
            notSetValue,
            updater
          );
          return nextUpdated === nextExisting
            ? existing
            : nextUpdated === NOT_SET
            ? existing.remove(key)
            : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
        }

        function popCount(x) {
          x = x - ((x >> 1) & 0x55555555);
          x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
          x = (x + (x >> 4)) & 0x0f0f0f0f;
          x = x + (x >> 8);
          x = x + (x >> 16);
          return x & 0x7f;
        }

        function setIn(array, idx, val, canEdit) {
          var newArray = canEdit ? array : arrCopy(array);
          newArray[idx] = val;
          return newArray;
        }

        function spliceIn(array, idx, val, canEdit) {
          var newLen = array.length + 1;
          if (canEdit && idx + 1 === newLen) {
            array[idx] = val;
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii = 0; ii < newLen; ii++) {
            if (ii === idx) {
              newArray[ii] = val;
              after = -1;
            } else {
              newArray[ii] = array[ii + after];
            }
          }
          return newArray;
        }

        function spliceOut(array, idx, canEdit) {
          var newLen = array.length - 1;
          if (canEdit && idx === newLen) {
            array.pop();
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii = 0; ii < newLen; ii++) {
            if (ii === idx) {
              after = 1;
            }
            newArray[ii] = array[ii + after];
          }
          return newArray;
        }

        var MAX_ARRAY_MAP_SIZE = SIZE / 4;
        var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
        var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

        createClass(List, IndexedCollection);

        // @pragma Construction

        function List(value) {
          var empty = emptyList();
          if (value === null || value === undefined) {
            return empty;
          }
          if (isList(value)) {
            return value;
          }
          var iter = IndexedIterable(value);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function(list) {
            list.setSize(size);
            iter.forEach(function(v, i) {
              return list.set(i, v);
            });
          });
        }

        List.of = function(/*...values*/) {
          return this(arguments);
        };

        List.prototype.toString = function() {
          return this.__toString("List [", "]");
        };

        // @pragma Access

        List.prototype.get = function(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node = listNodeFor(this, index);
            return node && node.array[index & MASK];
          }
          return notSetValue;
        };

        // @pragma Modification

        List.prototype.set = function(index, value) {
          return updateList(this, index, value);
        };

        List.prototype.remove = function(index) {
          return !this.has(index)
            ? this
            : index === 0
            ? this.shift()
            : index === this.size - 1
            ? this.pop()
            : this.splice(index, 1);
        };

        List.prototype.insert = function(index, value) {
          return this.splice(index, 0, value);
        };

        List.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = null;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };

        List.prototype.push = function(/*...values*/) {
          var values = arguments;
          var oldSize = this.size;
          return this.withMutations(function(list) {
            setListBounds(list, 0, oldSize + values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(oldSize + ii, values[ii]);
            }
          });
        };

        List.prototype.pop = function() {
          return setListBounds(this, 0, -1);
        };

        List.prototype.unshift = function(/*...values*/) {
          var values = arguments;
          return this.withMutations(function(list) {
            setListBounds(list, -values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(ii, values[ii]);
            }
          });
        };

        List.prototype.shift = function() {
          return setListBounds(this, 1);
        };

        // @pragma Composition

        List.prototype.merge = function(/*...iters*/) {
          return mergeIntoListWith(this, undefined, arguments);
        };

        List.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, merger, iters);
        };

        List.prototype.mergeDeep = function(/*...iters*/) {
          return mergeIntoListWith(this, deepMerger, arguments);
        };

        List.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, deepMergerWith(merger), iters);
        };

        List.prototype.setSize = function(size) {
          return setListBounds(this, 0, size);
        };

        // @pragma Iteration

        List.prototype.slice = function(begin, end) {
          var size = this.size;
          if (wholeSlice(begin, end, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end, size)
          );
        };

        List.prototype.__iterator = function(type, reverse) {
          var index = 0;
          var values = iterateList(this, reverse);
          return new Iterator(function() {
            var value = values();
            return value === DONE
              ? iteratorDone()
              : iteratorValue(type, index++, value);
          });
        };

        List.prototype.__iterate = function(fn, reverse) {
          var index = 0;
          var values = iterateList(this, reverse);
          var value;
          while ((value = values()) !== DONE) {
            if (fn(value, index++, this) === false) {
              break;
            }
          }
          return index;
        };

        List.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            return this;
          }
          return makeList(
            this._origin,
            this._capacity,
            this._level,
            this._root,
            this._tail,
            ownerID,
            this.__hash
          );
        };

        function isList(maybeList) {
          return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
        }

        List.isList = isList;

        var IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";

        var ListPrototype = List.prototype;
        ListPrototype[IS_LIST_SENTINEL] = true;
        ListPrototype[DELETE] = ListPrototype.remove;
        ListPrototype.setIn = MapPrototype.setIn;
        ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
        ListPrototype.update = MapPrototype.update;
        ListPrototype.updateIn = MapPrototype.updateIn;
        ListPrototype.mergeIn = MapPrototype.mergeIn;
        ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        ListPrototype.withMutations = MapPrototype.withMutations;
        ListPrototype.asMutable = MapPrototype.asMutable;
        ListPrototype.asImmutable = MapPrototype.asImmutable;
        ListPrototype.wasAltered = MapPrototype.wasAltered;

        function VNode(array, ownerID) {
          this.array = array;
          this.ownerID = ownerID;
        }

        // TODO: seems like these methods are very similar

        VNode.prototype.removeBefore = function(ownerID, level, index) {
          if (index === level ? 1 << level : false || this.array.length === 0) {
            return this;
          }
          var originIndex = (index >>> level) & MASK;
          if (originIndex >= this.array.length) {
            return new VNode([], ownerID);
          }
          var removingFirst = originIndex === 0;
          var newChild;
          if (level > 0) {
            var oldChild = this.array[originIndex];
            newChild =
              oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
            if (newChild === oldChild && removingFirst) {
              return this;
            }
          }
          if (removingFirst && !newChild) {
            return this;
          }
          var editable = editableVNode(this, ownerID);
          if (!removingFirst) {
            for (var ii = 0; ii < originIndex; ii++) {
              editable.array[ii] = undefined;
            }
          }
          if (newChild) {
            editable.array[originIndex] = newChild;
          }
          return editable;
        };

        VNode.prototype.removeAfter = function(ownerID, level, index) {
          if (index === (level ? 1 << level : 0) || this.array.length === 0) {
            return this;
          }
          var sizeIndex = ((index - 1) >>> level) & MASK;
          if (sizeIndex >= this.array.length) {
            return this;
          }

          var newChild;
          if (level > 0) {
            var oldChild = this.array[sizeIndex];
            newChild =
              oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
            if (newChild === oldChild && sizeIndex === this.array.length - 1) {
              return this;
            }
          }

          var editable = editableVNode(this, ownerID);
          editable.array.splice(sizeIndex + 1);
          if (newChild) {
            editable.array[sizeIndex] = newChild;
          }
          return editable;
        };

        var DONE = {};

        function iterateList(list, reverse) {
          var left = list._origin;
          var right = list._capacity;
          var tailPos = getTailOffset(right);
          var tail = list._tail;

          return iterateNodeOrLeaf(list._root, list._level, 0);

          function iterateNodeOrLeaf(node, level, offset) {
            return level === 0
              ? iterateLeaf(node, offset)
              : iterateNode(node, level, offset);
          }

          function iterateLeaf(node, offset) {
            var array =
              offset === tailPos ? tail && tail.array : node && node.array;
            var from = offset > left ? 0 : left - offset;
            var to = right - offset;
            if (to > SIZE) {
              to = SIZE;
            }
            return function() {
              if (from === to) {
                return DONE;
              }
              var idx = reverse ? --to : from++;
              return array && array[idx];
            };
          }

          function iterateNode(node, level, offset) {
            var values;
            var array = node && node.array;
            var from = offset > left ? 0 : (left - offset) >> level;
            var to = ((right - offset) >> level) + 1;
            if (to > SIZE) {
              to = SIZE;
            }
            return function() {
              do {
                if (values) {
                  var value = values();
                  if (value !== DONE) {
                    return value;
                  }
                  values = null;
                }
                if (from === to) {
                  return DONE;
                }
                var idx = reverse ? --to : from++;
                values = iterateNodeOrLeaf(
                  array && array[idx],
                  level - SHIFT,
                  offset + (idx << level)
                );
              } while (true);
            };
          }
        }

        function makeList(origin, capacity, level, root, tail, ownerID, hash) {
          var list = Object.create(ListPrototype);
          list.size = capacity - origin;
          list._origin = origin;
          list._capacity = capacity;
          list._level = level;
          list._root = root;
          list._tail = tail;
          list.__ownerID = ownerID;
          list.__hash = hash;
          list.__altered = false;
          return list;
        }

        var EMPTY_LIST;
        function emptyList() {
          return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
        }

        function updateList(list, index, value) {
          index = wrapIndex(list, index);

          if (index !== index) {
            return list;
          }

          if (index >= list.size || index < 0) {
            return list.withMutations(function(list) {
              index < 0
                ? setListBounds(list, index).set(0, value)
                : setListBounds(list, 0, index + 1).set(index, value);
            });
          }

          index += list._origin;

          var newTail = list._tail;
          var newRoot = list._root;
          var didAlter = MakeRef(DID_ALTER);
          if (index >= getTailOffset(list._capacity)) {
            newTail = updateVNode(
              newTail,
              list.__ownerID,
              0,
              index,
              value,
              didAlter
            );
          } else {
            newRoot = updateVNode(
              newRoot,
              list.__ownerID,
              list._level,
              index,
              value,
              didAlter
            );
          }

          if (!didAlter.value) {
            return list;
          }

          if (list.__ownerID) {
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = undefined;
            list.__altered = true;
            return list;
          }
          return makeList(
            list._origin,
            list._capacity,
            list._level,
            newRoot,
            newTail
          );
        }

        function updateVNode(node, ownerID, level, index, value, didAlter) {
          var idx = (index >>> level) & MASK;
          var nodeHas = node && idx < node.array.length;
          if (!nodeHas && value === undefined) {
            return node;
          }

          var newNode;

          if (level > 0) {
            var lowerNode = node && node.array[idx];
            var newLowerNode = updateVNode(
              lowerNode,
              ownerID,
              level - SHIFT,
              index,
              value,
              didAlter
            );
            if (newLowerNode === lowerNode) {
              return node;
            }
            newNode = editableVNode(node, ownerID);
            newNode.array[idx] = newLowerNode;
            return newNode;
          }

          if (nodeHas && node.array[idx] === value) {
            return node;
          }

          SetRef(didAlter);

          newNode = editableVNode(node, ownerID);
          if (value === undefined && idx === newNode.array.length - 1) {
            newNode.array.pop();
          } else {
            newNode.array[idx] = value;
          }
          return newNode;
        }

        function editableVNode(node, ownerID) {
          if (ownerID && node && ownerID === node.ownerID) {
            return node;
          }
          return new VNode(node ? node.array.slice() : [], ownerID);
        }

        function listNodeFor(list, rawIndex) {
          if (rawIndex >= getTailOffset(list._capacity)) {
            return list._tail;
          }
          if (rawIndex < 1 << (list._level + SHIFT)) {
            var node = list._root;
            var level = list._level;
            while (node && level > 0) {
              node = node.array[(rawIndex >>> level) & MASK];
              level -= SHIFT;
            }
            return node;
          }
        }

        function setListBounds(list, begin, end) {
          // Sanitize begin & end using this shorthand for ToInt32(argument)
          // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
          if (begin !== undefined) {
            begin = begin | 0;
          }
          if (end !== undefined) {
            end = end | 0;
          }
          var owner = list.__ownerID || new OwnerID();
          var oldOrigin = list._origin;
          var oldCapacity = list._capacity;
          var newOrigin = oldOrigin + begin;
          var newCapacity =
            end === undefined
              ? oldCapacity
              : end < 0
              ? oldCapacity + end
              : oldOrigin + end;
          if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
            return list;
          }

          // If it's going to end after it starts, it's empty.
          if (newOrigin >= newCapacity) {
            return list.clear();
          }

          var newLevel = list._level;
          var newRoot = list._root;

          // New origin might need creating a higher root.
          var offsetShift = 0;
          while (newOrigin + offsetShift < 0) {
            newRoot = new VNode(
              newRoot && newRoot.array.length ? [undefined, newRoot] : [],
              owner
            );
            newLevel += SHIFT;
            offsetShift += 1 << newLevel;
          }
          if (offsetShift) {
            newOrigin += offsetShift;
            oldOrigin += offsetShift;
            newCapacity += offsetShift;
            oldCapacity += offsetShift;
          }

          var oldTailOffset = getTailOffset(oldCapacity);
          var newTailOffset = getTailOffset(newCapacity);

          // New size might need creating a higher root.
          while (newTailOffset >= 1 << (newLevel + SHIFT)) {
            newRoot = new VNode(
              newRoot && newRoot.array.length ? [newRoot] : [],
              owner
            );
            newLevel += SHIFT;
          }

          // Locate or create the new tail.
          var oldTail = list._tail;
          var newTail =
            newTailOffset < oldTailOffset
              ? listNodeFor(list, newCapacity - 1)
              : newTailOffset > oldTailOffset
              ? new VNode([], owner)
              : oldTail;

          // Merge Tail into tree.
          if (
            oldTail &&
            newTailOffset > oldTailOffset &&
            newOrigin < oldCapacity &&
            oldTail.array.length
          ) {
            newRoot = editableVNode(newRoot, owner);
            var node = newRoot;
            for (var level = newLevel; level > SHIFT; level -= SHIFT) {
              var idx = (oldTailOffset >>> level) & MASK;
              node = node.array[idx] = editableVNode(node.array[idx], owner);
            }
            node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
          }

          // If the size has been reduced, there's a chance the tail needs to be trimmed.
          if (newCapacity < oldCapacity) {
            newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
          }

          // If the new origin is within the tail, then we do not need a root.
          if (newOrigin >= newTailOffset) {
            newOrigin -= newTailOffset;
            newCapacity -= newTailOffset;
            newLevel = SHIFT;
            newRoot = null;
            newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

            // Otherwise, if the root has been trimmed, garbage collect.
          } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
            offsetShift = 0;

            // Identify the new top root node of the subtree of the old root.
            while (newRoot) {
              var beginIndex = (newOrigin >>> newLevel) & MASK;
              if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {
                break;
              }
              if (beginIndex) {
                offsetShift += (1 << newLevel) * beginIndex;
              }
              newLevel -= SHIFT;
              newRoot = newRoot.array[beginIndex];
            }

            // Trim the new sides of the new root.
            if (newRoot && newOrigin > oldOrigin) {
              newRoot = newRoot.removeBefore(
                owner,
                newLevel,
                newOrigin - offsetShift
              );
            }
            if (newRoot && newTailOffset < oldTailOffset) {
              newRoot = newRoot.removeAfter(
                owner,
                newLevel,
                newTailOffset - offsetShift
              );
            }
            if (offsetShift) {
              newOrigin -= offsetShift;
              newCapacity -= offsetShift;
            }
          }

          if (list.__ownerID) {
            list.size = newCapacity - newOrigin;
            list._origin = newOrigin;
            list._capacity = newCapacity;
            list._level = newLevel;
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = undefined;
            list.__altered = true;
            return list;
          }
          return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
        }

        function mergeIntoListWith(list, merger, iterables) {
          var iters = [];
          var maxSize = 0;
          for (var ii = 0; ii < iterables.length; ii++) {
            var value = iterables[ii];
            var iter = IndexedIterable(value);
            if (iter.size > maxSize) {
              maxSize = iter.size;
            }
            if (!isIterable(value)) {
              iter = iter.map(function(v) {
                return fromJS(v);
              });
            }
            iters.push(iter);
          }
          if (maxSize > list.size) {
            list = list.setSize(maxSize);
          }
          return mergeIntoCollectionWith(list, merger, iters);
        }

        function getTailOffset(size) {
          return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;
        }

        createClass(OrderedMap, Map);

        // @pragma Construction

        function OrderedMap(value) {
          return value === null || value === undefined
            ? emptyOrderedMap()
            : isOrderedMap(value)
            ? value
            : emptyOrderedMap().withMutations(function(map) {
                var iter = KeyedIterable(value);
                assertNotInfinite(iter.size);
                iter.forEach(function(v, k) {
                  return map.set(k, v);
                });
              });
        }

        OrderedMap.of = function(/*...values*/) {
          return this(arguments);
        };

        OrderedMap.prototype.toString = function() {
          return this.__toString("OrderedMap {", "}");
        };

        // @pragma Access

        OrderedMap.prototype.get = function(k, notSetValue) {
          var index = this._map.get(k);
          return index !== undefined ? this._list.get(index)[1] : notSetValue;
        };

        // @pragma Modification

        OrderedMap.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            return this;
          }
          return emptyOrderedMap();
        };

        OrderedMap.prototype.set = function(k, v) {
          return updateOrderedMap(this, k, v);
        };

        OrderedMap.prototype.remove = function(k) {
          return updateOrderedMap(this, k, NOT_SET);
        };

        OrderedMap.prototype.wasAltered = function() {
          return this._map.wasAltered() || this._list.wasAltered();
        };

        OrderedMap.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._list.__iterate(function(entry) {
            return entry && fn(entry[1], entry[0], this$0);
          }, reverse);
        };

        OrderedMap.prototype.__iterator = function(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };

        OrderedMap.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };

        function isOrderedMap(maybeOrderedMap) {
          return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
        }

        OrderedMap.isOrderedMap = isOrderedMap;

        OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
        OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

        function makeOrderedMap(map, list, ownerID, hash) {
          var omap = Object.create(OrderedMap.prototype);
          omap.size = map ? map.size : 0;
          omap._map = map;
          omap._list = list;
          omap.__ownerID = ownerID;
          omap.__hash = hash;
          return omap;
        }

        var EMPTY_ORDERED_MAP;
        function emptyOrderedMap() {
          return (
            EMPTY_ORDERED_MAP ||
            (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))
          );
        }

        function updateOrderedMap(omap, k, v) {
          var map = omap._map;
          var list = omap._list;
          var i = map.get(k);
          var has = i !== undefined;
          var newMap;
          var newList;
          if (v === NOT_SET) {
            // removed
            if (!has) {
              return omap;
            }
            if (list.size >= SIZE && list.size >= map.size * 2) {
              newList = list.filter(function(entry, idx) {
                return entry !== undefined && i !== idx;
              });
              newMap = newList
                .toKeyedSeq()
                .map(function(entry) {
                  return entry[0];
                })
                .flip()
                .toMap();
              if (omap.__ownerID) {
                newMap.__ownerID = newList.__ownerID = omap.__ownerID;
              }
            } else {
              newMap = map.remove(k);
              newList =
                i === list.size - 1 ? list.pop() : list.set(i, undefined);
            }
          } else {
            if (has) {
              if (v === list.get(i)[1]) {
                return omap;
              }
              newMap = map;
              newList = list.set(i, [k, v]);
            } else {
              newMap = map.set(k, list.size);
              newList = list.set(list.size, [k, v]);
            }
          }
          if (omap.__ownerID) {
            omap.size = newMap.size;
            omap._map = newMap;
            omap._list = newList;
            omap.__hash = undefined;
            return omap;
          }
          return makeOrderedMap(newMap, newList);
        }

        createClass(ToKeyedSequence, KeyedSeq);
        function ToKeyedSequence(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }

        ToKeyedSequence.prototype.get = function(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };

        ToKeyedSequence.prototype.has = function(key) {
          return this._iter.has(key);
        };

        ToKeyedSequence.prototype.valueSeq = function() {
          return this._iter.valueSeq();
        };

        ToKeyedSequence.prototype.reverse = function() {
          var this$0 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function() {
              return this$0._iter.toSeq().reverse();
            };
          }
          return reversedSequence;
        };

        ToKeyedSequence.prototype.map = function(mapper, context) {
          var this$0 = this;
          var mappedSequence = mapFactory(this, mapper, context);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function() {
              return this$0._iter.toSeq().map(mapper, context);
            };
          }
          return mappedSequence;
        };

        ToKeyedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var ii;
          return this._iter.__iterate(
            this._useKeys
              ? function(v, k) {
                  return fn(v, k, this$0);
                }
              : ((ii = reverse ? resolveSize(this) : 0),
                function(v) {
                  return fn(v, reverse ? --ii : ii++, this$0);
                }),
            reverse
          );
        };

        ToKeyedSequence.prototype.__iterator = function(type, reverse) {
          if (this._useKeys) {
            return this._iter.__iterator(type, reverse);
          }
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var ii = reverse ? resolveSize(this) : 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done
              ? step
              : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
          });
        };

        ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;

        createClass(ToIndexedSequence, IndexedSeq);
        function ToIndexedSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }

        ToIndexedSequence.prototype.includes = function(value) {
          return this._iter.includes(value);
        };

        ToIndexedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          return this._iter.__iterate(function(v) {
            return fn(v, iterations++, this$0);
          }, reverse);
        };

        ToIndexedSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done
              ? step
              : iteratorValue(type, iterations++, step.value, step);
          });
        };

        createClass(ToSetSequence, SetSeq);
        function ToSetSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }

        ToSetSequence.prototype.has = function(key) {
          return this._iter.includes(key);
        };

        ToSetSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(v) {
            return fn(v, v, this$0);
          }, reverse);
        };

        ToSetSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            return step.done
              ? step
              : iteratorValue(type, step.value, step.value, step);
          });
        };

        createClass(FromEntriesSequence, KeyedSeq);
        function FromEntriesSequence(entries) {
          this._iter = entries;
          this.size = entries.size;
        }

        FromEntriesSequence.prototype.entrySeq = function() {
          return this._iter.toSeq();
        };

        FromEntriesSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(entry) {
            // Check if entry exists first so array access doesn't throw for holes
            // in the parent iteration.
            if (entry) {
              validateEntry(entry);
              var indexedIterable = isIterable(entry);
              return fn(
                indexedIterable ? entry.get(1) : entry[1],
                indexedIterable ? entry.get(0) : entry[0],
                this$0
              );
            }
          }, reverse);
        };

        FromEntriesSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              // Check if entry exists first so array access doesn't throw for holes
              // in the parent iteration.
              if (entry) {
                validateEntry(entry);
                var indexedIterable = isIterable(entry);
                return iteratorValue(
                  type,
                  indexedIterable ? entry.get(0) : entry[0],
                  indexedIterable ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };

        ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

        function flipFactory(iterable) {
          var flipSequence = makeSequence(iterable);
          flipSequence._iter = iterable;
          flipSequence.size = iterable.size;
          flipSequence.flip = function() {
            return iterable;
          };
          flipSequence.reverse = function() {
            var reversedSequence = iterable.reverse.apply(this); // super.reverse()
            reversedSequence.flip = function() {
              return iterable.reverse();
            };
            return reversedSequence;
          };
          flipSequence.has = function(key) {
            return iterable.includes(key);
          };
          flipSequence.includes = function(key) {
            return iterable.has(key);
          };
          flipSequence.cacheResult = cacheResultThrough;
          flipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k) {
              return fn(k, v, this$0) !== false;
            }, reverse);
          };
          flipSequence.__iteratorUncached = function(type, reverse) {
            if (type === ITERATE_ENTRIES) {
              var iterator = iterable.__iterator(type, reverse);
              return new Iterator(function() {
                var step = iterator.next();
                if (!step.done) {
                  var k = step.value[0];
                  step.value[0] = step.value[1];
                  step.value[1] = k;
                }
                return step;
              });
            }
            return iterable.__iterator(
              type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
              reverse
            );
          };
          return flipSequence;
        }

        function mapFactory(iterable, mapper, context) {
          var mappedSequence = makeSequence(iterable);
          mappedSequence.size = iterable.size;
          mappedSequence.has = function(key) {
            return iterable.has(key);
          };
          mappedSequence.get = function(key, notSetValue) {
            var v = iterable.get(key, NOT_SET);
            return v === NOT_SET
              ? notSetValue
              : mapper.call(context, v, key, iterable);
          };
          mappedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k, c) {
              return fn(mapper.call(context, v, k, c), k, this$0) !== false;
            }, reverse);
          };
          mappedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            return new Iterator(function() {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              return iteratorValue(
                type,
                key,
                mapper.call(context, entry[1], key, iterable),
                step
              );
            });
          };
          return mappedSequence;
        }

        function reverseFactory(iterable, useKeys) {
          var reversedSequence = makeSequence(iterable);
          reversedSequence._iter = iterable;
          reversedSequence.size = iterable.size;
          reversedSequence.reverse = function() {
            return iterable;
          };
          if (iterable.flip) {
            reversedSequence.flip = function() {
              var flipSequence = flipFactory(iterable);
              flipSequence.reverse = function() {
                return iterable.flip();
              };
              return flipSequence;
            };
          }
          reversedSequence.get = function(key, notSetValue) {
            return iterable.get(useKeys ? key : -1 - key, notSetValue);
          };
          reversedSequence.has = function(key) {
            return iterable.has(useKeys ? key : -1 - key);
          };
          reversedSequence.includes = function(value) {
            return iterable.includes(value);
          };
          reversedSequence.cacheResult = cacheResultThrough;
          reversedSequence.__iterate = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k) {
              return fn(v, k, this$0);
            }, !reverse);
          };
          reversedSequence.__iterator = function(type, reverse) {
            return iterable.__iterator(type, !reverse);
          };
          return reversedSequence;
        }

        function filterFactory(iterable, predicate, context, useKeys) {
          var filterSequence = makeSequence(iterable);
          if (useKeys) {
            filterSequence.has = function(key) {
              var v = iterable.get(key, NOT_SET);
              return (
                v !== NOT_SET && !!predicate.call(context, v, key, iterable)
              );
            };
            filterSequence.get = function(key, notSetValue) {
              var v = iterable.get(key, NOT_SET);
              return v !== NOT_SET && predicate.call(context, v, key, iterable)
                ? v
                : notSetValue;
            };
          }
          filterSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              if (predicate.call(context, v, k, c)) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0);
              }
            }, reverse);
            return iterations;
          };
          filterSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterations = 0;
            return new Iterator(function() {
              while (true) {
                var step = iterator.next();
                if (step.done) {
                  return step;
                }
                var entry = step.value;
                var key = entry[0];
                var value = entry[1];
                if (predicate.call(context, value, key, iterable)) {
                  return iteratorValue(
                    type,
                    useKeys ? key : iterations++,
                    value,
                    step
                  );
                }
              }
            });
          };
          return filterSequence;
        }

        function countByFactory(iterable, grouper, context) {
          var groups = Map().asMutable();
          iterable.__iterate(function(v, k) {
            groups.update(grouper.call(context, v, k, iterable), 0, function(
              a
            ) {
              return a + 1;
            });
          });
          return groups.asImmutable();
        }

        function groupByFactory(iterable, grouper, context) {
          var isKeyedIter = isKeyed(iterable);
          var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
          iterable.__iterate(function(v, k) {
            groups.update(grouper.call(context, v, k, iterable), function(a) {
              return (a = a || []), a.push(isKeyedIter ? [k, v] : v), a;
            });
          });
          var coerce = iterableClass(iterable);
          return groups.map(function(arr) {
            return reify(iterable, coerce(arr));
          });
        }

        function sliceFactory(iterable, begin, end, useKeys) {
          var originalSize = iterable.size;

          // Sanitize begin & end using this shorthand for ToInt32(argument)
          // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
          if (begin !== undefined) {
            begin = begin | 0;
          }
          if (end !== undefined) {
            end = end | 0;
          }

          if (wholeSlice(begin, end, originalSize)) {
            return iterable;
          }

          var resolvedBegin = resolveBegin(begin, originalSize);
          var resolvedEnd = resolveEnd(end, originalSize);

          // begin or end will be NaN if they were provided as negative numbers and
          // this iterable's size is unknown. In that case, cache first so there is
          // a known size and these do not resolve to NaN.
          if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
            return sliceFactory(
              iterable.toSeq().cacheResult(),
              begin,
              end,
              useKeys
            );
          }

          // Note: resolvedEnd is undefined when the original sequence's length is
          // unknown and this slice did not supply an end and should contain all
          // elements after resolvedBegin.
          // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
          var resolvedSize = resolvedEnd - resolvedBegin;
          var sliceSize;
          if (resolvedSize === resolvedSize) {
            sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
          }

          var sliceSeq = makeSequence(iterable);

          // If iterable.size is undefined, the size of the realized sliceSeq is
          // unknown at this point unless the number of items to slice is 0
          sliceSeq.size =
            sliceSize === 0
              ? sliceSize
              : (iterable.size && sliceSize) || undefined;

          if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
            sliceSeq.get = function(index, notSetValue) {
              index = wrapIndex(this, index);
              return index >= 0 && index < sliceSize
                ? iterable.get(index + resolvedBegin, notSetValue)
                : notSetValue;
            };
          }

          sliceSeq.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (sliceSize === 0) {
              return 0;
            }
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var skipped = 0;
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v, k) {
              if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
                iterations++;
                return (
                  fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                  iterations !== sliceSize
                );
              }
            });
            return iterations;
          };

          sliceSeq.__iteratorUncached = function(type, reverse) {
            if (sliceSize !== 0 && reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            // Don't bother instantiating parent iterator if taking 0.
            var iterator =
              sliceSize !== 0 && iterable.__iterator(type, reverse);
            var skipped = 0;
            var iterations = 0;
            return new Iterator(function() {
              while (skipped++ < resolvedBegin) {
                iterator.next();
              }
              if (++iterations > sliceSize) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (useKeys || type === ITERATE_VALUES) {
                return step;
              } else if (type === ITERATE_KEYS) {
                return iteratorValue(type, iterations - 1, undefined, step);
              } else {
                return iteratorValue(type, iterations - 1, step.value[1], step);
              }
            });
          };

          return sliceSeq;
        }

        function takeWhileFactory(iterable, predicate, context) {
          var takeSequence = makeSequence(iterable);
          takeSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              return (
                predicate.call(context, v, k, c) &&
                ++iterations &&
                fn(v, k, this$0)
              );
            });
            return iterations;
          };
          takeSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterating = true;
            return new Iterator(function() {
              if (!iterating) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var k = entry[0];
              var v = entry[1];
              if (!predicate.call(context, v, k, this$0)) {
                iterating = false;
                return iteratorDone();
              }
              return type === ITERATE_ENTRIES
                ? step
                : iteratorValue(type, k, v, step);
            });
          };
          return takeSequence;
        }

        function skipWhileFactory(iterable, predicate, context, useKeys) {
          var skipSequence = makeSequence(iterable);
          skipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              if (
                !(isSkipping && (isSkipping = predicate.call(context, v, k, c)))
              ) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0);
              }
            });
            return iterations;
          };
          skipSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var skipping = true;
            var iterations = 0;
            return new Iterator(function() {
              var step, k, v;
              do {
                step = iterator.next();
                if (step.done) {
                  if (useKeys || type === ITERATE_VALUES) {
                    return step;
                  } else if (type === ITERATE_KEYS) {
                    return iteratorValue(type, iterations++, undefined, step);
                  } else {
                    return iteratorValue(
                      type,
                      iterations++,
                      step.value[1],
                      step
                    );
                  }
                }
                var entry = step.value;
                k = entry[0];
                v = entry[1];
                skipping && (skipping = predicate.call(context, v, k, this$0));
              } while (skipping);
              return type === ITERATE_ENTRIES
                ? step
                : iteratorValue(type, k, v, step);
            });
          };
          return skipSequence;
        }

        function concatFactory(iterable, values) {
          var isKeyedIterable = isKeyed(iterable);
          var iters = [iterable]
            .concat(values)
            .map(function(v) {
              if (!isIterable(v)) {
                v = isKeyedIterable
                  ? keyedSeqFromValue(v)
                  : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
              } else if (isKeyedIterable) {
                v = KeyedIterable(v);
              }
              return v;
            })
            .filter(function(v) {
              return v.size !== 0;
            });

          if (iters.length === 0) {
            return iterable;
          }

          if (iters.length === 1) {
            var singleton = iters[0];
            if (
              singleton === iterable ||
              (isKeyedIterable && isKeyed(singleton)) ||
              (isIndexed(iterable) && isIndexed(singleton))
            ) {
              return singleton;
            }
          }

          var concatSeq = new ArraySeq(iters);
          if (isKeyedIterable) {
            concatSeq = concatSeq.toKeyedSeq();
          } else if (!isIndexed(iterable)) {
            concatSeq = concatSeq.toSetSeq();
          }
          concatSeq = concatSeq.flatten(true);
          concatSeq.size = iters.reduce(function(sum, seq) {
            if (sum !== undefined) {
              var size = seq.size;
              if (size !== undefined) {
                return sum + size;
              }
            }
          }, 0);
          return concatSeq;
        }

        function flattenFactory(iterable, depth, useKeys) {
          var flatSequence = makeSequence(iterable);
          flatSequence.__iterateUncached = function(fn, reverse) {
            var iterations = 0;
            var stopped = false;
            function flatDeep(iter, currentDepth) {
              var this$0 = this;
              iter.__iterate(function(v, k) {
                if ((!depth || currentDepth < depth) && isIterable(v)) {
                  flatDeep(v, currentDepth + 1);
                } else if (
                  fn(v, useKeys ? k : iterations++, this$0) === false
                ) {
                  stopped = true;
                }
                return !stopped;
              }, reverse);
            }
            flatDeep(iterable, 0);
            return iterations;
          };
          flatSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(type, reverse);
            var stack = [];
            var iterations = 0;
            return new Iterator(function() {
              while (iterator) {
                var step = iterator.next();
                if (step.done !== false) {
                  iterator = stack.pop();
                  continue;
                }
                var v = step.value;
                if (type === ITERATE_ENTRIES) {
                  v = v[1];
                }
                if ((!depth || stack.length < depth) && isIterable(v)) {
                  stack.push(iterator);
                  iterator = v.__iterator(type, reverse);
                } else {
                  return useKeys
                    ? step
                    : iteratorValue(type, iterations++, v, step);
                }
              }
              return iteratorDone();
            });
          };
          return flatSequence;
        }

        function flatMapFactory(iterable, mapper, context) {
          var coerce = iterableClass(iterable);
          return iterable
            .toSeq()
            .map(function(v, k) {
              return coerce(mapper.call(context, v, k, iterable));
            })
            .flatten(true);
        }

        function interposeFactory(iterable, separator) {
          var interposedSequence = makeSequence(iterable);
          interposedSequence.size = iterable.size && iterable.size * 2 - 1;
          interposedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(function(v, k) {
              return (
                (!iterations ||
                  fn(separator, iterations++, this$0) !== false) &&
                fn(v, iterations++, this$0) !== false
              );
            }, reverse);
            return iterations;
          };
          interposedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
            var iterations = 0;
            var step;
            return new Iterator(function() {
              if (!step || iterations % 2) {
                step = iterator.next();
                if (step.done) {
                  return step;
                }
              }
              return iterations % 2
                ? iteratorValue(type, iterations++, separator)
                : iteratorValue(type, iterations++, step.value, step);
            });
          };
          return interposedSequence;
        }

        function sortFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          var isKeyedIterable = isKeyed(iterable);
          var index = 0;
          var entries = iterable
            .toSeq()
            .map(function(v, k) {
              return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
            })
            .toArray();
          entries
            .sort(function(a, b) {
              return comparator(a[3], b[3]) || a[2] - b[2];
            })
            .forEach(
              isKeyedIterable
                ? function(v, i) {
                    entries[i].length = 2;
                  }
                : function(v, i) {
                    entries[i] = v[1];
                  }
            );
          return isKeyedIterable
            ? KeyedSeq(entries)
            : isIndexed(iterable)
            ? IndexedSeq(entries)
            : SetSeq(entries);
        }

        function maxFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          if (mapper) {
            var entry = iterable
              .toSeq()
              .map(function(v, k) {
                return [v, mapper(v, k, iterable)];
              })
              .reduce(function(a, b) {
                return maxCompare(comparator, a[1], b[1]) ? b : a;
              });
            return entry && entry[0];
          } else {
            return iterable.reduce(function(a, b) {
              return maxCompare(comparator, a, b) ? b : a;
            });
          }
        }

        function maxCompare(comparator, a, b) {
          var comp = comparator(b, a);
          // b is considered the new max if the comparator declares them equal, but
          // they are not equal and b is in fact a nullish value.
          return (
            (comp === 0 &&
              b !== a &&
              (b === undefined || b === null || b !== b)) ||
            comp > 0
          );
        }

        function zipWithFactory(keyIter, zipper, iters) {
          var zipSequence = makeSequence(keyIter);
          zipSequence.size = new ArraySeq(iters)
            .map(function(i) {
              return i.size;
            })
            .min();
          // Note: this a generic base implementation of __iterate in terms of
          // __iterator which may be more generically useful in the future.
          zipSequence.__iterate = function(fn, reverse) {
            /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */
            // indexed:
            var iterator = this.__iterator(ITERATE_VALUES, reverse);
            var step;
            var iterations = 0;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
            return iterations;
          };
          zipSequence.__iteratorUncached = function(type, reverse) {
            var iterators = iters.map(function(i) {
              return (i = Iterable(i)), getIterator(reverse ? i.reverse() : i);
            });
            var iterations = 0;
            var isDone = false;
            return new Iterator(function() {
              var steps;
              if (!isDone) {
                steps = iterators.map(function(i) {
                  return i.next();
                });
                isDone = steps.some(function(s) {
                  return s.done;
                });
              }
              if (isDone) {
                return iteratorDone();
              }
              return iteratorValue(
                type,
                iterations++,
                zipper.apply(
                  null,
                  steps.map(function(s) {
                    return s.value;
                  })
                )
              );
            });
          };
          return zipSequence;
        }

        // #pragma Helper Functions

        function reify(iter, seq) {
          return isSeq(iter) ? seq : iter.constructor(seq);
        }

        function validateEntry(entry) {
          if (entry !== Object(entry)) {
            throw new TypeError("Expected [K, V] tuple: " + entry);
          }
        }

        function resolveSize(iter) {
          assertNotInfinite(iter.size);
          return ensureSize(iter);
        }

        function iterableClass(iterable) {
          return isKeyed(iterable)
            ? KeyedIterable
            : isIndexed(iterable)
            ? IndexedIterable
            : SetIterable;
        }

        function makeSequence(iterable) {
          return Object.create(
            (isKeyed(iterable)
              ? KeyedSeq
              : isIndexed(iterable)
              ? IndexedSeq
              : SetSeq
            ).prototype
          );
        }

        function cacheResultThrough() {
          if (this._iter.cacheResult) {
            this._iter.cacheResult();
            this.size = this._iter.size;
            return this;
          } else {
            return Seq.prototype.cacheResult.call(this);
          }
        }

        function defaultComparator(a, b) {
          return a > b ? 1 : a < b ? -1 : 0;
        }

        function forceIterator(keyPath) {
          var iter = getIterator(keyPath);
          if (!iter) {
            // Array might not be iterable in this environment, so we need a fallback
            // to our wrapped type.
            if (!isArrayLike(keyPath)) {
              throw new TypeError(
                "Expected iterable or array-like: " + keyPath
              );
            }
            iter = getIterator(Iterable(keyPath));
          }
          return iter;
        }

        createClass(Record, KeyedCollection);

        function Record(defaultValues, name) {
          var hasInitialized;

          var RecordType = function Record(values) {
            if (values instanceof RecordType) {
              return values;
            }
            if (!(this instanceof RecordType)) {
              return new RecordType(values);
            }
            if (!hasInitialized) {
              hasInitialized = true;
              var keys = Object.keys(defaultValues);
              setProps(RecordTypePrototype, keys);
              RecordTypePrototype.size = keys.length;
              RecordTypePrototype._name = name;
              RecordTypePrototype._keys = keys;
              RecordTypePrototype._defaultValues = defaultValues;
            }
            this._map = Map(values);
          };

          var RecordTypePrototype = (RecordType.prototype = Object.create(
            RecordPrototype
          ));
          RecordTypePrototype.constructor = RecordType;

          return RecordType;
        }

        Record.prototype.toString = function() {
          return this.__toString(recordName(this) + " {", "}");
        };

        // @pragma Access

        Record.prototype.has = function(k) {
          return this._defaultValues.hasOwnProperty(k);
        };

        Record.prototype.get = function(k, notSetValue) {
          if (!this.has(k)) {
            return notSetValue;
          }
          var defaultVal = this._defaultValues[k];
          return this._map ? this._map.get(k, defaultVal) : defaultVal;
        };

        // @pragma Modification

        Record.prototype.clear = function() {
          if (this.__ownerID) {
            this._map && this._map.clear();
            return this;
          }
          var RecordType = this.constructor;
          return (
            RecordType._empty ||
            (RecordType._empty = makeRecord(this, emptyMap()))
          );
        };

        Record.prototype.set = function(k, v) {
          if (!this.has(k)) {
            throw new Error(
              'Cannot set unknown key "' + k + '" on ' + recordName(this)
            );
          }
          var newMap = this._map && this._map.set(k, v);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };

        Record.prototype.remove = function(k) {
          if (!this.has(k)) {
            return this;
          }
          var newMap = this._map && this._map.remove(k);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };

        Record.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };

        Record.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues)
            .map(function(_, k) {
              return this$0.get(k);
            })
            .__iterator(type, reverse);
        };

        Record.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues)
            .map(function(_, k) {
              return this$0.get(k);
            })
            .__iterate(fn, reverse);
        };

        Record.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map && this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return makeRecord(this, newMap, ownerID);
        };

        var RecordPrototype = Record.prototype;
        RecordPrototype[DELETE] = RecordPrototype.remove;
        RecordPrototype.deleteIn = RecordPrototype.removeIn =
          MapPrototype.removeIn;
        RecordPrototype.merge = MapPrototype.merge;
        RecordPrototype.mergeWith = MapPrototype.mergeWith;
        RecordPrototype.mergeIn = MapPrototype.mergeIn;
        RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
        RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
        RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        RecordPrototype.setIn = MapPrototype.setIn;
        RecordPrototype.update = MapPrototype.update;
        RecordPrototype.updateIn = MapPrototype.updateIn;
        RecordPrototype.withMutations = MapPrototype.withMutations;
        RecordPrototype.asMutable = MapPrototype.asMutable;
        RecordPrototype.asImmutable = MapPrototype.asImmutable;

        function makeRecord(likeRecord, map, ownerID) {
          var record = Object.create(Object.getPrototypeOf(likeRecord));
          record._map = map;
          record.__ownerID = ownerID;
          return record;
        }

        function recordName(record) {
          return record._name || record.constructor.name || "Record";
        }

        function setProps(prototype, names) {
          try {
            names.forEach(setProp.bind(undefined, prototype));
          } catch (error) {
            // Object.defineProperty failed. Probably IE8.
          }
        }

        function setProp(prototype, name) {
          Object.defineProperty(prototype, name, {
            get: function() {
              return this.get(name);
            },
            set: function(value) {
              invariant(this.__ownerID, "Cannot set on an immutable record.");
              this.set(name, value);
            }
          });
        }

        createClass(Set, SetCollection);

        // @pragma Construction

        function Set(value) {
          return value === null || value === undefined
            ? emptySet()
            : isSet(value) && !isOrdered(value)
            ? value
            : emptySet().withMutations(function(set) {
                var iter = SetIterable(value);
                assertNotInfinite(iter.size);
                iter.forEach(function(v) {
                  return set.add(v);
                });
              });
        }

        Set.of = function(/*...values*/) {
          return this(arguments);
        };

        Set.fromKeys = function(value) {
          return this(KeyedIterable(value).keySeq());
        };

        Set.prototype.toString = function() {
          return this.__toString("Set {", "}");
        };

        // @pragma Access

        Set.prototype.has = function(value) {
          return this._map.has(value);
        };

        // @pragma Modification

        Set.prototype.add = function(value) {
          return updateSet(this, this._map.set(value, true));
        };

        Set.prototype.remove = function(value) {
          return updateSet(this, this._map.remove(value));
        };

        Set.prototype.clear = function() {
          return updateSet(this, this._map.clear());
        };

        // @pragma Composition

        Set.prototype.union = function() {
          var iters = SLICE$0.call(arguments, 0);
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function(set) {
            for (var ii = 0; ii < iters.length; ii++) {
              SetIterable(iters[ii]).forEach(function(value) {
                return set.add(value);
              });
            }
          });
        };

        Set.prototype.intersect = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set) {
            originalSet.forEach(function(value) {
              if (
                !iters.every(function(iter) {
                  return iter.includes(value);
                })
              ) {
                set.remove(value);
              }
            });
          });
        };

        Set.prototype.subtract = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set) {
            originalSet.forEach(function(value) {
              if (
                iters.some(function(iter) {
                  return iter.includes(value);
                })
              ) {
                set.remove(value);
              }
            });
          });
        };

        Set.prototype.merge = function() {
          return this.union.apply(this, arguments);
        };

        Set.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return this.union.apply(this, iters);
        };

        Set.prototype.sort = function(comparator) {
          // Late binding
          return OrderedSet(sortFactory(this, comparator));
        };

        Set.prototype.sortBy = function(mapper, comparator) {
          // Late binding
          return OrderedSet(sortFactory(this, comparator, mapper));
        };

        Set.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };

        Set.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._map.__iterate(function(_, k) {
            return fn(k, k, this$0);
          }, reverse);
        };

        Set.prototype.__iterator = function(type, reverse) {
          return this._map
            .map(function(_, k) {
              return k;
            })
            .__iterator(type, reverse);
        };

        Set.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };

        function isSet(maybeSet) {
          return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
        }

        Set.isSet = isSet;

        var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";

        var SetPrototype = Set.prototype;
        SetPrototype[IS_SET_SENTINEL] = true;
        SetPrototype[DELETE] = SetPrototype.remove;
        SetPrototype.mergeDeep = SetPrototype.merge;
        SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
        SetPrototype.withMutations = MapPrototype.withMutations;
        SetPrototype.asMutable = MapPrototype.asMutable;
        SetPrototype.asImmutable = MapPrototype.asImmutable;

        SetPrototype.__empty = emptySet;
        SetPrototype.__make = makeSet;

        function updateSet(set, newMap) {
          if (set.__ownerID) {
            set.size = newMap.size;
            set._map = newMap;
            return set;
          }
          return newMap === set._map
            ? set
            : newMap.size === 0
            ? set.__empty()
            : set.__make(newMap);
        }

        function makeSet(map, ownerID) {
          var set = Object.create(SetPrototype);
          set.size = map ? map.size : 0;
          set._map = map;
          set.__ownerID = ownerID;
          return set;
        }

        var EMPTY_SET;
        function emptySet() {
          return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
        }

        createClass(OrderedSet, Set);

        // @pragma Construction

        function OrderedSet(value) {
          return value === null || value === undefined
            ? emptyOrderedSet()
            : isOrderedSet(value)
            ? value
            : emptyOrderedSet().withMutations(function(set) {
                var iter = SetIterable(value);
                assertNotInfinite(iter.size);
                iter.forEach(function(v) {
                  return set.add(v);
                });
              });
        }

        OrderedSet.of = function(/*...values*/) {
          return this(arguments);
        };

        OrderedSet.fromKeys = function(value) {
          return this(KeyedIterable(value).keySeq());
        };

        OrderedSet.prototype.toString = function() {
          return this.__toString("OrderedSet {", "}");
        };

        function isOrderedSet(maybeOrderedSet) {
          return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
        }

        OrderedSet.isOrderedSet = isOrderedSet;

        var OrderedSetPrototype = OrderedSet.prototype;
        OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

        OrderedSetPrototype.__empty = emptyOrderedSet;
        OrderedSetPrototype.__make = makeOrderedSet;

        function makeOrderedSet(map, ownerID) {
          var set = Object.create(OrderedSetPrototype);
          set.size = map ? map.size : 0;
          set._map = map;
          set.__ownerID = ownerID;
          return set;
        }

        var EMPTY_ORDERED_SET;
        function emptyOrderedSet() {
          return (
            EMPTY_ORDERED_SET ||
            (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))
          );
        }

        createClass(Stack, IndexedCollection);

        // @pragma Construction

        function Stack(value) {
          return value === null || value === undefined
            ? emptyStack()
            : isStack(value)
            ? value
            : emptyStack().unshiftAll(value);
        }

        Stack.of = function(/*...values*/) {
          return this(arguments);
        };

        Stack.prototype.toString = function() {
          return this.__toString("Stack [", "]");
        };

        // @pragma Access

        Stack.prototype.get = function(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };

        Stack.prototype.peek = function() {
          return this._head && this._head.value;
        };

        // @pragma Modification

        Stack.prototype.push = function(/*...values*/) {
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments[ii],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };

        Stack.prototype.pushAll = function(iter) {
          iter = IndexedIterable(iter);
          if (iter.size === 0) {
            return this;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.reverse().forEach(function(value) {
            newSize++;
            head = {
              value: value,
              next: head
            };
          });
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };

        Stack.prototype.pop = function() {
          return this.slice(1);
        };

        Stack.prototype.unshift = function(/*...values*/) {
          return this.push.apply(this, arguments);
        };

        Stack.prototype.unshiftAll = function(iter) {
          return this.pushAll(iter);
        };

        Stack.prototype.shift = function() {
          return this.pop.apply(this, arguments);
        };

        Stack.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = undefined;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };

        Stack.prototype.slice = function(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end, this.size);
          if (resolvedEnd !== this.size) {
            // super.slice(begin, end);
            return IndexedCollection.prototype.slice.call(this, begin, end);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = undefined;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };

        // @pragma Mutability

        Stack.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };

        // @pragma Iteration

        Stack.prototype.__iterate = function(fn, reverse) {
          if (reverse) {
            return this.reverse().__iterate(fn);
          }
          var iterations = 0;
          var node = this._head;
          while (node) {
            if (fn(node.value, iterations++, this) === false) {
              break;
            }
            node = node.next;
          }
          return iterations;
        };

        Stack.prototype.__iterator = function(type, reverse) {
          if (reverse) {
            return this.reverse().__iterator(type);
          }
          var iterations = 0;
          var node = this._head;
          return new Iterator(function() {
            if (node) {
              var value = node.value;
              node = node.next;
              return iteratorValue(type, iterations++, value);
            }
            return iteratorDone();
          });
        };

        function isStack(maybeStack) {
          return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
        }

        Stack.isStack = isStack;

        var IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";

        var StackPrototype = Stack.prototype;
        StackPrototype[IS_STACK_SENTINEL] = true;
        StackPrototype.withMutations = MapPrototype.withMutations;
        StackPrototype.asMutable = MapPrototype.asMutable;
        StackPrototype.asImmutable = MapPrototype.asImmutable;
        StackPrototype.wasAltered = MapPrototype.wasAltered;

        function makeStack(size, head, ownerID, hash) {
          var map = Object.create(StackPrototype);
          map.size = size;
          map._head = head;
          map.__ownerID = ownerID;
          map.__hash = hash;
          map.__altered = false;
          return map;
        }

        var EMPTY_STACK;
        function emptyStack() {
          return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
        }

        /**
         * Contributes additional methods to a constructor
         */
        function mixin(ctor, methods) {
          var keyCopier = function(key) {
            ctor.prototype[key] = methods[key];
          };
          Object.keys(methods).forEach(keyCopier);
          Object.getOwnPropertySymbols &&
            Object.getOwnPropertySymbols(methods).forEach(keyCopier);
          return ctor;
        }

        Iterable.Iterator = Iterator;

        mixin(Iterable, {
          // ### Conversion to other types

          toArray: function() {
            assertNotInfinite(this.size);
            var array = new Array(this.size || 0);
            this.valueSeq().__iterate(function(v, i) {
              array[i] = v;
            });
            return array;
          },

          toIndexedSeq: function() {
            return new ToIndexedSequence(this);
          },

          toJS: function() {
            return this.toSeq()
              .map(function(value) {
                return value && typeof value.toJS === "function"
                  ? value.toJS()
                  : value;
              })
              .__toJS();
          },

          toJSON: function() {
            return this.toSeq()
              .map(function(value) {
                return value && typeof value.toJSON === "function"
                  ? value.toJSON()
                  : value;
              })
              .__toJS();
          },

          toKeyedSeq: function() {
            return new ToKeyedSequence(this, true);
          },

          toMap: function() {
            // Use Late Binding here to solve the circular dependency.
            return Map(this.toKeyedSeq());
          },

          toObject: function() {
            assertNotInfinite(this.size);
            var object = {};
            this.__iterate(function(v, k) {
              object[k] = v;
            });
            return object;
          },

          toOrderedMap: function() {
            // Use Late Binding here to solve the circular dependency.
            return OrderedMap(this.toKeyedSeq());
          },

          toOrderedSet: function() {
            // Use Late Binding here to solve the circular dependency.
            return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
          },

          toSet: function() {
            // Use Late Binding here to solve the circular dependency.
            return Set(isKeyed(this) ? this.valueSeq() : this);
          },

          toSetSeq: function() {
            return new ToSetSequence(this);
          },

          toSeq: function() {
            return isIndexed(this)
              ? this.toIndexedSeq()
              : isKeyed(this)
              ? this.toKeyedSeq()
              : this.toSetSeq();
          },

          toStack: function() {
            // Use Late Binding here to solve the circular dependency.
            return Stack(isKeyed(this) ? this.valueSeq() : this);
          },

          toList: function() {
            // Use Late Binding here to solve the circular dependency.
            return List(isKeyed(this) ? this.valueSeq() : this);
          },

          // ### Common JavaScript methods and properties

          toString: function() {
            return "[Iterable]";
          },

          __toString: function(head, tail) {
            if (this.size === 0) {
              return head + tail;
            }
            return (
              head +
              " " +
              this.toSeq()
                .map(this.__toStringMapper)
                .join(", ") +
              " " +
              tail
            );
          },

          // ### ES6 Collection methods (ES6 Array and Map)

          concat: function() {
            var values = SLICE$0.call(arguments, 0);
            return reify(this, concatFactory(this, values));
          },

          includes: function(searchValue) {
            return this.some(function(value) {
              return is(value, searchValue);
            });
          },

          entries: function() {
            return this.__iterator(ITERATE_ENTRIES);
          },

          every: function(predicate, context) {
            assertNotInfinite(this.size);
            var returnValue = true;
            this.__iterate(function(v, k, c) {
              if (!predicate.call(context, v, k, c)) {
                returnValue = false;
                return false;
              }
            });
            return returnValue;
          },

          filter: function(predicate, context) {
            return reify(this, filterFactory(this, predicate, context, true));
          },

          find: function(predicate, context, notSetValue) {
            var entry = this.findEntry(predicate, context);
            return entry ? entry[1] : notSetValue;
          },

          findEntry: function(predicate, context) {
            var found;
            this.__iterate(function(v, k, c) {
              if (predicate.call(context, v, k, c)) {
                found = [k, v];
                return false;
              }
            });
            return found;
          },

          findLastEntry: function(predicate, context) {
            return this.toSeq()
              .reverse()
              .findEntry(predicate, context);
          },

          forEach: function(sideEffect, context) {
            assertNotInfinite(this.size);
            return this.__iterate(
              context ? sideEffect.bind(context) : sideEffect
            );
          },

          join: function(separator) {
            assertNotInfinite(this.size);
            separator = separator !== undefined ? "" + separator : ",";
            var joined = "";
            var isFirst = true;
            this.__iterate(function(v) {
              isFirst ? (isFirst = false) : (joined += separator);
              joined += v !== null && v !== undefined ? v.toString() : "";
            });
            return joined;
          },

          keys: function() {
            return this.__iterator(ITERATE_KEYS);
          },

          map: function(mapper, context) {
            return reify(this, mapFactory(this, mapper, context));
          },

          reduce: function(reducer, initialReduction, context) {
            assertNotInfinite(this.size);
            var reduction;
            var useFirst;
            if (arguments.length < 2) {
              useFirst = true;
            } else {
              reduction = initialReduction;
            }
            this.__iterate(function(v, k, c) {
              if (useFirst) {
                useFirst = false;
                reduction = v;
              } else {
                reduction = reducer.call(context, reduction, v, k, c);
              }
            });
            return reduction;
          },

          reduceRight: function(reducer, initialReduction, context) {
            var reversed = this.toKeyedSeq().reverse();
            return reversed.reduce.apply(reversed, arguments);
          },

          reverse: function() {
            return reify(this, reverseFactory(this, true));
          },

          slice: function(begin, end) {
            return reify(this, sliceFactory(this, begin, end, true));
          },

          some: function(predicate, context) {
            return !this.every(not(predicate), context);
          },

          sort: function(comparator) {
            return reify(this, sortFactory(this, comparator));
          },

          values: function() {
            return this.__iterator(ITERATE_VALUES);
          },

          // ### More sequential methods

          butLast: function() {
            return this.slice(0, -1);
          },

          isEmpty: function() {
            return this.size !== undefined
              ? this.size === 0
              : !this.some(function() {
                  return true;
                });
          },

          count: function(predicate, context) {
            return ensureSize(
              predicate ? this.toSeq().filter(predicate, context) : this
            );
          },

          countBy: function(grouper, context) {
            return countByFactory(this, grouper, context);
          },

          equals: function(other) {
            return deepEqual(this, other);
          },

          entrySeq: function() {
            var iterable = this;
            if (iterable._cache) {
              // We cache as an entries array, so we can just return the cache!
              return new ArraySeq(iterable._cache);
            }
            var entriesSequence = iterable
              .toSeq()
              .map(entryMapper)
              .toIndexedSeq();
            entriesSequence.fromEntrySeq = function() {
              return iterable.toSeq();
            };
            return entriesSequence;
          },

          filterNot: function(predicate, context) {
            return this.filter(not(predicate), context);
          },

          findLast: function(predicate, context, notSetValue) {
            return this.toKeyedSeq()
              .reverse()
              .find(predicate, context, notSetValue);
          },

          first: function() {
            return this.find(returnTrue);
          },

          flatMap: function(mapper, context) {
            return reify(this, flatMapFactory(this, mapper, context));
          },

          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, true));
          },

          fromEntrySeq: function() {
            return new FromEntriesSequence(this);
          },

          get: function(searchKey, notSetValue) {
            return this.find(
              function(_, key) {
                return is(key, searchKey);
              },
              undefined,
              notSetValue
            );
          },

          getIn: function(searchKeyPath, notSetValue) {
            var nested = this;
            // Note: in an ES6 environment, we would prefer:
            // for (var key of searchKeyPath) {
            var iter = forceIterator(searchKeyPath);
            var step;
            while (!(step = iter.next()).done) {
              var key = step.value;
              nested =
                nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
              if (nested === NOT_SET) {
                return notSetValue;
              }
            }
            return nested;
          },

          groupBy: function(grouper, context) {
            return groupByFactory(this, grouper, context);
          },

          has: function(searchKey) {
            return this.get(searchKey, NOT_SET) !== NOT_SET;
          },

          hasIn: function(searchKeyPath) {
            return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
          },

          isSubset: function(iter) {
            iter = typeof iter.includes === "function" ? iter : Iterable(iter);
            return this.every(function(value) {
              return iter.includes(value);
            });
          },

          isSuperset: function(iter) {
            iter = typeof iter.isSubset === "function" ? iter : Iterable(iter);
            return iter.isSubset(this);
          },

          keySeq: function() {
            return this.toSeq()
              .map(keyMapper)
              .toIndexedSeq();
          },

          last: function() {
            return this.toSeq()
              .reverse()
              .first();
          },

          max: function(comparator) {
            return maxFactory(this, comparator);
          },

          maxBy: function(mapper, comparator) {
            return maxFactory(this, comparator, mapper);
          },

          min: function(comparator) {
            return maxFactory(
              this,
              comparator ? neg(comparator) : defaultNegComparator
            );
          },

          minBy: function(mapper, comparator) {
            return maxFactory(
              this,
              comparator ? neg(comparator) : defaultNegComparator,
              mapper
            );
          },

          rest: function() {
            return this.slice(1);
          },

          skip: function(amount) {
            return this.slice(Math.max(0, amount));
          },

          skipLast: function(amount) {
            return reify(
              this,
              this.toSeq()
                .reverse()
                .skip(amount)
                .reverse()
            );
          },

          skipWhile: function(predicate, context) {
            return reify(
              this,
              skipWhileFactory(this, predicate, context, true)
            );
          },

          skipUntil: function(predicate, context) {
            return this.skipWhile(not(predicate), context);
          },

          sortBy: function(mapper, comparator) {
            return reify(this, sortFactory(this, comparator, mapper));
          },

          take: function(amount) {
            return this.slice(0, Math.max(0, amount));
          },

          takeLast: function(amount) {
            return reify(
              this,
              this.toSeq()
                .reverse()
                .take(amount)
                .reverse()
            );
          },

          takeWhile: function(predicate, context) {
            return reify(this, takeWhileFactory(this, predicate, context));
          },

          takeUntil: function(predicate, context) {
            return this.takeWhile(not(predicate), context);
          },

          valueSeq: function() {
            return this.toIndexedSeq();
          },

          // ### Hashable Object

          hashCode: function() {
            return this.__hash || (this.__hash = hashIterable(this));
          }

          // ### Internal

          // abstract __iterate(fn, reverse)

          // abstract __iterator(type, reverse)
        });

        // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
        // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
        // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
        // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

        var IterablePrototype = Iterable.prototype;
        IterablePrototype[IS_ITERABLE_SENTINEL] = true;
        IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
        IterablePrototype.__toJS = IterablePrototype.toArray;
        IterablePrototype.__toStringMapper = quoteString;
        IterablePrototype.inspect = IterablePrototype.toSource = function() {
          return this.toString();
        };
        IterablePrototype.chain = IterablePrototype.flatMap;
        IterablePrototype.contains = IterablePrototype.includes;

        // Temporary warning about using length
        (function() {
          try {
            Object.defineProperty(IterablePrototype, "length", {
              get: function() {
                if (!Iterable.noLengthWarning) {
                  var stack;
                  try {
                    throw new Error();
                  } catch (error) {
                    stack = error.stack;
                  }
                  if (stack.indexOf("_wrapObject") === -1) {
                    console &&
                      console.warn &&
                      console.warn(
                        "iterable.length has been deprecated, " +
                          "use iterable.size or iterable.count(). " +
                          "This warning will become a silent error in a future version. " +
                          stack
                      );
                    return this.size;
                  }
                }
              }
            });
          } catch (e) {}
        })();

        mixin(KeyedIterable, {
          // ### More sequential methods

          flip: function() {
            return reify(this, flipFactory(this));
          },

          findKey: function(predicate, context) {
            var entry = this.findEntry(predicate, context);
            return entry && entry[0];
          },

          findLastKey: function(predicate, context) {
            return this.toSeq()
              .reverse()
              .findKey(predicate, context);
          },

          keyOf: function(searchValue) {
            return this.findKey(function(value) {
              return is(value, searchValue);
            });
          },

          lastKeyOf: function(searchValue) {
            return this.findLastKey(function(value) {
              return is(value, searchValue);
            });
          },

          mapEntries: function(mapper, context) {
            var this$0 = this;
            var iterations = 0;
            return reify(
              this,
              this.toSeq()
                .map(function(v, k) {
                  return mapper.call(context, [k, v], iterations++, this$0);
                })
                .fromEntrySeq()
            );
          },

          mapKeys: function(mapper, context) {
            var this$0 = this;
            return reify(
              this,
              this.toSeq()
                .flip()
                .map(function(k, v) {
                  return mapper.call(context, k, v, this$0);
                })
                .flip()
            );
          }
        });

        var KeyedIterablePrototype = KeyedIterable.prototype;
        KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
        KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
        KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
        KeyedIterablePrototype.__toStringMapper = function(v, k) {
          return JSON.stringify(k) + ": " + quoteString(v);
        };

        mixin(IndexedIterable, {
          // ### Conversion to other types

          toKeyedSeq: function() {
            return new ToKeyedSequence(this, false);
          },

          // ### ES6 Collection methods (ES6 Array and Map)

          filter: function(predicate, context) {
            return reify(this, filterFactory(this, predicate, context, false));
          },

          findIndex: function(predicate, context) {
            var entry = this.findEntry(predicate, context);
            return entry ? entry[0] : -1;
          },

          indexOf: function(searchValue) {
            var key = this.toKeyedSeq().keyOf(searchValue);
            return key === undefined ? -1 : key;
          },

          lastIndexOf: function(searchValue) {
            var key = this.toKeyedSeq()
              .reverse()
              .keyOf(searchValue);
            return key === undefined ? -1 : key;

            // var index =
            // return this.toSeq().reverse().indexOf(searchValue);
          },

          reverse: function() {
            return reify(this, reverseFactory(this, false));
          },

          slice: function(begin, end) {
            return reify(this, sliceFactory(this, begin, end, false));
          },

          splice: function(index, removeNum /*, ...values*/) {
            var numArgs = arguments.length;
            removeNum = Math.max(removeNum | 0, 0);
            if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
              return this;
            }
            // If index is negative, it should resolve relative to the size of the
            // collection. However size may be expensive to compute if not cached, so
            // only call count() if the number is in fact negative.
            index = resolveBegin(index, index < 0 ? this.count() : this.size);
            var spliced = this.slice(0, index);
            return reify(
              this,
              numArgs === 1
                ? spliced
                : spliced.concat(
                    arrCopy(arguments, 2),
                    this.slice(index + removeNum)
                  )
            );
          },

          // ### More collection methods

          findLastIndex: function(predicate, context) {
            var key = this.toKeyedSeq().findLastKey(predicate, context);
            return key === undefined ? -1 : key;
          },

          first: function() {
            return this.get(0);
          },

          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, false));
          },

          get: function(index, notSetValue) {
            index = wrapIndex(this, index);
            return index < 0 ||
              this.size === Infinity ||
                (this.size !== undefined && index > this.size)
              ? notSetValue
              : this.find(
                  function(_, key) {
                    return key === index;
                  },
                  undefined,
                  notSetValue
                );
          },

          has: function(index) {
            index = wrapIndex(this, index);
            return (
              index >= 0 &&
              (this.size !== undefined
                ? this.size === Infinity || index < this.size
                : this.indexOf(index) !== -1)
            );
          },

          interpose: function(separator) {
            return reify(this, interposeFactory(this, separator));
          },

          interleave: function(/*...iterables*/) {
            var iterables = [this].concat(arrCopy(arguments));
            var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
            var interleaved = zipped.flatten(true);
            if (zipped.size) {
              interleaved.size = zipped.size * iterables.length;
            }
            return reify(this, interleaved);
          },

          last: function() {
            return this.get(-1);
          },

          skipWhile: function(predicate, context) {
            return reify(
              this,
              skipWhileFactory(this, predicate, context, false)
            );
          },

          zip: function(/*, ...iterables */) {
            var iterables = [this].concat(arrCopy(arguments));
            return reify(this, zipWithFactory(this, defaultZipper, iterables));
          },

          zipWith: function(zipper /*, ...iterables */) {
            var iterables = arrCopy(arguments);
            iterables[0] = this;
            return reify(this, zipWithFactory(this, zipper, iterables));
          }
        });

        IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
        IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;

        mixin(SetIterable, {
          // ### ES6 Collection methods (ES6 Array and Map)

          get: function(value, notSetValue) {
            return this.has(value) ? value : notSetValue;
          },

          includes: function(value) {
            return this.has(value);
          },

          // ### More sequential methods

          keySeq: function() {
            return this.valueSeq();
          }
        });

        SetIterable.prototype.has = IterablePrototype.includes;

        // Mixin subclasses

        mixin(KeyedSeq, KeyedIterable.prototype);
        mixin(IndexedSeq, IndexedIterable.prototype);
        mixin(SetSeq, SetIterable.prototype);

        mixin(KeyedCollection, KeyedIterable.prototype);
        mixin(IndexedCollection, IndexedIterable.prototype);
        mixin(SetCollection, SetIterable.prototype);

        // #pragma Helper functions

        function keyMapper(v, k) {
          return k;
        }

        function entryMapper(v, k) {
          return [k, v];
        }

        function not(predicate) {
          return function() {
            return !predicate.apply(this, arguments);
          };
        }

        function neg(predicate) {
          return function() {
            return -predicate.apply(this, arguments);
          };
        }

        function quoteString(value) {
          return typeof value === "string" ? JSON.stringify(value) : value;
        }

        function defaultZipper() {
          return arrCopy(arguments);
        }

        function defaultNegComparator(a, b) {
          return a < b ? 1 : a > b ? -1 : 0;
        }

        function hashIterable(iterable) {
          if (iterable.size === Infinity) {
            return 0;
          }
          var ordered = isOrdered(iterable);
          var keyed = isKeyed(iterable);
          var h = ordered ? 1 : 0;
          var size = iterable.__iterate(
            keyed
              ? ordered
                ? function(v, k) {
                    h = (31 * h + hashMerge(hash(v), hash(k))) | 0;
                  }
                : function(v, k) {
                    h = (h + hashMerge(hash(v), hash(k))) | 0;
                  }
              : ordered
              ? function(v) {
                  h = (31 * h + hash(v)) | 0;
                }
              : function(v) {
                  h = (h + hash(v)) | 0;
                }
          );
          return murmurHashOfSize(size, h);
        }

        function murmurHashOfSize(size, h) {
          h = imul(h, 0xcc9e2d51);
          h = imul((h << 15) | (h >>> -15), 0x1b873593);
          h = imul((h << 13) | (h >>> -13), 5);
          h = ((h + 0xe6546b64) | 0) ^ size;
          h = imul(h ^ (h >>> 16), 0x85ebca6b);
          h = imul(h ^ (h >>> 13), 0xc2b2ae35);
          h = smi(h ^ (h >>> 16));
          return h;
        }

        function hashMerge(a, b) {
          return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int
        }

        var Immutable = {
          Iterable: Iterable,

          Seq: Seq,
          Collection: Collection,
          Map: Map,
          OrderedMap: OrderedMap,
          List: List,
          Stack: Stack,
          Set: Set,
          OrderedSet: OrderedSet,

          Record: Record,
          Range: Range,
          Repeat: Repeat,

          is: is,
          fromJS: fromJS
        };

        return Immutable;
      });

      /***/
    },

    /***/ r6jv: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.stripIgnoredCharacters = stripIgnoredCharacters;

      var _source = __webpack_require__("k84H");

      var _tokenKind = __webpack_require__("XfSa");

      var _lexer = __webpack_require__("wimG");

      var _blockString = __webpack_require__("yQbh");

      /**
       * Strips characters that are not significant to the validity or execution
       * of a GraphQL document:
       *   - UnicodeBOM
       *   - WhiteSpace
       *   - LineTerminator
       *   - Comment
       *   - Comma
       *   - BlockString indentation
       *
       * Note: It is required to have a delimiter character between neighboring
       * non-punctuator tokens and this function always uses single space as delimiter.
       *
       * It is guaranteed that both input and output documents if parsed would result
       * in the exact same AST except for nodes location.
       *
       * Warning: It is guaranteed that this function will always produce stable results.
       * However, it's not guaranteed that it will stay the same between different
       * releases due to bugfixes or changes in the GraphQL specification.
       *
       * Query example:
       *
       * query SomeQuery($foo: String!, $bar: String) {
       *   someField(foo: $foo, bar: $bar) {
       *     a
       *     b {
       *       c
       *       d
       *     }
       *   }
       * }
       *
       * Becomes:
       *
       * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
       *
       * SDL example:
       *
       * """
       * Type description
       * """
       * type Foo {
       *   """
       *   Field description
       *   """
       *   bar: String
       * }
       *
       * Becomes:
       *
       * """Type description""" type Foo{"""Field description""" bar:String}
       */
      function stripIgnoredCharacters(source) {
        var sourceObj = (0, _source.isSource)(source)
          ? source
          : new _source.Source(source);
        var body = sourceObj.body;
        var lexer = new _lexer.Lexer(sourceObj);
        var strippedBody = "";
        var wasLastAddedTokenNonPunctuator = false;

        while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
          var currentToken = lexer.token;
          var tokenKind = currentToken.kind;
          /**
           * Every two non-punctuator tokens should have space between them.
           * Also prevent case of non-punctuator token following by spread resulting
           * in invalid token (e.g. `1...` is invalid Float token).
           */

          var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(
            currentToken.kind
          );

          if (wasLastAddedTokenNonPunctuator) {
            if (
              isNonPunctuator ||
              currentToken.kind === _tokenKind.TokenKind.SPREAD
            ) {
              strippedBody += " ";
            }
          }

          var tokenBody = body.slice(currentToken.start, currentToken.end);

          if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
            strippedBody += dedentBlockString(tokenBody);
          } else {
            strippedBody += tokenBody;
          }

          wasLastAddedTokenNonPunctuator = isNonPunctuator;
        }

        return strippedBody;
      }

      function dedentBlockString(blockStr) {
        // skip leading and trailing triple quotations
        var rawStr = blockStr.slice(3, -3);
        var body = (0, _blockString.dedentBlockStringValue)(rawStr);

        if ((0, _blockString.getBlockStringIndentation)(body) > 0) {
          body = "\n" + body;
        }

        var lastChar = body[body.length - 1];
        var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';

        if (hasTrailingQuote || lastChar === "\\") {
          body += "\n";
        }

        return '"""' + body + '"""';
      }

      /***/
    },

    /***/ rY0A: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = __webpack_require__("zOht");
      tslib_1.__exportStar(__webpack_require__("V/gh"), exports);
      tslib_1.__exportStar(__webpack_require__("6i1E"), exports);
      tslib_1.__exportStar(__webpack_require__("juUo"), exports);
      tslib_1.__exportStar(__webpack_require__("sgrp"), exports);
      tslib_1.__exportStar(__webpack_require__("RnBS"), exports);
      tslib_1.__exportStar(__webpack_require__("3yyI"), exports);
      tslib_1.__exportStar(__webpack_require__("T8T6"), exports);
      tslib_1.__exportStar(__webpack_require__("O2Of"), exports);
      tslib_1.__exportStar(__webpack_require__("Gpy1"), exports);
      tslib_1.__exportStar(__webpack_require__("LHp5"), exports);
      tslib_1.__exportStar(__webpack_require__("igW/"), exports);
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ rdJp: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = printPathArray;

      /**
       * Build a string describing the path.
       */
      function printPathArray(path) {
        return path
          .map(function(key) {
            return typeof key === "number"
              ? "[" + key.toString() + "]"
              : "." + key;
          })
          .join("");
      }

      /***/
    },

    /***/ re0z: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.spongeCase = void 0;
      function spongeCase(input) {
        var result = "";
        for (var i = 0; i < input.length; i++) {
          result +=
            Math.random() > 0.5
              ? input[i].toUpperCase()
              : input[i].toLowerCase();
        }
        return result;
      }
      exports.spongeCase = spongeCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ rn2h: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.buildASTSchema = buildASTSchema;
      exports.buildSchema = buildSchema;

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _kinds = __webpack_require__("xaK5");

      var _parser = __webpack_require__("DEM2");

      var _validate = __webpack_require__("sk25");

      var _schema = __webpack_require__("+X2/");

      var _directives = __webpack_require__("L9+1");

      var _extendSchema = __webpack_require__("kjGV");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * This takes the ast of a schema document produced by the parse function in
       * src/language/parser.js.
       *
       * If no schema definition is provided, then it will look for types named Query
       * and Mutation.
       *
       * Given that AST it constructs a GraphQLSchema. The resulting schema
       * has no resolve methods, so execution will use default resolvers.
       *
       * Accepts options as a second argument:
       *
       *    - commentDescriptions:
       *        Provide true to use preceding comments as the description.
       *
       */
      function buildASTSchema(documentAST, options) {
        (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||
          (0, _devAssert.default)(0, "Must provide valid Document AST.");

        if (
          (options === null || options === void 0
            ? void 0
            : options.assumeValid) !== true &&
          (options === null || options === void 0
            ? void 0
            : options.assumeValidSDL) !== true
        ) {
          (0, _validate.assertValidSDL)(documentAST);
        }

        var emptySchemaConfig = {
          description: undefined,
          types: [],
          directives: [],
          extensions: undefined,
          extensionASTNodes: [],
          assumeValid: false
        };
        var config = (0, _extendSchema.extendSchemaImpl)(
          emptySchemaConfig,
          documentAST,
          options
        );

        if (config.astNode == null) {
          for (
            var _i2 = 0, _config$types2 = config.types;
            _i2 < _config$types2.length;
            _i2++
          ) {
            var type = _config$types2[_i2];

            switch (type.name) {
              // Note: While this could make early assertions to get the correctly
              // typed values below, that would throw immediately while type system
              // validation with validateSchema() will produce more actionable results.
              case "Query":
                config.query = type;
                break;

              case "Mutation":
                config.mutation = type;
                break;

              case "Subscription":
                config.subscription = type;
                break;
            }
          }
        }

        var directives = config.directives; // If specified directives were not explicitly declared, add them.

        var _loop = function _loop(_i4) {
          var stdDirective = _directives.specifiedDirectives[_i4];

          if (
            directives.every(function(directive) {
              return directive.name !== stdDirective.name;
            })
          ) {
            directives.push(stdDirective);
          }
        };

        for (var _i4 = 0; _i4 < _directives.specifiedDirectives.length; _i4++) {
          _loop(_i4);
        }

        return new _schema.GraphQLSchema(config);
      }
      /**
       * A helper function to build a GraphQLSchema directly from a source
       * document.
       */

      function buildSchema(source, options) {
        var document = (0, _parser.parse)(source, {
          noLocation:
            options === null || options === void 0
              ? void 0
              : options.noLocation,
          allowLegacySDLEmptyFields:
            options === null || options === void 0
              ? void 0
              : options.allowLegacySDLEmptyFields,
          allowLegacySDLImplementsInterfaces:
            options === null || options === void 0
              ? void 0
              : options.allowLegacySDLImplementsInterfaces,
          experimentalFragmentVariables:
            options === null || options === void 0
              ? void 0
              : options.experimentalFragmentVariables
        });
        return buildASTSchema(document, {
          commentDescriptions:
            options === null || options === void 0
              ? void 0
              : options.commentDescriptions,
          assumeValidSDL:
            options === null || options === void 0
              ? void 0
              : options.assumeValidSDL,
          assumeValid:
            options === null || options === void 0
              ? void 0
              : options.assumeValid
        });
      }

      /***/
    },

    /***/ sEmH: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique fragment names
       *
       * A GraphQL document is only valid if all defined fragments have unique names.
       */
      function UniqueFragmentNamesRule(context) {
        var knownFragmentNames = Object.create(null);
        return {
          OperationDefinition: function OperationDefinition() {
            return false;
          },
          FragmentDefinition: function FragmentDefinition(node) {
            var fragmentName = node.name.value;

            if (knownFragmentNames[fragmentName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'There can be only one fragment named "'.concat(
                    fragmentName,
                    '".'
                  ),
                  [knownFragmentNames[fragmentName], node.name]
                )
              );
            } else {
              knownFragmentNames[fragmentName] = node.name;
            }

            return false;
          }
        };
      }

      /***/
    },

    /***/ sQdO: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      module.exports = string => {
        const match = string.match(/^[ \t]*(?=\S)/gm);

        if (!match) {
          return 0;
        }

        return match.reduce((r, a) => Math.min(r, a.length), Infinity);
      };

      /***/
    },

    /***/ sYn3: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var keysShim;
      if (!Object.keys) {
        // modified from https://github.com/es-shims/es5-shim
        var has = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;
        var isArgs = __webpack_require__("1KsK"); // eslint-disable-line global-require
        var isEnumerable = Object.prototype.propertyIsEnumerable;
        var hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
        var hasProtoEnumBug = isEnumerable.call(function() {}, "prototype");
        var dontEnums = [
          "toString",
          "toLocaleString",
          "valueOf",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "constructor"
        ];
        var equalsConstructorPrototype = function(o) {
          var ctor = o.constructor;
          return ctor && ctor.prototype === o;
        };
        var excludedKeys = {
          $applicationCache: true,
          $console: true,
          $external: true,
          $frame: true,
          $frameElement: true,
          $frames: true,
          $innerHeight: true,
          $innerWidth: true,
          $onmozfullscreenchange: true,
          $onmozfullscreenerror: true,
          $outerHeight: true,
          $outerWidth: true,
          $pageXOffset: true,
          $pageYOffset: true,
          $parent: true,
          $scrollLeft: true,
          $scrollTop: true,
          $scrollX: true,
          $scrollY: true,
          $self: true,
          $webkitIndexedDB: true,
          $webkitStorageInfo: true,
          $window: true
        };
        var hasAutomationEqualityBug = (function() {
          /* global window */
          if (typeof window === "undefined") {
            return false;
          }
          for (var k in window) {
            try {
              if (
                !excludedKeys["$" + k] &&
                has.call(window, k) &&
                window[k] !== null &&
                typeof window[k] === "object"
              ) {
                try {
                  equalsConstructorPrototype(window[k]);
                } catch (e) {
                  return true;
                }
              }
            } catch (e) {
              return true;
            }
          }
          return false;
        })();
        var equalsConstructorPrototypeIfNotBuggy = function(o) {
          /* global window */
          if (typeof window === "undefined" || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(o);
          }
          try {
            return equalsConstructorPrototype(o);
          } catch (e) {
            return false;
          }
        };

        keysShim = function keys(object) {
          var isObject = object !== null && typeof object === "object";
          var isFunction = toStr.call(object) === "[object Function]";
          var isArguments = isArgs(object);
          var isString = isObject && toStr.call(object) === "[object String]";
          var theKeys = [];

          if (!isObject && !isFunction && !isArguments) {
            throw new TypeError("Object.keys called on a non-object");
          }

          var skipProto = hasProtoEnumBug && isFunction;
          if (isString && object.length > 0 && !has.call(object, 0)) {
            for (var i = 0; i < object.length; ++i) {
              theKeys.push(String(i));
            }
          }

          if (isArguments && object.length > 0) {
            for (var j = 0; j < object.length; ++j) {
              theKeys.push(String(j));
            }
          } else {
            for (var name in object) {
              if (
                !(skipProto && name === "prototype") &&
                has.call(object, name)
              ) {
                theKeys.push(String(name));
              }
            }
          }

          if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

            for (var k = 0; k < dontEnums.length; ++k) {
              if (
                !(skipConstructor && dontEnums[k] === "constructor") &&
                has.call(object, dontEnums[k])
              ) {
                theKeys.push(dontEnums[k]);
              }
            }
          }
          return theKeys;
        };
      }
      module.exports = keysShim;

      /***/
    },

    /***/ sgrp: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.dotCase = void 0;
      var tslib_1 = __webpack_require__("zOht");
      var no_case_1 = __webpack_require__("3yyI");
      function dotCase(input, options) {
        if (options === void 0) {
          options = {};
        }
        return no_case_1.noCase(
          input,
          tslib_1.__assign({ delimiter: "." }, options)
        );
      }
      exports.dotCase = dotCase;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ sk25: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.validate = validate;
      exports.validateSDL = validateSDL;
      exports.assertValidSDL = assertValidSDL;
      exports.assertValidSDLExtension = assertValidSDLExtension;

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      var _GraphQLError = __webpack_require__("MafX");

      var _visitor = __webpack_require__("tqCx");

      var _validate = __webpack_require__("QINa");

      var _TypeInfo = __webpack_require__("Uh8e");

      var _specifiedRules = __webpack_require__("CJUq");

      var _ValidationContext = __webpack_require__("RqXf");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Implements the "Validation" section of the spec.
       *
       * Validation runs synchronously, returning an array of encountered errors, or
       * an empty array if no errors were encountered and the document is valid.
       *
       * A list of specific validation rules may be provided. If not provided, the
       * default list of rules defined by the GraphQL specification will be used.
       *
       * Each validation rules is a function which returns a visitor
       * (see the language/visitor API). Visitor methods are expected to return
       * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
       *
       * Optionally a custom TypeInfo instance may be provided. If not provided, one
       * will be created from the provided schema.
       */
      function validate(schema, documentAST) {
        var rules =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : _specifiedRules.specifiedRules;
        var typeInfo =
          arguments.length > 3 && arguments[3] !== undefined
            ? arguments[3]
            : new _TypeInfo.TypeInfo(schema);
        var options =
          arguments.length > 4 && arguments[4] !== undefined
            ? arguments[4]
            : {
                maxErrors: undefined
              };
        documentAST || (0, _devAssert.default)(0, "Must provide document."); // If the schema used for validation is invalid, throw an error.

        (0, _validate.assertValidSchema)(schema);
        var abortObj = Object.freeze({});
        var errors = [];
        var context = new _ValidationContext.ValidationContext(
          schema,
          documentAST,
          typeInfo,
          function(error) {
            if (
              options.maxErrors != null &&
              errors.length >= options.maxErrors
            ) {
              errors.push(
                new _GraphQLError.GraphQLError(
                  "Too many validation errors, error limit reached. Validation aborted."
                )
              );
              throw abortObj;
            }

            errors.push(error);
          }
        ); // This uses a specialized visitor which runs multiple visitors in parallel,
        // while maintaining the visitor skip and break API.

        var visitor = (0, _visitor.visitInParallel)(
          rules.map(function(rule) {
            return rule(context);
          })
        ); // Visit the whole document with each instance of all provided rules.

        try {
          (0, _visitor.visit)(
            documentAST,
            (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor)
          );
        } catch (e) {
          if (e !== abortObj) {
            throw e;
          }
        }

        return errors;
      }
      /**
       * @internal
       */

      function validateSDL(documentAST, schemaToExtend) {
        var rules =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : _specifiedRules.specifiedSDLRules;
        var errors = [];
        var context = new _ValidationContext.SDLValidationContext(
          documentAST,
          schemaToExtend,
          function(error) {
            errors.push(error);
          }
        );
        var visitors = rules.map(function(rule) {
          return rule(context);
        });
        (0, _visitor.visit)(
          documentAST,
          (0, _visitor.visitInParallel)(visitors)
        );
        return errors;
      }
      /**
       * Utility function which asserts a SDL document is valid by throwing an error
       * if it is invalid.
       *
       * @internal
       */

      function assertValidSDL(documentAST) {
        var errors = validateSDL(documentAST);

        if (errors.length !== 0) {
          throw new Error(
            errors
              .map(function(error) {
                return error.message;
              })
              .join("\n\n")
          );
        }
      }
      /**
       * Utility function which asserts a SDL document is valid by throwing an error
       * if it is invalid.
       *
       * @internal
       */

      function assertValidSDLExtension(documentAST, schema) {
        var errors = validateSDL(documentAST, schema);

        if (errors.length !== 0) {
          throw new Error(
            errors
              .map(function(error) {
                return error.message;
              })
              .join("\n\n")
          );
        }
      }

      /***/
    },

    /***/ sriv: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      module.exports = {
        DEFAULT_HANDLE_KEY: ""
      };

      /***/
    },

    /***/ tNbq: /***/ function(module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       * @format
       */
      // flowlint ambiguous-object-type:error

      var _asyncToGenerator = __webpack_require__("yXPU");

      var invariant = __webpack_require__("OUqe");
      /**
       * The compiler profiler builds a "call graph" of high level operations as a
       * means of tracking time spent over the course of running the compiler.
       */

      var enabled = false;
      var traces = [
        {
          ph: "M",
          pid: 0,
          tid: 0,
          name: "process_name",
          args: {
            name: "relay-compiler"
          }
        },
        {
          ph: "M",
          pid: 0,
          tid: 0,
          name: "thread_name",
          args: {
            name: "relay-compiler"
          }
        }
      ];
      var stack = [];

      function enable() {
        enabled = true;
      }

      function getTraces() {
        return traces;
      }
      /**
       * Run the provided function as part of a stack profile.
       */

      function run(name, fn) {
        return instrument(fn, name)();
      }
      /**
       * Run the provided async function as part context in a stack profile.
       * See instrumentAsyncContext() for limitations and usage notes.
       */

      function asyncContext(name, fn) {
        return instrumentAsyncContext(fn, name)();
      }
      /**
       * Wait for the provided async operation as an async profile.
       */

      function waitFor(name, fn) {
        return instrumentWait(fn, name)();
      }
      /**
       * Return a new instrumented sync function to be part of a stack profile.
       *
       * This instruments synchronous functions to be displayed in a stack
       * visualization. To instrument async functions, see instrumentAsyncContext()
       * and instrumentWait().
       */

      function instrument(fn, name) {
        var _ref;

        if (!enabled) {
          return fn;
        }

        var profileName =
          (_ref =
            name !== null && name !== void 0
              ? name // $FlowFixMe[prop-missing] - Flow no longer considers statics of functions as any
              : fn.displayName) !== null && _ref !== void 0
            ? _ref
            : fn.name;

        var instrumented = function instrumented() {
          var traceId = start(profileName);

          try {
            return fn.apply(this, arguments);
          } finally {
            end(traceId);
          }
        };

        instrumented.displayName = profileName;
        return instrumented;
      }
      /**
       * Return a new instrumented async function which provides context for a stack.
       *
       * Because the resulting profiling information will be incorporated into a
       * stack visualization, the instrumented function must represent a distinct
       * region of time which does not overlap with any other async context.
       *
       * In other words, functions instrumented with instrumentAsyncContext must not
       * run in parallel via Promise.all().
       *
       * To instrument functions which will run in parallel, use instrumentWait().
       */

      function instrumentAsyncContext(fn, name) {
        var _ref2;

        if (!enabled) {
          return fn;
        }

        var profileName =
          (_ref2 =
            name !== null && name !== void 0
              ? name // $FlowFixMe[prop-missing] - Flow no longer considers statics of functions as any
              : fn.displayName) !== null && _ref2 !== void 0
            ? _ref2
            : fn.name;

        var instrumented = /*#__PURE__*/ (function() {
          var _instrumented = _asyncToGenerator(function*() {
            var traceId = start(profileName);

            try {
              return yield fn.apply(this, arguments);
            } finally {
              end(traceId);
            }
          });

          function instrumented() {
            return _instrumented.apply(this, arguments);
          }

          return instrumented;
        })();

        instrumented.displayName = profileName;
        return instrumented;
      }
      /**
       * Return a new instrumented function which performs an awaited async operation.
       *
       * The instrumented function is not included in the overall run time of the
       * compiler, instead it captures the time waiting on some asynchronous external
       * resource such as network or filesystem which are often run in parallel.
       */

      function instrumentWait(fn, name) {
        var _ref3;

        if (!enabled) {
          return fn;
        }

        var profileName =
          (_ref3 =
            name !== null && name !== void 0
              ? name // $FlowFixMe[prop-missing] - Flow no longer considers statics of functions as any
              : fn.displayName) !== null && _ref3 !== void 0
            ? _ref3
            : fn.name;

        var instrumented = /*#__PURE__*/ (function() {
          var _instrumented2 = _asyncToGenerator(function*() {
            var traceId = startWait(profileName);

            try {
              return yield fn.apply(this, arguments);
            } finally {
              end(traceId);
            }
          });

          function instrumented() {
            return _instrumented2.apply(this, arguments);
          }

          return instrumented;
        })();

        instrumented.displayName = profileName;
        return instrumented;
      }

      process.hrtime = () => null;

      var T_ZERO = process.hrtime(); // Return a Uint32 of microtime duration since program start.

      function microtime() {
        var hrtime = process.hrtime(T_ZERO); // eslint-disable-next-line no-bitwise

        return 0 | (hrtime[0] * 1e6 + Math.round(hrtime[1] / 1e3));
      }
      /**
       * Start a stack profile with a particular name, returns an ID to pass to end().
       *
       * Other profiles may start before this one ends, which will be represented as
       * nested operations, however all nested operations must end before this ends.
       *
       * In particular, be careful to end after errors.
       */

      function start(name) {
        var beginTrace = {
          ph: "B",
          name: name,
          pid: 0,
          tid: 0,
          ts: microtime()
        };
        traces.push(beginTrace);
        stack.push(beginTrace);
        return traces.length - 1;
      }

      var asyncID = 0;
      /**
       * Start an async wait profile with a particular name, returns an ID to pass
       * to end().
       *
       * Other profiles may start before this one ends, which will be represented as
       * nested operations, however all nested operations must end before this ends.
       *
       * In particular, be careful to end after errors.
       */

      function startWait(name) {
        traces.push({
          ph: "b",
          name: name,
          cat: "wait",
          id: asyncID++,
          pid: 0,
          tid: 0,
          ts: microtime()
        });
        return traces.length - 1;
      }

      function end(traceIdx) {
        var trace = traces[traceIdx];

        if (trace.ph === "b") {
          traces.push({
            ph: "e",
            cat: trace.cat,
            name: trace.name,
            id: trace.id,
            pid: trace.pid,
            tid: trace.tid,
            ts: microtime()
          });
          return;
        }

        !(trace.ph === "B") ? (false ? undefined : invariant(false)) : void 0;
        !(stack.pop() === trace)
          ? false
            ? undefined
            : invariant(false)
          : void 0;
        var prevTrace = traces[traces.length - 1];

        if (trace === prevTrace) {
          traces[traceIdx] = {
            ph: "X",
            name: trace.name,
            pid: trace.pid,
            tid: trace.tid,
            ts: trace.ts,
            dur: microtime() - trace.ts
          };
          return;
        }

        traces.push({
          ph: "E",
          name: trace.name,
          pid: trace.pid,
          tid: trace.tid,
          ts: microtime()
        });
      }

      module.exports = {
        enable: enable,
        getTraces: getTraces,
        run: run,
        asyncContext: asyncContext,
        waitFor: waitFor,
        instrument: instrument,
        instrumentAsyncContext: instrumentAsyncContext,
        instrumentWait: instrumentWait,
        start: start,
        startWait: startWait,
        end: end
      };

      /***/
    },

    /***/ tS0h: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var $isNaN = __webpack_require__("7qPd");

      // http://262.ecma-international.org/5.1/#sec-9.12

      module.exports = function SameValue(x, y) {
        if (x === y) {
          // 0 === -0, but they are not identical.
          if (x === 0) {
            return 1 / x === 1 / y;
          }
          return true;
        }
        return $isNaN(x) && $isNaN(y);
      };

      /***/
    },

    /***/ tieQ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;

      var _arrayFrom = _interopRequireDefault(__webpack_require__("DiUC"));

      var _didYouMean = _interopRequireDefault(__webpack_require__("lboY"));

      var _suggestionList = _interopRequireDefault(__webpack_require__("dHxA"));

      var _naturalCompare = _interopRequireDefault(__webpack_require__("qoX3"));

      var _GraphQLError = __webpack_require__("MafX");

      var _definition = __webpack_require__("mAVk");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Fields on correct type
       *
       * A GraphQL document is only valid if all fields selected are defined by the
       * parent type, or are an allowed meta field such as __typename.
       */
      function FieldsOnCorrectTypeRule(context) {
        return {
          Field: function Field(node) {
            var type = context.getParentType();

            if (type) {
              var fieldDef = context.getFieldDef();

              if (!fieldDef) {
                // This field doesn't exist, lets look for suggestions.
                var schema = context.getSchema();
                var fieldName = node.name.value; // First determine if there are any suggested types to condition on.

                var suggestion = (0, _didYouMean.default)(
                  "to use an inline fragment on",
                  getSuggestedTypeNames(schema, type, fieldName)
                ); // If there are no suggested types, then perhaps this was a typo?

                if (suggestion === "") {
                  suggestion = (0, _didYouMean.default)(
                    getSuggestedFieldNames(type, fieldName)
                  );
                } // Report an error, including helpful suggestions.

                context.reportError(
                  new _GraphQLError.GraphQLError(
                    'Cannot query field "'
                      .concat(fieldName, '" on type "')
                      .concat(type.name, '".') + suggestion,
                    node
                  )
                );
              }
            }
          }
        };
      }
      /**
       * Go through all of the implementations of type, as well as the interfaces that
       * they implement. If any of those types include the provided field, suggest them,
       * sorted by how often the type is referenced.
       */

      function getSuggestedTypeNames(schema, type, fieldName) {
        if (!(0, _definition.isAbstractType)(type)) {
          // Must be an Object type, which does not have possible fields.
          return [];
        }

        var suggestedTypes = new Set();
        var usageCount = Object.create(null);

        for (
          var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type);
          _i2 < _schema$getPossibleTy2.length;
          _i2++
        ) {
          var possibleType = _schema$getPossibleTy2[_i2];

          if (!possibleType.getFields()[fieldName]) {
            continue;
          } // This object type defines this field.

          suggestedTypes.add(possibleType);
          usageCount[possibleType.name] = 1;

          for (
            var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces();
            _i4 < _possibleType$getInte2.length;
            _i4++
          ) {
            var _usageCount$possibleI;

            var possibleInterface = _possibleType$getInte2[_i4];

            if (!possibleInterface.getFields()[fieldName]) {
              continue;
            } // This interface type defines this field.

            suggestedTypes.add(possibleInterface);
            usageCount[possibleInterface.name] =
              ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==
                null && _usageCount$possibleI !== void 0
                ? _usageCount$possibleI
                : 0) + 1;
          }
        }

        return (0, _arrayFrom.default)(suggestedTypes)
          .sort(function(typeA, typeB) {
            // Suggest both interface and object types based on how common they are.
            var usageCountDiff =
              usageCount[typeB.name] - usageCount[typeA.name];

            if (usageCountDiff !== 0) {
              return usageCountDiff;
            } // Suggest super types first followed by subtypes

            if (
              (0, _definition.isInterfaceType)(typeA) &&
              schema.isSubType(typeA, typeB)
            ) {
              return -1;
            }

            if (
              (0, _definition.isInterfaceType)(typeB) &&
              schema.isSubType(typeB, typeA)
            ) {
              return 1;
            }

            return (0, _naturalCompare.default)(typeA.name, typeB.name);
          })
          .map(function(x) {
            return x.name;
          });
      }
      /**
       * For the field name provided, determine if there are any similar field names
       * that may be the result of a typo.
       */

      function getSuggestedFieldNames(type, fieldName) {
        if (
          (0, _definition.isObjectType)(type) ||
          (0, _definition.isInterfaceType)(type)
        ) {
          var possibleFieldNames = Object.keys(type.getFields());
          return (0, _suggestionList.default)(fieldName, possibleFieldNames);
        } // Otherwise, must be a Union type, which does not define fields.

        return [];
      }

      /***/
    },

    /***/ tkfO: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inspect;

      var _nodejsCustomInspectSymbol = _interopRequireDefault(
        __webpack_require__("6fdH")
      );

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (
          typeof Symbol === "function" &&
          typeof Symbol.iterator === "symbol"
        ) {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          };
        }
        return _typeof(obj);
      }

      var MAX_ARRAY_LENGTH = 10;
      var MAX_RECURSIVE_DEPTH = 2;
      /**
       * Used to print values in error messages.
       */

      function inspect(value) {
        return formatValue(value, []);
      }

      function formatValue(value, seenValues) {
        switch (_typeof(value)) {
          case "string":
            return JSON.stringify(value);

          case "function":
            return value.name
              ? "[function ".concat(value.name, "]")
              : "[function]";

          case "object":
            if (value === null) {
              return "null";
            }

            return formatObjectValue(value, seenValues);

          default:
            return String(value);
        }
      }

      function formatObjectValue(value, previouslySeenValues) {
        if (previouslySeenValues.indexOf(value) !== -1) {
          return "[Circular]";
        }

        var seenValues = [].concat(previouslySeenValues, [value]);
        var customInspectFn = getCustomFn(value);

        if (customInspectFn !== undefined) {
          var customValue = customInspectFn.call(value); // check for infinite recursion

          if (customValue !== value) {
            return typeof customValue === "string"
              ? customValue
              : formatValue(customValue, seenValues);
          }
        } else if (Array.isArray(value)) {
          return formatArray(value, seenValues);
        }

        return formatObject(value, seenValues);
      }

      function formatObject(object, seenValues) {
        var keys = Object.keys(object);

        if (keys.length === 0) {
          return "{}";
        }

        if (seenValues.length > MAX_RECURSIVE_DEPTH) {
          return "[" + getObjectTag(object) + "]";
        }

        var properties = keys.map(function(key) {
          var value = formatValue(object[key], seenValues);
          return key + ": " + value;
        });
        return "{ " + properties.join(", ") + " }";
      }

      function formatArray(array, seenValues) {
        if (array.length === 0) {
          return "[]";
        }

        if (seenValues.length > MAX_RECURSIVE_DEPTH) {
          return "[Array]";
        }

        var len = Math.min(MAX_ARRAY_LENGTH, array.length);
        var remaining = array.length - len;
        var items = [];

        for (var i = 0; i < len; ++i) {
          items.push(formatValue(array[i], seenValues));
        }

        if (remaining === 1) {
          items.push("... 1 more item");
        } else if (remaining > 1) {
          items.push("... ".concat(remaining, " more items"));
        }

        return "[" + items.join(", ") + "]";
      }

      function getCustomFn(object) {
        var customInspectFn =
          object[String(_nodejsCustomInspectSymbol.default)];

        if (typeof customInspectFn === "function") {
          return customInspectFn;
        }

        if (typeof object.inspect === "function") {
          return object.inspect;
        }
      }

      function getObjectTag(object) {
        var tag = Object.prototype.toString
          .call(object)
          .replace(/^\[object /, "")
          .replace(/]$/, "");

        if (tag === "Object" && typeof object.constructor === "function") {
          var name = object.constructor.name;

          if (typeof name === "string" && name !== "") {
            return name;
          }
        }

        return tag;
      }

      /***/
    },

    /***/ tqCx: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.visit = visit;
      exports.visitInParallel = visitInParallel;
      exports.getVisitFn = getVisitFn;
      exports.BREAK = exports.QueryDocumentKeys = void 0;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _ast = __webpack_require__("fZhc");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      var QueryDocumentKeys = {
        Name: [],
        Document: ["definitions"],
        OperationDefinition: [
          "name",
          "variableDefinitions",
          "directives",
          "selectionSet"
        ],
        VariableDefinition: ["variable", "type", "defaultValue", "directives"],
        Variable: ["name"],
        SelectionSet: ["selections"],
        Field: ["alias", "name", "arguments", "directives", "selectionSet"],
        Argument: ["name", "value"],
        FragmentSpread: ["name", "directives"],
        InlineFragment: ["typeCondition", "directives", "selectionSet"],
        FragmentDefinition: [
          "name", // Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "variableDefinitions",
          "typeCondition",
          "directives",
          "selectionSet"
        ],
        IntValue: [],
        FloatValue: [],
        StringValue: [],
        BooleanValue: [],
        NullValue: [],
        EnumValue: [],
        ListValue: ["values"],
        ObjectValue: ["fields"],
        ObjectField: ["name", "value"],
        Directive: ["name", "arguments"],
        NamedType: ["name"],
        ListType: ["type"],
        NonNullType: ["type"],
        SchemaDefinition: ["description", "directives", "operationTypes"],
        OperationTypeDefinition: ["type"],
        ScalarTypeDefinition: ["description", "name", "directives"],
        ObjectTypeDefinition: [
          "description",
          "name",
          "interfaces",
          "directives",
          "fields"
        ],
        FieldDefinition: [
          "description",
          "name",
          "arguments",
          "type",
          "directives"
        ],
        InputValueDefinition: [
          "description",
          "name",
          "type",
          "defaultValue",
          "directives"
        ],
        InterfaceTypeDefinition: [
          "description",
          "name",
          "interfaces",
          "directives",
          "fields"
        ],
        UnionTypeDefinition: ["description", "name", "directives", "types"],
        EnumTypeDefinition: ["description", "name", "directives", "values"],
        EnumValueDefinition: ["description", "name", "directives"],
        InputObjectTypeDefinition: [
          "description",
          "name",
          "directives",
          "fields"
        ],
        DirectiveDefinition: ["description", "name", "arguments", "locations"],
        SchemaExtension: ["directives", "operationTypes"],
        ScalarTypeExtension: ["name", "directives"],
        ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
        InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
        UnionTypeExtension: ["name", "directives", "types"],
        EnumTypeExtension: ["name", "directives", "values"],
        InputObjectTypeExtension: ["name", "directives", "fields"]
      };
      exports.QueryDocumentKeys = QueryDocumentKeys;
      var BREAK = Object.freeze({});
      /**
       * visit() will walk through an AST using a depth-first traversal, calling
       * the visitor's enter function at each node in the traversal, and calling the
       * leave function after visiting that node and all of its child nodes.
       *
       * By returning different values from the enter and leave functions, the
       * behavior of the visitor can be altered, including skipping over a sub-tree of
       * the AST (by returning false), editing the AST by returning a value or null
       * to remove the value, or to stop the whole traversal by returning BREAK.
       *
       * When using visit() to edit an AST, the original AST will not be modified, and
       * a new version of the AST with the changes applied will be returned from the
       * visit function.
       *
       *     const editedAST = visit(ast, {
       *       enter(node, key, parent, path, ancestors) {
       *         // @return
       *         //   undefined: no action
       *         //   false: skip visiting this node
       *         //   visitor.BREAK: stop visiting altogether
       *         //   null: delete this node
       *         //   any value: replace this node with the returned value
       *       },
       *       leave(node, key, parent, path, ancestors) {
       *         // @return
       *         //   undefined: no action
       *         //   false: no action
       *         //   visitor.BREAK: stop visiting altogether
       *         //   null: delete this node
       *         //   any value: replace this node with the returned value
       *       }
       *     });
       *
       * Alternatively to providing enter() and leave() functions, a visitor can
       * instead provide functions named the same as the kinds of AST nodes, or
       * enter/leave visitors at a named key, leading to four permutations of the
       * visitor API:
       *
       * 1) Named visitors triggered when entering a node of a specific kind.
       *
       *     visit(ast, {
       *       Kind(node) {
       *         // enter the "Kind" node
       *       }
       *     })
       *
       * 2) Named visitors that trigger upon entering and leaving a node of
       *    a specific kind.
       *
       *     visit(ast, {
       *       Kind: {
       *         enter(node) {
       *           // enter the "Kind" node
       *         }
       *         leave(node) {
       *           // leave the "Kind" node
       *         }
       *       }
       *     })
       *
       * 3) Generic visitors that trigger upon entering and leaving any node.
       *
       *     visit(ast, {
       *       enter(node) {
       *         // enter any node
       *       },
       *       leave(node) {
       *         // leave any node
       *       }
       *     })
       *
       * 4) Parallel visitors for entering and leaving nodes of a specific kind.
       *
       *     visit(ast, {
       *       enter: {
       *         Kind(node) {
       *           // enter the "Kind" node
       *         }
       *       },
       *       leave: {
       *         Kind(node) {
       *           // leave the "Kind" node
       *         }
       *       }
       *     })
       */

      exports.BREAK = BREAK;

      function visit(root, visitor) {
        var visitorKeys =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : QueryDocumentKeys;

        /* eslint-disable no-undef-init */
        var stack = undefined;
        var inArray = Array.isArray(root);
        var keys = [root];
        var index = -1;
        var edits = [];
        var node = undefined;
        var key = undefined;
        var parent = undefined;
        var path = [];
        var ancestors = [];
        var newRoot = root;
        /* eslint-enable no-undef-init */

        do {
          index++;
          var isLeaving = index === keys.length;
          var isEdited = isLeaving && edits.length !== 0;

          if (isLeaving) {
            key = ancestors.length === 0 ? undefined : path[path.length - 1];
            node = parent;
            parent = ancestors.pop();

            if (isEdited) {
              if (inArray) {
                node = node.slice();
              } else {
                var clone = {};

                for (
                  var _i2 = 0, _Object$keys2 = Object.keys(node);
                  _i2 < _Object$keys2.length;
                  _i2++
                ) {
                  var k = _Object$keys2[_i2];
                  clone[k] = node[k];
                }

                node = clone;
              }

              var editOffset = 0;

              for (var ii = 0; ii < edits.length; ii++) {
                var editKey = edits[ii][0];
                var editValue = edits[ii][1];

                if (inArray) {
                  editKey -= editOffset;
                }

                if (inArray && editValue === null) {
                  node.splice(editKey, 1);
                  editOffset++;
                } else {
                  node[editKey] = editValue;
                }
              }
            }

            index = stack.index;
            keys = stack.keys;
            edits = stack.edits;
            inArray = stack.inArray;
            stack = stack.prev;
          } else {
            key = parent ? (inArray ? index : keys[index]) : undefined;
            node = parent ? parent[key] : newRoot;

            if (node === null || node === undefined) {
              continue;
            }

            if (parent) {
              path.push(key);
            }
          }

          var result = void 0;

          if (!Array.isArray(node)) {
            if (!(0, _ast.isNode)(node)) {
              throw new Error(
                "Invalid AST Node: ".concat((0, _inspect.default)(node), ".")
              );
            }

            var visitFn = getVisitFn(visitor, node.kind, isLeaving);

            if (visitFn) {
              result = visitFn.call(
                visitor,
                node,
                key,
                parent,
                path,
                ancestors
              );

              if (result === BREAK) {
                break;
              }

              if (result === false) {
                if (!isLeaving) {
                  path.pop();
                  continue;
                }
              } else if (result !== undefined) {
                edits.push([key, result]);

                if (!isLeaving) {
                  if ((0, _ast.isNode)(result)) {
                    node = result;
                  } else {
                    path.pop();
                    continue;
                  }
                }
              }
            }
          }

          if (result === undefined && isEdited) {
            edits.push([key, node]);
          }

          if (isLeaving) {
            path.pop();
          } else {
            var _visitorKeys$node$kin;

            stack = {
              inArray: inArray,
              index: index,
              keys: keys,
              edits: edits,
              prev: stack
            };
            inArray = Array.isArray(node);
            keys = inArray
              ? node
              : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null &&
                _visitorKeys$node$kin !== void 0
              ? _visitorKeys$node$kin
              : [];
            index = -1;
            edits = [];

            if (parent) {
              ancestors.push(parent);
            }

            parent = node;
          }
        } while (stack !== undefined);

        if (edits.length !== 0) {
          newRoot = edits[edits.length - 1][1];
        }

        return newRoot;
      }
      /**
       * Creates a new visitor instance which delegates to many visitors to run in
       * parallel. Each visitor will be visited for each node before moving on.
       *
       * If a prior visitor edits a node, no following visitors will see that node.
       */

      function visitInParallel(visitors) {
        var skipping = new Array(visitors.length);
        return {
          enter: function enter(node) {
            for (var i = 0; i < visitors.length; i++) {
              if (skipping[i] == null) {
                var fn = getVisitFn(
                  visitors[i],
                  node.kind,
                  /* isLeaving */
                  false
                );

                if (fn) {
                  var result = fn.apply(visitors[i], arguments);

                  if (result === false) {
                    skipping[i] = node;
                  } else if (result === BREAK) {
                    skipping[i] = BREAK;
                  } else if (result !== undefined) {
                    return result;
                  }
                }
              }
            }
          },
          leave: function leave(node) {
            for (var i = 0; i < visitors.length; i++) {
              if (skipping[i] == null) {
                var fn = getVisitFn(
                  visitors[i],
                  node.kind,
                  /* isLeaving */
                  true
                );

                if (fn) {
                  var result = fn.apply(visitors[i], arguments);

                  if (result === BREAK) {
                    skipping[i] = BREAK;
                  } else if (result !== undefined && result !== false) {
                    return result;
                  }
                }
              } else if (skipping[i] === node) {
                skipping[i] = null;
              }
            }
          }
        };
      }
      /**
       * Given a visitor instance, if it is leaving or not, and a node kind, return
       * the function the visitor runtime should call.
       */

      function getVisitFn(visitor, kind, isLeaving) {
        var kindVisitor = visitor[kind];

        if (kindVisitor) {
          if (!isLeaving && typeof kindVisitor === "function") {
            // { Kind() {} }
            return kindVisitor;
          }

          var kindSpecificVisitor = isLeaving
            ? kindVisitor.leave
            : kindVisitor.enter;

          if (typeof kindSpecificVisitor === "function") {
            // { Kind: { enter() {}, leave() {} } }
            return kindSpecificVisitor;
          }
        } else {
          var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

          if (specificVisitor) {
            if (typeof specificVisitor === "function") {
              // { enter() {}, leave() {} }
              return specificVisitor;
            }

            var specificKindVisitor = specificVisitor[kind];

            if (typeof specificKindVisitor === "function") {
              // { enter: { Kind() {} }, leave: { Kind() {} } }
              return specificKindVisitor;
            }
          }
        }
      }

      /***/
    },

    /***/ uKhV: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "version", {
        enumerable: true,
        get: function get() {
          return _version.version;
        }
      });
      Object.defineProperty(exports, "versionInfo", {
        enumerable: true,
        get: function get() {
          return _version.versionInfo;
        }
      });
      Object.defineProperty(exports, "graphql", {
        enumerable: true,
        get: function get() {
          return _graphql.graphql;
        }
      });
      Object.defineProperty(exports, "graphqlSync", {
        enumerable: true,
        get: function get() {
          return _graphql.graphqlSync;
        }
      });
      Object.defineProperty(exports, "GraphQLSchema", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLSchema;
        }
      });
      Object.defineProperty(exports, "GraphQLDirective", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLScalarType", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLScalarType;
        }
      });
      Object.defineProperty(exports, "GraphQLObjectType", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLObjectType;
        }
      });
      Object.defineProperty(exports, "GraphQLInterfaceType", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLInterfaceType;
        }
      });
      Object.defineProperty(exports, "GraphQLUnionType", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLUnionType;
        }
      });
      Object.defineProperty(exports, "GraphQLEnumType", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLEnumType;
        }
      });
      Object.defineProperty(exports, "GraphQLInputObjectType", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLInputObjectType;
        }
      });
      Object.defineProperty(exports, "GraphQLList", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLList;
        }
      });
      Object.defineProperty(exports, "GraphQLNonNull", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLNonNull;
        }
      });
      Object.defineProperty(exports, "specifiedScalarTypes", {
        enumerable: true,
        get: function get() {
          return _index.specifiedScalarTypes;
        }
      });
      Object.defineProperty(exports, "GraphQLInt", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLInt;
        }
      });
      Object.defineProperty(exports, "GraphQLFloat", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLFloat;
        }
      });
      Object.defineProperty(exports, "GraphQLString", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLString;
        }
      });
      Object.defineProperty(exports, "GraphQLBoolean", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLBoolean;
        }
      });
      Object.defineProperty(exports, "GraphQLID", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLID;
        }
      });
      Object.defineProperty(exports, "specifiedDirectives", {
        enumerable: true,
        get: function get() {
          return _index.specifiedDirectives;
        }
      });
      Object.defineProperty(exports, "GraphQLIncludeDirective", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLIncludeDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLSkipDirective", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLSkipDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLDeprecatedDirective;
        }
      });
      Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
        enumerable: true,
        get: function get() {
          return _index.GraphQLSpecifiedByDirective;
        }
      });
      Object.defineProperty(exports, "TypeKind", {
        enumerable: true,
        get: function get() {
          return _index.TypeKind;
        }
      });
      Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
        enumerable: true,
        get: function get() {
          return _index.DEFAULT_DEPRECATION_REASON;
        }
      });
      Object.defineProperty(exports, "introspectionTypes", {
        enumerable: true,
        get: function get() {
          return _index.introspectionTypes;
        }
      });
      Object.defineProperty(exports, "__Schema", {
        enumerable: true,
        get: function get() {
          return _index.__Schema;
        }
      });
      Object.defineProperty(exports, "__Directive", {
        enumerable: true,
        get: function get() {
          return _index.__Directive;
        }
      });
      Object.defineProperty(exports, "__DirectiveLocation", {
        enumerable: true,
        get: function get() {
          return _index.__DirectiveLocation;
        }
      });
      Object.defineProperty(exports, "__Type", {
        enumerable: true,
        get: function get() {
          return _index.__Type;
        }
      });
      Object.defineProperty(exports, "__Field", {
        enumerable: true,
        get: function get() {
          return _index.__Field;
        }
      });
      Object.defineProperty(exports, "__InputValue", {
        enumerable: true,
        get: function get() {
          return _index.__InputValue;
        }
      });
      Object.defineProperty(exports, "__EnumValue", {
        enumerable: true,
        get: function get() {
          return _index.__EnumValue;
        }
      });
      Object.defineProperty(exports, "__TypeKind", {
        enumerable: true,
        get: function get() {
          return _index.__TypeKind;
        }
      });
      Object.defineProperty(exports, "SchemaMetaFieldDef", {
        enumerable: true,
        get: function get() {
          return _index.SchemaMetaFieldDef;
        }
      });
      Object.defineProperty(exports, "TypeMetaFieldDef", {
        enumerable: true,
        get: function get() {
          return _index.TypeMetaFieldDef;
        }
      });
      Object.defineProperty(exports, "TypeNameMetaFieldDef", {
        enumerable: true,
        get: function get() {
          return _index.TypeNameMetaFieldDef;
        }
      });
      Object.defineProperty(exports, "isSchema", {
        enumerable: true,
        get: function get() {
          return _index.isSchema;
        }
      });
      Object.defineProperty(exports, "isDirective", {
        enumerable: true,
        get: function get() {
          return _index.isDirective;
        }
      });
      Object.defineProperty(exports, "isType", {
        enumerable: true,
        get: function get() {
          return _index.isType;
        }
      });
      Object.defineProperty(exports, "isScalarType", {
        enumerable: true,
        get: function get() {
          return _index.isScalarType;
        }
      });
      Object.defineProperty(exports, "isObjectType", {
        enumerable: true,
        get: function get() {
          return _index.isObjectType;
        }
      });
      Object.defineProperty(exports, "isInterfaceType", {
        enumerable: true,
        get: function get() {
          return _index.isInterfaceType;
        }
      });
      Object.defineProperty(exports, "isUnionType", {
        enumerable: true,
        get: function get() {
          return _index.isUnionType;
        }
      });
      Object.defineProperty(exports, "isEnumType", {
        enumerable: true,
        get: function get() {
          return _index.isEnumType;
        }
      });
      Object.defineProperty(exports, "isInputObjectType", {
        enumerable: true,
        get: function get() {
          return _index.isInputObjectType;
        }
      });
      Object.defineProperty(exports, "isListType", {
        enumerable: true,
        get: function get() {
          return _index.isListType;
        }
      });
      Object.defineProperty(exports, "isNonNullType", {
        enumerable: true,
        get: function get() {
          return _index.isNonNullType;
        }
      });
      Object.defineProperty(exports, "isInputType", {
        enumerable: true,
        get: function get() {
          return _index.isInputType;
        }
      });
      Object.defineProperty(exports, "isOutputType", {
        enumerable: true,
        get: function get() {
          return _index.isOutputType;
        }
      });
      Object.defineProperty(exports, "isLeafType", {
        enumerable: true,
        get: function get() {
          return _index.isLeafType;
        }
      });
      Object.defineProperty(exports, "isCompositeType", {
        enumerable: true,
        get: function get() {
          return _index.isCompositeType;
        }
      });
      Object.defineProperty(exports, "isAbstractType", {
        enumerable: true,
        get: function get() {
          return _index.isAbstractType;
        }
      });
      Object.defineProperty(exports, "isWrappingType", {
        enumerable: true,
        get: function get() {
          return _index.isWrappingType;
        }
      });
      Object.defineProperty(exports, "isNullableType", {
        enumerable: true,
        get: function get() {
          return _index.isNullableType;
        }
      });
      Object.defineProperty(exports, "isNamedType", {
        enumerable: true,
        get: function get() {
          return _index.isNamedType;
        }
      });
      Object.defineProperty(exports, "isRequiredArgument", {
        enumerable: true,
        get: function get() {
          return _index.isRequiredArgument;
        }
      });
      Object.defineProperty(exports, "isRequiredInputField", {
        enumerable: true,
        get: function get() {
          return _index.isRequiredInputField;
        }
      });
      Object.defineProperty(exports, "isSpecifiedScalarType", {
        enumerable: true,
        get: function get() {
          return _index.isSpecifiedScalarType;
        }
      });
      Object.defineProperty(exports, "isIntrospectionType", {
        enumerable: true,
        get: function get() {
          return _index.isIntrospectionType;
        }
      });
      Object.defineProperty(exports, "isSpecifiedDirective", {
        enumerable: true,
        get: function get() {
          return _index.isSpecifiedDirective;
        }
      });
      Object.defineProperty(exports, "assertSchema", {
        enumerable: true,
        get: function get() {
          return _index.assertSchema;
        }
      });
      Object.defineProperty(exports, "assertDirective", {
        enumerable: true,
        get: function get() {
          return _index.assertDirective;
        }
      });
      Object.defineProperty(exports, "assertType", {
        enumerable: true,
        get: function get() {
          return _index.assertType;
        }
      });
      Object.defineProperty(exports, "assertScalarType", {
        enumerable: true,
        get: function get() {
          return _index.assertScalarType;
        }
      });
      Object.defineProperty(exports, "assertObjectType", {
        enumerable: true,
        get: function get() {
          return _index.assertObjectType;
        }
      });
      Object.defineProperty(exports, "assertInterfaceType", {
        enumerable: true,
        get: function get() {
          return _index.assertInterfaceType;
        }
      });
      Object.defineProperty(exports, "assertUnionType", {
        enumerable: true,
        get: function get() {
          return _index.assertUnionType;
        }
      });
      Object.defineProperty(exports, "assertEnumType", {
        enumerable: true,
        get: function get() {
          return _index.assertEnumType;
        }
      });
      Object.defineProperty(exports, "assertInputObjectType", {
        enumerable: true,
        get: function get() {
          return _index.assertInputObjectType;
        }
      });
      Object.defineProperty(exports, "assertListType", {
        enumerable: true,
        get: function get() {
          return _index.assertListType;
        }
      });
      Object.defineProperty(exports, "assertNonNullType", {
        enumerable: true,
        get: function get() {
          return _index.assertNonNullType;
        }
      });
      Object.defineProperty(exports, "assertInputType", {
        enumerable: true,
        get: function get() {
          return _index.assertInputType;
        }
      });
      Object.defineProperty(exports, "assertOutputType", {
        enumerable: true,
        get: function get() {
          return _index.assertOutputType;
        }
      });
      Object.defineProperty(exports, "assertLeafType", {
        enumerable: true,
        get: function get() {
          return _index.assertLeafType;
        }
      });
      Object.defineProperty(exports, "assertCompositeType", {
        enumerable: true,
        get: function get() {
          return _index.assertCompositeType;
        }
      });
      Object.defineProperty(exports, "assertAbstractType", {
        enumerable: true,
        get: function get() {
          return _index.assertAbstractType;
        }
      });
      Object.defineProperty(exports, "assertWrappingType", {
        enumerable: true,
        get: function get() {
          return _index.assertWrappingType;
        }
      });
      Object.defineProperty(exports, "assertNullableType", {
        enumerable: true,
        get: function get() {
          return _index.assertNullableType;
        }
      });
      Object.defineProperty(exports, "assertNamedType", {
        enumerable: true,
        get: function get() {
          return _index.assertNamedType;
        }
      });
      Object.defineProperty(exports, "getNullableType", {
        enumerable: true,
        get: function get() {
          return _index.getNullableType;
        }
      });
      Object.defineProperty(exports, "getNamedType", {
        enumerable: true,
        get: function get() {
          return _index.getNamedType;
        }
      });
      Object.defineProperty(exports, "validateSchema", {
        enumerable: true,
        get: function get() {
          return _index.validateSchema;
        }
      });
      Object.defineProperty(exports, "assertValidSchema", {
        enumerable: true,
        get: function get() {
          return _index.assertValidSchema;
        }
      });
      Object.defineProperty(exports, "Token", {
        enumerable: true,
        get: function get() {
          return _index2.Token;
        }
      });
      Object.defineProperty(exports, "Source", {
        enumerable: true,
        get: function get() {
          return _index2.Source;
        }
      });
      Object.defineProperty(exports, "Location", {
        enumerable: true,
        get: function get() {
          return _index2.Location;
        }
      });
      Object.defineProperty(exports, "getLocation", {
        enumerable: true,
        get: function get() {
          return _index2.getLocation;
        }
      });
      Object.defineProperty(exports, "printLocation", {
        enumerable: true,
        get: function get() {
          return _index2.printLocation;
        }
      });
      Object.defineProperty(exports, "printSourceLocation", {
        enumerable: true,
        get: function get() {
          return _index2.printSourceLocation;
        }
      });
      Object.defineProperty(exports, "Lexer", {
        enumerable: true,
        get: function get() {
          return _index2.Lexer;
        }
      });
      Object.defineProperty(exports, "TokenKind", {
        enumerable: true,
        get: function get() {
          return _index2.TokenKind;
        }
      });
      Object.defineProperty(exports, "parse", {
        enumerable: true,
        get: function get() {
          return _index2.parse;
        }
      });
      Object.defineProperty(exports, "parseValue", {
        enumerable: true,
        get: function get() {
          return _index2.parseValue;
        }
      });
      Object.defineProperty(exports, "parseType", {
        enumerable: true,
        get: function get() {
          return _index2.parseType;
        }
      });
      Object.defineProperty(exports, "print", {
        enumerable: true,
        get: function get() {
          return _index2.print;
        }
      });
      Object.defineProperty(exports, "visit", {
        enumerable: true,
        get: function get() {
          return _index2.visit;
        }
      });
      Object.defineProperty(exports, "visitInParallel", {
        enumerable: true,
        get: function get() {
          return _index2.visitInParallel;
        }
      });
      Object.defineProperty(exports, "getVisitFn", {
        enumerable: true,
        get: function get() {
          return _index2.getVisitFn;
        }
      });
      Object.defineProperty(exports, "BREAK", {
        enumerable: true,
        get: function get() {
          return _index2.BREAK;
        }
      });
      Object.defineProperty(exports, "Kind", {
        enumerable: true,
        get: function get() {
          return _index2.Kind;
        }
      });
      Object.defineProperty(exports, "DirectiveLocation", {
        enumerable: true,
        get: function get() {
          return _index2.DirectiveLocation;
        }
      });
      Object.defineProperty(exports, "isDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isExecutableDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isExecutableDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isSelectionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isSelectionNode;
        }
      });
      Object.defineProperty(exports, "isValueNode", {
        enumerable: true,
        get: function get() {
          return _index2.isValueNode;
        }
      });
      Object.defineProperty(exports, "isTypeNode", {
        enumerable: true,
        get: function get() {
          return _index2.isTypeNode;
        }
      });
      Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isTypeSystemDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isTypeDefinitionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isTypeDefinitionNode;
        }
      });
      Object.defineProperty(exports, "isTypeSystemExtensionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isTypeSystemExtensionNode;
        }
      });
      Object.defineProperty(exports, "isTypeExtensionNode", {
        enumerable: true,
        get: function get() {
          return _index2.isTypeExtensionNode;
        }
      });
      Object.defineProperty(exports, "execute", {
        enumerable: true,
        get: function get() {
          return _index3.execute;
        }
      });
      Object.defineProperty(exports, "executeSync", {
        enumerable: true,
        get: function get() {
          return _index3.executeSync;
        }
      });
      Object.defineProperty(exports, "defaultFieldResolver", {
        enumerable: true,
        get: function get() {
          return _index3.defaultFieldResolver;
        }
      });
      Object.defineProperty(exports, "defaultTypeResolver", {
        enumerable: true,
        get: function get() {
          return _index3.defaultTypeResolver;
        }
      });
      Object.defineProperty(exports, "responsePathAsArray", {
        enumerable: true,
        get: function get() {
          return _index3.responsePathAsArray;
        }
      });
      Object.defineProperty(exports, "getDirectiveValues", {
        enumerable: true,
        get: function get() {
          return _index3.getDirectiveValues;
        }
      });
      Object.defineProperty(exports, "subscribe", {
        enumerable: true,
        get: function get() {
          return _index4.subscribe;
        }
      });
      Object.defineProperty(exports, "createSourceEventStream", {
        enumerable: true,
        get: function get() {
          return _index4.createSourceEventStream;
        }
      });
      Object.defineProperty(exports, "validate", {
        enumerable: true,
        get: function get() {
          return _index5.validate;
        }
      });
      Object.defineProperty(exports, "ValidationContext", {
        enumerable: true,
        get: function get() {
          return _index5.ValidationContext;
        }
      });
      Object.defineProperty(exports, "specifiedRules", {
        enumerable: true,
        get: function get() {
          return _index5.specifiedRules;
        }
      });
      Object.defineProperty(exports, "ExecutableDefinitionsRule", {
        enumerable: true,
        get: function get() {
          return _index5.ExecutableDefinitionsRule;
        }
      });
      Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
        enumerable: true,
        get: function get() {
          return _index5.FieldsOnCorrectTypeRule;
        }
      });
      Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
        enumerable: true,
        get: function get() {
          return _index5.FragmentsOnCompositeTypesRule;
        }
      });
      Object.defineProperty(exports, "KnownArgumentNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.KnownArgumentNamesRule;
        }
      });
      Object.defineProperty(exports, "KnownDirectivesRule", {
        enumerable: true,
        get: function get() {
          return _index5.KnownDirectivesRule;
        }
      });
      Object.defineProperty(exports, "KnownFragmentNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.KnownFragmentNamesRule;
        }
      });
      Object.defineProperty(exports, "KnownTypeNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.KnownTypeNamesRule;
        }
      });
      Object.defineProperty(exports, "LoneAnonymousOperationRule", {
        enumerable: true,
        get: function get() {
          return _index5.LoneAnonymousOperationRule;
        }
      });
      Object.defineProperty(exports, "NoFragmentCyclesRule", {
        enumerable: true,
        get: function get() {
          return _index5.NoFragmentCyclesRule;
        }
      });
      Object.defineProperty(exports, "NoUndefinedVariablesRule", {
        enumerable: true,
        get: function get() {
          return _index5.NoUndefinedVariablesRule;
        }
      });
      Object.defineProperty(exports, "NoUnusedFragmentsRule", {
        enumerable: true,
        get: function get() {
          return _index5.NoUnusedFragmentsRule;
        }
      });
      Object.defineProperty(exports, "NoUnusedVariablesRule", {
        enumerable: true,
        get: function get() {
          return _index5.NoUnusedVariablesRule;
        }
      });
      Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
        enumerable: true,
        get: function get() {
          return _index5.OverlappingFieldsCanBeMergedRule;
        }
      });
      Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
        enumerable: true,
        get: function get() {
          return _index5.PossibleFragmentSpreadsRule;
        }
      });
      Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
        enumerable: true,
        get: function get() {
          return _index5.ProvidedRequiredArgumentsRule;
        }
      });
      Object.defineProperty(exports, "ScalarLeafsRule", {
        enumerable: true,
        get: function get() {
          return _index5.ScalarLeafsRule;
        }
      });
      Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
        enumerable: true,
        get: function get() {
          return _index5.SingleFieldSubscriptionsRule;
        }
      });
      Object.defineProperty(exports, "UniqueArgumentNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueArgumentNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueDirectivesPerLocationRule;
        }
      });
      Object.defineProperty(exports, "UniqueFragmentNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueFragmentNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueInputFieldNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueOperationNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueOperationNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueVariableNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueVariableNamesRule;
        }
      });
      Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
        enumerable: true,
        get: function get() {
          return _index5.ValuesOfCorrectTypeRule;
        }
      });
      Object.defineProperty(exports, "VariablesAreInputTypesRule", {
        enumerable: true,
        get: function get() {
          return _index5.VariablesAreInputTypesRule;
        }
      });
      Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
        enumerable: true,
        get: function get() {
          return _index5.VariablesInAllowedPositionRule;
        }
      });
      Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
        enumerable: true,
        get: function get() {
          return _index5.LoneSchemaDefinitionRule;
        }
      });
      Object.defineProperty(exports, "UniqueOperationTypesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueOperationTypesRule;
        }
      });
      Object.defineProperty(exports, "UniqueTypeNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueTypeNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueEnumValueNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueFieldDefinitionNamesRule;
        }
      });
      Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
        enumerable: true,
        get: function get() {
          return _index5.UniqueDirectiveNamesRule;
        }
      });
      Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
        enumerable: true,
        get: function get() {
          return _index5.PossibleTypeExtensionsRule;
        }
      });
      Object.defineProperty(exports, "NoDeprecatedCustomRule", {
        enumerable: true,
        get: function get() {
          return _index5.NoDeprecatedCustomRule;
        }
      });
      Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
        enumerable: true,
        get: function get() {
          return _index5.NoSchemaIntrospectionCustomRule;
        }
      });
      Object.defineProperty(exports, "GraphQLError", {
        enumerable: true,
        get: function get() {
          return _index6.GraphQLError;
        }
      });
      Object.defineProperty(exports, "syntaxError", {
        enumerable: true,
        get: function get() {
          return _index6.syntaxError;
        }
      });
      Object.defineProperty(exports, "locatedError", {
        enumerable: true,
        get: function get() {
          return _index6.locatedError;
        }
      });
      Object.defineProperty(exports, "printError", {
        enumerable: true,
        get: function get() {
          return _index6.printError;
        }
      });
      Object.defineProperty(exports, "formatError", {
        enumerable: true,
        get: function get() {
          return _index6.formatError;
        }
      });
      Object.defineProperty(exports, "getIntrospectionQuery", {
        enumerable: true,
        get: function get() {
          return _index7.getIntrospectionQuery;
        }
      });
      Object.defineProperty(exports, "getOperationAST", {
        enumerable: true,
        get: function get() {
          return _index7.getOperationAST;
        }
      });
      Object.defineProperty(exports, "getOperationRootType", {
        enumerable: true,
        get: function get() {
          return _index7.getOperationRootType;
        }
      });
      Object.defineProperty(exports, "introspectionFromSchema", {
        enumerable: true,
        get: function get() {
          return _index7.introspectionFromSchema;
        }
      });
      Object.defineProperty(exports, "buildClientSchema", {
        enumerable: true,
        get: function get() {
          return _index7.buildClientSchema;
        }
      });
      Object.defineProperty(exports, "buildASTSchema", {
        enumerable: true,
        get: function get() {
          return _index7.buildASTSchema;
        }
      });
      Object.defineProperty(exports, "buildSchema", {
        enumerable: true,
        get: function get() {
          return _index7.buildSchema;
        }
      });
      Object.defineProperty(exports, "getDescription", {
        enumerable: true,
        get: function get() {
          return _index7.getDescription;
        }
      });
      Object.defineProperty(exports, "extendSchema", {
        enumerable: true,
        get: function get() {
          return _index7.extendSchema;
        }
      });
      Object.defineProperty(exports, "lexicographicSortSchema", {
        enumerable: true,
        get: function get() {
          return _index7.lexicographicSortSchema;
        }
      });
      Object.defineProperty(exports, "printSchema", {
        enumerable: true,
        get: function get() {
          return _index7.printSchema;
        }
      });
      Object.defineProperty(exports, "printType", {
        enumerable: true,
        get: function get() {
          return _index7.printType;
        }
      });
      Object.defineProperty(exports, "printIntrospectionSchema", {
        enumerable: true,
        get: function get() {
          return _index7.printIntrospectionSchema;
        }
      });
      Object.defineProperty(exports, "typeFromAST", {
        enumerable: true,
        get: function get() {
          return _index7.typeFromAST;
        }
      });
      Object.defineProperty(exports, "valueFromAST", {
        enumerable: true,
        get: function get() {
          return _index7.valueFromAST;
        }
      });
      Object.defineProperty(exports, "valueFromASTUntyped", {
        enumerable: true,
        get: function get() {
          return _index7.valueFromASTUntyped;
        }
      });
      Object.defineProperty(exports, "astFromValue", {
        enumerable: true,
        get: function get() {
          return _index7.astFromValue;
        }
      });
      Object.defineProperty(exports, "TypeInfo", {
        enumerable: true,
        get: function get() {
          return _index7.TypeInfo;
        }
      });
      Object.defineProperty(exports, "visitWithTypeInfo", {
        enumerable: true,
        get: function get() {
          return _index7.visitWithTypeInfo;
        }
      });
      Object.defineProperty(exports, "coerceInputValue", {
        enumerable: true,
        get: function get() {
          return _index7.coerceInputValue;
        }
      });
      Object.defineProperty(exports, "concatAST", {
        enumerable: true,
        get: function get() {
          return _index7.concatAST;
        }
      });
      Object.defineProperty(exports, "separateOperations", {
        enumerable: true,
        get: function get() {
          return _index7.separateOperations;
        }
      });
      Object.defineProperty(exports, "stripIgnoredCharacters", {
        enumerable: true,
        get: function get() {
          return _index7.stripIgnoredCharacters;
        }
      });
      Object.defineProperty(exports, "isEqualType", {
        enumerable: true,
        get: function get() {
          return _index7.isEqualType;
        }
      });
      Object.defineProperty(exports, "isTypeSubTypeOf", {
        enumerable: true,
        get: function get() {
          return _index7.isTypeSubTypeOf;
        }
      });
      Object.defineProperty(exports, "doTypesOverlap", {
        enumerable: true,
        get: function get() {
          return _index7.doTypesOverlap;
        }
      });
      Object.defineProperty(exports, "assertValidName", {
        enumerable: true,
        get: function get() {
          return _index7.assertValidName;
        }
      });
      Object.defineProperty(exports, "isValidNameError", {
        enumerable: true,
        get: function get() {
          return _index7.isValidNameError;
        }
      });
      Object.defineProperty(exports, "BreakingChangeType", {
        enumerable: true,
        get: function get() {
          return _index7.BreakingChangeType;
        }
      });
      Object.defineProperty(exports, "DangerousChangeType", {
        enumerable: true,
        get: function get() {
          return _index7.DangerousChangeType;
        }
      });
      Object.defineProperty(exports, "findBreakingChanges", {
        enumerable: true,
        get: function get() {
          return _index7.findBreakingChanges;
        }
      });
      Object.defineProperty(exports, "findDangerousChanges", {
        enumerable: true,
        get: function get() {
          return _index7.findDangerousChanges;
        }
      });
      Object.defineProperty(exports, "findDeprecatedUsages", {
        enumerable: true,
        get: function get() {
          return _index7.findDeprecatedUsages;
        }
      });

      var _version = __webpack_require__("LY+O");

      var _graphql = __webpack_require__("pTxg");

      var _index = __webpack_require__("8FyL");

      var _index2 = __webpack_require__("VPs/");

      var _index3 = __webpack_require__("R1Ah");

      var _index4 = __webpack_require__("DBuX");

      var _index5 = __webpack_require__("LQ/U");

      var _index6 = __webpack_require__("PUII");

      var _index7 = __webpack_require__("OAzr");

      /***/
    },

    /***/ uam5: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var has = __webpack_require__("oNNP");
      var $TypeError = GetIntrinsic("%TypeError%");

      module.exports = function IsPropertyDescriptor(ES, Desc) {
        if (ES.Type(Desc) !== "Object") {
          return false;
        }
        var allowed = {
          "[[Configurable]]": true,
          "[[Enumerable]]": true,
          "[[Get]]": true,
          "[[Set]]": true,
          "[[Value]]": true,
          "[[Writable]]": true
        };

        for (var key in Desc) {
          // eslint-disable-line no-restricted-syntax
          if (has(Desc, key) && !allowed[key]) {
            return false;
          }
        }

        if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
          throw new $TypeError(
            "Property Descriptors may not be both accessor and data descriptors"
          );
        }
        return true;
      };

      /***/
    },

    /***/ ugY3: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("5CxI");

      var $construct = GetIntrinsic("%Reflect.construct%", true);

      var DefinePropertyOrThrow = __webpack_require__("zkip");
      try {
        DefinePropertyOrThrow({}, "", { "[[Get]]": function() {} });
      } catch (e) {
        // Accessor properties aren't supported
        DefinePropertyOrThrow = null;
      }

      // https://ecma-international.org/ecma-262/6.0/#sec-isconstructor

      if (DefinePropertyOrThrow && $construct) {
        var isConstructorMarker = {};
        var badArrayLike = {};
        DefinePropertyOrThrow(badArrayLike, "length", {
          "[[Get]]": function() {
            throw isConstructorMarker;
          },
          "[[Enumerable]]": true
        });

        module.exports = function IsConstructor(argument) {
          try {
            // `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:
            $construct(argument, badArrayLike);
          } catch (err) {
            return err === isConstructorMarker;
          }
        };
      } else {
        module.exports = function IsConstructor(argument) {
          // unfortunately there's no way to truly check this without try/catch `new argument` in old environments
          return typeof argument === "function" && !!argument.prototype;
        };
      }

      /***/
    },

    /***/ vvR6: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.formatError = formatError;

      var _devAssert = _interopRequireDefault(__webpack_require__("wtV1"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Given a GraphQLError, format it according to the rules described by the
       * Response Format, Errors section of the GraphQL Specification.
       */
      function formatError(error) {
        var _error$message;

        error ||
          (0, _devAssert.default)(0, "Received null or undefined error.");
        var message =
          (_error$message = error.message) !== null && _error$message !== void 0
            ? _error$message
            : "An unknown error occurred.";
        var locations = error.locations;
        var path = error.path;
        var extensions = error.extensions;
        return extensions
          ? {
              message: message,
              locations: locations,
              path: path,
              extensions: extensions
            }
          : {
              message: message,
              locations: locations,
              path: path
            };
      }
      /**
       * @see https://github.com/graphql/graphql-spec/blob/master/spec/Section%207%20--%20Response.md#errors
       */

      /***/
    },

    /***/ wb9o: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });
      exports.upperCaseFirst = void 0;
      /**
       * Upper case the first character of an input string.
       */
      function upperCaseFirst(input) {
        return input.charAt(0).toUpperCase() + input.substr(1);
      }
      exports.upperCaseFirst = upperCaseFirst;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ wbUw: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", { value: true });

      const pluginHelpers = __webpack_require__("ac+X");
      const graphql = __webpack_require__("uKhV");
      const utils = __webpack_require__("kOHh");
      const merge = __webpack_require__("RdJF");

      async function executePlugin(options, plugin) {
        if (!plugin || !plugin.plugin || typeof plugin.plugin !== "function") {
          throw new pluginHelpers.DetailedError(
            `Invalid Custom Plugin "${options.name}"`,
            `
        Plugin ${options.name} does not export a valid JS object with "plugin" function.
  
        Make sure your custom plugin is written in the following form:
  
        module.exports = {
          plugin: (schema, documents, config) => {
            return 'my-custom-plugin-content';
          },
        };
        `
          );
        }
        const outputSchema =
          options.schemaAst ||
          graphql.buildASTSchema(options.schema, options.config);
        const documents = options.documents || [];
        const pluginContext = options.pluginContext || {};
        if (plugin.validate && typeof plugin.validate === "function") {
          try {
            // FIXME: Sync validate signature with plugin signature
            await plugin.validate(
              outputSchema,
              documents,
              options.config,
              options.outputFilename,
              options.allPlugins,
              pluginContext
            );
          } catch (e) {
            throw new pluginHelpers.DetailedError(
              `Plugin "${options.name}" validation failed:`,
              `
            ${e.message}
          `
            );
          }
        }
        return Promise.resolve(
          plugin.plugin(
            outputSchema,
            documents,
            typeof options.config === "object"
              ? { ...options.config }
              : options.config,
            {
              outputFile: options.outputFilename,
              allPlugins: options.allPlugins,
              pluginContext
            }
          )
        );
      }

      async function codegen(options) {
        const documents = options.documents || [];
        if (documents.length > 0 && !options.skipDocumentsValidation) {
          validateDuplicateDocuments(documents);
        }
        const pluginPackages = Object.keys(options.pluginMap).map(
          key => options.pluginMap[key]
        );
        if (!options.schemaAst) {
          options.schemaAst = merge.mergeSchemas({
            schemas: [],
            typeDefs: [options.schema],
            convertExtensions: true,
            assumeValid: true,
            assumeValidSDL: true,
            ...options.config
          });
        }
        // merged schema with parts added by plugins
        let schemaChanged = false;
        let schemaAst = pluginPackages.reduce((schemaAst, plugin) => {
          const addToSchema =
            typeof plugin.addToSchema === "function"
              ? plugin.addToSchema(options.config)
              : plugin.addToSchema;
          if (!addToSchema) {
            return schemaAst;
          }
          return merge.mergeSchemas({
            schemas: [schemaAst],
            typeDefs: [addToSchema]
          });
        }, options.schemaAst);
        const federationInConfig = pickFlag("federation", options.config);
        const isFederation = prioritize(federationInConfig, false);
        if (
          isFederation &&
          !schemaAst.getDirective("external") &&
          !schemaAst.getDirective("requires") &&
          !schemaAst.getDirective("provides") &&
          !schemaAst.getDirective("key")
        ) {
          schemaChanged = true;
          schemaAst = merge.mergeSchemas({
            schemas: [schemaAst],
            typeDefs: [pluginHelpers.federationSpec],
            convertExtensions: true,
            assumeValid: true,
            assumeValidSDL: true
          });
        }
        if (schemaChanged) {
          options.schema = graphql.parse(
            utils.printSchemaWithDirectives(schemaAst)
          );
        }
        const skipDocumentValidation =
          typeof options.config === "object" &&
          !Array.isArray(options.config) &&
          options.config.skipDocumentsValidation;
        if (
          options.schemaAst &&
          documents.length > 0 &&
          !skipDocumentValidation
        ) {
          const extraFragments =
            options.config && options.config.externalFragments
              ? options.config.externalFragments
              : [];
          const errors = await utils.validateGraphQlDocuments(
            options.schemaAst,
            [
              ...documents,
              ...extraFragments.map(f => ({
                location: f.importFrom,
                document: { kind: graphql.Kind.DOCUMENT, definitions: [f.node] }
              }))
            ]
          );
          utils.checkValidationErrors(errors);
        }
        const prepend = new Set();
        const append = new Set();
        const output = await Promise.all(
          options.plugins.map(async plugin => {
            const name = Object.keys(plugin)[0];
            const pluginPackage = options.pluginMap[name];
            const pluginConfig = plugin[name] || {};
            const execConfig =
              typeof pluginConfig !== "object"
                ? pluginConfig
                : {
                    ...options.config,
                    ...pluginConfig
                  };
            const result = await executePlugin(
              {
                name,
                config: execConfig,
                parentConfig: options.config,
                schema: options.schema,
                schemaAst,
                documents: options.documents,
                outputFilename: options.filename,
                allPlugins: options.plugins,
                skipDocumentsValidation: options.skipDocumentsValidation,
                pluginContext: options.pluginContext
              },
              pluginPackage
            );
            if (typeof result === "string") {
              return result || "";
            } else if (pluginHelpers.isComplexPluginOutput(result)) {
              if (result.append && result.append.length > 0) {
                for (const item of result.append) {
                  if (item) {
                    append.add(item);
                  }
                }
              }
              if (result.prepend && result.prepend.length > 0) {
                for (const item of result.prepend) {
                  if (item) {
                    prepend.add(item);
                  }
                }
              }
              return result.content || "";
            }
            return "";
          })
        );
        return [
          ...sortPrependValues(Array.from(prepend.values())),
          ...output,
          ...Array.from(append.values())
        ]
          .filter(Boolean)
          .join("\n");
      }
      function resolveCompareValue(a) {
        if (
          a.startsWith("/*") ||
          a.startsWith("//") ||
          a.startsWith(" *") ||
          a.startsWith(" */") ||
          a.startsWith("*/")
        ) {
          return 0;
        } else if (a.startsWith("package")) {
          return 1;
        } else if (a.startsWith("import")) {
          return 2;
        } else {
          return 3;
        }
      }
      function sortPrependValues(values) {
        return values.sort((a, b) => {
          const aV = resolveCompareValue(a);
          const bV = resolveCompareValue(b);
          if (aV < bV) {
            return -1;
          }
          if (aV > bV) {
            return 1;
          }
          return 0;
        });
      }
      function validateDuplicateDocuments(files) {
        // duplicated names
        const definitionMap = {};
        function addDefinition(file, node, deduplicatedDefinitions) {
          if (typeof node.name !== "undefined") {
            if (!definitionMap[node.kind]) {
              definitionMap[node.kind] = {};
            }
            if (!definitionMap[node.kind][node.name.value]) {
              definitionMap[node.kind][node.name.value] = {
                paths: new Set(),
                contents: new Set()
              };
            }
            const definitionKindMap = definitionMap[node.kind];
            const length = definitionKindMap[node.name.value].contents.size;
            definitionKindMap[node.name.value].paths.add(file.location);
            definitionKindMap[node.name.value].contents.add(
              graphql.print(node)
            );
            if (length === definitionKindMap[node.name.value].contents.size) {
              return null;
            }
          }
          return deduplicatedDefinitions.add(node);
        }
        files.forEach(file => {
          const deduplicatedDefinitions = new Set();
          graphql.visit(file.document, {
            OperationDefinition(node) {
              addDefinition(file, node, deduplicatedDefinitions);
            },
            FragmentDefinition(node) {
              addDefinition(file, node, deduplicatedDefinitions);
            }
          });
          file.document.definitions = Array.from(deduplicatedDefinitions);
        });
        const kinds = Object.keys(definitionMap);
        kinds.forEach(kind => {
          const definitionKindMap = definitionMap[kind];
          const names = Object.keys(definitionKindMap);
          if (names.length) {
            const duplicated = names.filter(
              name => definitionKindMap[name].contents.size > 1
            );
            if (!duplicated.length) {
              return;
            }
            const list = duplicated
              .map(name =>
                `
        * ${name} found in:
          ${[...definitionKindMap[name].paths]
            .map(filepath => {
              return `
              - ${filepath}
            `.trimRight();
            })
            .join("")}
    `.trimRight()
              )
              .join("");
            const definitionKindName = kind
              .replace("Definition", "")
              .toLowerCase();
            throw new pluginHelpers.DetailedError(
              `Not all ${definitionKindName}s have an unique name: ${duplicated.join(
                ", "
              )}`,
              `
          Not all ${definitionKindName}s have an unique name
          ${list}
        `
            );
          }
        });
      }
      function isObjectMap(obj) {
        return obj && typeof obj === "object" && !Array.isArray(obj);
      }
      function prioritize(...values) {
        const picked = values.find(val => typeof val === "boolean");
        if (typeof picked !== "boolean") {
          return values[values.length - 1];
        }
        return picked;
      }
      function pickFlag(flag, config) {
        return isObjectMap(config) ? config[flag] : undefined;
      }

      exports.codegen = codegen;
      exports.executePlugin = executePlugin;
      //# sourceMappingURL=index.cjs.js.map

      /***/
    },

    /***/ wiWP: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.KnownDirectivesRule = KnownDirectivesRule;

      var _inspect = _interopRequireDefault(__webpack_require__("tkfO"));

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _GraphQLError = __webpack_require__("MafX");

      var _kinds = __webpack_require__("xaK5");

      var _directiveLocation = __webpack_require__("R1IW");

      var _directives = __webpack_require__("L9+1");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Known directives
       *
       * A GraphQL document is only valid if all `@directives` are known by the
       * schema and legally positioned.
       */
      function KnownDirectivesRule(context) {
        var locationsMap = Object.create(null);
        var schema = context.getSchema();
        var definedDirectives = schema
          ? schema.getDirectives()
          : _directives.specifiedDirectives;

        for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
          var directive = definedDirectives[_i2];
          locationsMap[directive.name] = directive.locations;
        }

        var astDefinitions = context.getDocument().definitions;

        for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
          var def = astDefinitions[_i4];

          if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
            locationsMap[def.name.value] = def.locations.map(function(name) {
              return name.value;
            });
          }
        }

        return {
          Directive: function Directive(node, _key, _parent, _path, ancestors) {
            var name = node.name.value;
            var locations = locationsMap[name];

            if (!locations) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Unknown directive "@'.concat(name, '".'),
                  node
                )
              );
              return;
            }

            var candidateLocation = getDirectiveLocationForASTPath(ancestors);

            if (
              candidateLocation &&
              locations.indexOf(candidateLocation) === -1
            ) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Directive "@'
                    .concat(name, '" may not be used on ')
                    .concat(candidateLocation, "."),
                  node
                )
              );
            }
          }
        };
      }

      function getDirectiveLocationForASTPath(ancestors) {
        var appliedTo = ancestors[ancestors.length - 1];
        !Array.isArray(appliedTo) || (0, _invariant.default)(0);

        switch (appliedTo.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            return getDirectiveLocationForOperation(appliedTo.operation);

          case _kinds.Kind.FIELD:
            return _directiveLocation.DirectiveLocation.FIELD;

          case _kinds.Kind.FRAGMENT_SPREAD:
            return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;

          case _kinds.Kind.INLINE_FRAGMENT:
            return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;

          case _kinds.Kind.FRAGMENT_DEFINITION:
            return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;

          case _kinds.Kind.VARIABLE_DEFINITION:
            return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;

          case _kinds.Kind.SCHEMA_DEFINITION:
          case _kinds.Kind.SCHEMA_EXTENSION:
            return _directiveLocation.DirectiveLocation.SCHEMA;

          case _kinds.Kind.SCALAR_TYPE_DEFINITION:
          case _kinds.Kind.SCALAR_TYPE_EXTENSION:
            return _directiveLocation.DirectiveLocation.SCALAR;

          case _kinds.Kind.OBJECT_TYPE_DEFINITION:
          case _kinds.Kind.OBJECT_TYPE_EXTENSION:
            return _directiveLocation.DirectiveLocation.OBJECT;

          case _kinds.Kind.FIELD_DEFINITION:
            return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;

          case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
          case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
            return _directiveLocation.DirectiveLocation.INTERFACE;

          case _kinds.Kind.UNION_TYPE_DEFINITION:
          case _kinds.Kind.UNION_TYPE_EXTENSION:
            return _directiveLocation.DirectiveLocation.UNION;

          case _kinds.Kind.ENUM_TYPE_DEFINITION:
          case _kinds.Kind.ENUM_TYPE_EXTENSION:
            return _directiveLocation.DirectiveLocation.ENUM;

          case _kinds.Kind.ENUM_VALUE_DEFINITION:
            return _directiveLocation.DirectiveLocation.ENUM_VALUE;

          case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
            return _directiveLocation.DirectiveLocation.INPUT_OBJECT;

          case _kinds.Kind.INPUT_VALUE_DEFINITION: {
            var parentNode = ancestors[ancestors.length - 3];
            return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION
              ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION
              : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
          }
        }
      }

      function getDirectiveLocationForOperation(operation) {
        switch (operation) {
          case "query":
            return _directiveLocation.DirectiveLocation.QUERY;

          case "mutation":
            return _directiveLocation.DirectiveLocation.MUTATION;

          case "subscription":
            return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
        } // istanbul ignore next (Not reachable. All possible types have been considered)

        false ||
          (0, _invariant.default)(
            0,
            "Unexpected operation: " + (0, _inspect.default)(operation)
          );
      }

      /***/
    },

    /***/ wimG: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
      exports.Lexer = void 0;

      var _syntaxError = __webpack_require__("glbf");

      var _ast = __webpack_require__("fZhc");

      var _tokenKind = __webpack_require__("XfSa");

      var _blockString = __webpack_require__("yQbh");

      /**
       * Given a Source object, creates a Lexer for that source.
       * A Lexer is a stateful stream generator in that every time
       * it is advanced, it returns the next token in the Source. Assuming the
       * source lexes, the final Token emitted by the lexer will be of kind
       * EOF, after which the lexer will repeatedly return the same EOF token
       * whenever called.
       */
      var Lexer = /*#__PURE__*/ (function() {
        /**
         * The previously focused non-ignored token.
         */

        /**
         * The currently focused non-ignored token.
         */

        /**
         * The (1-indexed) line containing the current token.
         */

        /**
         * The character offset at which the current line begins.
         */
        function Lexer(source) {
          var startOfFileToken = new _ast.Token(
            _tokenKind.TokenKind.SOF,
            0,
            0,
            0,
            0,
            null
          );
          this.source = source;
          this.lastToken = startOfFileToken;
          this.token = startOfFileToken;
          this.line = 1;
          this.lineStart = 0;
        }
        /**
         * Advances the token stream to the next non-ignored token.
         */

        var _proto = Lexer.prototype;

        _proto.advance = function advance() {
          this.lastToken = this.token;
          var token = (this.token = this.lookahead());
          return token;
        };
        /**
         * Looks ahead and returns the next non-ignored token, but does not change
         * the state of Lexer.
         */

        _proto.lookahead = function lookahead() {
          var token = this.token;

          if (token.kind !== _tokenKind.TokenKind.EOF) {
            do {
              var _token$next;

              // Note: next is only mutable during parsing, so we cast to allow this.
              token =
                (_token$next = token.next) !== null && _token$next !== void 0
                  ? _token$next
                  : (token.next = readToken(this, token));
            } while (token.kind === _tokenKind.TokenKind.COMMENT);
          }

          return token;
        };

        return Lexer;
      })();
      /**
       * @internal
       */

      exports.Lexer = Lexer;

      function isPunctuatorTokenKind(kind) {
        return (
          kind === _tokenKind.TokenKind.BANG ||
          kind === _tokenKind.TokenKind.DOLLAR ||
          kind === _tokenKind.TokenKind.AMP ||
          kind === _tokenKind.TokenKind.PAREN_L ||
          kind === _tokenKind.TokenKind.PAREN_R ||
          kind === _tokenKind.TokenKind.SPREAD ||
          kind === _tokenKind.TokenKind.COLON ||
          kind === _tokenKind.TokenKind.EQUALS ||
          kind === _tokenKind.TokenKind.AT ||
          kind === _tokenKind.TokenKind.BRACKET_L ||
          kind === _tokenKind.TokenKind.BRACKET_R ||
          kind === _tokenKind.TokenKind.BRACE_L ||
          kind === _tokenKind.TokenKind.PIPE ||
          kind === _tokenKind.TokenKind.BRACE_R
        );
      }

      function printCharCode(code) {
        return (
          // NaN/undefined represents access beyond the end of the file.
          isNaN(code)
            ? _tokenKind.TokenKind.EOF // Trust JSON for ASCII.
            : code < 0x007f
            ? JSON.stringify(String.fromCharCode(code)) // Otherwise print the escaped form.
            : '"\\u'.concat(
                ("00" + code.toString(16).toUpperCase()).slice(-4),
                '"'
              )
        );
      }
      /**
       * Gets the next token from the source starting at the given position.
       *
       * This skips over whitespace until it finds the next lexable token, then lexes
       * punctuators immediately or calls the appropriate helper function for more
       * complicated tokens.
       */

      function readToken(lexer, prev) {
        var source = lexer.source;
        var body = source.body;
        var bodyLength = body.length;
        var pos = prev.end;

        while (pos < bodyLength) {
          var code = body.charCodeAt(pos);
          var _line = lexer.line;

          var _col = 1 + pos - lexer.lineStart; // SourceCharacter

          switch (code) {
            case 0xfeff: // <BOM>

            case 9: //   \t

            case 32: //  <space>

            case 44:
              //  ,
              ++pos;
              continue;

            case 10:
              //  \n
              ++pos;
              ++lexer.line;
              lexer.lineStart = pos;
              continue;

            case 13:
              //  \r
              if (body.charCodeAt(pos + 1) === 10) {
                pos += 2;
              } else {
                ++pos;
              }

              ++lexer.line;
              lexer.lineStart = pos;
              continue;

            case 33:
              //  !
              return new _ast.Token(
                _tokenKind.TokenKind.BANG,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 35:
              //  #
              return readComment(source, pos, _line, _col, prev);

            case 36:
              //  $
              return new _ast.Token(
                _tokenKind.TokenKind.DOLLAR,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 38:
              //  &
              return new _ast.Token(
                _tokenKind.TokenKind.AMP,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 40:
              //  (
              return new _ast.Token(
                _tokenKind.TokenKind.PAREN_L,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 41:
              //  )
              return new _ast.Token(
                _tokenKind.TokenKind.PAREN_R,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 46:
              //  .
              if (
                body.charCodeAt(pos + 1) === 46 &&
                body.charCodeAt(pos + 2) === 46
              ) {
                return new _ast.Token(
                  _tokenKind.TokenKind.SPREAD,
                  pos,
                  pos + 3,
                  _line,
                  _col,
                  prev
                );
              }

              break;

            case 58:
              //  :
              return new _ast.Token(
                _tokenKind.TokenKind.COLON,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 61:
              //  =
              return new _ast.Token(
                _tokenKind.TokenKind.EQUALS,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 64:
              //  @
              return new _ast.Token(
                _tokenKind.TokenKind.AT,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 91:
              //  [
              return new _ast.Token(
                _tokenKind.TokenKind.BRACKET_L,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 93:
              //  ]
              return new _ast.Token(
                _tokenKind.TokenKind.BRACKET_R,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 123:
              // {
              return new _ast.Token(
                _tokenKind.TokenKind.BRACE_L,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 124:
              // |
              return new _ast.Token(
                _tokenKind.TokenKind.PIPE,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 125:
              // }
              return new _ast.Token(
                _tokenKind.TokenKind.BRACE_R,
                pos,
                pos + 1,
                _line,
                _col,
                prev
              );

            case 34:
              //  "
              if (
                body.charCodeAt(pos + 1) === 34 &&
                body.charCodeAt(pos + 2) === 34
              ) {
                return readBlockString(source, pos, _line, _col, prev, lexer);
              }

              return readString(source, pos, _line, _col, prev);

            case 45: //  -

            case 48: //  0

            case 49: //  1

            case 50: //  2

            case 51: //  3

            case 52: //  4

            case 53: //  5

            case 54: //  6

            case 55: //  7

            case 56: //  8

            case 57:
              //  9
              return readNumber(source, pos, code, _line, _col, prev);

            case 65: //  A

            case 66: //  B

            case 67: //  C

            case 68: //  D

            case 69: //  E

            case 70: //  F

            case 71: //  G

            case 72: //  H

            case 73: //  I

            case 74: //  J

            case 75: //  K

            case 76: //  L

            case 77: //  M

            case 78: //  N

            case 79: //  O

            case 80: //  P

            case 81: //  Q

            case 82: //  R

            case 83: //  S

            case 84: //  T

            case 85: //  U

            case 86: //  V

            case 87: //  W

            case 88: //  X

            case 89: //  Y

            case 90: //  Z

            case 95: //  _

            case 97: //  a

            case 98: //  b

            case 99: //  c

            case 100: // d

            case 101: // e

            case 102: // f

            case 103: // g

            case 104: // h

            case 105: // i

            case 106: // j

            case 107: // k

            case 108: // l

            case 109: // m

            case 110: // n

            case 111: // o

            case 112: // p

            case 113: // q

            case 114: // r

            case 115: // s

            case 116: // t

            case 117: // u

            case 118: // v

            case 119: // w

            case 120: // x

            case 121: // y

            case 122:
              // z
              return readName(source, pos, _line, _col, prev);
          }

          throw (0, _syntaxError.syntaxError)(
            source,
            pos,
            unexpectedCharacterMessage(code)
          );
        }

        var line = lexer.line;
        var col = 1 + pos - lexer.lineStart;
        return new _ast.Token(
          _tokenKind.TokenKind.EOF,
          bodyLength,
          bodyLength,
          line,
          col,
          prev
        );
      }
      /**
       * Report a message that an unexpected character was encountered.
       */

      function unexpectedCharacterMessage(code) {
        if (
          code < 0x0020 &&
          code !== 0x0009 &&
          code !== 0x000a &&
          code !== 0x000d
        ) {
          return "Cannot contain the invalid character ".concat(
            printCharCode(code),
            "."
          );
        }

        if (code === 39) {
          // '
          return "Unexpected single quote character ('), did you mean to use a double quote (\")?";
        }

        return "Cannot parse the unexpected character ".concat(
          printCharCode(code),
          "."
        );
      }
      /**
       * Reads a comment token from the source file.
       *
       * #[\u0009\u0020-\uFFFF]*
       */

      function readComment(source, start, line, col, prev) {
        var body = source.body;
        var code;
        var position = start;

        do {
          code = body.charCodeAt(++position);
        } while (
          !isNaN(code) && // SourceCharacter but not LineTerminator
          (code > 0x001f || code === 0x0009)
        );

        return new _ast.Token(
          _tokenKind.TokenKind.COMMENT,
          start,
          position,
          line,
          col,
          prev,
          body.slice(start + 1, position)
        );
      }
      /**
       * Reads a number token from the source file, either a float
       * or an int depending on whether a decimal point appears.
       *
       * Int:   -?(0|[1-9][0-9]*)
       * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
       */

      function readNumber(source, start, firstCode, line, col, prev) {
        var body = source.body;
        var code = firstCode;
        var position = start;
        var isFloat = false;

        if (code === 45) {
          // -
          code = body.charCodeAt(++position);
        }

        if (code === 48) {
          // 0
          code = body.charCodeAt(++position);

          if (code >= 48 && code <= 57) {
            throw (0, _syntaxError.syntaxError)(
              source,
              position,
              "Invalid number, unexpected digit after 0: ".concat(
                printCharCode(code),
                "."
              )
            );
          }
        } else {
          position = readDigits(source, position, code);
          code = body.charCodeAt(position);
        }

        if (code === 46) {
          // .
          isFloat = true;
          code = body.charCodeAt(++position);
          position = readDigits(source, position, code);
          code = body.charCodeAt(position);
        }

        if (code === 69 || code === 101) {
          // E e
          isFloat = true;
          code = body.charCodeAt(++position);

          if (code === 43 || code === 45) {
            // + -
            code = body.charCodeAt(++position);
          }

          position = readDigits(source, position, code);
          code = body.charCodeAt(position);
        } // Numbers cannot be followed by . or NameStart

        if (code === 46 || isNameStart(code)) {
          throw (0, _syntaxError.syntaxError)(
            source,
            position,
            "Invalid number, expected digit but got: ".concat(
              printCharCode(code),
              "."
            )
          );
        }

        return new _ast.Token(
          isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT,
          start,
          position,
          line,
          col,
          prev,
          body.slice(start, position)
        );
      }
      /**
       * Returns the new position in the source after reading digits.
       */

      function readDigits(source, start, firstCode) {
        var body = source.body;
        var position = start;
        var code = firstCode;

        if (code >= 48 && code <= 57) {
          // 0 - 9
          do {
            code = body.charCodeAt(++position);
          } while (code >= 48 && code <= 57); // 0 - 9

          return position;
        }

        throw (0, _syntaxError.syntaxError)(
          source,
          position,
          "Invalid number, expected digit but got: ".concat(
            printCharCode(code),
            "."
          )
        );
      }
      /**
       * Reads a string token from the source file.
       *
       * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
       */

      function readString(source, start, line, col, prev) {
        var body = source.body;
        var position = start + 1;
        var chunkStart = position;
        var code = 0;
        var value = "";

        while (
          position < body.length &&
          !isNaN((code = body.charCodeAt(position))) && // not LineTerminator
          code !== 0x000a &&
          code !== 0x000d
        ) {
          // Closing Quote (")
          if (code === 34) {
            value += body.slice(chunkStart, position);
            return new _ast.Token(
              _tokenKind.TokenKind.STRING,
              start,
              position + 1,
              line,
              col,
              prev,
              value
            );
          } // SourceCharacter

          if (code < 0x0020 && code !== 0x0009) {
            throw (0, _syntaxError.syntaxError)(
              source,
              position,
              "Invalid character within String: ".concat(
                printCharCode(code),
                "."
              )
            );
          }

          ++position;

          if (code === 92) {
            // \
            value += body.slice(chunkStart, position - 1);
            code = body.charCodeAt(position);

            switch (code) {
              case 34:
                value += '"';
                break;

              case 47:
                value += "/";
                break;

              case 92:
                value += "\\";
                break;

              case 98:
                value += "\b";
                break;

              case 102:
                value += "\f";
                break;

              case 110:
                value += "\n";
                break;

              case 114:
                value += "\r";
                break;

              case 116:
                value += "\t";
                break;

              case 117: {
                // uXXXX
                var charCode = uniCharCode(
                  body.charCodeAt(position + 1),
                  body.charCodeAt(position + 2),
                  body.charCodeAt(position + 3),
                  body.charCodeAt(position + 4)
                );

                if (charCode < 0) {
                  var invalidSequence = body.slice(position + 1, position + 5);
                  throw (0, _syntaxError.syntaxError)(
                    source,
                    position,
                    "Invalid character escape sequence: \\u".concat(
                      invalidSequence,
                      "."
                    )
                  );
                }

                value += String.fromCharCode(charCode);
                position += 4;
                break;
              }

              default:
                throw (0, _syntaxError.syntaxError)(
                  source,
                  position,
                  "Invalid character escape sequence: \\".concat(
                    String.fromCharCode(code),
                    "."
                  )
                );
            }

            ++position;
            chunkStart = position;
          }
        }

        throw (0, _syntaxError.syntaxError)(
          source,
          position,
          "Unterminated string."
        );
      }
      /**
       * Reads a block string token from the source file.
       *
       * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
       */

      function readBlockString(source, start, line, col, prev, lexer) {
        var body = source.body;
        var position = start + 3;
        var chunkStart = position;
        var code = 0;
        var rawValue = "";

        while (
          position < body.length &&
          !isNaN((code = body.charCodeAt(position)))
        ) {
          // Closing Triple-Quote (""")
          if (
            code === 34 &&
            body.charCodeAt(position + 1) === 34 &&
            body.charCodeAt(position + 2) === 34
          ) {
            rawValue += body.slice(chunkStart, position);
            return new _ast.Token(
              _tokenKind.TokenKind.BLOCK_STRING,
              start,
              position + 3,
              line,
              col,
              prev,
              (0, _blockString.dedentBlockStringValue)(rawValue)
            );
          } // SourceCharacter

          if (
            code < 0x0020 &&
            code !== 0x0009 &&
            code !== 0x000a &&
            code !== 0x000d
          ) {
            throw (0, _syntaxError.syntaxError)(
              source,
              position,
              "Invalid character within String: ".concat(
                printCharCode(code),
                "."
              )
            );
          }

          if (code === 10) {
            // new line
            ++position;
            ++lexer.line;
            lexer.lineStart = position;
          } else if (code === 13) {
            // carriage return
            if (body.charCodeAt(position + 1) === 10) {
              position += 2;
            } else {
              ++position;
            }

            ++lexer.line;
            lexer.lineStart = position;
          } else if (
            // Escape Triple-Quote (\""")
            code === 92 &&
            body.charCodeAt(position + 1) === 34 &&
            body.charCodeAt(position + 2) === 34 &&
            body.charCodeAt(position + 3) === 34
          ) {
            rawValue += body.slice(chunkStart, position) + '"""';
            position += 4;
            chunkStart = position;
          } else {
            ++position;
          }
        }

        throw (0, _syntaxError.syntaxError)(
          source,
          position,
          "Unterminated string."
        );
      }
      /**
       * Converts four hexadecimal chars to the integer that the
       * string represents. For example, uniCharCode('0','0','0','f')
       * will return 15, and uniCharCode('0','0','f','f') returns 255.
       *
       * Returns a negative number on error, if a char was invalid.
       *
       * This is implemented by noting that char2hex() returns -1 on error,
       * which means the result of ORing the char2hex() will also be negative.
       */

      function uniCharCode(a, b, c, d) {
        return (
          (char2hex(a) << 12) |
          (char2hex(b) << 8) |
          (char2hex(c) << 4) |
          char2hex(d)
        );
      }
      /**
       * Converts a hex character to its integer value.
       * '0' becomes 0, '9' becomes 9
       * 'A' becomes 10, 'F' becomes 15
       * 'a' becomes 10, 'f' becomes 15
       *
       * Returns -1 on error.
       */

      function char2hex(a) {
        return a >= 48 && a <= 57
          ? a - 48 // 0-9
          : a >= 65 && a <= 70
          ? a - 55 // A-F
          : a >= 97 && a <= 102
          ? a - 87 // a-f
          : -1;
      }
      /**
       * Reads an alphanumeric + underscore name from the source.
       *
       * [_A-Za-z][_0-9A-Za-z]*
       */

      function readName(source, start, line, col, prev) {
        var body = source.body;
        var bodyLength = body.length;
        var position = start + 1;
        var code = 0;

        while (
          position !== bodyLength &&
          !isNaN((code = body.charCodeAt(position))) &&
          (code === 95 || // _
          (code >= 48 && code <= 57) || // 0-9
          (code >= 65 && code <= 90) || // A-Z
            (code >= 97 && code <= 122)) // a-z
        ) {
          ++position;
        }

        return new _ast.Token(
          _tokenKind.TokenKind.NAME,
          start,
          position,
          line,
          col,
          prev,
          body.slice(start, position)
        );
      } // _ A-Z a-z

      function isNameStart(code) {
        return (
          code === 95 ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)
        );
      }

      /***/
    },

    /***/ wqAJ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = defineInspect;

      var _invariant = _interopRequireDefault(__webpack_require__("Db/j"));

      var _nodejsCustomInspectSymbol = _interopRequireDefault(
        __webpack_require__("6fdH")
      );

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
       */
      function defineInspect(classObject) {
        var fn = classObject.prototype.toJSON;
        typeof fn === "function" || (0, _invariant.default)(0);
        classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

        if (_nodejsCustomInspectSymbol.default) {
          classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;
        }
      }

      /***/
    },

    /***/ wtV1: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = devAssert;

      function devAssert(condition, message) {
        var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

        if (!booleanCondition) {
          throw new Error(message);
        }
      }

      /***/
    },

    /***/ "x+L2": /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;

      var _GraphQLError = __webpack_require__("MafX");

      var _printer = __webpack_require__("gCJq");

      var _definition = __webpack_require__("mAVk");

      var _typeFromAST = __webpack_require__("3w1o");

      /**
       * Variables are input types
       *
       * A GraphQL operation is only valid if all the variables it defines are of
       * input types (scalar, enum, or input object).
       */
      function VariablesAreInputTypesRule(context) {
        return {
          VariableDefinition: function VariableDefinition(node) {
            var type = (0, _typeFromAST.typeFromAST)(
              context.getSchema(),
              node.type
            );

            if (type && !(0, _definition.isInputType)(type)) {
              var variableName = node.variable.name.value;
              var typeName = (0, _printer.print)(node.type);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'Variable "$'
                    .concat(variableName, '" cannot be non-input type "')
                    .concat(typeName, '".'),
                  node.type
                )
              );
            }
          }
        };
      }

      /***/
    },

    /***/ xaK5: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Kind = void 0;

      /**
       * The set of allowed kind values for AST nodes.
       */
      var Kind = Object.freeze({
        // Name
        NAME: "Name",
        // Document
        DOCUMENT: "Document",
        OPERATION_DEFINITION: "OperationDefinition",
        VARIABLE_DEFINITION: "VariableDefinition",
        SELECTION_SET: "SelectionSet",
        FIELD: "Field",
        ARGUMENT: "Argument",
        // Fragments
        FRAGMENT_SPREAD: "FragmentSpread",
        INLINE_FRAGMENT: "InlineFragment",
        FRAGMENT_DEFINITION: "FragmentDefinition",
        // Values
        VARIABLE: "Variable",
        INT: "IntValue",
        FLOAT: "FloatValue",
        STRING: "StringValue",
        BOOLEAN: "BooleanValue",
        NULL: "NullValue",
        ENUM: "EnumValue",
        LIST: "ListValue",
        OBJECT: "ObjectValue",
        OBJECT_FIELD: "ObjectField",
        // Directives
        DIRECTIVE: "Directive",
        // Types
        NAMED_TYPE: "NamedType",
        LIST_TYPE: "ListType",
        NON_NULL_TYPE: "NonNullType",
        // Type System Definitions
        SCHEMA_DEFINITION: "SchemaDefinition",
        OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
        // Type Definitions
        SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
        OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
        FIELD_DEFINITION: "FieldDefinition",
        INPUT_VALUE_DEFINITION: "InputValueDefinition",
        INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
        UNION_TYPE_DEFINITION: "UnionTypeDefinition",
        ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
        ENUM_VALUE_DEFINITION: "EnumValueDefinition",
        INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
        // Directive Definitions
        DIRECTIVE_DEFINITION: "DirectiveDefinition",
        // Type System Extensions
        SCHEMA_EXTENSION: "SchemaExtension",
        // Type Extensions
        SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
        OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
        INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
        UNION_TYPE_EXTENSION: "UnionTypeExtension",
        ENUM_TYPE_EXTENSION: "EnumTypeExtension",
        INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
      });
      /**
       * The enum type representing the possible kind values of AST nodes.
       */

      exports.Kind = Kind;

      /***/
    },

    /***/ y4yJ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.printLocation = printLocation;
      exports.printSourceLocation = printSourceLocation;

      var _location = __webpack_require__("PO9o");

      /**
       * Render a helpful description of the location in the GraphQL Source document.
       */
      function printLocation(location) {
        return printSourceLocation(
          location.source,
          (0, _location.getLocation)(location.source, location.start)
        );
      }
      /**
       * Render a helpful description of the location in the GraphQL Source document.
       */

      function printSourceLocation(source, sourceLocation) {
        var firstLineColumnOffset = source.locationOffset.column - 1;
        var body = whitespace(firstLineColumnOffset) + source.body;
        var lineIndex = sourceLocation.line - 1;
        var lineOffset = source.locationOffset.line - 1;
        var lineNum = sourceLocation.line + lineOffset;
        var columnOffset =
          sourceLocation.line === 1 ? firstLineColumnOffset : 0;
        var columnNum = sourceLocation.column + columnOffset;
        var locationStr = ""
          .concat(source.name, ":")
          .concat(lineNum, ":")
          .concat(columnNum, "\n");
        var lines = body.split(/\r\n|[\n\r]/g);
        var locationLine = lines[lineIndex]; // Special case for minified documents

        if (locationLine.length > 120) {
          var subLineIndex = Math.floor(columnNum / 80);
          var subLineColumnNum = columnNum % 80;
          var subLines = [];

          for (var i = 0; i < locationLine.length; i += 80) {
            subLines.push(locationLine.slice(i, i + 80));
          }

          return (
            locationStr +
            printPrefixedLines(
              [["".concat(lineNum), subLines[0]]].concat(
                subLines.slice(1, subLineIndex + 1).map(function(subLine) {
                  return ["", subLine];
                }),
                [
                  [" ", whitespace(subLineColumnNum - 1) + "^"],
                  ["", subLines[subLineIndex + 1]]
                ]
              )
            )
          );
        }

        return (
          locationStr +
          printPrefixedLines([
            // Lines specified like this: ["prefix", "string"],
            ["".concat(lineNum - 1), lines[lineIndex - 1]],
            ["".concat(lineNum), locationLine],
            ["", whitespace(columnNum - 1) + "^"],
            ["".concat(lineNum + 1), lines[lineIndex + 1]]
          ])
        );
      }

      function printPrefixedLines(lines) {
        var existingLines = lines.filter(function(_ref) {
          var _ = _ref[0],
            line = _ref[1];
          return line !== undefined;
        });
        var padLen = Math.max.apply(
          Math,
          existingLines.map(function(_ref2) {
            var prefix = _ref2[0];
            return prefix.length;
          })
        );
        return existingLines
          .map(function(_ref3) {
            var prefix = _ref3[0],
              line = _ref3[1];
            return leftPad(padLen, prefix) + (line ? " | " + line : " |");
          })
          .join("\n");
      }

      function whitespace(len) {
        return Array(len + 1).join(" ");
      }

      function leftPad(len, str) {
        return whitespace(len - str.length) + str;
      }

      /***/
    },

    /***/ y8DL: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = mapValue;

      var _objectEntries3 = _interopRequireDefault(__webpack_require__("NKuU"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /**
       * Creates an object map with the same keys as `map` and values generated by
       * running each value of `map` thru `fn`.
       */
      function mapValue(map, fn) {
        var result = Object.create(null);

        for (
          var _i2 = 0, _objectEntries2 = (0, _objectEntries3.default)(map);
          _i2 < _objectEntries2.length;
          _i2++
        ) {
          var _ref2 = _objectEntries2[_i2];
          var _key = _ref2[0];
          var _value = _ref2[1];
          result[_key] = fn(_value, _key);
        }

        return result;
      }

      /***/
    },

    /***/ yCJC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var define = __webpack_require__("82c2");
      var getPolyfill = __webpack_require__("l1+S");

      module.exports = function shimFlatMap() {
        var polyfill = getPolyfill();
        define(Array.prototype, { flatMap: polyfill }, {
          flatMap: function() {
            return Array.prototype.flatMap !== polyfill;
          }
        });
        return polyfill;
      };

      /***/
    },

    /***/ yESJ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;

      var _GraphQLError = __webpack_require__("MafX");

      /**
       * Unique argument names
       *
       * A GraphQL field or directive is only valid if all supplied arguments are
       * uniquely named.
       */
      function UniqueArgumentNamesRule(context) {
        var knownArgNames = Object.create(null);
        return {
          Field: function Field() {
            knownArgNames = Object.create(null);
          },
          Directive: function Directive() {
            knownArgNames = Object.create(null);
          },
          Argument: function Argument(node) {
            var argName = node.name.value;

            if (knownArgNames[argName]) {
              context.reportError(
                new _GraphQLError.GraphQLError(
                  'There can be only one argument named "'.concat(
                    argName,
                    '".'
                  ),
                  [knownArgNames[argName], node.name]
                )
              );
            } else {
              knownArgNames[argName] = node.name;
            }

            return false;
          }
        };
      }

      /***/
    },

    /***/ yQbh: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dedentBlockStringValue = dedentBlockStringValue;
      exports.getBlockStringIndentation = getBlockStringIndentation;
      exports.printBlockString = printBlockString;

      /**
       * Produces the value of a block string from its parsed raw value, similar to
       * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
       *
       * This implements the GraphQL spec's BlockStringValue() static algorithm.
       *
       * @internal
       */
      function dedentBlockStringValue(rawString) {
        // Expand a block string's raw value into independent lines.
        var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

        var commonIndent = getBlockStringIndentation(rawString);

        if (commonIndent !== 0) {
          for (var i = 1; i < lines.length; i++) {
            lines[i] = lines[i].slice(commonIndent);
          }
        } // Remove leading and trailing blank lines.

        var startLine = 0;

        while (startLine < lines.length && isBlank(lines[startLine])) {
          ++startLine;
        }

        var endLine = lines.length;

        while (endLine > startLine && isBlank(lines[endLine - 1])) {
          --endLine;
        } // Return a string of the lines joined with U+000A.

        return lines.slice(startLine, endLine).join("\n");
      }

      function isBlank(str) {
        for (var i = 0; i < str.length; ++i) {
          if (str[i] !== " " && str[i] !== "\t") {
            return false;
          }
        }

        return true;
      }
      /**
       * @internal
       */

      function getBlockStringIndentation(value) {
        var _commonIndent;

        var isFirstLine = true;
        var isEmptyLine = true;
        var indent = 0;
        var commonIndent = null;

        for (var i = 0; i < value.length; ++i) {
          switch (value.charCodeAt(i)) {
            case 13:
              //  \r
              if (value.charCodeAt(i + 1) === 10) {
                ++i; // skip \r\n as one symbol
              }

            // falls through

            case 10:
              //  \n
              isFirstLine = false;
              isEmptyLine = true;
              indent = 0;
              break;

            case 9: //   \t

            case 32:
              //  <space>
              ++indent;
              break;

            default:
              if (
                isEmptyLine &&
                !isFirstLine &&
                (commonIndent === null || indent < commonIndent)
              ) {
                commonIndent = indent;
              }

              isEmptyLine = false;
          }
        }

        return (_commonIndent = commonIndent) !== null &&
          _commonIndent !== void 0
          ? _commonIndent
          : 0;
      }
      /**
       * Print a block string in the indented block form by adding a leading and
       * trailing blank line. However, if a block string starts with whitespace and is
       * a single-line, adding a leading blank line would strip that whitespace.
       *
       * @internal
       */

      function printBlockString(value) {
        var indentation =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : "";
        var preferMultipleLines =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : false;
        var isSingleLine = value.indexOf("\n") === -1;
        var hasLeadingSpace = value[0] === " " || value[0] === "\t";
        var hasTrailingQuote = value[value.length - 1] === '"';
        var hasTrailingSlash = value[value.length - 1] === "\\";
        var printAsMultipleLines =
          !isSingleLine ||
          hasTrailingQuote ||
          hasTrailingSlash ||
          preferMultipleLines;
        var result = ""; // Format a multi-line block quote to account for leading space.

        if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
          result += "\n" + indentation;
        }

        result += indentation
          ? value.replace(/\n/g, "\n" + indentation)
          : value;

        if (printAsMultipleLines) {
          result += "\n";
        }

        return '"""' + result.replace(/"""/g, '\\"""') + '"""';
      }

      /***/
    },

    /***/ yVdY: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $Math = GetIntrinsic("%Math%");
      var $Number = GetIntrinsic("%Number%");

      module.exports = $Number.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;

      /***/
    },

    /***/ yXPU: /***/ function(module, exports) {
      function asyncGeneratorStep(
        gen,
        resolve,
        reject,
        _next,
        _throw,
        key,
        arg
      ) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }

      function _asyncToGenerator(fn) {
        return function() {
          var self = this,
            args = arguments;
          return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);

            function _next(value) {
              asyncGeneratorStep(
                gen,
                resolve,
                reject,
                _next,
                _throw,
                "next",
                value
              );
            }

            function _throw(err) {
              asyncGeneratorStep(
                gen,
                resolve,
                reject,
                _next,
                _throw,
                "throw",
                err
              );
            }

            _next(undefined);
          });
        };
      }

      module.exports = _asyncToGenerator;

      /***/
    },

    /***/ yfaO: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var has = __webpack_require__("oNNP");

      var assertRecord = __webpack_require__("DELC");

      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-isaccessordescriptor

      module.exports = function IsAccessorDescriptor(Desc) {
        if (typeof Desc === "undefined") {
          return false;
        }

        assertRecord(Type, "Property Descriptor", "Desc", Desc);

        if (!has(Desc, "[[Get]]") && !has(Desc, "[[Set]]")) {
          return false;
        }

        return true;
      };

      /***/
    },

    /***/ zFIs: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      /* eslint-disable no-redeclare */
      // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
      var isFinitePolyfill =
        Number.isFinite ||
        function(value) {
          return typeof value === "number" && isFinite(value);
        };

      var _default = isFinitePolyfill;
      exports.default = _default;

      /***/
    },

    /***/ zOLO: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var ES5Type = __webpack_require__("8JD9");

      // https://262.ecma-international.org/11.0/#sec-ecmascript-data-types-and-values

      module.exports = function Type(x) {
        if (typeof x === "symbol") {
          return "Symbol";
        }
        if (typeof x === "bigint") {
          return "BigInt";
        }
        return ES5Type(x);
      };

      /***/
    },

    /***/ zOht: /***/ function(module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_ARRAY__,
        __WEBPACK_AMD_DEFINE_RESULT__; /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
      /* global global, define, System, Reflect, Promise */
      var __extends;
      var __assign;
      var __rest;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __spreadArray;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __createBinding;
      (function(factory) {
        var root =
          typeof global === "object"
            ? global
            : typeof self === "object"
            ? self
            : typeof this === "object"
            ? this
            : {};
        if (true) {
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = [exports]),
          (__WEBPACK_AMD_DEFINE_RESULT__ = function(exports) {
            factory(createExporter(root, createExporter(exports)));
          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }
        function createExporter(exports, previous) {
          if (exports !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports, "__esModule", { value: true });
            } else {
              exports.__esModule = true;
            }
          }
          return function(id, v) {
            return (exports[id] = previous ? previous(id, v) : v);
          };
        }
      })(function(exporter) {
        var extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function(d, b) {
              d.__proto__ = b;
            }) ||
          function(d, b) {
            for (var p in b)
              if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

        __extends = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError(
              "Class extends value " +
                String(b) +
                " is not a constructor or null"
            );
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype =
            b === null
              ? Object.create(b)
              : ((__.prototype = b.prototype), new __());
        };

        __assign =
          Object.assign ||
          function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
          };

        __rest = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (
              var i = 0, p = Object.getOwnPropertySymbols(s);
              i < p.length;
              i++
            ) {
              if (
                e.indexOf(p[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(s, p[i])
              )
                t[p[i]] = s[p[i]];
            }
          return t;
        };

        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length,
            r =
              c < 3
                ? target
                : desc === null
                ? (desc = Object.getOwnPropertyDescriptor(target, key))
                : desc,
            d;
          if (
            typeof Reflect === "object" &&
            typeof Reflect.decorate === "function"
          )
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if ((d = decorators[i]))
                r =
                  (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                  r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };

        __metadata = function(metadataKey, metadataValue) {
          if (
            typeof Reflect === "object" &&
            typeof Reflect.metadata === "function"
          )
            return Reflect.metadata(metadataKey, metadataValue);
        };

        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function(resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next()
            );
          });
        };

        __generator = function(thisArg, body) {
          var _ = {
              label: 0,
              sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === "function" &&
              (g[Symbol.iterator] = function() {
                return this;
              }),
            g
          );
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y["return"]
                        : op[0]
                        ? y["throw"] || ((t = y["return"]) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };

        __exportStar = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        };

        __createBinding = Object.create
          ? function(o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                  return m[k];
                }
              });
            }
          : function(o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
            };

        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator,
            m = s && o[s],
            i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(
            s ? "Object is not iterable." : "Symbol.iterator is not defined."
          );
        };

        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error: error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };

        /** @deprecated */
        __spread = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        };

        /** @deprecated */
        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };

        __spreadArray = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || from);
        };

        __await = function(v) {
          return this instanceof __await
            ? ((this.v = v), this)
            : new __await(v);
        };

        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []),
            i,
            q = [];
          return (
            (i = {}),
            verb("next"),
            verb("throw"),
            verb("return"),
            (i[Symbol.asyncIterator] = function() {
              return this;
            }),
            i
          );
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await
              ? Promise.resolve(r.value.v).then(fulfill, reject)
              : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
          }
        };

        __asyncDelegator = function(o) {
          var i, p;
          return (
            (i = {}),
            verb("next"),
            verb("throw", function(e) {
              throw e;
            }),
            verb("return"),
            (i[Symbol.iterator] = function() {
              return this;
            }),
            i
          );
          function verb(n, f) {
            i[n] = o[n]
              ? function(v) {
                  return (p = !p)
                    ? { value: __await(o[n](v)), done: n === "return" }
                    : f
                    ? f(v)
                    : v;
                }
              : f;
          }
        };

        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator],
            i;
          return m
            ? m.call(o)
            : ((o =
                typeof __values === "function"
                  ? __values(o)
                  : o[Symbol.iterator]()),
              (i = {}),
              verb("next"),
              verb("throw"),
              verb("return"),
              (i[Symbol.asyncIterator] = function() {
                return this;
              }),
              i);
          function verb(n) {
            i[n] =
              o[n] &&
              function(v) {
                return new Promise(function(resolve, reject) {
                  (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                });
              };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v) {
              resolve({ value: v, done: d });
            }, reject);
          }
        };

        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };

        var __setModuleDefault = Object.create
          ? function(o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v
              });
            }
          : function(o, v) {
              o["default"] = v;
            };

        __importStar = function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null)
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          __setModuleDefault(result, mod);
          return result;
        };

        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };

        __classPrivateFieldGet = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError(
              "Private accessor was defined without a getter"
            );
          if (
            typeof state === "function"
              ? receiver !== state || !f
              : !state.has(receiver)
          )
            throw new TypeError(
              "Cannot read private member from an object whose class did not declare it"
            );
          return kind === "m"
            ? f
            : kind === "a"
            ? f.call(receiver)
            : f
            ? f.value
            : state.get(receiver);
        };

        __classPrivateFieldSet = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError(
              "Private accessor was defined without a setter"
            );
          if (
            typeof state === "function"
              ? receiver !== state || !f
              : !state.has(receiver)
          )
            throw new TypeError(
              "Cannot write private member to an object whose class did not declare it"
            );
          return (
            kind === "a"
              ? f.call(receiver, value)
              : f
              ? (f.value = value)
              : state.set(receiver, value),
            value
          );
        };

        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__spreadArray", __spreadArray);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      });

      /***/
    },

    /***/ zeTQ: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      // Gets all non-builtin properties up the prototype chain
      const getAllProperties = object => {
        const properties = new Set();

        do {
          for (const key of Reflect.ownKeys(object)) {
            properties.add([object, key]);
          }
        } while (
          (object = Reflect.getPrototypeOf(object)) &&
          object !== Object.prototype
        );

        return properties;
      };

      module.exports = (self, { include, exclude } = {}) => {
        const filter = key => {
          const match = pattern =>
            typeof pattern === "string" ? key === pattern : pattern.test(key);

          if (include) {
            return include.some(match);
          }

          if (exclude) {
            return !exclude.some(match);
          }

          return true;
        };

        for (const [object, key] of getAllProperties(
          self.constructor.prototype
        )) {
          if (key === "constructor" || !filter(key)) {
            continue;
          }

          const descriptor = Reflect.getOwnPropertyDescriptor(object, key);
          if (descriptor && typeof descriptor.value === "function") {
            self[key] = self[key].bind(self);
          }
        }

        return self;
      };

      /***/
    },

    /***/ zkip: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      var GetIntrinsic = __webpack_require__("AM7I");

      var $TypeError = GetIntrinsic("%TypeError%");

      var isPropertyDescriptor = __webpack_require__("uam5");
      var DefineOwnProperty = __webpack_require__("KPrL");

      var FromPropertyDescriptor = __webpack_require__("hYbJ");
      var IsAccessorDescriptor = __webpack_require__("yfaO");
      var IsDataDescriptor = __webpack_require__("ayMG");
      var IsPropertyKey = __webpack_require__("ml7t");
      var SameValue = __webpack_require__("tS0h");
      var ToPropertyDescriptor = __webpack_require__("FiDd");
      var Type = __webpack_require__("zOLO");

      // https://ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow

      module.exports = function DefinePropertyOrThrow(O, P, desc) {
        if (Type(O) !== "Object") {
          throw new $TypeError("Assertion failed: Type(O) is not Object");
        }

        if (!IsPropertyKey(P)) {
          throw new $TypeError(
            "Assertion failed: IsPropertyKey(P) is not true"
          );
        }

        var Desc = isPropertyDescriptor(
          {
            Type: Type,
            IsDataDescriptor: IsDataDescriptor,
            IsAccessorDescriptor: IsAccessorDescriptor
          },
          desc
        )
          ? desc
          : ToPropertyDescriptor(desc);
        if (
          !isPropertyDescriptor(
            {
              Type: Type,
              IsDataDescriptor: IsDataDescriptor,
              IsAccessorDescriptor: IsAccessorDescriptor
            },
            Desc
          )
        ) {
          throw new $TypeError(
            "Assertion failed: Desc is not a valid Property Descriptor"
          );
        }

        return DefineOwnProperty(
          IsDataDescriptor,
          SameValue,
          FromPropertyDescriptor,
          O,
          P,
          Desc
        );
      };

      /***/
    },

    /***/ zwBC: /***/ function(module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = identityFunc;

      /**
       * Returns the first argument it receives.
       */
      function identityFunc(x) {
        return x;
      }

      /***/
    }

    /******/
  }
);
